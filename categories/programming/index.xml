<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming | Tidyverse</title><link>https://www.tidyverse.org/categories/programming/</link><atom:link href="https://www.tidyverse.org/categories/programming/index.xml" rel="self" type="application/rss+xml"/><description>programming</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 11 Jun 2025 00:00:00 +0000</lastBuildDate><item><title>Air 0.7.0</title><link>https://www.tidyverse.org/blog/2025/06/air-0-7-0/</link><pubDate>Wed, 11 Jun 2025 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2025/06/air-0-7-0/</guid><description>&lt;p>We&amp;rsquo;re very excited to announce
&lt;a href="https://posit-dev.github.io/air/" target="_blank" rel="noopener">Air 0.7.0&lt;/a>, a new release of our extremely fast R formatter. This post will act as a roundup of releases 0.5.0 through 0.7.0, including: even better Positron support, a new feature called autobracing, and an official GitHub Action! If you haven&amp;rsquo;t heard of Air, read our
&lt;a href="https://www.tidyverse.org/blog/2025/02/air/" target="_blank" rel="noopener">announcement blog post&lt;/a> first to get up to speed. To install Air, read our
&lt;a href="https://posit-dev.github.io/air/editors.html" target="_blank" rel="noopener">editors guide&lt;/a>.&lt;/p>
&lt;h2 id="positron">Positron
&lt;a href="#positron">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The
&lt;a href="https://open-vsx.org/extension/posit/air-vscode" target="_blank" rel="noopener">Air extension&lt;/a> is now included in
&lt;a href="https://positron.posit.co/" target="_blank" rel="noopener">Positron&lt;/a> by default, and will automatically keep itself up to date. We&amp;rsquo;ve been working hard to ensure that Air leaves a positive first impression, and we think that having Positron come batteries included with Air really helps with that! Positron now also ships with
&lt;a href="https://docs.astral.sh/ruff/" target="_blank" rel="noopener">Ruff&lt;/a>, the extremely fast Python formatter and linter, ensuring that you have a great editing experience out of the box, no matter which language you prefer.&lt;/p>
&lt;p>We&amp;rsquo;ve also streamlined the process of adding Air to a new or existing project. With dev usethis, you can now run
&lt;a href="https://usethis.r-lib.org/dev/reference/use_air.html" target="_blank" rel="noopener">&lt;code>usethis::use_air()&lt;/code>&lt;/a> to automatically configure recommended Air settings. In particular, this will:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Create an
&lt;a href="https://posit-dev.github.io/air/configuration.html#configuration-recommendations" target="_blank" rel="noopener">empty &lt;code>air.toml&lt;/code>&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create &lt;code>.vscode/settings.json&lt;/code> filled with the following settings. This enables &lt;code>Format on Save&lt;/code> within your workspace.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;[r]&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;editor.formatOnSave&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;editor.defaultFormatter&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Posit.air-vscode&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Create &lt;code>.vscode/extensions.json&lt;/code> filled with the following settings. This automatically prompts contributors that don&amp;rsquo;t have the Air extension to install it when they open your workspace, ensuring that everyone is using the same formatter!&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;recommendations&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;Posit.air-vscode&amp;#34;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Update your &lt;code>.Rbuildignore&lt;/code> to exclude Air related configuration, if you&amp;rsquo;re working on an R package.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Once you&amp;rsquo;ve used usethis to configure Air, you can now immediately reformat your entire workspace by running &lt;code>Air: Format Workspace Folder&lt;/code> from the Command Palette (accessible via &lt;code>Cmd + Shift + P&lt;/code> on Mac/Linux, or &lt;code>Ctrl + Shift + P&lt;/code> on Windows). I&amp;rsquo;ve found that this is invaluable for adopting Air in an existing project!&lt;/p>
&lt;p>To summarize, we&amp;rsquo;ve reduced our advice on adding Air to an existing project down to:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Open Positron&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run
&lt;a href="https://usethis.r-lib.org/reference/use_air.html" target="_blank" rel="noopener">&lt;code>usethis::use_air()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run &lt;code>Air: Format Workspace Folder&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Commit, push, and then enjoy using &lt;code>Format on Save&lt;/code> forevermore 😄&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="more-editors">More editors!
&lt;a href="#more-editors">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Positron isn&amp;rsquo;t the only editor that&amp;rsquo;s received some love! We now have official documentation for using Air in the following editors:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>
&lt;a href="https://posit-dev.github.io/air/editor-zed.html" target="_blank" rel="noopener">Zed&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://posit-dev.github.io/air/editor-neovim.html" target="_blank" rel="noopener">Neovim&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://posit-dev.github.io/air/editor-helix.html" target="_blank" rel="noopener">Helix&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>We&amp;rsquo;re very proud of the fact that Air can be used within any editor, not just RStudio and Positron! This documentation was a community effort - thanks in particular to
&lt;a href="https://github.com/taplasz" target="_blank" rel="noopener">@taplasz&lt;/a>,
&lt;a href="https://github.com/PMassicotte" target="_blank" rel="noopener">@PMassicotte&lt;/a>,
&lt;a href="https://github.com/m-muecke" target="_blank" rel="noopener">@m-muecke&lt;/a>,
&lt;a href="https://github.com/TymekDev" target="_blank" rel="noopener">@TymekDev&lt;/a>, and
&lt;a href="https://github.com/wurli" target="_blank" rel="noopener">@wurli&lt;/a>.&lt;/p>
&lt;h2 id="autobracing">Autobracing
&lt;a href="#autobracing">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Autobracing is the process of adding braces (i.e. 
&lt;a href="https://rdrr.io/r/base/Paren.html" target="_blank" rel="noopener">&lt;code>{ }&lt;/code>&lt;/a>) to if statements, loops, and function definitions to create more consistent, readable, and portable code. It looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">for &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="n">in&lt;/span> &lt;span class="nf">seq_along&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="n">x[[i]]&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">x[[i]]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="m">1L&lt;/span>
&lt;span class="c1"># Becomes:&lt;/span>
&lt;span class="nf">for &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="n">in&lt;/span> &lt;span class="nf">seq_along&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">x[[i]]&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">x[[i]]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="m">1L&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">call_that_spans_lines&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">fixed_option&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Becomes:&lt;/span>
&lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">call_that_spans_lines&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">fixed_option&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s particularly important to autobrace multiline if statements for &lt;em>portability&lt;/em>, which we roughly define as the ability to copy and paste that if statement into any context and have it still parse correctly. Consider the following if statement:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">do_something&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">this&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">this&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">do_this&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">else&lt;/span>
&lt;span class="nf">do_that&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As written, this is correct R code, but if you were to pull out the if statement and place it in a file at &amp;ldquo;top level&amp;rdquo; and try to run it, you&amp;rsquo;d see a parse error:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">this&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">do_this&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">else&lt;/span>
&lt;span class="nf">do_that&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">#&amp;gt; Error: unexpected &amp;#39;else&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In practice, this typically bites you when you&amp;rsquo;re debugging and you send a chunk of lines to the console:&lt;/p>
&lt;video controls autoplay loop muted width="100%" src="video/portable-if-statement.mov" style="border: 2px solid #CCC;">
&lt;/video>
&lt;p>Air autobraces this if statement to the following, which has no issues with portability:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">do_something&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">this&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">this&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">do_this&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">do_that&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="give-side-effects-some-air">Give side effects some Air
&lt;a href="#give-side-effects-some-air">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>We believe code that create &lt;em>side effects&lt;/em> which modify state or affect control flow are important enough to live on their own line. For example, the following
&lt;a href="https://rdrr.io/r/base/stop.html" target="_blank" rel="noopener">&lt;code>stop()&lt;/code>&lt;/a> call is an example of a side effect, so it moves to its own line and is autobraced:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">anyNA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="nf">stop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;`x` can&amp;#39;t contain missing values.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Becomes:&lt;/span>
&lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">anyNA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">stop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;`x` can&amp;#39;t contain missing values.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You might be thinking, &amp;ldquo;But I like my single line if statements!&amp;rdquo; We do too! Air still allows single line if statements if they look to be used for their &lt;em>value&lt;/em> rather than for their &lt;em>side effect&lt;/em>. These single line if statements are still allowed:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">this&lt;/span> &lt;span class="n">else&lt;/span> &lt;span class="n">that&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">%||%&lt;/span> &lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">this&lt;/span> &lt;span class="n">else&lt;/span> &lt;span class="n">that&lt;/span>
&lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">this&lt;/span> &lt;span class="n">else&lt;/span> &lt;span class="n">that&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Similarly, single line function definitions are also still allowed if they don&amp;rsquo;t already have braces and don&amp;rsquo;t exceed the line length:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">add_one&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="n">bools&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">map_lgl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">is.logical&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">1L&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nf">is.na&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For the full set of rules, check out our
&lt;a href="https://posit-dev.github.io/air/formatter.html#autobracing" target="_blank" rel="noopener">documentation on autobracing&lt;/a>.&lt;/p>
&lt;h2 id="empty-braces">Empty braces
&lt;a href="#empty-braces">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>You may have noticed the following forced expansion of empty
&lt;a href="https://rdrr.io/r/base/Paren.html" target="_blank" rel="noopener">&lt;code>{}&lt;/code>&lt;/a> in previous versions of Air:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">dummy&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="c1"># Previously became:&lt;/span>
&lt;span class="n">dummy&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nf">tryCatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{})&lt;/span>
&lt;span class="c1"># Previously became:&lt;/span>
&lt;span class="nf">tryCatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="nf">my_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{},&lt;/span> &lt;span class="n">option&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Previously became:&lt;/span>
&lt;span class="nf">my_fn&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">expr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="n">option&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As of 0.7.0, empty braces
&lt;a href="https://rdrr.io/r/base/Paren.html" target="_blank" rel="noopener">&lt;code>{}&lt;/code>&lt;/a> are now never expanded, which retains the original form of each of these examples.&lt;/p>
&lt;h2 id="skip-configuration">&lt;code>skip&lt;/code> configuration
&lt;a href="#skip-configuration">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>In
&lt;a href="https://www.tidyverse.org/blog/2025/02/air/#how-can-i-disable-formatting" target="_blank" rel="noopener">our release post&lt;/a>, we detailed how to disable formatting using a &lt;code># fmt: skip&lt;/code> comment for a single expression, or a &lt;code># fmt: skip file&lt;/code> comment for an entire file. Skip comments are useful for disabling formatting for one-off function calls, but sometimes you may find yourself repeatedly using functions from a domain specific language (DSL) that doesn&amp;rsquo;t follow conventional formatting rules. For example, the igraph package contains a DSL for constructing a graph from a literal representation:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">igraph&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">graph_from_literal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span> &lt;span class="o">+-+&lt;/span> &lt;span class="n">B&lt;/span> &lt;span class="o">+---+&lt;/span> &lt;span class="n">C&lt;/span> &lt;span class="o">++&lt;/span> &lt;span class="n">D&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, Air would format this as:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">igraph&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">graph_from_literal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">-+&lt;/span>&lt;span class="n">B&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">---+&lt;/span>&lt;span class="n">C&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="n">D&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you use &lt;code>graph_from_literal()&lt;/code> often, it would be annoying to add &lt;code># fmt: skip&lt;/code> comments at every call site. Instead, &lt;code>air.toml&lt;/code> now supports a &lt;code>skip&lt;/code> field that allows you to specify function names that you never want formatting for. Specifying this would retain the original formatting of the &lt;code>graph_from_literal()&lt;/code> call, even without a &lt;code># fmt: skip&lt;/code> comment:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="nx">skip&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;graph_from_literal&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the short term, you may also want to use this for
&lt;a href="https://tibble.tidyverse.org/reference/tribble.html" target="_blank" rel="noopener">&lt;code>tibble::tribble()&lt;/code>&lt;/a> calls, i.e. &lt;code>skip = [&amp;quot;tribble&amp;quot;]&lt;/code>. In the long term, we&amp;rsquo;re hoping to provide more sophisticated tooling for formatting using a
&lt;a href="https://github.com/posit-dev/air/issues/113" target="_blank" rel="noopener">specified alignment&lt;/a>.&lt;/p>
&lt;h2 id="github-action">GitHub Action
&lt;a href="#github-action">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Air now has an official GitHub Action,
&lt;a href="https://github.com/posit-dev/setup-air" target="_blank" rel="noopener">&lt;code>setup-air&lt;/code>&lt;/a>. This action really only has one job - to get Air installed on your GitHub runner and put on the &lt;code>PATH&lt;/code>. The basic usage is:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">- &lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Install&lt;span class="w"> &lt;/span>Air&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>posit-dev/setup-air@v1&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you need to pin a version:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">- &lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Install&lt;span class="w"> &lt;/span>Air&lt;span class="w"> &lt;/span>&lt;span class="m">0.4.4&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>posit-dev/setup-air@v1&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.4.4&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From there, you can call Air&amp;rsquo;s CLI in downstream steps. A minimal workflow that errors if any files require formatting might look like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">- &lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Install&lt;span class="w"> &lt;/span>Air&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>posit-dev/setup-air@v1&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Check&lt;span class="w"> &lt;/span>formatting&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>air&lt;span class="w"> &lt;/span>format&lt;span class="w"> &lt;/span>.&lt;span class="w"> &lt;/span>--check&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Rather than creating the workflow file yourself, we instead recommend using usethis to pull in our
&lt;a href="https://github.com/posit-dev/setup-air/blob/main/examples/format-suggest.yaml" target="_blank" rel="noopener">example workflow&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">usethis&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">use_github_action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;https://github.com/posit-dev/setup-air/blob/main/examples/format-suggest.yaml&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a special workflow that runs on pull requests. It calls &lt;code>air format&lt;/code> and then uses
&lt;a href="https://github.com/reviewdog/action-suggester" target="_blank" rel="noopener">&lt;code>reviewdog/action-suggester&lt;/code>&lt;/a> to push any formatting diffs as GitHub Suggestion comments on your pull request. It looks like this:&lt;/p>
&lt;p>&lt;img src="figs/format-suggest-example.png" alt="">&lt;/p>
&lt;p>You can accept all suggestions in a single batch, which will then rerun the format check, along with any other GitHub workflows (like an R package check), so you can feel confident that accepting the changes hasn&amp;rsquo;t broken anything.&lt;/p>
&lt;p>We like this workflow because it provides an easy way for external contributors who aren&amp;rsquo;t using Air to still abide by your formatting rules. The external contributor can even accept the suggestions themselves, so by the time you look at their pull request it&amp;rsquo;s already good to go from a formatting perspective ✅!&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A big thanks to the 49 users who helped make this release possible by finding bugs, discussing issues, contributing documentation, and writing code:
&lt;a href="https://github.com/adisarid" target="_blank" rel="noopener">@adisarid&lt;/a>,
&lt;a href="https://github.com/aronatkins" target="_blank" rel="noopener">@aronatkins&lt;/a>,
&lt;a href="https://github.com/ateucher" target="_blank" rel="noopener">@ateucher&lt;/a>,
&lt;a href="https://github.com/avhz" target="_blank" rel="noopener">@avhz&lt;/a>,
&lt;a href="https://github.com/aymennasri" target="_blank" rel="noopener">@aymennasri&lt;/a>,
&lt;a href="https://github.com/christophe-gouel" target="_blank" rel="noopener">@christophe-gouel&lt;/a>,
&lt;a href="https://github.com/dkStevensNZed" target="_blank" rel="noopener">@dkStevensNZed&lt;/a>,
&lt;a href="https://github.com/eitsupi" target="_blank" rel="noopener">@eitsupi&lt;/a>,
&lt;a href="https://github.com/ELICHOS" target="_blank" rel="noopener">@ELICHOS&lt;/a>,
&lt;a href="https://github.com/fh-mthomson" target="_blank" rel="noopener">@fh-mthomson&lt;/a>,
&lt;a href="https://github.com/fzenoni" target="_blank" rel="noopener">@fzenoni&lt;/a>,
&lt;a href="https://github.com/gaborcsardi" target="_blank" rel="noopener">@gaborcsardi&lt;/a>,
&lt;a href="https://github.com/grasshoppermouse" target="_blank" rel="noopener">@grasshoppermouse&lt;/a>,
&lt;a href="https://github.com/hadley" target="_blank" rel="noopener">@hadley&lt;/a>,
&lt;a href="https://github.com/idavydov" target="_blank" rel="noopener">@idavydov&lt;/a>,
&lt;a href="https://github.com/j-dobner" target="_blank" rel="noopener">@j-dobner&lt;/a>,
&lt;a href="https://github.com/jacpete" target="_blank" rel="noopener">@jacpete&lt;/a>,
&lt;a href="https://github.com/jeffkeller-einc" target="_blank" rel="noopener">@jeffkeller-einc&lt;/a>,
&lt;a href="https://github.com/jhk0530" target="_blank" rel="noopener">@jhk0530&lt;/a>,
&lt;a href="https://github.com/joakimlinde" target="_blank" rel="noopener">@joakimlinde&lt;/a>,
&lt;a href="https://github.com/JosephBARBIERDARNAL" target="_blank" rel="noopener">@JosephBARBIERDARNAL&lt;/a>,
&lt;a href="https://github.com/JosiahParry" target="_blank" rel="noopener">@JosiahParry&lt;/a>,
&lt;a href="https://github.com/kkanden" target="_blank" rel="noopener">@kkanden&lt;/a>,
&lt;a href="https://github.com/krlmlr" target="_blank" rel="noopener">@krlmlr&lt;/a>,
&lt;a href="https://github.com/Kupac" target="_blank" rel="noopener">@Kupac&lt;/a>,
&lt;a href="https://github.com/kv9898" target="_blank" rel="noopener">@kv9898&lt;/a>,
&lt;a href="https://github.com/lcolladotor" target="_blank" rel="noopener">@lcolladotor&lt;/a>,
&lt;a href="https://github.com/lulunac27a" target="_blank" rel="noopener">@lulunac27a&lt;/a>,
&lt;a href="https://github.com/m-muecke" target="_blank" rel="noopener">@m-muecke&lt;/a>,
&lt;a href="https://github.com/maelle" target="_blank" rel="noopener">@maelle&lt;/a>,
&lt;a href="https://github.com/matanhakim" target="_blank" rel="noopener">@matanhakim&lt;/a>,
&lt;a href="https://github.com/njtierney" target="_blank" rel="noopener">@njtierney&lt;/a>,
&lt;a href="https://github.com/novica" target="_blank" rel="noopener">@novica&lt;/a>,
&lt;a href="https://github.com/ntluong95" target="_blank" rel="noopener">@ntluong95&lt;/a>,
&lt;a href="https://github.com/philibe" target="_blank" rel="noopener">@philibe&lt;/a>,
&lt;a href="https://github.com/PMassicotte" target="_blank" rel="noopener">@PMassicotte&lt;/a>,
&lt;a href="https://github.com/RobinKohrs" target="_blank" rel="noopener">@RobinKohrs&lt;/a>,
&lt;a href="https://github.com/salim-b" target="_blank" rel="noopener">@salim-b&lt;/a>,
&lt;a href="https://github.com/sawelch-NIVA" target="_blank" rel="noopener">@sawelch-NIVA&lt;/a>,
&lt;a href="https://github.com/schochastics" target="_blank" rel="noopener">@schochastics&lt;/a>,
&lt;a href="https://github.com/Sebastian-T-T" target="_blank" rel="noopener">@Sebastian-T-T&lt;/a>,
&lt;a href="https://github.com/stevenpav-helm" target="_blank" rel="noopener">@stevenpav-helm&lt;/a>,
&lt;a href="https://github.com/t-kalinowski" target="_blank" rel="noopener">@t-kalinowski&lt;/a>,
&lt;a href="https://github.com/taplasz" target="_blank" rel="noopener">@taplasz&lt;/a>,
&lt;a href="https://github.com/tbadams45cdm" target="_blank" rel="noopener">@tbadams45cdm&lt;/a>,
&lt;a href="https://github.com/wurli" target="_blank" rel="noopener">@wurli&lt;/a>,
&lt;a href="https://github.com/xx02al" target="_blank" rel="noopener">@xx02al&lt;/a>,
&lt;a href="https://github.com/Yunuuuu" target="_blank" rel="noopener">@Yunuuuu&lt;/a>, and
&lt;a href="https://github.com/yutannihilation" target="_blank" rel="noopener">@yutannihilation&lt;/a>.&lt;/p></description></item><item><title>Air, an extremely fast R formatter</title><link>https://www.tidyverse.org/blog/2025/02/air/</link><pubDate>Fri, 21 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2025/02/air/</guid><description>&lt;p>We&amp;rsquo;re thrilled to announce
&lt;a href="https://posit-dev.github.io/air/" target="_blank" rel="noopener">Air&lt;/a>, an extremely fast R formatter. Formatters are used to automatically style code, but I find that it&amp;rsquo;s much easier to show what Air can do rather than tell, so we&amp;rsquo;ll start with a few examples. In the video below, we&amp;rsquo;re inside
&lt;a href="https://positron.posit.co/" target="_blank" rel="noopener">Positron&lt;/a> and we&amp;rsquo;re looking at some unformatted code. Saving the file (yep, that&amp;rsquo;s it!) invokes Air, which automatically and instantaneously formats the code.&lt;/p>
&lt;video controls autoplay loop muted width="100%" src="video/case-when.mov" style="border: 2px solid #CCC;">
&lt;/video>
&lt;p>Next, let&amp;rsquo;s go over to
&lt;a href="https://posit.co/products/open-source/rstudio/" target="_blank" rel="noopener">RStudio&lt;/a>. Here we&amp;rsquo;ve got a pipe chain that could use a little formatting. Like in Positron, just save the file:&lt;/p>
&lt;video controls autoplay loop muted width="100%" src="video/ggplot.mov" style="border: 2px solid #CCC;">
&lt;/video>
&lt;p>Lastly, we&amp;rsquo;ll jump back into Positron. Rather than formatting a single file on save, you might want to instead format an entire project (particularly when first adopting Air). To do so, just run &lt;code>air format .&lt;/code> in a terminal from the project root, and Air will recursively format any R files it finds along the way (smartly excluding known generated files, like &lt;code>cpp11.R&lt;/code>). Here we&amp;rsquo;ll run Air on dplyr for the first time ever, analyzing and reformatting over 150 files instantly:&lt;/p>
&lt;video controls autoplay loop muted width="100%" src="video/project.mov" style="border: 2px solid #CCC;">
&lt;/video>
&lt;p>Within the tidyverse, we&amp;rsquo;re already using Air in some of our largest packages, like
&lt;a href="https://github.com/tidyverse/dplyr/pull/7662" target="_blank" rel="noopener">dplyr&lt;/a>,
&lt;a href="https://github.com/tidyverse/tidyr/pull/1591" target="_blank" rel="noopener">tidyr&lt;/a>, and
&lt;a href="https://github.com/tidymodels/recipes/pull/1425" target="_blank" rel="noopener">recipes&lt;/a>.&lt;/p>
&lt;p>Throughout the rest of this post you&amp;rsquo;ll learn what a formatter is, why you&amp;rsquo;d want to use one, and you&amp;rsquo;ll learn a little about how Air decides to format your R code.&lt;/p>
&lt;p>Note that Air is still in beta, so there may be some breaking changes over the next few releases. We also encourage you to use it in combination with a version control system, like git, so that you can clearly see the changes Air makes. That said, we still feel very confident in the current state of Air, and can&amp;rsquo;t wait for you to try it!&lt;/p>
&lt;h2 id="installing-air">Installing Air
&lt;a href="#installing-air">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>If you already know how formatters work and want to jump straight in, follow one of the guides below:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>For Positron, Air is
&lt;a href="https://open-vsx.org/extension/posit/air-vscode" target="_blank" rel="noopener">available&lt;/a> on OpenVSX as an Extension. Install it from the Extensions pane within Positron, then read our
&lt;a href="https://posit-dev.github.io/air/editor-vscode.html" target="_blank" rel="noopener">Positron guide&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For VS Code, Air is
&lt;a href="https://marketplace.visualstudio.com/items?itemName=Posit.air-vscode" target="_blank" rel="noopener">available&lt;/a> on the VS Code Marketplace as an Extension. Install it from the Extensions pane within VS Code, then read our
&lt;a href="https://posit-dev.github.io/air/editor-vscode.html" target="_blank" rel="noopener">VS Code guide&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For RStudio, Air can be set as an external formatter, but you&amp;rsquo;ll need to install the command line tool for Air first. Read our
&lt;a href="https://posit-dev.github.io/air/editor-rstudio.html" target="_blank" rel="noopener">RStudio guide&lt;/a> to get started. Note that this is an experimental feature on the RStudio side, so the exact setup may change a little until it is fully stabilized.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For command line users, Air binaries can be installed using our
&lt;a href="https://posit-dev.github.io/air/cli.html" target="_blank" rel="noopener">standalone installer scripts&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>For both Positron and VS Code, the most important thing to enable after installing the extension is format on save for R. You can do that by adding these lines to your &lt;code>settings.json&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;[r]&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;editor.formatOnSave&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To open your &lt;code>settings.json&lt;/code> file, run one of the following from the Command Palette:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Run &lt;code>Preferences: Open User Settings (JSON)&lt;/code> to modify global user settings.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run &lt;code>Preferences: Open Workspace Settings (JSON)&lt;/code> to modify project specific settings. You may want to use this instead of setting the user level setting if you drop in on multiple projects, but not all of them use Air. If you work on a project with collaborators, we recommend that you check in these project specific settings to your repository to ensure that every collaborator is using the same formatting settings.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>If your preferred editor isn&amp;rsquo;t listed here, but does support the
&lt;a href="https://microsoft.github.io/language-server-protocol/" target="_blank" rel="noopener">Language Server Protocol&lt;/a>, then it is likely that we can add support for Air there as well.&lt;/p>
&lt;p>If you have any questions or run into issues installing or using Air, feel free to open an
&lt;a href="https://github.com/posit-dev/air/issues" target="_blank" rel="noopener">issue&lt;/a>!&lt;/p>
&lt;h2 id="whats-a-formatter">What&amp;rsquo;s a formatter?
&lt;a href="#whats-a-formatter">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A formatter is in charge of the &lt;em>layout&lt;/em> of your R code. Formatters do not change the meaning of code; instead they ensure that whitespace, newlines, and other punctuation conform to a set of rules and standards, such as:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Making sure your code is &lt;strong>indented&lt;/strong> with the appropriate amount of leading whitespace. By default, Air uses 2 spaces for indentation. You will see this indentation in pipelines:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">data&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">geom_point&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As well as in function calls:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">bar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Preventing your code from overflowing a given &lt;strong>line width&lt;/strong>. By default, Air uses a line width of 80 characters. It enforces this by splitting long lines of code over multiple lines. For instance, notice how long these expressions are, they would &amp;ldquo;overflow&amp;rdquo; past 80 characters:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">band_members&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nf">full_join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">band_instruments2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">join_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">artist&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">left_join&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">copy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">suffix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;.x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;.y&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">...&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">keep&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">UseMethod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;left_join&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Air reformats these expressions by switching them from a horizontal layout (called &amp;ldquo;flat&amp;rdquo;) to a vertical one (called &amp;ldquo;expanded&amp;rdquo;):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">band_members&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">full_join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">band_instruments2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">join_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">artist&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">left_join&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">by&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">copy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">suffix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;.x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;.y&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="kc">...&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">keep&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">NULL&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">UseMethod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;left_join&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Standardizing the whitespace around code elements. Have you ever had difficulties deciphering very dense code?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="m">1+2&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Air reformats this expression to:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="m">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="m">4&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="how-does-a-formatter-improve-your-workflow">How does a formatter improve your workflow?
&lt;a href="#how-does-a-formatter-improve-your-workflow">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>By using a formatter it might seem like you&amp;rsquo;re giving up control over the layout of your code. And indeed you are! However, putting Air in charge of styling your code has substantial advantages.&lt;/p>
&lt;p>First, it automatically forces you to write legible code that is neither too wide nor too narrow, with proper breathing room around syntactic elements. Having a formatter as a companion significantly improves the process of writing code as you no longer have to think about style - the formatter does that for you!&lt;/p>
&lt;p>Second, it reduces friction when working in a team. By agreeing to use a formatter in a project, collaborators no longer have to discuss styling and layout issues. Code sent to you by a colleague will adhere to the standards that you&amp;rsquo;re used to. Code review no longer has to be about style nitpicks and can focus on the substance of the changes instead.&lt;/p>
&lt;h2 id="how-does-air-decide-how-to-format-your-code">How does Air decide how to format your code?
&lt;a href="#how-does-air-decide-how-to-format-your-code">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Air tries to strike a balance between enforcing rigid rules and allowing authors some control over the layout. Our main source of styling rules is the
&lt;a href="https://style.tidyverse.org" target="_blank" rel="noopener">Tidyverse style guide&lt;/a>, but we occasionally deviate from these.&lt;/p>
&lt;p>There is a trend among modern formatters of being &lt;em>opinionated&lt;/em>. Air certainly fits this trend and provides very few
&lt;a href="https://posit-dev.github.io/air/configuration.html" target="_blank" rel="noopener">configuration options&lt;/a>, mostly: the indent style (spaces versus tabs), the indent width, and the line width. However, Air also puts code authors in charge of certain aspects of the layout through the notion of &lt;strong>persistent line breaks&lt;/strong>.&lt;/p>
&lt;p>In general, Air is in control of deciding where to put vertical space (line breaks) in your code. For instance if you write:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">dictionary&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bob&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">jill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;juice&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Air will figure out that this expression fits on a single line without exceeding the line width. It will discard the line break and reformat to:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">dictionary&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bob&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;juice&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However there are very specific places at which you can insert a line break that Air perceives as persistent:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Before the very first argument in a function call. This:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># Persistent line break after `(` and before `bob`&lt;/span>
&lt;span class="n">dictionary&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">bob&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;juice&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>gets formatted as:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">dictionary&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">bob&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">jill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;juice&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Before the very first right-hand side expression in a pipeline. This:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># Persistent line break after `|&amp;gt;` and before `select`&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nf">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>gets formatted as:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">data&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>A persistent line break will never be removed by Air. But you can remove it manually. Taking the last example, if you join the first lines like this:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># Removed persistent line break after `(`&lt;/span>
&lt;span class="n">dictionary&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bob&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">jill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;juice&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Removed persistent line break after `|&amp;gt;`&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Air will recognize that you&amp;rsquo;ve removed the persistent line break, and reformat as:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">dictionary&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bob&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;juice&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nf">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The goal of this feature is to strike a balance between being opinionated and recognizing that users often know when taking up more vertical space results in more readable output.&lt;/p>
&lt;h2 id="how-can-i-disable-formatting">How can I disable formatting?
&lt;a href="#how-can-i-disable-formatting">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>If you need to disable formatting for a single expression, you can use a &lt;code># fmt: skip&lt;/code> comment. This is particularly useful for manual alignment.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># This skips formatting for `list()` and its arguments, retaining the manual alignment&lt;/span>
&lt;span class="c1"># fmt: skip&lt;/span>
&lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">dollar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;USA&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">yen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Japan&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">yuan&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;China&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1"># This skips formatting for `tribble()` and its arguments&lt;/span>
&lt;span class="c1"># fmt: skip&lt;/span>
&lt;span class="nf">tribble&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="o">~&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If there is a file that Air should skip altogether, you can use a &lt;code># fmt: skip file&lt;/code> comment at the very top of the file.&lt;/p>
&lt;p>To learn more about these features, see the
&lt;a href="https://posit-dev.github.io/air/formatter.html#disabling-formatting" target="_blank" rel="noopener">documentation&lt;/a>.&lt;/p>
&lt;h2 id="how-can-i-use-air">How can I use Air?
&lt;a href="#how-can-i-use-air">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>As we&amp;rsquo;ve touched on above, Air can be integrated into your IDE to format code on every save. We expect that this will be the most common way to invoke Air, but there are a few other ways to use Air that we think are pretty cool:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>In IDEs:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Format on save&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Format selection&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>At the command line:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Format entire projects with &lt;code>air format .&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Set up a git precommit hook to invoke Air before committing&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>In CI:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Use a GitHub Action to check that each PR conforms to formatting standards with &lt;code>air format . --check&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use a GitHub Action to automatically format each PR by pushing the results of &lt;code>air format&lt;/code> as a commit&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>We don&amp;rsquo;t have guides for all of these use cases yet, but the best place to stay up to date is the
&lt;a href="https://posit-dev.github.io/air/" target="_blank" rel="noopener">Air website&lt;/a>.&lt;/p>
&lt;h2 id="how-is-this-different-from-styler">How is this different from styler?
&lt;a href="#how-is-this-different-from-styler">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Air would not exist without the preexisting work and dedication poured into
&lt;a href="https://github.com/r-lib/styler" target="_blank" rel="noopener">styler&lt;/a>. Created by
&lt;a href="https://github.com/lorenzwalthert" target="_blank" rel="noopener">Lorenz Walthert&lt;/a> and
&lt;a href="https://github.com/krlmlr" target="_blank" rel="noopener">Kirill Müller&lt;/a>, styler proved that the R community does care about how their code is formatted, and has been the primary implementation of the
&lt;a href="https://style.tidyverse.org/" target="_blank" rel="noopener">tidyverse style guide&lt;/a> for many years. We&amp;rsquo;ve spoken to Lorenz about Air, and we are all very excited about what Air can do for the future of formatting in R.&lt;/p>
&lt;p>Air is different from styler in a few key ways:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Air is much faster. So much so that it enables new ways of using a formatter that were somewhat painful before, like formatting on every save, or formatting entire projects on every pull request.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Air is less configurable. As mentioned above, Air provides very few
&lt;a href="https://posit-dev.github.io/air/configuration.html" target="_blank" rel="noopener">configuration options&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Air respects a line width, with a default of 80 characters.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Air does not require R to run. Unlike styler, which is an R package, Air is written in Rust and is distributed as a pre-compiled binary for many platforms. This makes Air easy to use across IDEs or on CI with very little setup required.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="how-fast-is-extremely-fast">How fast is &amp;ldquo;extremely fast&amp;rdquo;?
&lt;a href="#how-fast-is-extremely-fast">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Air is written in Rust using the formatting infrastructure provided by
&lt;a href="https://github.com/biomejs/biome" target="_blank" rel="noopener">Biome&lt;/a>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. This is also the same infrastructure that
&lt;a href="https://github.com/astral-sh/ruff" target="_blank" rel="noopener">Ruff&lt;/a>, the fast Python formatter, originally forked from. Both of those projects are admired for their performance, and Air is no exception.&lt;/p>
&lt;p>One goal for Air is for &amp;ldquo;format on save&amp;rdquo; to be imperceptibly fast, encouraging you to keep it on at all times. Benchmarking formatters is a bit hand wavy due to some having built in caching, so bear with me, but one way to proxy this performance is by formatting a large single file, for example the 800+ line
&lt;a href="https://github.com/tidyverse/dplyr/blob/main/R/join.R" target="_blank" rel="noopener">join.R&lt;/a> in dplyr. Formatting this takes&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>0.01 seconds with Air&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1 second with styler (no cache)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So, ~100x faster for Air! If you make a few changes in the file after the first round of formatting and run the formatter again, then you get something like:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>0.01 seconds with Air&lt;/p>
&lt;/li>
&lt;li>
&lt;p>0.5 seconds with styler (with cache)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Half a second for styler might not sound that bad (and indeed, for a formatter written in R it&amp;rsquo;s pretty good), but it&amp;rsquo;s slow enough that you&amp;rsquo;ll &amp;ldquo;feel&amp;rdquo; it if you try and invoke styler on every save. But 0.01 seconds? You&amp;rsquo;ll never even know its running!&lt;/p>
&lt;p>The differences get even more drastic if you format entire projects. Formatting the ~150 R files in dplyr takes&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>0.3 seconds with Air&lt;/p>
&lt;/li>
&lt;li>
&lt;p>100 seconds with styler&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Over 300x faster!&lt;/p>
&lt;p>Out of curiosity, we also ran Air over all ~900 R files in base R and it finished in under 2 seconds.&lt;/p>
&lt;h2 id="wrapping-up">Wrapping up
&lt;a href="#wrapping-up">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>By contributing this formatter to the R community, our objective is threefold:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Vastly improve your enjoyment of writing well-styled R code by removing the chore of editing whitespace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Reduce friction in collaborative projects by establishing a consistent style once and for all.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Improve the overall readability of R code for the community.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>We hope that Air will prove to be a valuable companion in your daily workflow!&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>The Shiny team already has a
&lt;a href="https://github.com/rstudio/shiny-workflows/tree/main/format-r-code" target="_blank" rel="noopener">GitHub Action&lt;/a> to help with this. We will likely work on refining this and incorporating it more officially into an Air or r-lib repository. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Biome is an open source project maintained by community members, please consider
&lt;a href="https://github.com/sponsors/biomejs#sponsors" target="_blank" rel="noopener">sponsoring them&lt;/a>! &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>These benchmarks were run with &lt;code>air format R/join.R&lt;/code> and &lt;code>styler::style_file(&amp;quot;R/join.R&amp;quot;)&lt;/code>. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>With &lt;code>air format .&lt;/code> and
&lt;a href="https://styler.r-lib.org/reference/style_pkg.html" target="_blank" rel="noopener">&lt;code>styler::style_pkg()&lt;/code>&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Three ways errors are about to get better in tidymodels</title><link>https://www.tidyverse.org/blog/2023/11/tidymodels-errors-q4/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2023/11/tidymodels-errors-q4/</guid><description>&lt;p>Twice a year, the tidymodels team comes together for &amp;ldquo;spring cleaning,&amp;rdquo; a week-long project devoted to package maintenance. Ahead of the week, we come up with a list of maintenance tasks that we&amp;rsquo;d like to see consistently implemented across our packages. Many of these tasks can be completed by running one usethis function, while others are much more involved, like issue triage.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> In tidymodels, triaging issues in our core packages helps us to better understand common ways that users struggle to wrap their heads around an API choice we&amp;rsquo;ve made or find the information they need. So, among other things, refinements to the wording of our error messages is a common output of our spring cleanings. This blog post will call out three kinds of changes to our erroring that came out of this spring cleaning:&lt;/p>
&lt;ul>
&lt;li>Improving existing errors:
&lt;a href="#outcome">The outcome went missing&lt;/a>&lt;/li>
&lt;li>Do something where we once did nothing:
&lt;a href="#predict">Predicting with things that can&amp;rsquo;t predict&lt;/a>&lt;/li>
&lt;li>Make a place and point to it:
&lt;a href="#model">Model formulas&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>To demonstrate, we&amp;rsquo;ll walk through some examples using the tidymodels packages:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://tidymodels.tidymodels.org'>tidymodels&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ── &lt;span style='font-weight: bold;'>Attaching packages&lt;/span> ──────────────────────────── tidymodels 1.1.1 ──&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>broom &lt;/span> 1.0.5 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>recipes &lt;/span> 1.0.8.&lt;span style='color: #BB0000;'>9000&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>dials &lt;/span> 1.2.0 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>rsample &lt;/span> 1.2.0 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>dplyr &lt;/span> 1.1.3 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>tibble &lt;/span> 3.2.1 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>ggplot2 &lt;/span> 3.4.4 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>tidyr &lt;/span> 1.3.0 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>infer &lt;/span> 1.0.5 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>tune &lt;/span> 1.1.2.&lt;span style='color: #BB0000;'>9000&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>modeldata &lt;/span> 1.2.0 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>workflows &lt;/span> 1.1.3 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>parsnip &lt;/span> 1.1.1.&lt;span style='color: #BB0000;'>9001&lt;/span> &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>workflowsets&lt;/span> 1.0.1 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>purrr &lt;/span> 1.0.2 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>yardstick &lt;/span> 1.2.0&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; ── &lt;span style='font-weight: bold;'>Conflicts&lt;/span> ─────────────────────────────── tidymodels_conflicts() ──&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>purrr&lt;/span>::&lt;span style='color: #00BB00;'>discard()&lt;/span> masks &lt;span style='color: #0000BB;'>scales&lt;/span>::discard()&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>dplyr&lt;/span>::&lt;span style='color: #00BB00;'>filter()&lt;/span> masks &lt;span style='color: #0000BB;'>stats&lt;/span>::filter()&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>dplyr&lt;/span>::&lt;span style='color: #00BB00;'>lag()&lt;/span> masks &lt;span style='color: #0000BB;'>stats&lt;/span>::lag()&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>recipes&lt;/span>::&lt;span style='color: #00BB00;'>step()&lt;/span> masks &lt;span style='color: #0000BB;'>stats&lt;/span>::step()&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #0000BB;'>•&lt;/span> Use suppressPackageStartupMessages() to eliminate package startup messages&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Note that my installed versions include the current dev version of a few tidymodels packages. You can install those versions with:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>pak&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://pak.r-lib.org/reference/pak.html'>pak&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/paste.html'>paste0&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"tidymodels/"&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"tune"&lt;/span>, &lt;span class='s'>"parsnip"&lt;/span>, &lt;span class='s'>"recipes"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="the-outcome-went-missing-">The outcome went missing 👻
&lt;a href="#the-outcome-went-missing-">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The tidymodels packages focus on &lt;em>supervised&lt;/em> machine learning problems, predicting the value of an outcome using predictors.&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> For example, in the code:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>linear_spec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>linear_reg&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>linear_fit&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>linear_spec&lt;/span>, &lt;span class='nv'>mpg&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>hp&lt;/span>, &lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The &lt;code>mpg&lt;/code> variable is the outcome. There are many ways that an analyst may mistakenly fail to pass an outcome. In the most straightforward case, they might omit the outcome on the LHS of the formula:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">linear_spec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">hp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in lm.fit(x, y, offset = offset, singular.ok = singular.ok, ...) : &lt;/span>
&lt;span class="c1">#&amp;gt; incompatible dimensions&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, parsnip used to defer to the modeling engine to raise an error, which may or may not be informative.&lt;/p>
&lt;p>There are many less obvious ways an analyst may mistakenly supply no outcome variable. For example, try spotting the issue in the following code, defining a recipe to perform principal component analysis (PCA) on the numeric variables in the data before fitting the model:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">mtcars_rec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_pca&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">all_numeric&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nf">workflow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtcars_rec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">linear_spec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error: object &amp;#39;.&amp;#39; not found&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A head-scratcher! To help diagnose what&amp;rsquo;s happening here, we could first try seeing what data is actually being passed to the model.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>mtcars_rec_trained&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span>&lt;/span>
&lt;span> &lt;span class='nv'>mtcars_rec&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>prep&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span> &lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>mtcars_rec_trained&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span> &lt;span class='nf'>bake&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='kc'>NULL&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 32 × 5&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; PC1 PC2 PC3 PC4 PC5&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 1&lt;/span> -&lt;span style='color: #BB0000;'>195.&lt;/span> 12.8 -&lt;span style='color: #BB0000;'>11.4&lt;/span> 0.016&lt;span style='text-decoration: underline;'>4&lt;/span> 2.17 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 2&lt;/span> -&lt;span style='color: #BB0000;'>195.&lt;/span> 12.9 -&lt;span style='color: #BB0000;'>11.7&lt;/span> -&lt;span style='color: #BB0000;'>0.479&lt;/span> 2.11 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 3&lt;/span> -&lt;span style='color: #BB0000;'>142.&lt;/span> 25.9 -&lt;span style='color: #BB0000;'>16.0&lt;/span> -&lt;span style='color: #BB0000;'>1.34&lt;/span> -&lt;span style='color: #BB0000;'>1.18&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 4&lt;/span> -&lt;span style='color: #BB0000;'>279.&lt;/span> -&lt;span style='color: #BB0000;'>38.3&lt;/span> -&lt;span style='color: #BB0000;'>14.0&lt;/span> 0.157 -&lt;span style='color: #BB0000;'>0.817&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 5&lt;/span> -&lt;span style='color: #BB0000;'>399.&lt;/span> -&lt;span style='color: #BB0000;'>37.3&lt;/span> -&lt;span style='color: #BB0000;'>1.38&lt;/span> 2.56 -&lt;span style='color: #BB0000;'>0.444&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 6&lt;/span> -&lt;span style='color: #BB0000;'>248.&lt;/span> -&lt;span style='color: #BB0000;'>25.6&lt;/span> -&lt;span style='color: #BB0000;'>12.2&lt;/span> -&lt;span style='color: #BB0000;'>3.01&lt;/span> -&lt;span style='color: #BB0000;'>1.08&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 7&lt;/span> -&lt;span style='color: #BB0000;'>435.&lt;/span> 20.9 13.9 0.801 -&lt;span style='color: #BB0000;'>0.916&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 8&lt;/span> -&lt;span style='color: #BB0000;'>160.&lt;/span> -&lt;span style='color: #BB0000;'>20.0&lt;/span> -&lt;span style='color: #BB0000;'>23.3&lt;/span> -&lt;span style='color: #BB0000;'>1.06&lt;/span> 0.787&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 9&lt;/span> -&lt;span style='color: #BB0000;'>172.&lt;/span> 10.8 -&lt;span style='color: #BB0000;'>18.3&lt;/span> -&lt;span style='color: #BB0000;'>4.40&lt;/span> -&lt;span style='color: #BB0000;'>0.836&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>10&lt;/span> -&lt;span style='color: #BB0000;'>209.&lt;/span> 19.7 -&lt;span style='color: #BB0000;'>8.94&lt;/span> -&lt;span style='color: #BB0000;'>2.58&lt;/span> 1.33 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># ℹ 22 more rows&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Mmm. What happened to &lt;code>mpg&lt;/code>? We mistakenly told &lt;code>step_pca()&lt;/code> to perform PCA on &lt;em>all&lt;/em> of the numeric variables, not just the numeric &lt;em>predictors&lt;/em>! As a result, it incorporated &lt;code>mpg&lt;/code> into the principal components, removing each of the original numeric variables after the fact. Rewriting using the correct tidyselect specification &lt;code>all_numeric_predictors()&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>mtcars_rec_new&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>recipe&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mpg&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, &lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>step_pca&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>all_numeric_predictors&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>workflow&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_rec_new&lt;/span>, &lt;span class='nv'>linear_spec&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span> &lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ══ Workflow [trained] ════════════════════════════════════════════════&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='font-style: italic;'>Preprocessor:&lt;/span> Recipe&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='font-style: italic;'>Model:&lt;/span> linear_reg()&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ── Preprocessor ──────────────────────────────────────────────────────&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; 1 Recipe Step&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; • step_pca()&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ── Model ─────────────────────────────────────────────────────────────&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Call:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; stats::lm(formula = ..y ~ ., data = data)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Coefficients:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; (Intercept) PC1 PC2 PC3 PC4 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; 43.39293 0.07609 -0.05266 0.57892 0.94890 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; PC5 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; -1.72569&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Works like a charm. That error we saw previously could be much more helpful, though. With the current developmental version of parsnip, this looks like:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>linear_spec&lt;/span>, &lt;span class='o'>~&lt;/span> &lt;span class='nv'>hp&lt;/span>, &lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'>:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> `linear_reg()` was unable to find an outcome.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> Ensure that you have specified an outcome column and that it hasn't&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; been removed in pre-processing.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Or, with workflows:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>workflow&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_rec&lt;/span>, &lt;span class='nv'>linear_spec&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span> &lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'>:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> `linear_reg()` was unable to find an outcome.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> Ensure that you have specified an outcome column and that it hasn't&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; been removed in pre-processing.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Much better.&lt;/p>
&lt;h2 id="predicting-with-things-that-cant-predict">Predicting with things that can&amp;rsquo;t predict
&lt;a href="#predicting-with-things-that-cant-predict">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Earlier this year, Dr. Louise E. Sinks put out a
&lt;a href="https://lsinks.github.io/posts/2023-04-10-tidymodels/tidymodels_tutorial.html" target="_blank" rel="noopener">wonderful blog post&lt;/a> documenting what it felt like to approach the various object types defined in the tidymodels as a newcomer to the collection of packages. They wrote:&lt;/p>
&lt;blockquote>
&lt;p>I found it confusing that &lt;code>fit&lt;/code>, &lt;code>last_fit&lt;/code>, &lt;code>fit_resamples&lt;/code>, etc., did not all produce objects that contained the same information and could be acted on by the same functions.&lt;/p>
&lt;/blockquote>
&lt;p>This makes sense. While we try to forefront the intended mental model for fitting and predicting with tidymodels in our APIs and documentation, we also need to be proactive in anticipating common challenges in constructing that mental model.&lt;/p>
&lt;p>For example, we&amp;rsquo;ve found that it&amp;rsquo;s sometimes not clear to users which outputs they can call
&lt;a href="https://rdrr.io/r/stats/predict.html" target="_blank" rel="noopener">&lt;code>predict()&lt;/code>&lt;/a> on. One such situation, as Louise points out, is with &lt;code>fit_resamples()&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='c'># fit a linear regression model to bootstrap resamples of mtcars&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>mtcars_res&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>fit_resamples&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>linear_reg&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>mpg&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, &lt;span class='nf'>bootstraps&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>mtcars_res&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; # Resampling results&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; # Bootstrap sampling &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 25 × 4&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; splits id .metrics .notes &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 1&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/11]&amp;gt;&lt;/span> Bootstrap01 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 2&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/10]&amp;gt;&lt;/span> Bootstrap02 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 3&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/16]&amp;gt;&lt;/span> Bootstrap03 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 4&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/11]&amp;gt;&lt;/span> Bootstrap04 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 5&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/10]&amp;gt;&lt;/span> Bootstrap05 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 6&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/13]&amp;gt;&lt;/span> Bootstrap06 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 7&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/16]&amp;gt;&lt;/span> Bootstrap07 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 8&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/11]&amp;gt;&lt;/span> Bootstrap08 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 9&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/11]&amp;gt;&lt;/span> Bootstrap09 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>10&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/10]&amp;gt;&lt;/span> Bootstrap10 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># ℹ 15 more rows&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>With previous tidymodels versions, mistakenly trying to predict with this object resulted in the following output:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">predict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtcars_res&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in UseMethod(&amp;#34;predict&amp;#34;) : &lt;/span>
&lt;span class="c1">#&amp;gt; no applicable method for &amp;#39;predict&amp;#39; applied to an object of class&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;#34;c(&amp;#39;resample_results&amp;#39;, &amp;#39;tune_results&amp;#39;, &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39;, &amp;#39;data.frame&amp;#39;)&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some R developers may recognize this error as what results when we didn&amp;rsquo;t define any
&lt;a href="https://rdrr.io/r/stats/predict.html" target="_blank" rel="noopener">&lt;code>predict()&lt;/code>&lt;/a> method for &lt;code>tune_results&lt;/code> objects. We didn&amp;rsquo;t do so because prediction isn&amp;rsquo;t well-defined for tuning results. &lt;em>But&lt;/em>, this error message does little to help a user understand why that&amp;rsquo;s the case.&lt;/p>
&lt;p>We&amp;rsquo;ve recently made some changes to error more informatively in this case. We do so by defining a &amp;ldquo;dummy&amp;rdquo;
&lt;a href="https://rdrr.io/r/stats/predict.html" target="_blank" rel="noopener">&lt;code>predict()&lt;/code>&lt;/a> method for tuning results, implemented only for the sake of erroring more informatively. The same code will now give the following output:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">predict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtcars_res&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in `predict()`:&lt;/span>
&lt;span class="c1">#&amp;gt; ! `predict()` is not well-defined for tuning results.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ To predict with the optimal model configuration from tuning&lt;/span>
&lt;span class="c1">#&amp;gt; results, ensure that the tuning result was generated with the&lt;/span>
&lt;span class="c1">#&amp;gt; control option `save_workflow = TRUE`, run `fit_best()`, and&lt;/span>
&lt;span class="c1">#&amp;gt; then predict using `predict()` on its output.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ To collect predictions from tuning results, ensure that the&lt;/span>
&lt;span class="c1">#&amp;gt; tuning result was generated with the control option `save_pred&lt;/span>
&lt;span class="c1">#&amp;gt; = TRUE` and run `collect_predictions()`.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>References to important concepts or functions, like
&lt;a href="https://tune.tidymodels.org/reference/control_grid.html" target="_blank" rel="noopener">control options&lt;/a>,
&lt;a href="https://tune.tidymodels.org/reference/fit_best.html?q=fit_best" target="_blank" rel="noopener">&lt;code>fit_best()&lt;/code>&lt;/a>, and
&lt;a href="https://tune.tidymodels.org/reference/collect_predictions.html?q=collect" target="_blank" rel="noopener">&lt;code>collect_predictions()&lt;/code>&lt;/a>, link to the help-files for those functions using
&lt;a href="https://cli.r-lib.org/reference/cli_abort.html" target="_blank" rel="noopener">cli&amp;rsquo;s erroring tools&lt;/a>.&lt;/p>
&lt;p>We hope new error messages like this will help to get folks back on track.&lt;/p>
&lt;h2 id="model-formulas">Model formulas
&lt;a href="#model-formulas">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>In R, formulas provide a compact, symbolic notation to specify model terms. Many modeling functions in R make use of &amp;ldquo;specials,&amp;rdquo; or nonstandard notations used in formulas. Specials are defined and handled as a special case by a given modeling package. parsnip defers to engine packages to handle specials, so you can work with them as usual. For example, the mgcv package provides support for generalized additive models in R, and defines a special called &lt;code>s()&lt;/code> to indicate smoothing terms. You can interface with it via tidymodels like so:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='c'># define a generalized additive model specification&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>gam_spec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>gen_additive_mod&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"regression"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='c'># fit the specification using a formula with specials&lt;/span>&lt;/span>
&lt;span>&lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>gam_spec&lt;/span>, &lt;span class='nv'>mpg&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>cyl&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nf'>s&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>disp&lt;/span>, k &lt;span class='o'>=&lt;/span> &lt;span class='m'>5&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; parsnip model object&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Family: gaussian &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Link function: identity &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Formula:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; mpg ~ cyl + s(disp, k = 5)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Estimated degrees of freedom:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; 3.39 total = 5.39 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; GCV score: 6.380152&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>While parsnip can handle specials just fine, the package is often used in conjunction with the greater tidymodels package ecosystem, which defines its own pre-processing infrastructure and functionality via packages like hardhat and recipes. The specials defined in many modeling packages introduce conflicts with that infrastructure. To support specials while also maintaining consistent syntax elsewhere in the ecosystem, &lt;strong>tidymodels delineates between two types of formulas: preprocessing formulas and model formulas&lt;/strong>. Preprocessing formulas determine the input variables, while model formulas determine the model structure.&lt;/p>
&lt;p>This is a tricky abstraction, and one that users have tripped up on in the past. Users could generate all sorts of different errors by 1) mistakenly passing model formulas where preprocessing formulas were expected, or 2) forgetting to pass a model formula where it&amp;rsquo;s needed. For an example of 1), we could pass recipes the same formula we passed to parsnip:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">cyl&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nf">s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">disp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in `inline_check()`:&lt;/span>
&lt;span class="c1">#&amp;gt; ! No in-line functions should be used here; use steps to &lt;/span>
&lt;span class="c1">#&amp;gt; define baking actions.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But we &lt;em>just&lt;/em> used a special with another tidymodels function! Rude!&lt;/p>
&lt;p>Or, to demonstrate 2), we pass the preprocessing formula as we ought to but forget to provide the model formula:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">gam_wflow&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">workflow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_formula&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_model&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gam_spec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">gam_wflow&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in `fit_xy()`:&lt;/span>
&lt;span class="c1">#&amp;gt; ! `fit()` must be used with GAM models (due to its use of formulas).&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Uh, but I &lt;em>did&lt;/em> just use &lt;code>fit()&lt;/code>!&lt;/p>
&lt;p>Since the distinction between model formulas and preprocessor formulas comes up in functions across tidymodels, we decide to create a
&lt;a href="https://parsnip.tidymodels.org/dev/reference/model_formula.html" target="_blank" rel="noopener">central page&lt;/a> that documents the concept itself, hopefully making the syntax associated with it come more easily to users. Then, we link to it &lt;em>all over the place&lt;/em>. For example, those errors now look like:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>recipe&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mpg&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>cyl&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nf'>s&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>disp&lt;/span>, k &lt;span class='o'>=&lt;/span> &lt;span class='m'>5&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'> in `inline_check()`:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> No in-line functions should be used here.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> The following function was found: `s`.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> Use steps to do transformations instead.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> If your modeling engine uses special terms in formulas, pass that&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; formula to workflows as a model formula&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; (`?parsnip::model_formula()`).&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Or:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>gam_wflow&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span> &lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'>:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> When working with generalized additive models, please supply&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; the model specification to `workflows::add_model()` along with a&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; `formula` argument.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> See `?parsnip::model_formula()` to learn more.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>While I&amp;rsquo;ve only outlined three, there are all sorts of improvements to error messages on their way to the tidymodels packages in upcoming releases. If you happen to stumble across them, we hope they quickly set you back on the right path. 🗺&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Issue triage consists of categorizing, prioritizing, and consolidating issues in a repository&amp;rsquo;s issue tracker. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>See the
&lt;a href="https://tidyclust.tidymodels.org" target="_blank" rel="noopener">tidyclust&lt;/a> package for unsupervised learning with tidymodels! &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Writing performant code with tidy tools</title><link>https://www.tidyverse.org/blog/2023/04/performant-packages/</link><pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2023/04/performant-packages/</guid><description>&lt;p>The tidyverse packages provide safe, powerful, and expressive interfaces to solve data science problems. Behind the scenes of the tidyverse is a set of lower-level tools that its developers use to build these interfaces. While these lower-level approaches are more performant than their tidy analogues, their interfaces are often less readable and safe. For most use cases in interactive data analysis, the advantages of tidyverse interfaces far outweigh the drawback in computational speed. When speed becomes an issue, though, transitioning tidy code to use these lower-level interfaces in their backend can offer substantial increases in computational performance.&lt;/p>
&lt;p>This post will outline alternatives to tools I love from packages like dplyr and tidyr that I use to speed up computational bottlenecks. These recommendations come from my experiences developing the
&lt;a href="https://www.tidymodels.org/" target="_blank" rel="noopener">tidymodels&lt;/a> packages, a collection of packages for modeling and machine learning using tidyverse principles. As such, most of these suggestions are best suited to package code, as the noted trade-off is more likely to be worth it in those settings&amp;mdash;however, there may also be cases in analytical code, especially in production and/or with very large data sets, where these tips will be helpful. I&amp;rsquo;ve included a number of &amp;ldquo;worked examples&amp;rdquo; with each proposed alternative, showing how the tidymodels team has used these same tricks to
&lt;a href="https://www.simonpcouch.com/blog/speedups-2023/" target="_blank" rel="noopener">speed up our code&lt;/a> quite a bit. Before I do that, though, let&amp;rsquo;s make friends with some new R packages.&lt;/p>
&lt;h2 id="tools-of-the-trade">Tools of the trade
&lt;a href="#tools-of-the-trade">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>First, loading the tidyverse:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://tidyverse.tidyverse.org'>tidyverse&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The most important tools to help you understand what&amp;rsquo;s slowing your code down have little to do with the tidyverse at all!&lt;/p>
&lt;h3 id="profvis">profvis
&lt;a href="#profvis">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The profvis package is an R package for collecting and visualizing profiling data.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://rstudio.github.io/profvis/'>profvis&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Profiling is the process of determining how long different portions of a chunk of code take to run. For example, in this next function &lt;code>slow_function()&lt;/code>, it&amp;rsquo;s somewhat straightforward to tell how long different portions of the following code run for if you know what
&lt;a href="https://rdrr.io/pkg/profvis/man/pause.html" target="_blank" rel="noopener">&lt;code>pause()&lt;/code>&lt;/a> does. (
&lt;a href="https://rdrr.io/pkg/profvis/man/pause.html" target="_blank" rel="noopener">&lt;code>pause()&lt;/code>&lt;/a> is a function from the profvis package that just chills out for the specified amount of time. For example, &lt;code>pause(1)&lt;/code> will wait for 1 second before finishing running.)&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>step_1&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='kr'>function&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/profvis/man/pause.html'>pause&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>&amp;#125;&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>step_2&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='kr'>function&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/profvis/man/pause.html'>pause&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>&amp;#125;&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>slow_function&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='kr'>function&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>step_1&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;/span>
&lt;span> &lt;span class='nf'>step_2&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;/span>
&lt;span> &lt;span class='kc'>TRUE&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>&amp;#125;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Profiling tools would help us see that &lt;code>step_1()&lt;/code> takes one second, while &lt;code>step_2()&lt;/code> takes two. In practice, this is usually much harder to intuit visually. To profile code with profvis, use the
&lt;a href="https://rdrr.io/pkg/profvis/man/profvis.html" target="_blank" rel="noopener">&lt;code>profvis()&lt;/code>&lt;/a> function:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>result&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/profvis/man/profvis.html'>profvis&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>slow_function&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Printing the &lt;code>result&lt;/code>ing object out will visualize the time different calls within &lt;code>slow_function()&lt;/code> took:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>result&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>&lt;img src="slow-function-profvis.png" alt="A screenshot of profvis output. A stack of grey bars sit atop a timeline that ranges from zero to three seconds. The bottom rectangle of the stack is labeled &amp;ldquo;slow_function&amp;rdquo; and stretches across the whole timeline. Two rectangles labeled &amp;ldquo;step_1&amp;rdquo; and &amp;ldquo;step_2&amp;rdquo; lie on top of the bottom rectangle, where the first stretches one-third of the way across the timeline and the second covers the remaining two-thirds.">&lt;/p>
&lt;p>This output shows that, inside of &lt;code>slow_function()&lt;/code>, &lt;code>step_1()&lt;/code> took about a third of the total time and &lt;code>step_2()&lt;/code> took two-thirds. All of the time in both of those functions was due to calling
&lt;a href="https://rdrr.io/pkg/profvis/man/pause.html" target="_blank" rel="noopener">&lt;code>pause()&lt;/code>&lt;/a>.&lt;/p>
&lt;p>Profiling should be your first line of defense against slow-running code. Often, profiling will surface slowdowns in unexpected places, and solutions to address those slowdowns may have little to do with usage of tidy tools. To learn more about profiling, the
&lt;a href="https://adv-r.hadley.nz/perf-measure.html" target="_blank" rel="noopener">Measuring performance&lt;/a> chapter in Hadley Wickham&amp;rsquo;s book
&lt;a href="https://adv-r.hadley.nz/index.html" target="_blank" rel="noopener">Advanced R&lt;/a> is a great place to start.&lt;/p>
&lt;h3 id="bench">bench
&lt;a href="#bench">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>profvis is a powerful tool to surface code slowdowns. Often, though, it may not be immediately clear how to &lt;em>fix&lt;/em> that slowdown. The bench package allows users to quickly test out how long different approaches to solving a problem take.&lt;/p>
&lt;p>For example, say we want to take the sum of the numbers in a list, but we&amp;rsquo;ve identified via profiling that this operation is slowing our code down:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>numbers&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>as.list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>5&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>numbers&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [[1]]&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [[2]]&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [[3]]&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 3&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [[4]]&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 4&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [[5]]&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 5&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>One approach could be using the
&lt;a href="https://rdrr.io/r/base/funprog.html" target="_blank" rel="noopener">&lt;code>Reduce()&lt;/code>&lt;/a> function:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/funprog.html'>Reduce&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>sum&lt;/span>, &lt;span class='nv'>numbers&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 15&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Another could involve converting to a vector with
&lt;a href="https://rdrr.io/r/base/unlist.html" target="_blank" rel="noopener">&lt;code>unlist()&lt;/code>&lt;/a> and then using
&lt;a href="https://rdrr.io/r/base/sum.html" target="_blank" rel="noopener">&lt;code>sum()&lt;/code>&lt;/a>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/sum.html'>sum&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/unlist.html'>unlist&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>numbers&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 15&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>You may have some other ideas of how to solve this problem! How do we figure out which one is fastest, though? The
&lt;a href="http://bench.r-lib.org/reference/mark.html" target="_blank" rel="noopener">&lt;code>bench::mark()&lt;/code>&lt;/a> function from bench takes in different proposals to solve the same problem and returns a tibble with information about how long they took (among other things.)&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>res&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> approach_1 &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/funprog.html'>Reduce&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>sum&lt;/span>, &lt;span class='nv'>numbers&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> approach_2 &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/sum.html'>sum&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/unlist.html'>unlist&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>numbers&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>res&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 2 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> approach_1 2.25µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> approach_2 491.97ns&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The other nice part about
&lt;a href="http://bench.r-lib.org/reference/mark.html" target="_blank" rel="noopener">&lt;code>bench::mark()&lt;/code>&lt;/a> is that it will check that each approach gives the same output, so that you don&amp;rsquo;t mistakenly compare apples and oranges.&lt;/p>
&lt;p>There are two important lessons to take in from this output:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>sum(unlist())&lt;/code> approach was wicked fast compared to
&lt;a href="https://rdrr.io/r/base/funprog.html" target="_blank" rel="noopener">&lt;code>Reduce()&lt;/code>&lt;/a>.&lt;/li>
&lt;li>Both of these expressions were fast. Even the slower of the two took 2.25µs&amp;mdash;to put that in perspective, that expression could complete 443454 iterations in a second! Keeping this bigger picture in mind is always important when benchmarking; if code runs fast enough to not be an issue in practical situations, then it need not be optimized in favor of less readable or safe code.&lt;/li>
&lt;/ul>
&lt;p>The results of little experiments like this one can be surprising at first. Over time, though, you will develop intuition for the fastest way to solve problems you commonly solve, and will write fast code the first time around!&lt;/p>
&lt;p>In this case, using
&lt;a href="https://rdrr.io/r/base/funprog.html" target="_blank" rel="noopener">&lt;code>Reduce()&lt;/code>&lt;/a> means calling
&lt;a href="https://rdrr.io/r/base/sum.html" target="_blank" rel="noopener">&lt;code>sum()&lt;/code>&lt;/a> many times, approximately once for each element of the list, and while
&lt;a href="https://rdrr.io/r/base/sum.html" target="_blank" rel="noopener">&lt;code>sum()&lt;/code>&lt;/a> isn&amp;rsquo;t particularly slow, calling an R function many times tends to have non-negligible overhead. With the &lt;code>sum(unlist())&lt;/code> approach, there are only 2 R function calls&amp;mdash;one for
&lt;a href="https://rdrr.io/r/base/unlist.html" target="_blank" rel="noopener">&lt;code>unlist()&lt;/code>&lt;/a> and one for
&lt;a href="https://rdrr.io/r/base/sum.html" target="_blank" rel="noopener">&lt;code>sum()&lt;/code>&lt;/a>&amp;mdash;which both immediately drop into C code.&lt;/p>
&lt;h3 id="vctrs">vctrs
&lt;a href="#vctrs">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The problems I commonly solve&amp;mdash;and possibly you as well, as a reader of this post&amp;mdash;often involve lots of dplyr and tidyr. When profiling the tidymodels packages, I&amp;rsquo;ve come across many places where calls to dplyr and tidyr took more time than I&amp;rsquo;d like them to, but had a lot to learn about how to speed up those operations. &lt;em>Enter the vctrs package!&lt;/em>&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://vctrs.r-lib.org/'>vctrs&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>If you use dplyr and tidyr like I do, turns out you&amp;rsquo;re also a vctrs user! dplyr and tidyr rely on vctrs to handle all sorts of elementary operations behind the scenes, and the package is a core part of a tidy developer&amp;rsquo;s toolkit. Taken together with some functions from the tibble package, these tools provide a super efficient, albeit bare-bones, alternative interface to common data manipulation tasks like
&lt;a href="https://dplyr.tidyverse.org/reference/filter.html" target="_blank" rel="noopener">&lt;code>filter()&lt;/code>&lt;/a>ing and
&lt;a href="https://dplyr.tidyverse.org/reference/select.html" target="_blank" rel="noopener">&lt;code>select()&lt;/code>&lt;/a>ing.&lt;/p>
&lt;h2 id="rewriting-tidy-code">Rewriting tidy code
&lt;a href="#rewriting-tidy-code">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>For every performance improvement I make by rewriting dplyr and tidyr code to instead use vctrs and tibble, I make probably two or three simpler optimizations.
&lt;a href="https://adv-r.hadley.nz/perf-improve.html" target="_blank" rel="noopener">Tool-agnostic practices&lt;/a> such as reducing duplicated computations, implementing early returns where possible, and using vectorized implementations will likely take you far when optimizing R code. Profiling is your ground truth! When profiling indicates that otherwise well-factored code is slowed by tidy interfaces, though, all is not lost.&lt;/p>
&lt;p>We&amp;rsquo;ll demonstrate different ways to speed up tidy code using a version of the base R data frame &lt;code>mtcars&lt;/code> converted to a tibble:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>mtcars_tbl&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://tibble.tidyverse.org/reference/as_tibble.html'>as_tibble&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars&lt;/span>, rownames &lt;span class='o'>=&lt;/span> &lt;span class='s'>"make_model"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 32 × 12&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; make_model mpg cyl disp hp drat wt qsec vs am gear carb&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 1&lt;/span> Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 2&lt;/span> Mazda RX4 … 21 6 160 110 3.9 2.88 17.0 0 1 4 4&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 3&lt;/span> Datsun 710 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 4&lt;/span> Hornet 4 D… 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 5&lt;/span> Hornet Spo… 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 6&lt;/span> Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 7&lt;/span> Duster 360 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 8&lt;/span> Merc 240D 24.4 4 147. 62 3.69 3.19 20 1 0 4 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 9&lt;/span> Merc 230 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>10&lt;/span> Merc 280 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># ℹ 22 more rows&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="one-for-one-replacements">One-for-one replacements
&lt;a href="#one-for-one-replacements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Many of the core functions in dplyr have alternatives in vctrs and tibble that can be quickly transitioned. There are a couple considerations associated with each, though, and some of them make piping a bit more awkward&amp;mdash;most of the time, when I switch these out, I remove the pipe &lt;code>%&amp;gt;%&lt;/code> as well.&lt;/p>
&lt;h4 id="filter">&lt;code>filter()&lt;/code>
&lt;a href="#filter">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h4>&lt;p>The dplyr code:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>mtcars_tbl&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/filter.html'>filter&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>hp&lt;/span> &lt;span class='o'>&amp;gt;&lt;/span> &lt;span class='m'>100&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>&amp;hellip;can be replaced by:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_slice.html'>vec_slice&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>hp&lt;/span> &lt;span class='o'>&amp;gt;&lt;/span> &lt;span class='m'>100&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Note that the second argument that determines which rows to keep requires you to actually pass the column &lt;code>mtcars_tbl$hp&lt;/code> rather than its reference &lt;code>hp&lt;/code>. If you feel cozier with square brackets, you can also use &lt;code>[.tbl_df&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>hp&lt;/span> &lt;span class='o'>&amp;gt;&lt;/span> &lt;span class='m'>100&lt;/span>, &lt;span class='o'>]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>&lt;code>[.tbl_df&lt;/code> is the
&lt;a href="https://tibble.tidyverse.org/reference/subsetting.html" target="_blank" rel="noopener">method for subsetting with a single square bracket when applied to tibbles&lt;/a>. Tibbles have their own methods for extracting and replacing subsets of data frames. They generally behave similarly to the analogous methods for &lt;code>data.frame&lt;/code>s, but have small differences to improve consistency and safety.&lt;/p>
&lt;p>The benchmarks for these different approaches are:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>res&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> dplyr &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/filter.html'>filter&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>hp&lt;/span> &lt;span class='o'>&amp;gt;&lt;/span> &lt;span class='m'>100&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> vctrs &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_slice.html'>vec_slice&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>hp&lt;/span> &lt;span class='o'>&amp;gt;&lt;/span> &lt;span class='m'>100&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> `[.tbl_df` &lt;span class='o'>=&lt;/span> &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>hp&lt;/span> &lt;span class='o'>&amp;gt;&lt;/span> &lt;span class='m'>100&lt;/span>, &lt;span class='o'>]&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>res&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 3 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> dplyr 289.93µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> vctrs 4.63µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> [.tbl_df 23.74µs&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The bigger picture of benchmarking is worth re-iterating here. While the &lt;code>filter()&lt;/code> approach was by far the slowest expression of the three, it still only took 290µs&amp;mdash;able to complete 3449 iterations in a second. If I&amp;rsquo;m interactively analyzing data, I won&amp;rsquo;t even notice the difference in evaluation time between these expressions, let alone care about it; the benefits of expressiveness and safety that &lt;code>filter()&lt;/code> provide far outweigh the drawback of this slowdown. If &lt;code>filter()&lt;/code> is called 3449 times in the backend of a machine learning pipeline, though, these alternatives may be worth transitioning to.&lt;/p>
&lt;p>Some examples of changes like this made to tidymodels packages:
&lt;a href="https://github.com/tidymodels/parsnip/pull/935" target="_blank" rel="noopener">tidymodels/parsnip#935&lt;/a>,
&lt;a href="https://github.com/tidymodels/parsnip/pull/933" target="_blank" rel="noopener">tidymodels/parsnip#933&lt;/a>,
&lt;a href="https://github.com/tidymodels/parsnip/pull/901" target="_blank" rel="noopener">tidymodels/parsnip#901&lt;/a>.&lt;/p>
&lt;h4 id="mutate">&lt;code>mutate()&lt;/code>
&lt;a href="#mutate">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h4>&lt;p>The dplyr code:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>mtcars_tbl&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/mutate.html'>mutate&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, year &lt;span class='o'>=&lt;/span> &lt;span class='m'>1974L&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>&amp;hellip;can be replaced by:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>year&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='m'>1974L&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>&amp;hellip;with benchmarks:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> dplyr &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/mutate.html'>mutate&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, year &lt;span class='o'>=&lt;/span> &lt;span class='m'>1974L&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> `$&amp;lt;-.tbl_df` &lt;span class='o'>=&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>year&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='m'>1974L&lt;/span>; &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>&amp;#125;&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 2 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> dplyr 302.5µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> $&amp;lt;-.tbl_df 12.8µs&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>By default, both &lt;code>mutate()&lt;/code> and &lt;code>$&amp;lt;-.tbl_df&lt;/code> append the new column at the right-most position. The &lt;code>.before&lt;/code> and &lt;code>.after&lt;/code> arguments to &lt;code>mutate()&lt;/code> are a really nice interface to adjust that behavior, and I miss it often when using &lt;code>$&amp;lt;-.tbl_df&lt;/code>. In those cases, &lt;code>select()&lt;/code> and its alternatives (see next section!) can be helpful.&lt;/p>
&lt;p>Some examples of changes like this made to tidymodels packages:
&lt;a href="https://github.com/tidymodels/parsnip/pull/933" target="_blank" rel="noopener">tidymodels/parsnip#933&lt;/a>,
&lt;a href="https://github.com/tidymodels/parsnip/pull/921" target="_blank" rel="noopener">tidymodels/parsnip#921&lt;/a>, and
&lt;a href="https://github.com/tidymodels/parsnip/pull/901" target="_blank" rel="noopener">tidymodels/parsnip#901&lt;/a>.&lt;/p>
&lt;h4 id="select">&lt;code>select()&lt;/code>
&lt;a href="#select">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h4>&lt;p>The dplyr code:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>hp&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>&amp;hellip;can be replaced by:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='s'>"hp"&lt;/span>&lt;span class='o'>]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>&amp;hellip;with benchmarks:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> dplyr &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>hp&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> `[.tbl_df` &lt;span class='o'>=&lt;/span> &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='s'>"hp"&lt;/span>&lt;span class='o'>]&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 2 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> dplyr 527.01µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> [.tbl_df 8.08µs&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Of course, the nice part about &lt;code>select()&lt;/code>, and something we make use of in tidymodels quite a bit, is tidyselect. I&amp;rsquo;ve often found that we lean heavily on selecting via external vectors, i.e. character vectors, i.e. things that can be inputted to &lt;code>[.tbl_df&lt;/code> directly. That is:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>cols&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"hp"&lt;/span>, &lt;span class='s'>"wt"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> dplyr &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nf'>&lt;a href='https://tidyselect.r-lib.org/reference/all_of.html'>all_of&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>cols&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> `[.tbl_df` &lt;span class='o'>=&lt;/span> &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='nv'>cols&lt;/span>&lt;span class='o'>]&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 2 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> dplyr 548.74µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> [.tbl_df 8.53µs&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Note that &lt;code>[.tbl_df&lt;/code> always sets &lt;code>drop = FALSE&lt;/code>.&lt;/p>
&lt;p>&lt;code>[.tbl_df&lt;/code> can also be used as an alternative interface to &lt;code>select()&lt;/code> or &lt;code>relocate()&lt;/code> with a &lt;code>.before&lt;/code> or &lt;code>.after&lt;/code> argument. For instance, to place that column &lt;code>year&lt;/code> we made in the last section as the second column, we could write:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>left_cols&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"make_model"&lt;/span>, &lt;span class='s'>"year"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>left_cols&lt;/span>, &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/setops.html'>setdiff&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/colnames.html'>colnames&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>left_cols&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>No, thanks, but it is a good bit faster than tidyselect-based alternatives:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> mutate &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/mutate.html'>mutate&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, year &lt;span class='o'>=&lt;/span> &lt;span class='m'>1974L&lt;/span>, .after &lt;span class='o'>=&lt;/span> &lt;span class='nv'>make_model&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> relocate &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/relocate.html'>relocate&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>year&lt;/span>, .after &lt;span class='o'>=&lt;/span> &lt;span class='nv'>make_model&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> `[.tbl_df` &lt;span class='o'>=&lt;/span> &lt;/span>
&lt;span> &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>left_cols&lt;/span>, &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/colnames.html'>colnames&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='o'>!&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/colnames.html'>colnames&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://rdrr.io/r/base/match.html'>%in%&lt;/a>&lt;/span> &lt;span class='nv'>left_cols&lt;/span>&lt;span class='o'>]&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>]&lt;/span>,&lt;/span>
&lt;span> check &lt;span class='o'>=&lt;/span> &lt;span class='kc'>FALSE&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 3 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> mutate 1.2ms&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> relocate 804.3µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> [.tbl_df 19.1µs&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Some examples of changes like this made to tidymodels packages:
&lt;a href="https://github.com/tidymodels/parsnip/pull/935" target="_blank" rel="noopener">tidymodels/parsnip#935&lt;/a>,
&lt;a href="https://github.com/tidymodels/parsnip/pull/933" target="_blank" rel="noopener">tidymodels/parsnip#933&lt;/a>,
&lt;a href="https://github.com/tidymodels/parsnip/pull/921" target="_blank" rel="noopener">tidymodels/parsnip#921&lt;/a>, and
&lt;a href="https://github.com/tidymodels/tune/pull/635" target="_blank" rel="noopener">tidymodels/tune#635&lt;/a>.&lt;/p>
&lt;h4 id="pull">&lt;code>pull()&lt;/code>
&lt;a href="#pull">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h4>&lt;p>The dplyr code:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/pull.html'>pull&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>hp&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>&amp;hellip;can be replaced by:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>hp&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>&amp;hellip;or:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[[&lt;/span>&lt;span class='s'>"hp"&lt;/span>&lt;span class='o'>]&lt;/span>&lt;span class='o'>]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Note that, for tibbles, &lt;code>$&lt;/code> will raise a warning if the subsetted column doesn&amp;rsquo;t exist, while &lt;code>[[&lt;/code> will silently return &lt;code>NULL&lt;/code>.&lt;/p>
&lt;p>With benchmarks:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> dplyr &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/pull.html'>pull&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>hp&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> `$.tbl_df` &lt;span class='o'>=&lt;/span> &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>hp&lt;/span>,&lt;/span>
&lt;span> `[[.tbl_df` &lt;span class='o'>=&lt;/span> &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[[&lt;/span>&lt;span class='s'>"hp"&lt;/span>&lt;span class='o'>]&lt;/span>&lt;span class='o'>]&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 3 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> dplyr 101.19µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> $.tbl_df 615.02ns&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> [[.tbl_df 2.25µs&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Some examples of changes like this made to tidymodels packages:
&lt;a href="https://github.com/tidymodels/parsnip/pull/935" target="_blank" rel="noopener">tidymodels/parsnip#935&lt;/a> and
&lt;a href="https://github.com/tidymodels/tune/pull/635" target="_blank" rel="noopener">tidymodels/tune#635&lt;/a>.&lt;/p>
&lt;h4 id="bind_">&lt;code>bind_*()&lt;/code>
&lt;a href="#bind_">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h4>&lt;p>&lt;code>bind_rows()&lt;/code> and &lt;code>bind_cols()&lt;/code> can be substituted for &lt;code>vec_rbind()&lt;/code> and &lt;code>vec_cbind()&lt;/code>, respectively. First, row-binding:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> dplyr &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/bind_rows.html'>bind_rows&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> vctrs &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_bind.html'>vec_rbind&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 2 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> dplyr 44µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> vctrs 14.3µs&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>As for column-binding:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>tbl&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://tibble.tidyverse.org/reference/tibble.html'>tibble&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>year &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/rep.html'>rep&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1974L&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/nrow.html'>nrow&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> dplyr &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/bind_cols.html'>bind_cols&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>tbl&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> vctrs &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_bind.html'>vec_cbind&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>tbl&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 2 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> dplyr 60.7µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> vctrs 26.2µs&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Some examples of changes like this made to tidymodels packages:
&lt;a href="https://github.com/tidymodels/tune/pull/636" target="_blank" rel="noopener">tidymodels/tune#636&lt;/a>.&lt;/p>
&lt;h4 id="grouping">Grouping
&lt;a href="#grouping">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h4>&lt;p>In general, the introduction of groups makes these substitutions much trickier. In those cases, it&amp;rsquo;s likely best to weigh (via profiling) how significant the slowdown is and, if it&amp;rsquo;s not too bad, opt not to make any changes. For code that relies on &lt;code>group_by()&lt;/code> and sees heavy traffic, see &lt;code>vctrs::list_unchop()&lt;/code>, &lt;code>vctrs::vec_chop()&lt;/code>, and &lt;code>vctrs::vec_rep_each()&lt;/code>.&lt;/p>
&lt;h3 id="tibbles">Tibbles
&lt;a href="#tibbles">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Tibbles are great, and I don&amp;rsquo;t want to interface with any other data frame-y thing. Some notes:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>as_tibble()&lt;/code> on a tibble is not &amp;ldquo;free&amp;rdquo;:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> on_tbl_df &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://tibble.tidyverse.org/reference/as_tibble.html'>as_tibble&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> on_data.frame &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://tibble.tidyverse.org/reference/as_tibble.html'>as_tibble&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars&lt;/span>, rownames &lt;span class='o'>=&lt;/span> &lt;span class='s'>"make_model"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 2 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> on_tbl_df 51.2µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> on_data.frame 238.6µs&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Note that the time to coerce data frames and tibbles doesn&amp;rsquo;t depend on the size of the data being coerced, in most situations.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Building a tibble from scratch using &lt;code>tibble()&lt;/code> actually takes quite a while as well. &lt;code>tibble()&lt;/code> handles vector recycling and name checking, builds columns sequentially, all that good stuff. If you need that, use &lt;code>tibble()&lt;/code>, but if you&amp;rsquo;re building a tibble from well-understood inputs, use &lt;code>new_tibble()&lt;/code>, which minimizes validation checks. For a middle ground between &lt;code>tibble()&lt;/code> and &lt;code>new_tibble(list())&lt;/code> in terms of both performance and safety, use the &lt;code>df_list()&lt;/code> function from the vctrs package in place of &lt;code>list()&lt;/code>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> tibble &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://tibble.tidyverse.org/reference/tibble.html'>tibble&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>a &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>2&lt;/span>, b &lt;span class='o'>=&lt;/span> &lt;span class='m'>3&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>4&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> new_tibble_df_list &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://tibble.tidyverse.org/reference/new_tibble.html'>new_tibble&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/df_list.html'>df_list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>a &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>2&lt;/span>, b &lt;span class='o'>=&lt;/span> &lt;span class='m'>3&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>4&lt;/span>&lt;span class='o'>)&lt;/span>, nrow &lt;span class='o'>=&lt;/span> &lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> new_tibble_list &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://tibble.tidyverse.org/reference/new_tibble.html'>new_tibble&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>a &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>2&lt;/span>, b &lt;span class='o'>=&lt;/span> &lt;span class='m'>3&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>4&lt;/span>&lt;span class='o'>)&lt;/span>, nrow &lt;span class='o'>=&lt;/span> &lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 3 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> tibble 165.97µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> new_tibble_df_list 16.69µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> new_tibble_list 4.96µs&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Note that &lt;code>new_tibble()&lt;/code> &lt;em>will not check the lengths of its inputs.&lt;/em> Carry out simple recycling yourself, and be sure to use the &lt;code>nrow&lt;/code> argument to get basic length checks.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Some examples of changes like this made to tidymodels packages:
&lt;a href="https://github.com/tidymodels/parsnip/pull/932" target="_blank" rel="noopener">tidymodels/parsnip#945&lt;/a>,
&lt;a href="https://github.com/tidymodels/parsnip/pull/934" target="_blank" rel="noopener">tidymodels/parsnip#934&lt;/a>,
&lt;a href="https://github.com/tidymodels/parsnip/pull/929" target="_blank" rel="noopener">tidymodels/parsnip#929&lt;/a>,
&lt;a href="https://github.com/tidymodels/parsnip/pull/923" target="_blank" rel="noopener">tidymodels/parsnip#923&lt;/a>,
&lt;a href="https://github.com/tidymodels/parsnip/pull/902" target="_blank" rel="noopener">tidymodels/parsnip#902&lt;/a>,
&lt;a href="https://github.com/tidymodels/dials/pull/277" target="_blank" rel="noopener">tidymodels/dials#277&lt;/a>, and
&lt;a href="https://github.com/tidymodels/tune/pull/637" target="_blank" rel="noopener">tidymodels/tune#637&lt;/a>.&lt;/p>
&lt;h3 id="becoming-join-critical">Becoming join-critical
&lt;a href="#becoming-join-critical">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Two truths:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>dplyr joins are a remarkably safe and powerful way to synthesize data sources.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>One ought to ask themselves &amp;ldquo;does this really need to be a join?&amp;rdquo; when combining data sources in package code.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Some ways to intuit about join efficiency:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>If this join happens multiple times, is it possible to express it as one join and then subset it when needed? i.e. if a join happens inside of a loop but the elements of the join are not indices of the loop, it&amp;rsquo;s likely possible to pull that join outside of the loop and then &lt;code>vec_slice()&lt;/code> its results inside of the loop.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Am I using the complete outputted join result or just a portion? If I end up only making use of column names, or values in one column (as with joins approximating
&lt;a href="https://adv-r.hadley.nz/subsetting.html?q=lookup#lookup-tables" target="_blank" rel="noopener">lookup tables&lt;/a>), or pairings between two columns, I may be able to instead use &lt;code>$.tbl_df&lt;/code> or &lt;code>[.tbl_df&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>As an example, imagine we have another tibble that tells us additional information about the &lt;code>make_model&lt;/code>s that I&amp;rsquo;ve driven:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>my_cars&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://tibble.tidyverse.org/reference/tibble.html'>tibble&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> make_model &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Honda Civic"&lt;/span>, &lt;span class='s'>"Subaru Forester"&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> color &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Grey"&lt;/span>, &lt;span class='s'>"White"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>my_cars&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 2 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; make_model color&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> Honda Civic Grey &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> Subaru Forester White&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>I &lt;em>could&lt;/em> use a join to subset down to cars in &lt;code>mtcars_tbl&lt;/code> and add this information on the cars I&amp;rsquo;ve driven:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/mutate-joins.html'>inner_join&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>my_cars&lt;/span>, &lt;span class='s'>"make_model"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 1 × 13&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; make_model mpg cyl disp hp drat wt qsec vs am gear carb&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> Honda Civic 30.4 4 75.7 52 4.93 1.62 18.5 1 1 4 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># ℹ 1 more variable: color &amp;lt;chr&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Another way to express this, though, if I can safely assume that each of my cars would have only one or zero matches in &lt;code>mtcars_tbl&lt;/code>, is to find entries in &lt;code>mtcars_tbl$make_model&lt;/code> that match entries in &lt;code>my_cars$make_model&lt;/code>, subset down to those matches, and then bind columns:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>supplement_my_cars&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='kr'>function&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>&lt;/span>
&lt;span> &lt;span class='c'># locate matches, assuming only 0 or 1 matches possible&lt;/span>&lt;/span>
&lt;span> &lt;span class='nv'>loc&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_match.html'>vec_match&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>my_cars&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>make_model&lt;/span>, &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>make_model&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;/span>
&lt;span> &lt;span class='c'># keep only the matches&lt;/span>&lt;/span>
&lt;span> &lt;span class='nv'>loc_mine&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/which.html'>which&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>!&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/NA.html'>is.na&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>loc&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;span class='nv'>loc_mtcars&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_slice.html'>vec_slice&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>loc&lt;/span>, &lt;span class='o'>!&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/NA.html'>is.na&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>loc&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;/span>
&lt;span> &lt;span class='c'># drop duplicated join column&lt;/span>&lt;/span>
&lt;span> &lt;span class='nv'>my_cars_join&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>my_cars&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/setops.html'>setdiff&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/names.html'>names&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>my_cars&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='s'>"make_model"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>]&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_bind.html'>vec_cbind&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_slice.html'>vec_slice&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>loc_mtcars&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_slice.html'>vec_slice&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>my_cars_join&lt;/span>, &lt;span class='nv'>loc_mine&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>&amp;#125;&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>supplement_my_cars&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 1 × 13&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; make_model mpg cyl disp hp drat wt qsec vs am gear carb&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> Honda Civic 30.4 4 75.7 52 4.93 1.62 18.5 1 1 4 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># ℹ 1 more variable: color &amp;lt;chr&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This is indeed quite a bit faster:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> inner_join &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/mutate-joins.html'>inner_join&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, &lt;span class='nv'>my_cars&lt;/span>, &lt;span class='s'>"make_model"&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> manual &lt;span class='o'>=&lt;/span> &lt;span class='nf'>supplement_my_cars&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 2 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> inner_join 438µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> manual 50.7µs&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>At the same time, if either of these problems were even a little bit more complex, e.g. if there were possibly multiple matching &lt;code>make_models&lt;/code> in &lt;code>mtcars_tbl&lt;/code> or if I wanted to keep all rows in &lt;code>mtcars_tbl&lt;/code> regardless of whether I had driven the car, then expressing this join with more bare-bones operations quickly becomes less readable and more error-prone. In those cases, too, joins in dplyr have a relatively small amount of overhead when compared to the vctrs backends underlying them. So, optimize carefully!&lt;/p>
&lt;p>Some examples of writing out joins in tidymodels packages:
&lt;a href="https://github.com/tidymodels/parsnip/pull/932" target="_blank" rel="noopener">tidymodels/parsnip#932&lt;/a>,
&lt;a href="https://github.com/tidymodels/parsnip/pull/931" target="_blank" rel="noopener">tidymodels/parsnip#931&lt;/a>,
&lt;a href="https://github.com/tidymodels/parsnip/pull/921" target="_blank" rel="noopener">tidymodels/parsnip#921&lt;/a>, and
&lt;a href="https://github.com/tidymodels/recipes/pull/1121" target="_blank" rel="noopener">tidymodels/recipes#1121&lt;/a>.&lt;/p>
&lt;h3 id="nest">&lt;code>nest()&lt;/code>
&lt;a href="#nest">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>&lt;code>nest()&lt;/code>s are subject to similar considerations as joins. When they allow for expressive or principled user interfaces, use them, but manipulate them sparingly in backends. Writing out &lt;code>nest()&lt;/code> calls &lt;em>can&lt;/em> result in substantial speedups, though, and the process is not quite as gnarly as writing out a join. For code that relies on &lt;code>nest()&lt;/code>s and sees heavy traffic, rewriting with vctrs may be worth the effort.&lt;/p>
&lt;p>For example, consider nesting &lt;code>mtcars_tbl&lt;/code> by &lt;code>cyl&lt;/code> and &lt;code>am&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://tidyr.tidyverse.org/reference/nest.html'>nest&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, .by &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>cyl&lt;/span>, &lt;span class='nv'>am&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 6 × 3&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; cyl am data &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> 6 1 &lt;span style='color: #555555;'>&amp;lt;tibble [3 × 10]&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> 4 1 &lt;span style='color: #555555;'>&amp;lt;tibble [8 × 10]&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> 6 0 &lt;span style='color: #555555;'>&amp;lt;tibble [4 × 10]&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>4&lt;/span> 8 0 &lt;span style='color: #555555;'>&amp;lt;tibble [12 × 10]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>5&lt;/span> 4 0 &lt;span style='color: #555555;'>&amp;lt;tibble [3 × 10]&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>6&lt;/span> 8 1 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 10]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>For some basic nests, &lt;code>vec_split()&lt;/code> can do the trick.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>nest_cols&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"cyl"&lt;/span>, &lt;span class='s'>"am"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>res&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_split.html'>vec_split&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/setops.html'>setdiff&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/colnames.html'>colnames&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>nest_cols&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>]&lt;/span>,&lt;/span>
&lt;span> by &lt;span class='o'>=&lt;/span> &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='nv'>nest_cols&lt;/span>&lt;span class='o'>]&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_bind.html'>vec_cbind&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>res&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>key&lt;/span>, &lt;span class='nf'>&lt;a href='https://tibble.tidyverse.org/reference/new_tibble.html'>new_tibble&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>res&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>val&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 6 × 3&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; cyl am data &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> 6 1 &lt;span style='color: #555555;'>&amp;lt;tibble [3 × 10]&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> 4 1 &lt;span style='color: #555555;'>&amp;lt;tibble [8 × 10]&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> 6 0 &lt;span style='color: #555555;'>&amp;lt;tibble [4 × 10]&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>4&lt;/span> 8 0 &lt;span style='color: #555555;'>&amp;lt;tibble [12 × 10]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>5&lt;/span> 4 0 &lt;span style='color: #555555;'>&amp;lt;tibble [3 × 10]&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>6&lt;/span> 8 1 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 10]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The performance improvement in these situations can be quite substantial:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> nest &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://tidyr.tidyverse.org/reference/nest.html'>nest&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>, .by &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>cyl&lt;/span>, &lt;span class='nv'>am&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> vctrs &lt;span class='o'>=&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nv'>res&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_split.html'>vec_split&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/setops.html'>setdiff&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/colnames.html'>colnames&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>nest_cols&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>]&lt;/span>,&lt;/span>
&lt;span> by &lt;span class='o'>=&lt;/span> &lt;span class='nv'>mtcars_tbl&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='nv'>nest_cols&lt;/span>&lt;span class='o'>]&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_bind.html'>vec_cbind&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>res&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>key&lt;/span>, &lt;span class='nf'>&lt;a href='https://tibble.tidyverse.org/reference/new_tibble.html'>new_tibble&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>res&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>val&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>&amp;#125;&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 2 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> nest 1.81ms&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> vctrs 67.61µs&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>More complex nests require a good bit of facility with the vctrs package. &lt;code>vec_split()&lt;/code>, &lt;code>list_unchop()&lt;/code>, and &lt;code>vec_chop()&lt;/code> are all good places to start, and these examples of writing out nests in tidymodels packages make use of other vctrs patterns:
&lt;a href="https://github.com/tidymodels/tune/pull/657" target="_blank" rel="noopener">tidymodels/tune#657&lt;/a>,
&lt;a href="https://github.com/tidymodels/tune/pull/656" target="_blank" rel="noopener">tidymodels/tune#657&lt;/a>,
&lt;a href="https://github.com/tidymodels/tune/pull/640" target="_blank" rel="noopener">tidymodels/tune#640&lt;/a>, and
&lt;a href="https://github.com/tidymodels/recipes/pull/1121" target="_blank" rel="noopener">tidymodels/recipes#1121&lt;/a>.&lt;/p>
&lt;h3 id="combining-strings">Combining strings
&lt;a href="#combining-strings">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The glue package is super helpful for writing expressive and correct strings with data, though it is quite a bit slower than &lt;code>paste0()&lt;/code>. At the same time, &lt;code>paste0()&lt;/code> has some tricky recycling behavior. For a middle ground in terms of both performance and safety, this short wrapper has been quite helpful:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>vec_paste0&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='kr'>function&lt;/span> &lt;span class='o'>(&lt;/span>&lt;span class='nv'>...&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nv'>args&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://vctrs.r-lib.org/reference/vec_recycle.html'>vec_recycle_common&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>...&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rlang.r-lib.org/reference/exec.html'>exec&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>paste0&lt;/span>, &lt;span class='o'>!&lt;/span>&lt;span class='o'>!&lt;/span>&lt;span class='o'>!&lt;/span>&lt;span class='nv'>args&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>&amp;#125;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>name&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='s'>"Simon"&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>bench&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://bench.r-lib.org/reference/mark.html'>mark&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> glue &lt;span class='o'>=&lt;/span> &lt;span class='nf'>glue&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://glue.tidyverse.org/reference/glue.html'>glue&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"My name is &amp;#123;name&amp;#125;."&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> vec_paste0 &lt;span class='o'>=&lt;/span> &lt;span class='nf'>vec_paste0&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"My name is "&lt;/span>, &lt;span class='nv'>name&lt;/span>, &lt;span class='s'>"."&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> paste0 &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/paste.html'>paste0&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"My name is "&lt;/span>, &lt;span class='nv'>name&lt;/span>, &lt;span class='s'>"."&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> check &lt;span class='o'>=&lt;/span> &lt;span class='kc'>FALSE&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/select.html'>select&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>expression&lt;/span>, &lt;span class='nv'>median&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 3 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; expression median&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:expr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;bch:tm&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> glue 38.99µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> vec_paste0 3.98µs&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> paste0 861.01ns&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>My rule of thumb is to use &lt;code>glue()&lt;/code> for errors, when the function will stop executing anyway. For simple pastes that are intended to be called repeatedly, use &lt;code>vec_paste0()&lt;/code>. There&amp;rsquo;s a lot of gray area in between those two contexts&amp;mdash;intuit (or profile) as you will.&lt;/p>
&lt;h2 id="wrapping-up">Wrapping up
&lt;a href="#wrapping-up">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>This post contains a number of tricks that offer especially performant alternatives to interfaces from dplyr and tidyr. Making use of these backend tools is certainly a trade-off; what is gained in computational performance is also offset by a decline in readability and safety, so developers ought to consider carefully when optimizations are worth the effort and risk.&lt;/p>
&lt;p>Thanks to Davis Vaughan for the guidance in getting started with vctrs. Also, thanks to both Davis Vaughan and Lionel Henry for their efforts in helping the tidymodels team address the bottlenecks that have been surfaced by our work on optimizations in tidyverse packages.&lt;/p></description></item><item><title>New CRAN requirements for packages with C and C++</title><link>https://www.tidyverse.org/blog/2023/03/cran-checks-compiled-code/</link><pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2023/03/cran-checks-compiled-code/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [ ] `Add intro sentence, e.g. the standard tagline for the package
* [ ] `usethis::use_tidy_thanks()`
-->
&lt;p>The R package landscape is dynamic, with changes in infrastructure common, especially when CRAN makes changes to their policies and requirements. This is particularly true for packages that include low-level compiled code, requiring developers to be nimble in responding to these changes.&lt;/p>
&lt;p>The tidyverse team at Posit is in the unique situation where we have a concentration of developers working full-time on creating and maintaining open source packages. This internal community provides the opportunity to collaborate to develop shared practices and discover solutions to problems that arise. When we can, we like to share what we&amp;rsquo;ve learned so other developers can benefit.&lt;/p>
&lt;p>There have been a few recent changes at CRAN for packages containing C and C++ code that developers have had to adapt to, and we would like to share some of our learning:&lt;/p>
&lt;h2 id="note-regarding-systemrequirements-c11">NOTE regarding &lt;code>SystemRequirements: C++11&lt;/code>
&lt;a href="#note-regarding-systemrequirements-c11">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Many package authors might have noticed a new NOTE on R-devel when submitting a package to CRAN containing C++ code:&lt;/p>
&lt;pre>&lt;code>* checking C++ specification ...
NOTE Specified C++11: please drop specification unless essential
&lt;/code>&lt;/pre>
&lt;p>This NOTE is now appearing during &lt;code>R CMD check&lt;/code> on R-devel for packages where the DESCRIPTION file has the following:&lt;/p>
&lt;pre>&lt;code>SystemRequirements: C++11
&lt;/code>&lt;/pre>
&lt;p>Packages that use C++11 would also usually have set &lt;code>CXX_STD=CXX11&lt;/code> in the &lt;code>src/Makevars&lt;/code> and &lt;code>src/Makevars.win&lt;/code> files (and &lt;code>src/Makevars.ucrt&lt;/code>, if present). These specifications tell R to use the C++11 standard when compiling the code.&lt;/p>
&lt;p>To understand the NOTE, a bit of history will be helpful (thanks to Winston Chang for
&lt;a href="https://gist.github.com/wch/849ca79c9416795d99c48cc06a44ca1e" target="_blank" rel="noopener">writing this up&lt;/a>):&lt;/p>
&lt;ul>
&lt;li>In R 3.5 and below, on systems with an old compiler, R would default to using the C++98 standard when compiling the code. If a package needed a C++11 compiler, the DESCRIPTION file needed to have &lt;code>SystemRequirements: C++11&lt;/code>, and the various &lt;code>src/Makevars*&lt;/code> files needed to set &lt;code>CXX_STD=CXX11&lt;/code>.&lt;/li>
&lt;li>In R 3.6.2, R began defaulting to compiling packages with the C++11 standard, as long as the compiler supported C++11 (which was true on most systems).&lt;/li>
&lt;li>In R 4.0, C++11 became the minimum supported compiler, so &lt;code>SystemRequirements: C++11&lt;/code> was no longer necessary.&lt;/li>
&lt;li>In (the forthcoming) R 4.3, the
&lt;a href="https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2023/01/27#n2023-01-27" target="_blank" rel="noopener">default C++ standard is C++17&lt;/a> where available. &lt;code>R CMD check&lt;/code> now
&lt;a href="https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2023/01/31" target="_blank" rel="noopener">raises a NOTE&lt;/a> if anything older than the default is specified in &lt;code>SystemRequirements:&lt;/code> or &lt;code>CXX_STD&lt;/code> in the various &lt;code>src/Makevars*&lt;/code> files. This NOTE will block submission to CRAN &amp;mdash; if the standard you specify is necessary for your package you will likely need to explain why.&lt;/li>
&lt;/ul>
&lt;h3 id="how-to-fix-it">How to fix it
&lt;a href="#how-to-fix-it">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ol>
&lt;li>Edit the DESCRIPTION file and remove &lt;code>SystemRequirements: C++11&lt;/code>.&lt;/li>
&lt;li>Edit &lt;code>src/Makevars&lt;/code>, &lt;code>src/Makevars.win&lt;/code>, and &lt;code>src/Makevars.ucrt&lt;/code> and remove &lt;code>CXX_STD=CXX11&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>After making these changes, the package should install without trouble on R 3.6 and above. It may not build on R &amp;lt;= 3.5 on systems with very old compilers, though it is likely that the vast majority of users will have a newer version of R and/or have recent enough compilers. If you want to be confident that your package will be installable on R 3.5 and below with old compilers, there are several options; we offer two of the simplest approaches here:&lt;/p>
&lt;ul>
&lt;li>You can use a configure script at the top level of the package, and have it add &lt;code>CXX_STD=CXX11&lt;/code> for R 3.5 and below. An example (unmerged)
&lt;a href="https://github.com/tidyverse/readxl/pull/722/files" target="_blank" rel="noopener">pull request to the readxl&lt;/a> package demonstrates this approach. You will also need to add &lt;code>Biarch: true&lt;/code> in your DESCRIPTION file. This appears to be the approach preferred by CRAN.&lt;/li>
&lt;li>For users with R &amp;lt;= 3.5 on a system with an older compiler, package authors can instruct users to edit their &lt;code>~/.R/Makevars&lt;/code> file to include this line: &lt;code>CXX_STD=CXX11&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>The tidyverse has a
&lt;a href="https://www.tidyverse.org/blog/2019/04/r-version-support/" target="_blank" rel="noopener">policy of supporting four previous versions&lt;/a> of R. Currently that includes R 3.5, but with the upcoming release of R 4.3 (which should be this Spring some time) the minimum version we will support is R 3.6. As we won&amp;rsquo;t be supporting R 3.5 in the near future, you should not feel pressured to either.&lt;/p>
&lt;h2 id="warning-regarding-the-use-of-codesprintfcode-in-cc">WARNING regarding the use of &lt;code>sprintf()&lt;/code> in C/C++
&lt;a href="#warning-regarding-the-use-of-codesprintfcode-in-cc">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Another recent change in CRAN checks on R-devel that authors might encounter is the disallowing of the use of the C functions &lt;code>sprintf()&lt;/code> and &lt;code>vsprintf()&lt;/code>. &lt;code>R CMD check&lt;/code> on R-devel may throw warnings that look something like this:&lt;/p>
&lt;pre>&lt;code>checking compiled code ... WARNING
File 'fs/libs/fs.so':
Found 'sprintf', possibly from 'sprintf' (C)
Object: 'file.o'
Compiled code should not call entry points which might
terminate R nor write to stdout/stderr instead of to the
console, nor use Fortran I/O nor system RNGs nor [v]sprintf.
See 'Writing portable packages' in the 'Writing R Extensions' manual.
&lt;/code>&lt;/pre>
&lt;p>According to the
&lt;a href="https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2022/12/24#n2022-12-24" target="_blank" rel="noopener">NEWS for R-devel&lt;/a> (which will be R 4.3):&lt;/p>
&lt;blockquote>
&lt;p>The use of sprintf and vsprintf from C/C++ has been deprecated in macOS 13 and is a known security risk. &lt;code>R CMD check&lt;/code> now reports (on all platforms) if their use is found in compiled code: replace by snprintf or vsnprintf respectively.&lt;/p>
&lt;/blockquote>
&lt;p>These are considered to be a security risk because they potentially allow
&lt;a href="https://en.wikipedia.org/wiki/Buffer_overflow" target="_blank" rel="noopener">buffer overflows&lt;/a> that write more bytes than are available in the output buffer. This is a risk if the text that is being passed to &lt;code>sprintf()&lt;/code> comes from an uncontrolled source.&lt;/p>
&lt;p>Here is a very simple example:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://cpp11.r-lib.org'>cpp11&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://cpp11.r-lib.org/reference/cpp_source.html'>cpp_function&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>'&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> int say_height(int height) &amp;#123;&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> // "My height is xxx cm" is 19 characters but we need&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> // to add one for the null-terminator&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> char out[19 + 1];&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> int n;&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> n = sprintf(out, "My height is %i cm", height);&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> Rprintf(out);&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> return n;&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> &amp;#125;&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'>'&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>say_height&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>182&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; My height is 182 cm&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; [1] 19&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>say_height&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1824&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='c'># This will abort due to buffer overflow&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="how-to-fix-it-1">How to fix it
&lt;a href="#how-to-fix-it-1">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>In most cases, this should be a simple fix: replace &lt;code>sprintf()&lt;/code> with &lt;code>snprintf()&lt;/code> and &lt;code>vsprintf()&lt;/code> with &lt;code>vsnprintf()&lt;/code>. These &lt;code>n&lt;/code> variants take a second parameter &lt;code>size&lt;/code>, that specifies the maximum number of bytes to be written, &lt;em>including the automatically appended null-terminator&lt;/em>. If the output is a static buffer, you can use &lt;code>sizeof()&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://cpp11.r-lib.org/reference/cpp_source.html'>cpp_function&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>'&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> int say_height_safely(int height) &amp;#123;&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> // "My height is xxx cm\\n" is 20 characters but we need &lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> // to add one for the null-terminator&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> char out[20 + 1];&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> int n;&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> n = snprintf(out, sizeof(out), "My height is %i cm\\n", height);&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> Rprintf(out);&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> return n;&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'> &amp;#125;&lt;/span>&lt;/span>
&lt;span>&lt;span class='s'>'&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>say_height_safely&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>182&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; My height is 182 cm&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; [1] 20&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nf'>say_height_safely&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1824567&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; My height is 1824567&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; [1] 24&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Notice that the return value of &lt;code>sprintf()&lt;/code> and &lt;code>snprintf()&lt;/code> are slightly different. &lt;code>sprintf()&lt;/code> returns the total number of characters written (excluding the null-terminator), while &lt;code>snprintf()&lt;/code> returns the length of the formatted string, whether or not it has been truncated to match &lt;code>size&lt;/code>.&lt;/p>
&lt;p>It is a bit trickier if the destination is not a static buffer, so you&amp;rsquo;ll have to determine the maximum &lt;code>size&lt;/code> by carefully thinking about the code.&lt;/p>
&lt;h2 id="warning-regarding-the-use-of-strict-prototypes-in-c">WARNING regarding the use of strict prototypes in C
&lt;a href="#warning-regarding-the-use-of-strict-prototypes-in-c">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Many maintainers with packages containing C code have also been getting hit with this warning:&lt;/p>
&lt;pre>&lt;code>warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
&lt;/code>&lt;/pre>
&lt;p>This usually comes from C function declarations that look like this, with no arguments specified (which is very common):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">myfun&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This new warning is because CRAN is now running checks on R-devel with the &lt;code>-Wstrict-prototypes&lt;/code> compiler flag set. In R we define functions that take no arguments with &lt;code>myfun &amp;lt;- function() {...}&lt;/code> all the time. In C, with this flag set, the fact that a function takes no arguments must be explicitly stated (i.e., the arguments list cannot be empty). In the upcoming C23 standard, empty function signatures will be considered valid and not ambiguous, however at this point it is likely to be the reason you encounter this warning from CRAN.&lt;/p>
&lt;h3 id="how-to-fix-it-2">How to fix it
&lt;a href="#how-to-fix-it-2">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>This can be fixed by placing the &lt;code>void&lt;/code> keyword in the previously empty argument list:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">myfun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is an example where the authors of
&lt;a href="https://topepo.github.io/Cubist/" target="_blank" rel="noopener">Cubist&lt;/a> applied the
&lt;a href="https://github.com/topepo/Cubist/pull/46" target="_blank" rel="noopener">necessary patches&lt;/a>, and
&lt;a href="https://github.com/r-lib/rlang/pull/1508" target="_blank" rel="noopener">another one in rlang&lt;/a>.&lt;/p>
&lt;h3 id="vendored-code">Vendored code
&lt;a href="#vendored-code">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Function declarations without a prototype are very common, and unfortunately are thus likely to appear in libraries that you include in your package. This may require you to patch that code in your package. The
&lt;a href="https://readxl.tidyverse.org" target="_blank" rel="noopener">readxl&lt;/a> package includes the
&lt;a href="https://github.com/libxls/libxls" target="_blank" rel="noopener">libxls C library&lt;/a>, which was patched
&lt;a href="https://github.com/tidyverse/readxl/commit/afdc9b90cfc2bb1e1c5490c7ba3af5ecfc4a7876" target="_blank" rel="noopener">in readxl here&lt;/a> to deal with this issue.&lt;/p>
&lt;p>The ideal solution in cases like this would be to submit patches to the upstream libraries so you don&amp;rsquo;t have to deal with the ongoing maintenance of your local patches, but that is not always possible. Generally, you can explain this problem when submitting your package, and as long as you&amp;rsquo;ve have notified the upstream maintainer, CRAN should accept your updated package.&lt;/p>
&lt;h3 id="unspecified-types-in-function-signature">Unspecified types in function signature
&lt;a href="#unspecified-types-in-function-signature">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The &lt;code>-Wstrict-prototypes&lt;/code> compiler flag will also catch deprecated function definitions where the types of the arguments are not declared. This is actually likely the primary purpose for CRAN enabling this flag, as it is ambiguous and much more dangerous than empty function signatures.&lt;/p>
&lt;p>These take the form:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">myfun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>where the argument types are not declared. This is solved by declaring the types of the arguments:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">myfun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>GitHub Actions for R developers, v2</title><link>https://www.tidyverse.org/blog/2022/06/actions-2-0-0/</link><pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2022/06/actions-2-0-0/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>We&amp;rsquo;re tickled pink to announce a &lt;code>v2&lt;/code> release of our collection of R related GitHub Actions at &lt;a href="https://github.com/r-lib/actions">https://github.com/r-lib/actions&lt;/a>.&lt;/p>
&lt;p>If you are already using these actions, you might want to take look at the
&lt;a href="https://github.com/r-lib/actions/releases/tag/v2" target="_blank" rel="noopener">full list of changes&lt;/a> first.&lt;/p>
&lt;p>In this post, we&amp;rsquo;ll show how to set up &lt;code>r-lib/actions&lt;/code> for your R package or project, and what is new in the &lt;code>v2&lt;/code> version.&lt;/p>
&lt;h2 id="about-rlibactions">About &lt;code>rlib/actions&lt;/code>
&lt;a href="#about-rlibactions">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>
&lt;a href="https://github.com/features/actions" target="_blank" rel="noopener">GitHub Actions&lt;/a> is a continuous integration service that allows you to automatically run code whenever you push to GitHub. If you&amp;rsquo;re developing a package this allows you to automate tasks like running &lt;code>R CMD check&lt;/code> on multiple platforms or rebuilding your
&lt;a href="https://pkgdown.r-lib.org/" target="_blank" rel="noopener">pkgdown&lt;/a> website.&lt;/p>
&lt;p>The
&lt;a href="https://github.com/r-lib/actions#readme" target="_blank" rel="noopener">&lt;code>r-lib/actions&lt;/code>&lt;/a> repo has a number of reusable actions that perform common R-related tasks: installing R and Rtools, pandoc, installing dependencies of R packages, running &lt;code>R CMD check&lt;/code>, etc.:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>
&lt;a href="https://github.com/r-lib/actions/tree/v2/setup-r#readme" target="_blank" rel="noopener">&lt;code>setup-r&lt;/code>&lt;/a> installs R and on Windows Rtools,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://github.com/r-lib/actions/tree/v2/setup-pandoc#readme" target="_blank" rel="noopener">&lt;code>setup-pandoc&lt;/code>&lt;/a> installs pandoc,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://github.com/r-lib/actions/tree/v2/setup-r-dependencies#readme" target="_blank" rel="noopener">&lt;code>setup-r-dependencies&lt;/code>&lt;/a> installs R package dependencies,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://github.com/r-lib/actions/tree/v2/check-r-package#readme" target="_blank" rel="noopener">&lt;code>check-r-package&lt;/code>&lt;/a> runs &lt;code>R CMD check&lt;/code> on an R package.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>See the
&lt;a href="https://github.com/r-lib/actions#readme" target="_blank" rel="noopener">README&lt;/a> for the complete list of actions.&lt;/p>
&lt;h2 id="setting-up-r-libactions">Setting up &lt;code>r-lib/actions&lt;/code>
&lt;a href="#setting-up-r-libactions">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The &lt;code>r-lib/actions&lt;/code> repo has
&lt;a href="https://github.com/r-lib/actions/tree/v2-branch/examples#example-workflows" target="_blank" rel="noopener">example workflows&lt;/a>, it is best to start with these.&lt;/p>
&lt;p>You can copy the ones you&amp;rsquo;d like to use to the &lt;code>.github/workflows&lt;/code> directory of your R package or project. For an R package you would typically want the &lt;code>test-coverage&lt;/code> workflow and one of the &lt;code>check-&lt;/code> workflows, depending on how thoroughly you want to check your package across operating systems and R versions. If your package has a pkgdown site then you probably also want the &lt;code>pkgdown&lt;/code> workflow.&lt;/p>
&lt;p>The usethis package has several helper functions to set up GitHub Actions for you:
&lt;a href="https://usethis.r-lib.org/reference/github_actions.html" target="_blank" rel="noopener">&lt;code>?usethis::use_github_action&lt;/code>&lt;/a>. You&amp;rsquo;ll need the latest version of usethis, version 2.1.6 for this.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">usethis&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">use_github_action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;check-standard&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">usethis&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">use_github_action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;test-coverage&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">usethis&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">use_github_action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;pkgdown&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="which-tag-or-branch-should-i-use">Which tag or branch should I use?
&lt;a href="#which-tag-or-branch-should-i-use">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>In short, use the &lt;code>v2&lt;/code> tag.&lt;/p>
&lt;p>The &lt;code>v2&lt;/code> tag is a &lt;em>sliding&lt;/em> tag. It is not fixed to a certain version, but we regularly update it with (non-breaking) improvements and fixes. If it is absolutely crucial that your workflow runs the same way, use one of the fixed tags, e.g. &lt;code>v2.2.2&lt;/code> is the most recent one.&lt;/p>
&lt;p>As of today, usethis v2.1.6 defaults to configuring workflows from the &lt;code>v2&lt;/code> tag. But &lt;code>use_github_action()&lt;/code> accepts a &lt;code>ref&lt;/code> argument, which allows you specify a different tag (such as &lt;code>v2.2.2&lt;/code>) or even a branch name or specific SHA.&lt;/p>
&lt;h2 id="what-is-new">What is new?
&lt;a href="#what-is-new">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>
&lt;h3 id="make-a-plan-and-stick-to-it">Make a plan and stick to it
&lt;a href="#make-a-plan-and-stick-to-it">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>&lt;code>setup-r-dependencies@v2&lt;/code> takes a more principled approach to resolving and installing system and package dependencies:&lt;/p>
&lt;ol>
&lt;li>It looks up all system (on supported Linux distributions) and package dependencies, and works out an installation plan with a set of package versions that are compatible with each other. (If it cannot find such set, then the action already fails here.)&lt;/li>
&lt;li>It writes the plan into a &lt;em>lock file&lt;/em>. This is a machine readable (JSON) file, that it also printed to the job&amp;rsquo;s log file. This is the blueprint of the installation.&lt;/li>
&lt;li>It potentially restores a cached set of installed packages. These are often the same exact package versions that are included in the installation plan. However, for efficiency, &lt;code>setup-r-dependencies&lt;/code> also restores cache versions that are slightly different.&lt;/li>
&lt;li>On Linux (if the distribution is supported) it installs all system requirements, according to the lock file.&lt;/li>
&lt;li>It goes over the install plan again, to check that the packages (potentially) restored from the cache are the same as the ones in the plan. If a package is different, then it upgrades (or downgrades) it according to the plan.&lt;/li>
&lt;li>At the end of the job, is saves the installed packages into the cache.&lt;/li>
&lt;/ol>
&lt;p>At the end of the installation you can be sure that exactly the planned packages are installed.&lt;/p>
&lt;p>See the &lt;code>setup-r-dependencies&lt;/code>
&lt;a href="https://github.com/r-lib/actions/tree/v2-branch/setup-r-dependencies#readme" target="_blank" rel="noopener">README&lt;/a> for more explanation and examples.&lt;/p>
&lt;h3 id="simpler-workflow-files">Simpler workflow files
&lt;a href="#simpler-workflow-files">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>If you update your existing workflows to use the &lt;code>v2&lt;/code> actions, also take a look at the new
&lt;a href="https://github.com/r-lib/actions/tree/v2/examples" target="_blank" rel="noopener">example workflows&lt;/a>. These are typically much simpler than the previously suggested workflows, because we moved some workflow steps into the new actions. E.g. &lt;code>check-r-package&lt;/code> always prints testthat output and it uploads the check directory as an artifact on failure, you don&amp;rsquo;t need to do these explicitly in the workflow. &lt;code>setup-r-dependencies&lt;/code> now prints the session info with all installed packages, no need to do this explicitly.&lt;/p>
&lt;p>To be clear, &amp;ldquo;updating your GHA workflows to &lt;code>v2&lt;/code>&amp;rdquo; generally goes beyond just changing every instance of &lt;code>v1&lt;/code> to &lt;code>v2&lt;/code>. The example workflows have also evolved, i.e. you really need to update entire YAML workflow file.&lt;/p>
&lt;h3 id="snapshots-as-artifacts">Snapshots as artifacts
&lt;a href="#snapshots-as-artifacts">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Encoding issues are not uncommon in snapshot tests across platforms. To make these easier to debug, &lt;code>check-r-package@v2&lt;/code> will now upload snapshot output as artifacts if you set the &lt;code>upload-snapshots&lt;/code> parameter to &lt;code>true&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="k">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>r-lib/actions/check-r-package@v2&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">upload-snapshots&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>See the
&lt;a href="https://testthat.r-lib.org/articles/snapshotting.html" target="_blank" rel="noopener">Snapshot tests&lt;/a> article in the testthat manual for more about testthat snapshots.&lt;/p>
&lt;h3 id="rtools42-support">Rtools42 support
&lt;a href="#rtools42-support">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>
&lt;a href="https://www.r-project.org/nosvn/winutf8/ucrt3/web/rtools.html" target="_blank" rel="noopener">Rtools42&lt;/a> is the new version of the Rtools compiler bundle, which will be the default for latest R 4.2.0. You can now optionally install Rtools42 with the &lt;code>setup-r&lt;/code> action. By default &lt;code>setup-r&lt;/code> uses
&lt;a href="https://cran.r-project.org/bin/windows/Rtools/rtools40.html" target="_blank" rel="noopener">Rtools40&lt;/a> because it is pre-installed on the CI machines, and it is fully compatible with Rtools42. To select Rtools42, set the &lt;code>rtools-version&lt;/code> parameter to &lt;code>42&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="k">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>r-lib/actions/setup-r@v2-branch&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">r-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;devel&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">rtools-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;42&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>See
&lt;a href="https://github.com/r-lib/actions/blob/27ac87278d916382a04662af42392f3c921ee37e/.github/workflows/check-full.yaml" target="_blank" rel="noopener">this example&lt;/a> if you want to use &lt;code>rtools-version&lt;/code> in a matrix build.&lt;/p>
&lt;h3 id="other-changes">Other changes
&lt;a href="#other-changes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>See the READMEs for more details.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>setup-r-dependencies&lt;/code> now does not always install the latest versions of the dependencies.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can ask &lt;code>setup-r-dependencies&lt;/code> to ignore some optional dependencies on older R versions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The Linux system requirements look-up is more robust now, and uses &lt;code>SystemRequirements&lt;/code> fields from all local, GitHub or URL remotes, and it also uses the package installation plan, instead of only relying on the dependency tress of CRAN packages.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>setup-r-dependencies&lt;/code> and &lt;code>check-r-package&lt;/code> now have a &lt;code>working-directory&lt;/code> parameter.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>setup-r-dependencies&lt;/code> now works on all x86_64 Linux distributions (but only installs system requirements on supported ones, see the README).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The example *down (blogdown, pkgdown and bookdown) workflows now build the web site in pull requests as well, but only deploy on push and release events. They also have a manual trigger.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The example *down workflows now protect against race conditions.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="feedback">Feedback
&lt;a href="#feedback">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Your feedback is much appreciated. Before reporting a
&lt;a href="https://github.com/r-lib/actions/issues/new/choose" target="_blank" rel="noopener">new issue&lt;/a>, please check if it was already reported, see the
&lt;a href="https://github.com/r-lib/actions/issues" target="_blank" rel="noopener">list of issues&lt;/a>, especially the pinned issues (if any) at the top of the issue page.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Thanks to everyone who contributed to &lt;code>r-lib/actions&lt;/code>:
&lt;a href="https://github.com/andrewl776" target="_blank" rel="noopener">@andrewl776&lt;/a>,
&lt;a href="https://github.com/arisp99" target="_blank" rel="noopener">@arisp99&lt;/a>,
&lt;a href="https://github.com/assignUser" target="_blank" rel="noopener">@assignUser&lt;/a>,
&lt;a href="https://github.com/astamm" target="_blank" rel="noopener">@astamm&lt;/a>,
&lt;a href="https://github.com/bribroder" target="_blank" rel="noopener">@bribroder&lt;/a>,
&lt;a href="https://github.com/duckmayr" target="_blank" rel="noopener">@duckmayr&lt;/a>,
&lt;a href="https://github.com/hadley" target="_blank" rel="noopener">@hadley&lt;/a>,
&lt;a href="https://github.com/harupy" target="_blank" rel="noopener">@harupy&lt;/a>,
&lt;a href="https://github.com/ijlyttle" target="_blank" rel="noopener">@ijlyttle&lt;/a>,
&lt;a href="https://github.com/IndrajeetPatil" target="_blank" rel="noopener">@IndrajeetPatil&lt;/a>,
&lt;a href="https://github.com/jeroen" target="_blank" rel="noopener">@jeroen&lt;/a>,
&lt;a href="https://github.com/krlmlr" target="_blank" rel="noopener">@krlmlr&lt;/a>,
&lt;a href="https://github.com/lorenzwalthert" target="_blank" rel="noopener">@lorenzwalthert&lt;/a>,
&lt;a href="https://github.com/MichaelChirico" target="_blank" rel="noopener">@MichaelChirico&lt;/a>,
&lt;a href="https://github.com/MikkoVihtakari" target="_blank" rel="noopener">@MikkoVihtakari&lt;/a>,
&lt;a href="https://github.com/ms609" target="_blank" rel="noopener">@ms609&lt;/a>,
&lt;a href="https://github.com/pat-s" target="_blank" rel="noopener">@pat-s&lt;/a>,
&lt;a href="https://github.com/s-u" target="_blank" rel="noopener">@s-u&lt;/a>,
&lt;a href="https://github.com/slwu89" target="_blank" rel="noopener">@slwu89&lt;/a>,
&lt;a href="https://github.com/vincentarelbundock" target="_blank" rel="noopener">@vincentarelbundock&lt;/a>, and
&lt;a href="https://github.com/yutannihilation" target="_blank" rel="noopener">@yutannihilation&lt;/a>.&lt;/p></description></item><item><title>waldo 0.3.0</title><link>https://www.tidyverse.org/blog/2021/08/waldo-0-3-0/</link><pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2021/08/waldo-0-3-0/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>We&amp;rsquo;re delighted to announce the release of
&lt;a href="https://waldo.r-lib.org" target="_blank" rel="noopener">waldo&lt;/a> 0.3.0. waldo is designed to find and concisely describe the difference between a pair of R objects. It was designed primarily to improve failure messages for
&lt;a href="https://testthat.r-lib.org/reference/equality-expectations.html" target="_blank" rel="noopener">&lt;code>testthat::expect_equal()&lt;/code>&lt;/a>, but it turns out to be useful in a number of other situations.&lt;/p>
&lt;p>You can install it from CRAN with:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/install.packages.html'>install.packages&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"waldo"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This blog post highlights the two biggest changes in this release: a new display format for data frame differences, and new tools for package developers to control the details of comparison. You can see a full list of changes in the
&lt;a href="https://github.com/r-lib/waldo/blob/master/NEWS.md" target="_blank" rel="noopener">release notes&lt;/a>&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://waldo.r-lib.org'>waldo&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="data-frame-differences">Data frame differences
&lt;a href="#data-frame-differences">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>waldo 0.2.0 treated data frames in the same way as lists, which worked fine if a column changed, but wasn&amp;rsquo;t terribly informative if a row changed. In 0.3.0, data frames get a new row-oriented comparison:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>df1&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/data.frame.html'>data.frame&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='m'>2&lt;/span>, &lt;span class='m'>3&lt;/span>, &lt;span class='m'>4&lt;/span>, &lt;span class='m'>5&lt;/span>&lt;span class='o'>)&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"a"&lt;/span>, &lt;span class='s'>"b"&lt;/span>, &lt;span class='s'>"c"&lt;/span>, &lt;span class='s'>"d"&lt;/span>, &lt;span class='s'>"e"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>df2&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/data.frame.html'>data.frame&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='m'>2&lt;/span>, &lt;span class='m'>3&lt;/span>, &lt;span class='m'>10&lt;/span>, &lt;span class='m'>4&lt;/span>, &lt;span class='m'>5&lt;/span>&lt;span class='o'>)&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"a"&lt;/span>, &lt;span class='s'>"b"&lt;/span>, &lt;span class='s'>"c"&lt;/span>, &lt;span class='s'>"X"&lt;/span>, &lt;span class='s'>"d"&lt;/span>, &lt;span class='s'>"e"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://waldo.r-lib.org/reference/compare.html'>compare&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>df1&lt;/span>, &lt;span class='nv'>df2&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; `attr(old, 'row.names')[3:5]`: &lt;span style='color: #555555;'>3&lt;/span> &lt;span style='color: #555555;'>4&lt;/span> &lt;span style='color: #555555;'>5&lt;/span> &lt;/span>
&lt;span class='c'>#&amp;gt; `attr(new, 'row.names')[3:6]`: &lt;span style='color: #555555;'>3&lt;/span> &lt;span style='color: #555555;'>4&lt;/span> &lt;span style='color: #555555;'>5&lt;/span> &lt;span style='color: #0000BB;'>6&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; old vs new&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='font-weight: bold;'> x y&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> old[1, ] 1 a&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> old[2, ] 2 b&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> old[3, ] 3 c&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #0000BB;'>+ new[4, ] 10 X&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> old[4, ] 4 d&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> old[5, ] 5 e&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; `old$x`: &lt;span style='color: #555555;'>1&lt;/span> &lt;span style='color: #555555;'>2&lt;/span> &lt;span style='color: #555555;'>3&lt;/span> &lt;span style='color: #555555;'>4&lt;/span> &lt;span style='color: #555555;'>5&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; `new$x`: &lt;span style='color: #555555;'>1&lt;/span> &lt;span style='color: #555555;'>2&lt;/span> &lt;span style='color: #555555;'>3&lt;/span> &lt;span style='color: #0000BB;'>10&lt;/span> &lt;span style='color: #555555;'>4&lt;/span> &lt;span style='color: #555555;'>5&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; `old$y`: &lt;span style='color: #555555;'>"a"&lt;/span> &lt;span style='color: #555555;'>"b"&lt;/span> &lt;span style='color: #555555;'>"c"&lt;/span> &lt;span style='color: #555555;'>"d"&lt;/span> &lt;span style='color: #555555;'>"e"&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; `new$y`: &lt;span style='color: #555555;'>"a"&lt;/span> &lt;span style='color: #555555;'>"b"&lt;/span> &lt;span style='color: #555555;'>"c"&lt;/span> &lt;span style='color: #0000BB;'>"X"&lt;/span> &lt;span style='color: #555555;'>"d"&lt;/span> &lt;span style='color: #555555;'>"e"&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>You&amp;rsquo;ll notice that you still get the column comparison as well. This is important because the row-oriented comparison relies on the printed representation of the data frames, and there are cases where data frames look the same but are actually different. The most important case is probably strings vs factors: example:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>df1&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/data.frame.html'>data.frame&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"a"&lt;/span>, &lt;span class='s'>"b"&lt;/span>, &lt;span class='s'>"c"&lt;/span>&lt;span class='o'>)&lt;/span>, stringsAsFactors &lt;span class='o'>=&lt;/span> &lt;span class='kc'>TRUE&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; x&lt;/span>
&lt;span class='c'>#&amp;gt; 1 a&lt;/span>
&lt;span class='c'>#&amp;gt; 2 b&lt;/span>
&lt;span class='c'>#&amp;gt; 3 c&lt;/span>
&lt;span class='o'>(&lt;/span>&lt;span class='nv'>df2&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/data.frame.html'>data.frame&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"a"&lt;/span>, &lt;span class='s'>"b"&lt;/span>, &lt;span class='s'>"c"&lt;/span>&lt;span class='o'>)&lt;/span>, stringsAsFactors &lt;span class='o'>=&lt;/span> &lt;span class='kc'>FALSE&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; x&lt;/span>
&lt;span class='c'>#&amp;gt; 1 a&lt;/span>
&lt;span class='c'>#&amp;gt; 2 b&lt;/span>
&lt;span class='c'>#&amp;gt; 3 c&lt;/span>
&lt;span class='nf'>&lt;a href='https://waldo.r-lib.org/reference/compare.html'>compare&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>df1&lt;/span>, &lt;span class='nv'>df2&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; `old$x` is &lt;span style='color: #00BB00;'>an S3 object of class &amp;lt;factor&amp;gt;, an integer vector&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; `new$x` is &lt;span style='color: #00BB00;'>a character vector&lt;/span> ('a', 'b', 'c')&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="control-of-comparison">Control of comparison
&lt;a href="#control-of-comparison">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>When developing new data structures, you often need to be able to control the details of waldo&amp;rsquo;s comparisons. For example, take the xml2 package, which uses the
&lt;a href="http://xmlsoft.org" target="_blank" rel="noopener">libxml&lt;/a> C library to parse and process XML. When you print XML that&amp;rsquo;s been parsed with xml2 it looks like a string:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://xml2.r-lib.org/'>xml2&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>x1&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>xml2&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://xml2.r-lib.org/reference/read_xml.html'>read_xml&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"&amp;lt;a&amp;gt;1&amp;lt;/a&amp;gt;"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>x1&lt;/span>
&lt;span class='c'>#&amp;gt; &amp;#123;xml_document&amp;#125;&lt;/span>
&lt;span class='c'>#&amp;gt; &amp;lt;a&amp;gt;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>But behind the scenes, it&amp;rsquo;s actually two pointers to C data structures:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x1&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; List of 2&lt;/span>
&lt;span class='c'>#&amp;gt; $ node:&amp;lt;externalptr&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; $ doc :&amp;lt;externalptr&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; - attr(*, "class")= chr [1:2] "xml_document" "xml_node"&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This means that a naïve comparison isn&amp;rsquo;t very useful:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>x2&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>xml2&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='http://xml2.r-lib.org/reference/read_xml.html'>read_xml&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"&amp;lt;a&amp;gt;2&amp;lt;/a&amp;gt;"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://waldo.r-lib.org/reference/compare.html'>compare&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/class.html'>unclass&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x1&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/class.html'>unclass&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x2&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; `old$node` is &amp;lt;pointer: 0x7fbc824876b0&amp;gt;&lt;/span>
&lt;span class='c'>#&amp;gt; `new$node` is &amp;lt;pointer: 0x7fbc52557dd0&amp;gt;&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; `old$doc` is &amp;lt;pointer: 0x7fbc82487600&amp;gt;&lt;/span>
&lt;span class='c'>#&amp;gt; `new$doc` is &amp;lt;pointer: 0x7fbc52544cc0&amp;gt;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>To resolve this problem, waldo provides the
&lt;a href="https://waldo.r-lib.org/reference/compare_proxy.html" target="_blank" rel="noopener">&lt;code>compare_proxy()&lt;/code>&lt;/a> generic. This is called on every S3 object prior to comparison so you can transform your objects into equivalent data structures that waldo can more easily compare. For example, waldo includes a built-in &lt;code>compare_proxy.xml_node()&lt;/code> method that converts the C data structures back to strings:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://waldo.r-lib.org/reference/compare.html'>compare&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x1&lt;/span>, &lt;span class='nv'>x2&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; lines(as.character(old)) vs lines(as.character(new))&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> "&amp;lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&amp;gt;"&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>- "&amp;lt;a&amp;gt;1&amp;lt;/a&amp;gt;"&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #0000BB;'>+ "&amp;lt;a&amp;gt;2&amp;lt;/a&amp;gt;"&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> ""&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>(You could imagine converting the XML structure to a tree data structure in R to get even more informative comparisons, but I didn&amp;rsquo;t take the time to do so.)&lt;/p>
&lt;p>
&lt;a href="https://waldo.r-lib.org/reference/compare_proxy.html" target="_blank" rel="noopener">&lt;code>compare_proxy()&lt;/code>&lt;/a> has existed for some time, but waldo 0.3.0 generalised it so, as well as returning the modifying object, it also returns a modified &amp;ldquo;path&amp;rdquo; that describes how the object has been transformed:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>waldo&lt;/span>&lt;span class='nf'>:::&lt;/span>&lt;span class='nv'>compare_proxy.xml_node&lt;/span>
&lt;span class='c'>#&amp;gt; function (x, path) &lt;/span>
&lt;span class='c'>#&amp;gt; &amp;#123;&lt;/span>
&lt;span class='c'>#&amp;gt; list(object = as.character(x), path = paste0("as.character(", &lt;/span>
&lt;span class='c'>#&amp;gt; path, ")"))&lt;/span>
&lt;span class='c'>#&amp;gt; &amp;#125;&lt;/span>
&lt;span class='c'>#&amp;gt; &amp;lt;bytecode: 0x7fbc633408d8&amp;gt;&lt;/span>
&lt;span class='c'>#&amp;gt; &amp;lt;environment: namespace:waldo&amp;gt;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This means that when comparison fails, you get a clear path to the root cause.&lt;/p>
&lt;p>Creating a new S3 method is reasonably heavy (and requires a little gymnastics in your package to correctly register without taking a hard dependency on waldo), so thanks to
&lt;a href="http://github.com/dmurdoch" target="_blank" rel="noopener">Duncan Murdoch&lt;/a> waldo 0.3.0 gains a new way of controlling comparisons: the &lt;code>waldo_opts&lt;/code> attribute. This attribute is a list with the same names as the arguments to
&lt;a href="https://waldo.r-lib.org/reference/compare.html" target="_blank" rel="noopener">&lt;code>compare()&lt;/code>&lt;/a>, where the values are used override the default values of
&lt;a href="https://waldo.r-lib.org/reference/compare.html" target="_blank" rel="noopener">&lt;code>compare()&lt;/code>&lt;/a>. This is a powerful tool because you can inject these attributes at any level of the object hierarchy, no matter how deep.&lt;/p>
&lt;p>For example, take these two lists which contain the same data but in different order:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>x1&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>a &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>, b &lt;span class='o'>=&lt;/span> &lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>x2&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>b &lt;span class='o'>=&lt;/span> &lt;span class='m'>2&lt;/span>, a &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Usually waldo will report these to be different:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://waldo.r-lib.org/reference/compare.html'>compare&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x1&lt;/span>, &lt;span class='nv'>x2&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; `names(old)`: &lt;span style='color: #00BB00;'>"a"&lt;/span> &lt;span style='color: #00BB00;'>"b"&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; `names(new)`: &lt;span style='color: #00BB00;'>"b"&lt;/span> &lt;span style='color: #00BB00;'>"a"&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>With the new &lt;code>list_as_map&lt;/code> arugment (also thanks to an idea from Duncan Murdoch), you can request that the list be compared purely as mappings between names and values:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://waldo.r-lib.org/reference/compare.html'>compare&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x1&lt;/span>, &lt;span class='nv'>x2&lt;/span>, list_as_map &lt;span class='o'>=&lt;/span> &lt;span class='kc'>TRUE&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> No differences&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This is great if you want this comparison to happen at the top level of the object, but what if the difference is buried deep within a list of lists, and you only want &lt;code>list_as_map&lt;/code> to affect one small part of the object? Well, now you can add the &lt;code>waldo_opts&lt;/code> attribute:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/attr.html'>attr&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x1&lt;/span>, &lt;span class='s'>"waldo_opts"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>list_as_map &lt;span class='o'>=&lt;/span> &lt;span class='kc'>TRUE&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://waldo.r-lib.org/reference/compare.html'>compare&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x1&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x2&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> No differences&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Thanks to all 14 folks who contributed to this release by filing issues, discussion ideas, and creating pull requests:
&lt;a href="https://github.com/adamhsparks" target="_blank" rel="noopener">@adamhsparks&lt;/a>,
&lt;a href="https://github.com/batpigandme" target="_blank" rel="noopener">@batpigandme&lt;/a>,
&lt;a href="https://github.com/bhogan-mitre" target="_blank" rel="noopener">@bhogan-mitre&lt;/a>,
&lt;a href="https://github.com/Bisaloo" target="_blank" rel="noopener">@Bisaloo&lt;/a>,
&lt;a href="https://github.com/brodieG" target="_blank" rel="noopener">@brodieG&lt;/a>,
&lt;a href="https://github.com/dmurdoch" target="_blank" rel="noopener">@dmurdoch&lt;/a>,
&lt;a href="https://github.com/ericnewkirk" target="_blank" rel="noopener">@ericnewkirk&lt;/a>,
&lt;a href="https://github.com/hadley" target="_blank" rel="noopener">@hadley&lt;/a>,
&lt;a href="https://github.com/krlmlr" target="_blank" rel="noopener">@krlmlr&lt;/a>,
&lt;a href="https://github.com/mgirlich" target="_blank" rel="noopener">@mgirlich&lt;/a>,
&lt;a href="https://github.com/michaelquinn32" target="_blank" rel="noopener">@michaelquinn32&lt;/a>,
&lt;a href="https://github.com/mpettis" target="_blank" rel="noopener">@mpettis&lt;/a>,
&lt;a href="https://github.com/paleolimbot" target="_blank" rel="noopener">@paleolimbot&lt;/a>, and
&lt;a href="https://github.com/tmwdr" target="_blank" rel="noopener">@tmwdr&lt;/a>.&lt;/p></description></item><item><title>Off-label uses in ggplot2</title><link>https://www.tidyverse.org/blog/2021/06/off-label-uses-in-ggplot2/</link><pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2021/06/off-label-uses-in-ggplot2/</guid><description>&lt;!--
TODO:
* [ ] Look over / edit the post's title in the yaml
* [ ] Edit (or delete) the description; note this appears in the Twitter card
* [ ] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [ ] Find photo &amp; update yaml metadata
* [ ] Create `thumbnail-sq.jpg`; height and width should be equal
* [ ] Create `thumbnail-wd.jpg`; width should be >5x height
* [ ] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [ ] Add intro sentence, e.g. the standard tagline for the package
* [ ] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>ggplot2 v3.3.4 landed on CRAN recently, and while every release of ggplot2 is cause for celebration, this was merely a patch release fixing a large number of bugs and so it came and went without much fanfare. However, for a couple of users this release brought an unwelcome and surprising change. We feel that this is a great opportunity to talk a bit about some of the topics that Hadley discussed in his
&lt;a href="https://www.rstudio.com/resources/rstudioglobal-2021/maintaining-the-house-the-tidyverse-built/" target="_blank" rel="noopener">rstudio::global(2021) keynote&lt;/a>, particularly the nature of breaking changes.&lt;/p>
&lt;h2 id="the-surprising-use-of-ggsave">The surprising use of &lt;code>ggsave()&lt;/code>
&lt;a href="#the-surprising-use-of-ggsave">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We created
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> as an easy way to save a ggplot object to an image file, using the following API:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>ggplot&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mpg&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>geom_point&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>aes&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>displ&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>hwy&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>ggsave&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"my_mpg_plot.png"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> is designed so that it automatically picks up the last created (or rendered) plot, and coupled with automatic graphic device selection determined from the file extension it provides a very lean API.&lt;/p>
&lt;p>The issue we will discuss in this blog post revolves around the use of
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> in the following manner:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://ggplot2.tidyverse.org'>ggplot2&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mpg&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_point.html'>geom_point&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>displ&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>hwy&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggsave.html'>ggsave&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"my_mpg_plot.png"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Now, if this is the first time you&amp;rsquo;ve seen
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> being added to a plot, you are not alone. This certainly caught us by surprise. Prior to v3.3.4, this actually worked (more on that later) but with the recent release running this code will result in the following error:&lt;/p>
&lt;pre>&lt;code>Error: Can't add [`ggsave(&amp;quot;my_mpg_plot.png&amp;quot;)`](https://ggplot2.tidyverse.org/reference/ggsave.html) to a ggplot object.
&lt;/code>&lt;/pre>
&lt;p>If you were a user that had used this pattern for saving plots it very much felt like we had removed a feature, pulling the rug out from under your script with no warning. However, this use of
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> had never been advertised in any of the documentation and while it worked, it could not be considered a feature as such.&lt;/p>
&lt;h2 id="off-label-saving">Off-label saving
&lt;a href="#off-label-saving">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We believe that this usage of
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> is the off-label use that Hadley talks about in his keynote. Off-label use of functions comprise of using functions in a way that only work &lt;em>by accident&lt;/em>, and are thus susceptible to breakage at any point due to changes in the code. Another common word for this is &amp;ldquo;a hack&amp;rdquo;, but this term can often imply that the user is full aware of the brittle nature of the setup. Off-label use can just as well be passed on between users to a point where some thinks that this is the correct, supported, way of doing things (this was certainly the case with the above issue).&lt;/p>
&lt;p>In an age of the pipe it is easy to understand why this use was picked up and thought off as a real feature.
&lt;a href="https://rdrr.io/r/base/Arithmetic.html" target="_blank" rel="noopener">&lt;code>+&lt;/code>&lt;/a>, however, is not &lt;code>%&amp;gt;%&lt;/code> (or &lt;code>|&amp;gt;&lt;/code>). It is a compositional operator meant to assemble the description of a plot. There is no execution of logic (besides the assembly) going on, and thus the idea of adding
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> does not make theoretical nor practical sense. This is also the reason why we do not want to &amp;ldquo;fix&amp;rdquo; this issue and turn it into a regular feature.&lt;/p>
&lt;h2 id="why-did-it-work-why-did-it-fail">Why did it work, why did it fail
&lt;a href="#why-did-it-work-why-did-it-fail">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>For those interested in the cause of both the accidental functionality and its breakage, here follows a description.
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> can be used to save any plot object but defaults to the object returned by
&lt;a href="https://ggplot2.tidyverse.org/reference/last_plot.html" target="_blank" rel="noopener">&lt;code>ggplot2::last_plot()&lt;/code>&lt;/a>. This function returns the last rendered &lt;em>or&lt;/em> modified plot object. That means that whenever you add something to a plot the result will be retrievable with
&lt;a href="https://ggplot2.tidyverse.org/reference/last_plot.html" target="_blank" rel="noopener">&lt;code>last_plot()&lt;/code>&lt;/a> but only until you manipulate or render another plot. What happens when adding
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> to a plot is that all the additions are resolved from the left and at each point the result is pushed to the
&lt;a href="https://ggplot2.tidyverse.org/reference/last_plot.html" target="_blank" rel="noopener">&lt;code>last_plot()&lt;/code>&lt;/a> store. When it comes to the
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> term, it will evaluate it and add the result to the plot. Since the expected plot is present in the
&lt;a href="https://ggplot2.tidyverse.org/reference/last_plot.html" target="_blank" rel="noopener">&lt;code>last_plot()&lt;/code>&lt;/a> store the evaluation of
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> will proceed as expected. Prior to ggplot2 v3.3.4
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> returned &lt;code>NULL&lt;/code> which, when added to a ggplot object is a no-op (i.e. it does nothing). The change that provoked the error is that with v3.3.4
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> now returns the path to the saved file invisibly, and adding a string to a plot object is an error.&lt;/p>
&lt;p>Based on this understanding there are some interesting observations we can make: First, while you&amp;rsquo;ll get an error in v3.3.4, the plot is actually saved to a file since the error is thrown after the evaluation of
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a>. This means that you can &amp;ldquo;fix&amp;rdquo; your code by putting the whole expression in a
&lt;a href="https://rdrr.io/r/base/try.html" target="_blank" rel="noopener">&lt;code>try()&lt;/code>&lt;/a> block (please don&amp;rsquo;t do this though 😬):&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/try.html'>try&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mpg&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_point.html'>geom_point&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>displ&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>hwy&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggsave.html'>ggsave&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"my_mpg_plot.png"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Another tidbit is that the perceived feature was extremely brittle, even when it worked. Consider the following code:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>p1&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mpg&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_point.html'>geom_point&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>displ&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>hwy&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>p2&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mpg&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_bar.html'>geom_bar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>cyl&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>p1&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggsave.html'>ggsave&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"scatterplot.png"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>p2&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggsave.html'>ggsave&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"barplot.png"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>If you assumed that
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> could be added to a plot you&amp;rsquo;d expect the above to be totally valid code and that &lt;code>scatterplot.png&lt;/code> would contain the plot from &lt;code>p1&lt;/code>, and &lt;code>barplot.png&lt;/code> would contain the plot from &lt;code>p2&lt;/code>. However, since
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> just fetched the last modified or rendered plot by default, both png files would be identical and contain the barplot in &lt;code>p2&lt;/code>.&lt;/p>
&lt;h2 id="wrapping-up">Wrapping up
&lt;a href="#wrapping-up">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>In the end this short post is not intended to shame the users who used
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> in an unsupported way. ggplot2 is such a huge package that it is easy to pick up usage patterns without ever thinking about whether it is the correct way - if it works it works. Instead, this post is meant to showcase how, even with rigorous testing and no breaking changes, an update can break someones workflow, often to the surprise of the developer. Once a package becomes popular enough, even the slightest change in the code have the capacity for disruption.&lt;/p></description></item><item><title>Self-cleaning test fixtures</title><link>https://www.tidyverse.org/blog/2020/04/self-cleaning-test-fixtures/</link><pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/04/self-cleaning-test-fixtures/</guid><description>&lt;p>&lt;em>Adapted from an internal presentation to the tidyverse team, which tells you something about the target reader. The primary audience for this post is R programmers and, especially, package developers. The problems identified and solved here are pretty niche! People who are mostly interested in R as a data analysis tool may not have direct use for this material. But the post offers something for anyone curious about the hazards of side effects and the various ways we can leave the world as you found it.&lt;/em>&lt;/p>
&lt;h2 id="test-hygiene">Test hygiene
&lt;a href="#test-hygiene">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;blockquote>
&lt;p>Take nothing but memories, leave nothing but footprints.&lt;/p>
&lt;/blockquote>
&lt;p>― Chief Si&amp;rsquo;ahl&lt;/p>
&lt;p>Ideally a test should leave the world exactly as it found it. Examples of things you might do inside a test and, therefore, need to undo:&lt;/p>
&lt;ul>
&lt;li>Create a file or directory&lt;/li>
&lt;li>Create a resource on an external system&lt;/li>
&lt;li>Set an R option&lt;/li>
&lt;li>Set an environment variable&lt;/li>
&lt;li>Change working directory&lt;/li>
&lt;li>Change an aspect of the tested package&amp;rsquo;s state&lt;/li>
&lt;/ul>
&lt;p>Scrupulous attention to cleanup is more than just courtesy or being fastidious. It is also self-serving. The state of the world after test &lt;code>i&lt;/code> is the starting state for test &lt;code>i + 1&lt;/code>. Tests that change state willy-nilly eventually end up interfering with each other in ways that can be very difficult to debug. Most tests are written with an implicit assumption about the starting state, usually whatever &lt;em>tabula rasa&lt;/em> means for the target domain of your package. If you accumulate enough sloppy tests, you will eventually find yourself asking the programming equivalent of questions like &amp;ldquo;Who forgot to turn off the oven?&amp;rdquo; and &amp;ldquo;Who didn&amp;rsquo;t clean up after the dog?&amp;quot;.&lt;/p>
&lt;p>First, we lay some foundations that aren&amp;rsquo;t obviously related to tests, but just trust that we&amp;rsquo;ll get there eventually.&lt;/p>
&lt;h2 id="the-onexit-pattern">The &lt;code>on.exit()&lt;/code> pattern
&lt;a href="#the-onexit-pattern">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>If you want to clean up after yourself, how should you actually do it?&lt;/p>
&lt;p>The first function to know about is base R&amp;rsquo;s
&lt;a href="https://rdrr.io/r/base/on.exit.html" target="_blank" rel="noopener">&lt;code>on.exit()&lt;/code>&lt;/a>. You use it inside a function. In the function body, every time you do something that should be undone &lt;strong>on exit&lt;/strong>, you immediately register the cleanup code with &lt;code>on.exit(expr, add = TRUE)&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Here&amp;rsquo;s a &lt;code>sloppy()&lt;/code> function that prints a number with a specific number of significant digits, by adjusting an R option.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">sloppy&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sig_digits&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">digits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sig_digits&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kc">pi&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 3.141593&lt;/span>
&lt;span class="nf">sloppy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">pi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 3.1&lt;/span>
&lt;span class="kc">pi&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 3.1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice how &lt;code>pi&lt;/code> prints differently before and after the call to &lt;code>sloppy()&lt;/code>. Calling &lt;code>sloppy()&lt;/code> has a side effect: it changes the &lt;code>digits&lt;/code> option globally, not just within its own scope of operations. This is what we want to avoid.&lt;/p>
&lt;p>&lt;em>Don&amp;rsquo;t worry, I&amp;rsquo;m restoring global state (specifically, the &lt;code>digits&lt;/code> option) behind the scenes here.&lt;/em>&lt;/p>
&lt;p>Here&amp;rsquo;s how to do better with &lt;code>on.exit()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">neat&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sig_digits&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">op&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">digits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sig_digits&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">on.exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">op&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">add&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kc">pi&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 3.141593&lt;/span>
&lt;span class="nf">neat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">pi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 3.1&lt;/span>
&lt;span class="kc">pi&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 3.141593&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The use of &lt;code>on.exit()&lt;/code> ensures that &lt;code>neat()&lt;/code> leaves &lt;code>digits&lt;/code> the way that it found it. &lt;code>on.exit()&lt;/code> also works when you exit the function abnormally, i.e. due to error. This is why it&amp;rsquo;s a better choice than any do-it-yourself solution.&lt;/p>
&lt;p>But I promised to talk about tests! Never fear, &lt;code>on.exit()&lt;/code> also works inside a test.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testthat&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">exp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 2.718282&lt;/span>
&lt;span class="nf">test_that&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;on.exit() works in a test&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">op&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">digits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">on.exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">op&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">add&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">out&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">exp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">expect_equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;2.7&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># printing just for the benefit of the reader&lt;/span>
&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;2.7&amp;#34;&lt;/span>
&lt;span class="nf">exp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 2.718282&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>on.exit()&lt;/code> is a very useful function and provides enough inspiration for an entire package: withr (
&lt;a href="http://withr.r-lib.org" target="_blank" rel="noopener">withr.r-lib.org&lt;/a>), which is a Swiss army knife for managing state in very flexible ways. It&amp;rsquo;s what I usually use, in functions and tests, for situations like that above.&lt;/p>
&lt;p>&lt;em>For more background, the section about
&lt;a href="https://adv-r.hadley.nz/functions.html#on-exit" target="_blank" rel="noopener">Exit handlers&lt;/a> in Advanced R is a good reference. The
&lt;a href="https://github.com/r-lib/cleancall#readme" target="_blank" rel="noopener">cleancall package&lt;/a> addresses a similar problem, but in the C code of an R package. cleancall is introduced in the blog post
&lt;a href="https://www.tidyverse.org/blog/2019/05/resource-cleanup-in-c-and-the-r-api/" target="_blank" rel="noopener">Resource Cleanup in C and the R API&lt;/a>.&lt;/em>&lt;/p>
&lt;h2 id="withrdefer">&lt;code>withr::defer()&lt;/code>
&lt;a href="#withrdefer">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>&lt;code>withr::defer()&lt;/code> is a more general version of &lt;code>on.exit()&lt;/code>. It can run cleanup for any environment, but defaults to the environment it was called in. Therefore, it works like &lt;code>on.exit()&lt;/code> inside a function &amp;ndash; an extremely important special case &amp;ndash; but the added flexibility means you can use it in more situations.&lt;/p>
&lt;p>Below I compare &lt;code>on.exit()&lt;/code> and &lt;code>withr::defer()&lt;/code> and I put the code inside &lt;code>local()&lt;/code>, instead of inside a function. This is meant to reinforce that cleanup can be relevant beyond function execution environments. It also gives you another tool to play with, in addition to toy functions and tests, in your own explorations of how to manage scope.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">withr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">local&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nf">on.exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;first&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">on.exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;last&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># this clobbers `print(&amp;#34;first&amp;#34;)` :(&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;last&amp;#34;&lt;/span>
&lt;span class="nf">local&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nf">on.exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;first&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">add&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">on.exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;last&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">add&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;first&amp;#34;&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;last&amp;#34;&lt;/span>
&lt;span class="nf">local&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nf">on.exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;first&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">add&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">after&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">on.exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;last&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">add&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">after&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;last&amp;#34;&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;first&amp;#34;&lt;/span>
&lt;span class="nf">local&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nf">defer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;first&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">defer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;last&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;last&amp;#34;&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;first&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This showcases the nice ergonomics of &lt;code>defer()&lt;/code>: each call &lt;em>adds&lt;/em> to the list of deferred tasks (vs. replaces) and, by default, adds to the &lt;em>front&lt;/em> of the stack (vs. the back). As you&amp;rsquo;ll see below, this turns out to matter in most real world usage&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;h2 id="withrlocal_">&lt;code>withr::local_*()&lt;/code>
&lt;a href="#withrlocal_">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>&lt;code>on.exit()&lt;/code> usage has a very predictable, slightly clunky pattern. In &lt;code>neat()&lt;/code>, it looks like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">op&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">digits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sig_digits&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">on.exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">op&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">add&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first statement accomplishes two things at once: it sets the &lt;code>digits&lt;/code> option and captures its original value in &lt;code>op&lt;/code>. The second statement schedules the restoration of &lt;code>digits&lt;/code>. This order of operations is encouraged by the design of &lt;code>options()&lt;/code>, which returns the original values when it&amp;rsquo;s used as a setter.&lt;/p>
&lt;p>Here is the more general (and possibly slightly safer) approach: First, capture the current state. Then, immediately schedule the eventual restoration of this original state, so that this is arranged before any additional calls are made that could exit, e.g. throw an error. Last, make the desired state change.&lt;/p>
&lt;p>What if such a maneuver happens all over your package and you want to write a helper?&lt;/p>
&lt;p>You can&amp;rsquo;t wrap &lt;code>on.exit()&lt;/code> in your own helpers, because there&amp;rsquo;s no way to reach back up into the correct parent frame and schedule cleanup there. But with &lt;code>defer()&lt;/code>, we can! Here is such a custom helper, called &lt;code>local_digits()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">local_digits&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sig_digits&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">parent.frame&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">op&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">digits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sig_digits&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">defer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">op&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can use it to keep any manipulation of &lt;code>digits&lt;/code> local to a test (or function).&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">exp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 2.718282&lt;/span>
&lt;span class="nf">test_that&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;withr lets us write custom helpers for local state manipulation&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">local_digits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">exp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 2.7182818284590450908&lt;/span>
&lt;span class="nf">exp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 2.718282&lt;/span>
&lt;span class="nf">test_that&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;we can even make multiple calls to local_digits()&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">local_digits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">exp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">local_digits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">exp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">local_digits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">exp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 3&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 2.72&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 2.7183&lt;/span>
&lt;span class="nf">exp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 2.718282&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The ability to write &lt;code>on.exit()&lt;/code>-like functions, customized to your own needs, is very empowering. However, you may not even need to. There are certain state changes that come up over and over again, for all of us. These are pre-implemented in withr&amp;rsquo;s &lt;code>local_*()&lt;/code> family of functions. A few examples:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do / undo this&lt;/th>
&lt;th>withr function&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Create a file&lt;/td>
&lt;td>&lt;code>local_file()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set an R option&lt;/td>
&lt;td>&lt;code>local_options()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set an environment variable&lt;/td>
&lt;td>&lt;code>local_envvar()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Change working directory&lt;/td>
&lt;td>&lt;code>local_dir()&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&amp;ldquo;Local&amp;rdquo; here refers to the fact that the state change persists only for the lifetime of an associated environment, usually the execution environment of a function or test.&lt;/p>
&lt;p>We can use &lt;code>withr::local_options()&lt;/code> to write yet another version of &lt;code>neat()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">neater&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sig_digits&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">local_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">digits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sig_digits&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kc">pi&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 3.141593&lt;/span>
&lt;span class="nf">neater&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">pi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 3.14&lt;/span>
&lt;span class="kc">pi&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 3.141593&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each &lt;code>local_*()&lt;/code> function has a companion &lt;code>with_()&lt;/code> function, which is a nod to
&lt;a href="https://rdrr.io/r/base/with.html" target="_blank" rel="noopener">&lt;code>with()&lt;/code>&lt;/a>. We won&amp;rsquo;t use the &lt;code>with_*()&lt;/code> functions here, but you can learn more about them at
&lt;a href="http://withr.r-lib.org" target="_blank" rel="noopener">withr.r-lib.org&lt;/a>.&lt;/p>
&lt;h2 id="test-fixtures">Test fixtures
&lt;a href="#test-fixtures">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Testing is often demonstrated with cute little tests and functions where all the inputs and expected results can be inlined. But in real packages, things aren&amp;rsquo;t always so simple. The main functions in your package probably aren&amp;rsquo;t &amp;ldquo;1 number in, 1 number out&amp;rdquo;. They might require more exotic objects or very specific circumstances. Changing state might be the entire purpose of a function! Now what?&lt;/p>
&lt;p>&lt;em>Obligatory caveat: If you find it hard to write tests, this may be the universe telling you that your package has some design problems. Maybe you&amp;rsquo;ve somehow ended up with a small number of monster functions, with oodles of arguments and complex conditional logic, that can do everything from scramble eggs to change a lightbulb. The best move in this case may be to break things up into smaller and simpler functions. And those will be easier to test. End caveat.&lt;/em>&lt;/p>
&lt;p>Tricky test situations can&amp;rsquo;t always be eliminated by better package design. Let&amp;rsquo;s assume you&amp;rsquo;ve got a reasonable design and you&amp;rsquo;re still facing some test dilemmas. Unless you find a way to make writing tests as pleasant as possible, you won&amp;rsquo;t write nearly enough of them.&lt;/p>
&lt;p>One technique I&amp;rsquo;ve found useful is what I&amp;rsquo;ll call a &lt;strong>self-cleaning test fixture&lt;/strong>.&lt;/p>
&lt;h3 id="usethis-and-create_local_package">usethis and &lt;code>create_local_package()&lt;/code>
&lt;a href="#usethis-and-create_local_package">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The usethis package (
&lt;a href="https://usethis.r-lib.org" target="_blank" rel="noopener">usethis.r-lib.org&lt;/a>) provides functions for looking after the files and folders in an R project, especially an R package. These function names should give you a vague sense of what usethis does: &lt;code>create_package()&lt;/code>, &lt;code>use_vignette()&lt;/code>, &lt;code>use_testthat()&lt;/code>, &lt;code>use_github()&lt;/code>. Many of these functions only make sense in the context of an R package. That means in order to test them, we have to be working inside an R package. And they can&amp;rsquo;t all target some persistent Frankenpackage.&lt;/p>
&lt;p>We need a way to quickly spin up a minimal package, in the session temp directory. Test some functions against it. Then destroy it. Without a lot of fuss. We need a &lt;strong>local package&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">create_local_package&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">file_temp&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">parent.frame&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">old_project&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">proj_get_&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># --- Record starting state --- &lt;/span>
&lt;span class="n">withr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">defer&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="c1"># --- Defer The Undoing --- &lt;/span>
&lt;span class="nf">proj_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">old_project&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">force&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># restore active usethis project (-C)&lt;/span>
&lt;span class="nf">setwd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">old_project&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># restore working directory (-B)&lt;/span>
&lt;span class="n">fs&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">dir_delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dir&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># delete the temporary package (-A)&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="n">envir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># --- Do The Doing --- &lt;/span>
&lt;span class="nf">create_package&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">open&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># create new folder and package (A)&lt;/span>
&lt;span class="nf">setwd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dir&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># change working directory (B)&lt;/span>
&lt;span class="nf">proj_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dir&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># switch to new usethis project (C)&lt;/span>
&lt;span class="nf">invisible&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dir&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s a simplified version of the test helper&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> we use in over 170 tests in usethis. Here&amp;rsquo;s an example of how &lt;code>create_local_package()&lt;/code> is used in a test:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">test_that&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;use_roxygen_md() adds DESCRIPTION fields&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">skip_if_not_installed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;roxygen2&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">pkg&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">create_local_package&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;------------------------ HERE IT IS!!!!!&lt;/span>
&lt;span class="nf">use_roxygen_md&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nf">expect_identical&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">desc&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">desc_get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Roxygen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pkg&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Roxygen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;list(markdown = TRUE)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nf">expect_true&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">desc&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">desc_has_fields&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;RoxygenNote&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pkg&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">expect_true&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">uses_roxygen_md&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This test checks that &lt;code>usethis::use_roxygen_md()&lt;/code> does the setup necessary to use roxygen2 in a package and, specifically, to write documentation with markdown syntax. All 3 expectations consult the DESCRIPTION file, directly or indirectly. So it&amp;rsquo;s very convenient that &lt;code>create_local_package()&lt;/code> creates a minimal package, with a valid DESCRIPTION file, for us to test against. And when the test is done &amp;ndash; poof! &amp;ndash; the package is gone.&lt;/p>
&lt;p>The setup and teardown done by &lt;code>create_local_package()&lt;/code> would be aggravating and repetitive to inline in each individual test. The tests would be dominated by this code, making them less readable. If we need to tweak something, we&amp;rsquo;d have to do it in hundreds of places. This sort of friction has a real chilling effect on one&amp;rsquo;s enthusiasm for writing and maintaining tests.&lt;/p>
&lt;p>A few more observations about the self-cleaning test fixture pattern:&lt;/p>
&lt;ul>
&lt;li>Every action has an equal and opposite reaction. Each individual &amp;ldquo;doing&amp;rdquo;
action (A) has a matching, deferred &amp;ldquo;undoing&amp;rdquo; reaction (-A).&lt;/li>
&lt;li>We work in this order (usually and preferably):
&lt;ul>
&lt;li>Record existing state.&lt;/li>
&lt;li>Describe the eventual cleanup.&lt;/li>
&lt;li>Make the desired state change.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The undoing usually unfolds in the opposite order from the doing (&amp;ldquo;last in,
first out&amp;rdquo;). This is almost always OK and it is often absolutely necessary.
In &lt;code>create_local_package()&lt;/code>:
&lt;ul>
&lt;li>Doing: We must create directory &lt;code>dir&lt;/code> (A) before we can make it the
working directory (B). (A) must come before (B).&lt;/li>
&lt;li>Undoing: We must restore the original working directory (-B) before
we can delete &lt;code>dir&lt;/code> (-A). (-B) must come before (-A). We can&amp;rsquo;t delete
&lt;code>dir&lt;/code> while it&amp;rsquo;s still the working directory!&lt;/li>
&lt;li>Think of it like a stack of plates: the last plate onto the stack has to
be the first one off.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Test fixture&lt;/strong> is a pre-existing term in the software engineering world (and beyond):&lt;/p>
&lt;blockquote>
&lt;p>A test fixture is something used to consistently test some item, device, or piece of software.&lt;/p>
&lt;/blockquote>
&lt;p>&amp;ndash;
&lt;a href="https://en.wikipedia.org/wiki/Test_fixture" target="_blank" rel="noopener">Wikipedia&lt;/a>&lt;/p>
&lt;p>When I first heard &amp;ldquo;test fixture&amp;rdquo; (from Gábor Csárdi, I think), a light bulb clicked on in my head. This was something I &lt;em>knew&lt;/em> I needed and had even implemented in various half-baked ways. But I hadn&amp;rsquo;t identified it as A Real Thing, with specific goals and design principles. It&amp;rsquo;s a great example of
&lt;a href="https://blogs.scientificamerican.com/observations/unknown-unknowns-the-problem-of-hypocognition/" target="_blank" rel="noopener">hypocognition&lt;/a>. Learning the term &amp;ldquo;test fixture&amp;rdquo; gave me a place to hang this knowledge and allowed me to more quickly identify situations where a test fixture was needed.&lt;/p>
&lt;h3 id="googlesheets4-and-local_ss">googlesheets4 and &lt;code>local_ss()&lt;/code>
&lt;a href="#googlesheets4-and-local_ss">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The googlesheets4 package (
&lt;a href="https://googlesheets4.tidyverse.org" target="_blank" rel="noopener">googlesheets4.tidyverse.org&lt;/a>) provides an R interface to the Google Sheets API. A typical test needs access to a Google Sheet, constructed to have very specific properties and the test may even need to modify the Sheet&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>I need a way to quickly create a Sheet, possibly with very specific initial worksheets, cell data, locale, time zone, etc. Test some functions against it. Then trash it. I need a &lt;em>local spreadsheet&lt;/em>.&lt;/p>
&lt;p>Here&amp;rsquo;s a simplified version of the helper &lt;code>local_ss()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">local_ss&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">...&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">parent.frame&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">existing&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">gs4_find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">nrow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">existing&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">stop_glue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A spreadsheet named {sq(name)} already exists.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">withr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">defer&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="n">trash_me&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">gs4_find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">googledrive&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">drive_trash&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">trash_me&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="n">envir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">gs4_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Even though the Sheets API is very file-ID-oriented, I go out of my way to work here via Sheet name. I bring this up to illustrate another point: you can also use a helper like this to rationalize your development workflow.&lt;/p>
&lt;p>At first, it feels like &lt;code>local_ss()&lt;/code> should create a new Sheet, store its ID, and then schedule it for deletion. But reality is more messy. As I develop a function and its tests, my experimentation can leave behind several instances of a test Sheet (yes, on Drive, you can have several files with the same name!). This leads to a very cluttered and confusing situation in the test account, requiring a periodic &amp;ldquo;search and destroy&amp;rdquo; mission for zombie test Sheets. Now my helper immediately alerts me to this problem and applies constant pressure to keep things neat and tidy.&lt;/p>
&lt;p>If you keep stubbing your toe in a particular way as you work on your package, zoom out and consider if you can design the problem away by adjusting your workflow. The helper that creates a self-cleaning test fixture is great place to apply this sort of leverage.&lt;/p>
&lt;h2 id="defer-on-the-global-environment">&lt;code>defer()&lt;/code> on the global environment
&lt;a href="#defer-on-the-global-environment">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>I conclude with one more story about workflow. We&amp;rsquo;ve talked about two main functions for registering deferred events: base R&amp;rsquo;s &lt;code>on.exit()&lt;/code> and &lt;code>withr::defer()&lt;/code>. Part of what &lt;code>withr::defer()&lt;/code> offers over &lt;code>on.exit()&lt;/code> is the ability to defer events on &lt;em>any&lt;/em> environment. But there was still a big exception: the global environment.&lt;/p>
&lt;p>Until quite recently, here&amp;rsquo;s what happened if you called &lt;code>defer()&lt;/code> in an interactive R session&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">withr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">defer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hi&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; Error in withr::defer(print(&amp;#34;hi&amp;#34;)):&lt;/span>
&lt;span class="c1">#&amp;gt; attempt to defer event on global environment&lt;/span>
&lt;span class="nf">packageVersion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;withr&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#39;2.1.2&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Frankly, this makes a lot of sense. Deferred events are triggered when an environment goes out of scope. &lt;code>on.exit()&lt;/code> and &lt;code>defer()&lt;/code> are meant to be used in an ephemeral environment, like a function execution environment. Deferring events on the global environment is pretty weird.&lt;/p>
&lt;p>But what about your interactive development of functions and tests? Every time you hit a call to &lt;code>defer()&lt;/code> or &lt;code>local_*()&lt;/code>, that code fails to execute. You&amp;rsquo;re forced to develop your logic at arm&amp;rsquo;s length or implement the intent of the &lt;code>local_*()&lt;/code> calls manually. If you&amp;rsquo;re doing quite a bit of work via &lt;code>local_*()&lt;/code> or &lt;code>on.exit()&lt;/code>, this presents a problem. Basically, it&amp;rsquo;s harder to develop with functions that work one way inside a function, but another way in the global environment (or, worse, don&amp;rsquo;t work at all). &lt;code>substitute()&lt;/code> is another example of this.&lt;/p>
&lt;p>As of withr v2.2.0, you can &lt;code>defer()&lt;/code> events on the global environment, which means that &lt;code>local_*()&lt;/code> functions work too. This is still a pretty weird thing to do, which is why you get a message about how to trigger execution.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">withr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">packageVersion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;withr&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#39;2.2.0&amp;#39;&lt;/span>
&lt;span class="nf">defer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hi&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; Setting deferred event(s) on global environment.&lt;/span>
&lt;span class="c1">#&amp;gt; * Execute (and clear) with `deferred_run()`.&lt;/span>
&lt;span class="c1">#&amp;gt; * Clear (without executing) with `deferred_clear()`.&lt;/span>
&lt;span class="nf">deferred_run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;hi&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since the global environment isn&amp;rsquo;t perishable, like a test environment is, you have to call &lt;code>deferred_run()&lt;/code> explicitly to execute the deferred events. You can also clear them, without running, with &lt;code>deferred_clear()&lt;/code>.&lt;/p>
&lt;p>This new capability is especially handy with self-cleaning test fixtures, like &lt;code>create_local_package()&lt;/code> and &lt;code>local_ss()&lt;/code> shown above. Sometimes you have to change global state while developing tests, e.g. change working directory or create test Sheets. But now there&amp;rsquo;s a way to run the associated cleanup on demand.&lt;/p>
&lt;h2 id="recap">Recap
&lt;a href="#recap">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;ve demonstrated that it&amp;rsquo;s a problem to change state in a function or test. Obviously there are exceptions if, for example, that is the whole point of the function.&lt;/p>
&lt;p>The most common and recommended solution to this is to use &lt;code>on.exit()&lt;/code> to organize the necessary cleanup, i.e. restore the original state. However, &lt;code>on.exit()&lt;/code> has some inherent limitations.&lt;/p>
&lt;p>If this sort of setup/teardown happens frequently in the functions and tests in a package, it makes sense to write a custom helper. This function should follow the conventions of the &lt;code>local_*()&lt;/code> functions in withr and will presumably be built around &lt;code>withr::defer()&lt;/code>.&lt;/p>
&lt;p>There is some cost to using a custom &lt;code>local_*()&lt;/code> helper, as it is one more thing to maintain and that all contributors must understand. Consider whether the pros outweigh the cons when adding another layer of abstraction.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>It&amp;rsquo;s too bad &lt;code>add = TRUE&lt;/code> isn&amp;rsquo;t the default, because you almost always want this. Without it, each call to &lt;code>on.exit()&lt;/code> clobbers the effect of previous calls. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Note: the &lt;code>after&lt;/code> argument of &lt;code>on.exit()&lt;/code> first appeared in R 3.5.0. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;code>create_local_package()&lt;/code> is a test helper. The testthat package allows such things to be defined in &lt;code>tests/testthat/helper.R&lt;/code> and then makes them available within package tests. They are also loaded by &lt;code>devtools::load_all()&lt;/code>. &lt;code>tests/testthat/helper.R&lt;/code> is also a great place to define custom expectations. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>You might ask about mocking here, but I usually don&amp;rsquo;t embrace that heavily and, in any case, that is a topic for another day. &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>For all practical purposes, you get the same result with &lt;code>on.exit()&lt;/code>. It&amp;rsquo;s just a silent no-op. &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>tibble 3.0.0</title><link>https://www.tidyverse.org/blog/2020/04/tibble-3-0-0/</link><pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/04/tibble-3-0-0/</guid><description>&lt;p>Version 3.0.0 of the tibble package is on CRAN now. Tibbles are a modern reimagining of the data frame, keeping what time has shown to be effective, and throwing out what is not, with nicer default output too! Grab the latest version with:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tibble&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Tibble now fully embraces vctrs, using it under the hood for its subsetting and subset assignment (&amp;ldquo;subassignment&amp;rdquo;) operations.
Accessing and updating rows and columns is now based on a rock-solid framework and works consistently for all types of columns, including list, data frame, and
matrix columns.
We believe that the changes will ultimately lead to better and safer code.&lt;/p>
&lt;p>This major release required quite some preparation, including a
&lt;a href="https://tibble.tidyverse.org/articles/invariants.html" target="_blank" rel="noopener">new vignette&lt;/a> that describes the behavior of subsetting and subset assignment operations and the reasoning behind it.
For a complete overview please see the
&lt;a href="https://tibble.tidyverse.org/news/index.html" target="_blank" rel="noopener">release notes&lt;/a>.&lt;/p>
&lt;p>In a nutshell: if an object is a vector, it can be part of a tibble.
My new
&lt;a href="https://github.com/krlmlr/awesome-vctrs#readme" target="_blank" rel="noopener">Awesome vectors&lt;/a> list aims at giving an overview of available implementations of vector types in R.
If you&amp;rsquo;re using a specialized class, or even implemented one, please file an issue in that repository or contribute an example.
For problems with tibble, use the
&lt;a href="https://github.com/tidyverse/tibble/issues" target="_blank" rel="noopener">issue tracker&lt;/a> to report bugs or suggest ideas, your contributions are always welcome.&lt;/p>
&lt;p>The rest of the post is about the technical details of a tibble, and therefore mostly suited for interested R programmers:&lt;/p>
&lt;ul>
&lt;li>What can be part of a tibble?&lt;/li>
&lt;li>Size and length&lt;/li>
&lt;li>Sturdy recycling&lt;/li>
&lt;/ul>
&lt;h2 id="what-can-be-part-of-a-tibble">What can be part of a tibble?
&lt;a href="#what-can-be-part-of-a-tibble">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Tibbles and data frames are collections of columns, where each column is a vector of the same size.
Neat.&lt;/p>
&lt;p>What is a vector?
What is its size?&lt;/p>
&lt;p>The new
&lt;a href="https://vctrs.r-lib.org" target="_blank" rel="noopener">vctrs package&lt;/a> is dedicated to answering these surprisingly tricky questions.
Because this blog post describes many functions of this package, we load it.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vctrs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The
&lt;a href="https://vctrs.r-lib.org/reference/vec_assert.html" target="_blank" rel="noopener">&lt;code>vec_is()&lt;/code>&lt;/a> function decides if an object is a vector.
This is important, because some objects are inherently scalar and cannot be added as a column to a data frame.&lt;/p>
&lt;p>Obviously, integers, characters, and other atomic objects (logical, numeric, complex, and raw) are vectors.
Environments, functions, and other &amp;ldquo;special&amp;rdquo; types of objects are clearly non-vectors.
Most objects that consist of an atomic type with a &lt;code>&amp;quot;class&amp;quot;&lt;/code> attribute are also vectors: examples are &lt;code>POSIXct&lt;/code> and
&lt;a href="https://hms.tidyverse.org/reference/hms.html" target="_blank" rel="noopener">&lt;code>hms::hms()&lt;/code>&lt;/a>.
Lists are harder because some lists are vectors and some are not.&lt;/p>
&lt;p>The &lt;code>vec_is()&lt;/code> function implements a heuristic that works automatically in most cases and adds a few special cases from base R.
By relying on &lt;code>vec_is()&lt;/code>, the &lt;code>tibble()&lt;/code> function and others can give an early error if used with an inherent scalar:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tibble&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">model&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">lm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">data.frame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">model&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error: All columns in a tibble must be vectors.&lt;/span>
&lt;span class="c1">#&amp;gt; x Column `model` is a `lm` object.&lt;/span>
&lt;span class="n">time&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">Sys.time&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 1&lt;/span>
&lt;span class="c1">#&amp;gt; time &lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dttm&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; 1 2020-04-09 20:38:28&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The new
&lt;a href="https://tibble.tidyverse.org/reference/tibble.html" target="_blank" rel="noopener">&lt;code>tibble_row()&lt;/code>&lt;/a> function reverses this: inherent scalars are wrapped in lists:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">tibble_row&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 1&lt;/span>
&lt;span class="c1">#&amp;gt; model &lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;list&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 &amp;lt;lm&amp;gt;&lt;/span>
&lt;span class="nf">tibble_row&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 1&lt;/span>
&lt;span class="c1">#&amp;gt; time &lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dttm&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; 1 2020-04-09 20:38:28&lt;/span>
&lt;span class="nf">tibble_row&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; Error: All vectors must be size one, use `list()` to wrap.&lt;/span>
&lt;span class="c1">#&amp;gt; x Column `time` is of size 2.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you have implemented a vector class, double-check that
&lt;a href="https://vctrs.r-lib.org/reference/vec_assert.html" target="_blank" rel="noopener">&lt;code>vec_is()&lt;/code>&lt;/a> returns &lt;code>TRUE&lt;/code> for your objects.
Please also add it to my
&lt;a href="https://github.com/krlmlr/awesome-vctrs#readme" target="_blank" rel="noopener">Awesome vectors&lt;/a> list, or file an issue.&lt;/p>
&lt;h2 id="size-and-length">Size and length
&lt;a href="#size-and-length">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Data frames and matrices are also recognized vectors, and can be part of a tibble:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">data.frame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ncol&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">vec_is&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] TRUE&lt;/span>
&lt;span class="nf">vec_is&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] TRUE&lt;/span>
&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">packed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">df&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 3 x 1&lt;/span>
&lt;span class="c1">#&amp;gt; packed$a $b&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 2&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 3&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 4&lt;/span>
&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 2 x 1&lt;/span>
&lt;span class="c1">#&amp;gt; m[,1] [,2] [,3]&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 3 5&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 4 6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &amp;ldquo;elements&amp;rdquo; of a data frame or matrix are its rows.
All subsetting and subassignment operations now use
&lt;a href="https://vctrs.r-lib.org/reference/vec_slice.html" target="_blank" rel="noopener">&lt;code>vec_slice()&lt;/code>&lt;/a> under the hood.
Contrary to &lt;code>[&lt;/code>, slicing will work along the rows for matrices and data frames.&lt;/p>
&lt;p>For these and a few types, length and size are different: the length refers to the size of the internal data format, whereas the size is the number of elements.
The
&lt;a href="https://vctrs.r-lib.org/reference/vec_size.html" target="_blank" rel="noopener">&lt;code>vec_size()&lt;/code>&lt;/a> function, modeled after &lt;code>NROW()&lt;/code>, returns the latter:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">vec_size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 3&lt;/span>
&lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 2&lt;/span>
&lt;span class="nf">vec_size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 2&lt;/span>
&lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For your own code, it is almost always safer to use &lt;code>vec_size()&lt;/code> instead of &lt;code>length()&lt;/code>.
Use &lt;code>ncol()&lt;/code> to count the columns in a data frame.&lt;/p>
&lt;h2 id="sturdy-recycling">Sturdy recycling
&lt;a href="#sturdy-recycling">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We always recycled only vectors of size one in &lt;code>tibble()&lt;/code> and &lt;code>as_tibble()&lt;/code>.
This now also applies to subassignment.
We believe that most of the time this is an unintended error.
Please use an explicit &lt;code>rep()&lt;/code> or &lt;code>rep_len()&lt;/code> if you really need to create a column that consists of multiple repetitions of a vector.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="c1">#&amp;gt; Error: Assigned data `1:2` must be compatible with existing data.&lt;/span>
&lt;span class="c1">#&amp;gt; x Existing data has 4 rows.&lt;/span>
&lt;span class="c1">#&amp;gt; x Assigned data has 2 rows.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ Only vectors of size 1 are recycled.&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">rep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">x&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 1&lt;/span>
&lt;span class="c1">#&amp;gt; a&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2&lt;/span>
&lt;span class="c1">#&amp;gt; 3 1&lt;/span>
&lt;span class="c1">#&amp;gt; 4 2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Related errors may also appear when applying a pattern that works with regular data frames:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">data.frame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">x[1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">]&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">x&lt;/span>
&lt;span class="c1">#&amp;gt; a b&lt;/span>
&lt;span class="c1">#&amp;gt; 1 3 4&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">x[1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">]&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error: Assigned data `c(a = 3, b = 4)` must be compatible with row subscript `1`.&lt;/span>
&lt;span class="c1">#&amp;gt; x 1 row must be assigned.&lt;/span>
&lt;span class="c1">#&amp;gt; x Assigned data has 2 rows.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ Row updates require a list value. Do you need `list()` or `as.list()`?&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is because all vectors on the right-hand side are treated as columnar data.
Convert to a list to treat the input as row data:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">x[1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">]&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">x&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; a b&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 3 4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The ambiguity between a row vector and a column vector also affects the &lt;code>as_tibble()&lt;/code> function.
For this reason, it is now superseded for atomic and list inputs.
In new code, use the new
&lt;a href="https://tibble.tidyverse.org/reference/as_tibble.html" target="_blank" rel="noopener">&lt;code>as_tibble_row()&lt;/code> and &lt;code>as_tibble_col()&lt;/code>&lt;/a> functions to clarify intent.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">as_tibble_row&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; a b&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 3 4&lt;/span>
&lt;span class="nf">as_tibble_col&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 2 x 1&lt;/span>
&lt;span class="c1">#&amp;gt; value&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 3&lt;/span>
&lt;span class="c1">#&amp;gt; 2 4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="acknowledgments">Acknowledgments
&lt;a href="#acknowledgments">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Due to the nature of the changes, about 60 CRAN packages were failing with our release candidate.
Many thanks to the maintainers of downstream packages who were very helpful in making this upgrade a smooth experience.&lt;/p>
&lt;p>Thanks to the following contributors who sent issues, pull requests, and comments since tibble 2.1.3:&lt;/p>
&lt;p>
&lt;a href="https://github.com/adamdsmith" target="_blank" rel="noopener">@adamdsmith&lt;/a>,
&lt;a href="https://github.com/alankjackson" target="_blank" rel="noopener">@alankjackson&lt;/a>,
&lt;a href="https://github.com/anabbott" target="_blank" rel="noopener">@anabbott&lt;/a>,
&lt;a href="https://github.com/batpigandme" target="_blank" rel="noopener">@batpigandme&lt;/a>,
&lt;a href="https://github.com/billdenney" target="_blank" rel="noopener">@billdenney&lt;/a>,
&lt;a href="https://github.com/borisleto" target="_blank" rel="noopener">@borisleto&lt;/a>,
&lt;a href="https://github.com/Breza" target="_blank" rel="noopener">@Breza&lt;/a>,
&lt;a href="https://github.com/Cervangirard" target="_blank" rel="noopener">@Cervangirard&lt;/a>,
&lt;a href="https://github.com/courtiol" target="_blank" rel="noopener">@courtiol&lt;/a>,
&lt;a href="https://github.com/dan-reznik" target="_blank" rel="noopener">@dan-reznik&lt;/a>,
&lt;a href="https://github.com/daviddalpiaz" target="_blank" rel="noopener">@daviddalpiaz&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/elinw" target="_blank" rel="noopener">@elinw&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/eran3006" target="_blank" rel="noopener">@eran3006&lt;/a>,
&lt;a href="https://github.com/frederikziebell" target="_blank" rel="noopener">@frederikziebell&lt;/a>,
&lt;a href="https://github.com/gavinsimpson" target="_blank" rel="noopener">@gavinsimpson&lt;/a>,
&lt;a href="https://github.com/gdequeiroz" target="_blank" rel="noopener">@gdequeiroz&lt;/a>,
&lt;a href="https://github.com/guiastrennec" target="_blank" rel="noopener">@guiastrennec&lt;/a>,
&lt;a href="https://github.com/hadley" target="_blank" rel="noopener">@hadley&lt;/a>,
&lt;a href="https://github.com/HashRocketSyntax" target="_blank" rel="noopener">@HashRocketSyntax&lt;/a>,
&lt;a href="https://github.com/hope-data-science" target="_blank" rel="noopener">@hope-data-science&lt;/a>,
&lt;a href="https://github.com/jennybc" target="_blank" rel="noopener">@jennybc&lt;/a>,
&lt;a href="https://github.com/jmgirard" target="_blank" rel="noopener">@jmgirard&lt;/a>,
&lt;a href="https://github.com/kevinwolz" target="_blank" rel="noopener">@kevinwolz&lt;/a>,
&lt;a href="https://github.com/kieranjmartin" target="_blank" rel="noopener">@kieranjmartin&lt;/a>,
&lt;a href="https://github.com/lionel-" target="_blank" rel="noopener">@lionel-&lt;/a>,
&lt;a href="https://github.com/LudvigOlsen" target="_blank" rel="noopener">@LudvigOlsen&lt;/a>,
&lt;a href="https://github.com/mabafaba" target="_blank" rel="noopener">@mabafaba&lt;/a>,
&lt;a href="https://github.com/matteodefelice" target="_blank" rel="noopener">@matteodefelice&lt;/a>,
&lt;a href="https://github.com/MatthieuStigler" target="_blank" rel="noopener">@MatthieuStigler&lt;/a>,
&lt;a href="https://github.com/md0u80c9" target="_blank" rel="noopener">@md0u80c9&lt;/a>,
&lt;a href="https://github.com/michaelquinn32" target="_blank" rel="noopener">@michaelquinn32&lt;/a>,
&lt;a href="https://github.com/mitchelloharawild" target="_blank" rel="noopener">@mitchelloharawild&lt;/a>,
&lt;a href="https://github.com/moodymudskipper" target="_blank" rel="noopener">@moodymudskipper&lt;/a>,
&lt;a href="https://github.com/msberends" target="_blank" rel="noopener">@msberends&lt;/a>,
&lt;a href="https://github.com/pavopax" target="_blank" rel="noopener">@pavopax&lt;/a>,
&lt;a href="https://github.com/rbjanis" target="_blank" rel="noopener">@rbjanis&lt;/a>,
&lt;a href="https://github.com/romainfrancois" target="_blank" rel="noopener">@romainfrancois&lt;/a>,
&lt;a href="https://github.com/rvg02010" target="_blank" rel="noopener">@rvg02010&lt;/a>,
&lt;a href="https://github.com/sfirke" target="_blank" rel="noopener">@sfirke&lt;/a>,
&lt;a href="https://github.com/Shians" target="_blank" rel="noopener">@Shians&lt;/a>,
&lt;a href="https://github.com/ShixiangWang" target="_blank" rel="noopener">@ShixiangWang&lt;/a>,
&lt;a href="https://github.com/stephensrmmartin" target="_blank" rel="noopener">@stephensrmmartin&lt;/a>,
&lt;a href="https://github.com/stufield" target="_blank" rel="noopener">@stufield&lt;/a>,
&lt;a href="https://github.com/Tazinho" target="_blank" rel="noopener">@Tazinho&lt;/a>,
&lt;a href="https://github.com/TimTeaFan" target="_blank" rel="noopener">@TimTeaFan&lt;/a>,
&lt;a href="https://github.com/tyluRp" target="_blank" rel="noopener">@tyluRp&lt;/a>,
&lt;a href="https://github.com/wgrundlingh" target="_blank" rel="noopener">@wgrundlingh&lt;/a>,
&lt;a href="https://github.com/xvrdm" target="_blank" rel="noopener">@xvrdm&lt;/a>,
&lt;a href="https://github.com/yannabraham" target="_blank" rel="noopener">@yannabraham&lt;/a>,
&lt;a href="https://github.com/ycroissant" target="_blank" rel="noopener">@ycroissant&lt;/a>,
&lt;a href="https://github.com/yogat3ch" target="_blank" rel="noopener">@yogat3ch&lt;/a>, and
&lt;a href="https://github.com/yutannihilation" target="_blank" rel="noopener">@yutannihilation&lt;/a>.&lt;/p>
&lt;p>Your contributions are very valuable and important to us!&lt;/p></description></item><item><title>Multi Process Task Queue in 100 Lines of R Code</title><link>https://www.tidyverse.org/blog/2019/09/callr-task-q/</link><pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2019/09/callr-task-q/</guid><description>
&lt;STYLE type='text/css' scoped>
PRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};
&lt;/STYLE>
&lt;div id="introduction" class="section level2">
&lt;h2>Introduction&lt;/h2>
&lt;p>This post is a demo of &lt;code>callr::r_session&lt;/code>, a persistent R session you can
use to run R code asynchronously. I set out to build a task queue, which
runs tasks in subprocesses, concurrently, in a mere 100 lines of R code.&lt;/p>
&lt;p>Here is a short teaser for how the queue will work. &lt;code>task_q$new()&lt;/code> creates
a new R6 object, which represents the queue. Its &lt;code>push()&lt;/code> method adds a
task, which is a function and its arguments, similar to &lt;code>callr::r()&lt;/code>.
The &lt;code>pop()&lt;/code> method gets the results of the first task that has finished.
&lt;code>pop()&lt;/code> has a timeout argument, which lets you wait for a task to finish,
if all pushed tasks are still running. It returns &lt;code>NULL&lt;/code> if no task has
finished before the timeout was over. The timeout can be &lt;code>0&lt;/code> or &lt;code>Inf&lt;/code>,
meaning no wait at all, or wait indefinitely. The default timeout is &lt;code>0&lt;/code>.&lt;/p>
&lt;pre class="r">&lt;code>q &amp;lt;- task_q$new()
q$push(function() { Sys.getpid() })
q$push(function() { Sys.sleep(.5); Sys.getpid() })
q$pop()
#&amp;gt; NULL&lt;/code>&lt;/pre>
&lt;p>This &lt;code>pop()&lt;/code> call returned &lt;code>NULL&lt;/code>, as none of the tasks are done yet.
Even though running &lt;code>Sys.getpid()&lt;/code> is fast, the worker processes also need
200-500 ms time start up, when the queue is created. If you are willing to
wait a bit, at least one task should be done in less than half a second
(500 ms), but usually not the second one yet:&lt;/p>
&lt;pre class="r">&lt;code>q$pop(500)$result
#&amp;gt; [1] 18383
q$pop()
#&amp;gt; NULL&lt;/code>&lt;/pre>
&lt;p>The &lt;code>poll()&lt;/code> method checks for finished tasks without removing their
results from the queue. It also has a timeout parameter, which works the
same way as &lt;code>pop()&lt;/code>’s timeout. &lt;code>poll()&lt;/code> returns the identifiers of all
tasks that are done.&lt;/p>
&lt;pre class="r">&lt;code>q$poll(Inf)
#&amp;gt; [1] &amp;quot;.2&amp;quot;
q$pop()$result
#&amp;gt; [1] 18385&lt;/code>&lt;/pre>
&lt;p>If the queue is empty, i.e. no tasks are running and no tasks are waiting,
then &lt;code>pop()&lt;/code> always returns &lt;code>NULL&lt;/code>, immediately, because there is nothing
to wait for:&lt;/p>
&lt;pre class="r">&lt;code>q$pop()
#&amp;gt; NULL&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="api-design" class="section level2">
&lt;h2>API design&lt;/h2>
&lt;p>The task queue will be an R6 class, with &lt;code>push()&lt;/code>, &lt;code>pop()&lt;/code>, &lt;code>poll()&lt;/code>
methods like above, and some other query methods:&lt;/p>
&lt;pre class="r">&lt;code>task_q &amp;lt;- R6::R6Class(
&amp;quot;task_q&amp;quot;,
public = list(
initialize = function(num_workers = 4L) { },
get_num_waiting = function() { },
get_num_running = function() { },
get_num_done = function() { },
is_idle = function() { },
list_tasks = function() { },
push = function(fun, args = list(), id = NULL) { },
poll = function(timeout = 0) { },
pop = function(timeout = 0) { }
)
)&lt;/code>&lt;/pre>
&lt;p>&lt;code>initialize()&lt;/code> has an argument to set the number of workers. The size of
the worker pool remains fixed for the lifetime of the queue.&lt;/p>
&lt;p>The &lt;code>get_num_*()&lt;/code> methods return the number of waiting, running and
completed tasks. &lt;code>get_num_done()&lt;/code> includes tasks that haven’t been
&lt;code>pop()&lt;/code>-d yet. Once a task is &lt;code>pop()&lt;/code>-d, it is removed completely from the
queue.&lt;/p>
&lt;p>&lt;code>is_idle()&lt;/code> returns &lt;code>TRUE&lt;/code> if the queue does not have any tasks (in any
state). &lt;code>list_tasks()&lt;/code> returns a data frame (tibble) with data about the
tasks. This is especially useful for debugging.&lt;/p>
&lt;p>&lt;code>push()&lt;/code> adds a task to the queue. &lt;code>poll()&lt;/code> returns the ids of all tasks
that are done. &lt;code>pop()&lt;/code> returns the result of the oldest task that is done.&lt;/p>
&lt;/div>
&lt;div id="data-structure" class="section level2">
&lt;h2>Data structure&lt;/h2>
&lt;p>Before writing the methods, I’ll design the data structure that will
store all information about the tasks and the worker processes. The
standard data structure for a list of records is a data frame in R.&lt;/p>
&lt;p>A logical choice would be to have two data frames, one for the
tasks, and another one for the workers. Then we could assign unique
identifiers to both tasks and processes and cross-reference them in the
two data frames, to mark which task a worker is running, and which worker
a task is running on.&lt;/p>
&lt;p>I’ll go a step further here, and store both the tasks and the workers
&lt;em>in the same&lt;/em> data frame. This will simplify the implementation
considerably. The queue will create a dummy &lt;em>idle&lt;/em> task for each worker.
Each worker will (pretend to) run its dummy task if there are no other,
real tasks waiting in the queue. So the task list will always contain at
least as many tasks as the number of workers in the queue.&lt;/p>
&lt;p>An example for a task data frame:&lt;/p>
&lt;pre class="r">&lt;code>q$list_tasks()
#&amp;gt; # A tibble: 9 x 7
#&amp;gt; id idle state fun args worker result
#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;list&amp;gt; &amp;lt;list&amp;gt; &amp;lt;list&amp;gt; &amp;lt;list&amp;gt;
#&amp;gt; 1 .11 FALSE running &amp;lt;fn&amp;gt; &amp;lt;list [1]&amp;gt; &amp;lt;r_sessin&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 2 .12 FALSE running &amp;lt;fn&amp;gt; &amp;lt;list [1]&amp;gt; &amp;lt;r_sessin&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 3 .13 FALSE running &amp;lt;fn&amp;gt; &amp;lt;list [1]&amp;gt; &amp;lt;r_sessin&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 4 .14 FALSE running &amp;lt;fn&amp;gt; &amp;lt;list [1]&amp;gt; &amp;lt;r_sessin&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 5 .15 FALSE waiting &amp;lt;fn&amp;gt; &amp;lt;list [1]&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 6 .idle-1 TRUE waiting &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 7 .idle-2 TRUE waiting &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 8 .idle-3 TRUE waiting &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 9 .idle-4 TRUE waiting &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt;&lt;/code>&lt;/pre>
&lt;p>The columns are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>id&lt;/code>: a character id, which can be user-supplied or auto-assigned (if the
user did not supply it). This is useful to identify tasks.&lt;/li>
&lt;li>&lt;code>idle&lt;/code>: a logical flag, whether this is a dummy idle task or not.&lt;/li>
&lt;li>&lt;code>state&lt;/code>: current state of the task. More about this shortly.&lt;/li>
&lt;li>&lt;code>fun&lt;/code>: the function the task needs to run. This is a list column.&lt;/li>
&lt;li>&lt;code>args&lt;/code>: arguments to pass to the function. This is a list itself,
so the column is a list column.&lt;/li>
&lt;li>&lt;code>worker&lt;/code>: the &lt;code>callr::r_session&lt;/code> object, the R session that is running
the task, or &lt;code>NULL&lt;/code> if the task is not running.&lt;/li>
&lt;li>&lt;code>result&lt;/code>: another list column, the result of the run, if the task is
already done, &lt;code>NULL&lt;/code> otherwise.&lt;/li>
&lt;/ul>
&lt;p>The possible task states are: &lt;em>waiting&lt;/em>, &lt;em>running&lt;/em>, &lt;em>ready&lt;/em> and &lt;em>done&lt;/em>.
The first two are not very surprising. The distinction between the
last two is somewhat technical. A task is &lt;em>ready&lt;/em> if the background R
session has finished running it. The queue hasn’t read out its result yet,
and the R session is still assigned to it. (I.e. the task’s &lt;code>worker&lt;/code> column
is not &lt;code>NULL&lt;/code>.) A task is &lt;em>done&lt;/em> if the queue has already read out the
result of the function call, and has reassigned the R session to another
task, so its &lt;code>worker&lt;/code> column is &lt;code>NULL&lt;/code>.&lt;/p>
&lt;p>Tasks that are &lt;em>running&lt;/em> and &lt;em>ready&lt;/em> always have an R session assigned to
them. Since all R sessions are always assigned to tasks (dummy idle tasks,
if there is nothing else), this means the that the sum of the &lt;em>running&lt;/em>
and &lt;em>ready&lt;/em> tasks always equals the number of workers.&lt;/p>
&lt;p>The idle tasks are somewhat special, because they are never &lt;em>done&lt;/em>. If
an idle task is &lt;em>ready&lt;/em> and its worker is reassigned, it will be &lt;em>waiting&lt;/em>
again. They are also almost never in the &lt;em>running&lt;/em> state. When the queue
assigns a worker to an idle task, the task will immediately go into the
&lt;em>ready&lt;/em> state, since the queue is immediately allowed to re-assign the
worker, should a real task be &lt;em>waiting&lt;/em>.&lt;/p>
&lt;p>However, when a worker is starting up, its idle task is &lt;em>running&lt;/em>, until
their background R process has started up. After this initial &lt;em>running&lt;/em>
state the idle tasks are always either &lt;em>waiting&lt;/em> or &lt;em>ready&lt;/em>.&lt;/p>
&lt;/div>
&lt;div id="implementation" class="section level2">
&lt;h2>Implementation&lt;/h2>
&lt;p>I am ready to start the implementation now. I’ll focus on the individual
methods here, and show the complete code of the R6 class at the end.
Let’s start with the internal data. &lt;code>tasks&lt;/code> contains the task data frame,
&lt;code>initialize()&lt;/code> will create it. &lt;code>next_id&lt;/code> and &lt;code>get_next_id&lt;/code> will provide
us unique task ids. I prefix these with a dot, to increase the probability
that they won’t interfere with user supplied task ids. So they’ll
be &lt;code>&amp;quot;.1&amp;quot;&lt;/code>, &lt;code>&amp;quot;.2&amp;quot;&lt;/code>, etc.&lt;/p>
&lt;pre class="r">&lt;code> private = list(
tasks = NULL,
next_id = 1L,
get_next_id = function() {
id &amp;lt;- private$next_id
private$next_id &amp;lt;- id + 1L
paste0(&amp;quot;.&amp;quot;, id)
}
)&lt;/code>&lt;/pre>
&lt;p>The &lt;code>initialize()&lt;/code> method will just defer the work to a private method.&lt;/p>
&lt;pre class="r">&lt;code> initialize = function(num_workers = 4L) {
private$start_workers(num_workers)
invisible(self)
}&lt;/code>&lt;/pre>
&lt;p>The private &lt;code>start_workers()&lt;/code> method that actually starts the
workers and creates the &lt;code>tasks&lt;/code> data frame:&lt;/p>
&lt;pre class="r">&lt;code> start_workers = function(num_workers) {
private$tasks &amp;lt;- tibble::tibble(
id = character(), idle = logical(),
state = c(&amp;quot;waiting&amp;quot;, &amp;quot;running&amp;quot;, &amp;quot;ready&amp;quot;, &amp;quot;done&amp;quot;)[0],
fun = list(), args = list(), worker = list(), result = list())
for (i in seq_len(num_workers)) {
rs &amp;lt;- callr::r_session$new(wait = FALSE)
private$tasks &amp;lt;- tibble::add_row(private$tasks,
id = paste0(&amp;quot;.idle-&amp;quot;, i), idle = TRUE, state = &amp;quot;running&amp;quot;,
fun = list(NULL), args = list(NULL), worker = list(rs),
result = list(NULL))
}
}&lt;/code>&lt;/pre>
&lt;p>The starting values of the empty task data frame are mostly straightforward.
If you are wondering about the indexing with zero here, it is a simple
way to list all possible task states in the code, in one place, as a note
for the code reader.&lt;/p>
&lt;p>&lt;code>callr::r_session$new()&lt;/code> starts a background R process. The &lt;code>wait = FALSE&lt;/code>
argument tells callr &lt;em>not&lt;/em> to wait until the process is ready to run R
code. This way the R processes start up in parallel, which is worth the
trouble of making our dummy tasks a bit more complicated. The idle tasks
are named &lt;code>.idle-*&lt;/code>. After initialization, the workers are started, and
the &lt;em>running&lt;/em> idle tasks are added to the data frame.&lt;/p>
&lt;p>The query methods are next:&lt;/p>
&lt;pre class="r">&lt;code> list_tasks = function() private$tasks,
get_num_waiting = function()
sum(!private$tasks$idle &amp;amp; private$tasks$state == &amp;quot;waiting&amp;quot;),
get_num_running = function() sum(private$tasks$state == &amp;quot;running&amp;quot;),
get_num_done = function() sum(private$tasks$state == &amp;quot;done&amp;quot;),
is_idle = function() sum(!private$tasks$idle) == 0
&lt;/code>&lt;/pre>
&lt;p>&lt;code>list_tasks()&lt;/code> will just return the task data frame, for simplicity.
If not all data is needed, the &lt;code>get_num_*()&lt;/code> functions are simpler.
For the first two, we need to exclude the dummy idle tasks, because they
can be in the &lt;em>waiting&lt;/em> and &lt;em>running&lt;/em> state as well. They cannot be in the
&lt;em>done&lt;/em> state.&lt;/p>
&lt;p>We still need to write the &lt;code>push()&lt;/code>, &lt;code>pop()&lt;/code> and &lt;code>poll()&lt;/code> public methods.
As the reader might suspect, these are more involved. Let’s start with
&lt;code>push()&lt;/code>.&lt;/p>
&lt;pre class="r">&lt;code> push = function(fun, args = list(), id = NULL) {
if (is.null(id)) id &amp;lt;- private$get_next_id()
if (id %in% private$tasks$id) stop(&amp;quot;Duplicate task id&amp;quot;)
before &amp;lt;- which(private$tasks$idle)[1]
private$tasks &amp;lt;- tibble::add_row(private$tasks, .before = before,
id = id, idle = FALSE, state = &amp;quot;waiting&amp;quot;, fun = list(fun),
args = list(args), worker = list(NULL), result = list(NULL))
private$schedule()
invisible(id)
}&lt;/code>&lt;/pre>
&lt;p>The queue needs to run the tasks in the same order as they were added.
The data frame will keep the correct order, with the additional
tweak that the idle tasks are always at the end. Indeed, these should only
run if there is no other task waiting. So &lt;code>push()&lt;/code> adds the new task right
before the idle tasks.&lt;/p>
&lt;p>The &lt;code>schedule()&lt;/code> private method is the core of the queue. It starts the
tasks on the selected background R workers, and it also reads out the
results after they are done. I.e. it performs the &lt;em>waiting&lt;/em> to &lt;em>running&lt;/em> and
&lt;em>ready&lt;/em> to &lt;em>done&lt;/em> task state transitions. We will show it later.&lt;/p>
&lt;p>&lt;code>push()&lt;/code> returns the id of the newly added task, this can be helpful
to follow the task and match it to the results of a &lt;code>pop()&lt;/code> call.&lt;/p>
&lt;p>&lt;code>pop()&lt;/code> uses &lt;code>poll()&lt;/code> to get a list of tasks that are &lt;em>done&lt;/em>, and returns
the result of the oldest one, which is always the first, thanks to the
ordering of the task data frame.&lt;/p>
&lt;pre class="r">&lt;code> pop = function(timeout = 0) {
if (is.na(done &amp;lt;- self$poll(timeout)[1])) return(NULL)
row &amp;lt;- match(done, private$tasks$id)
result &amp;lt;- private$tasks$result[[row]]
private$tasks &amp;lt;- private$tasks[-row, ]
c(result, list(task_id = done))
}&lt;/code>&lt;/pre>
&lt;p>If no task is &lt;em>done&lt;/em>, then it returns &lt;code>NULL&lt;/code>. The returned task is removed
from the task data frame, and from the queue in general, for good. &lt;code>pop()&lt;/code>
adds the id of the task to the returned result as &lt;code>task_id&lt;/code>, for easier
matching of tasks to results.&lt;/p>
&lt;p>&lt;code>poll()&lt;/code> is the only method that checks on the running workers. This is
important to remember, and unfortunately easy to forget. If the user does
not call &lt;code>poll()&lt;/code>, either directly or via &lt;code>pop()&lt;/code>, the state of a &lt;em>running&lt;/em>
task cannot change, even if the background R session itself has finished.
In other words, one cannot check the status of the tasks by listing
the task data frame with &lt;code>list_tasks()&lt;/code> periodically. This will never
change if &lt;code>poll()&lt;/code> is not called.&lt;/p>
&lt;p>I start with an initial version of &lt;code>poll()&lt;/code>, which will need changes later,
but this is hopefully easier to understand first:&lt;/p>
&lt;pre class="r">&lt;code> poll = function(timeout = 0) {
as_ms &amp;lt;- function(x) if (x == Inf) -1L else as.integer(x)
topoll &amp;lt;- which(private$tasks$state == &amp;quot;running&amp;quot;)
conns &amp;lt;- lapply(
private$tasks$worker[topoll],
function(x) x$get_poll_connection())
pr &amp;lt;- processx::poll(conns, as_ms(timeout))
private$tasks$state[topoll][pr == &amp;quot;ready&amp;quot;] &amp;lt;- &amp;quot;ready&amp;quot;
private$schedule()
private$tasks$id[private$tasks$state == &amp;quot;done&amp;quot;]
}&lt;/code>&lt;/pre>
&lt;p>We only need to check on tasks that are &lt;em>running&lt;/em>. &lt;code>poll()&lt;/code> uses the
&lt;code>processx::poll()&lt;/code> function that can wait on several &lt;code>callr::r_session&lt;/code>s
at once. More precisely, I extract the &lt;em>poll connections&lt;/em> of the
&lt;code>r_session&lt;/code> objects and call &lt;code>processx::poll()&lt;/code> on these. An &lt;code>r_session&lt;/code>
may have multiple pollable connections, one for its standard output
stream, one for its standard error stream. These are not used by default
in &lt;code>r_session&lt;/code>s, and I only want to check on the poll connection, which
signals if the R session has finished with the computation (or encountered
an error while working on it). &lt;code>processx::poll()&lt;/code> returns a list of
character vectors, one entry for each (&lt;em>running&lt;/em>) task. This is &lt;code>&amp;quot;ready&amp;quot;&lt;/code>
if the session is ready with the task. (Or it is &lt;code>&amp;quot;silent&amp;quot;&lt;/code> if it is not
ready, or &lt;code>&amp;quot;timeout&amp;quot;&lt;/code> if the time limit expired and no workers are ready.)&lt;/p>
&lt;p>All tasks that returned &lt;code>&amp;quot;ready&amp;quot;&lt;/code> are indeed set to the &lt;em>ready&lt;/em> state.
After this &lt;code>poll()&lt;/code> calls &lt;code>schedule()&lt;/code> to read out the results of the
&lt;em>ready&lt;/em> tasks and reassign their workers to &lt;em>waiting&lt;/em> ones.&lt;/p>
&lt;p>&lt;code>poll()&lt;/code> returns the ids of all tasks that are &lt;em>done&lt;/em>.&lt;/p>
&lt;p>This version of &lt;code>poll()&lt;/code> has a small issue when the R sessions are starting
up: it might return without any results, before the specified timeout
value is over. At startup the idle tasks are &lt;em>running,&lt;/em> and they are
polled by &lt;code>processx::poll()&lt;/code>. If any of the R sessions start up before the
timeout is over, &lt;code>processx::poll()&lt;/code> returns with &lt;code>&amp;quot;ready&amp;quot;&lt;/code> for them.
But &lt;code>schedule()&lt;/code> cannot mark these tasks as &lt;em>done&lt;/em>, because they are idle
tasks, they’ll be &lt;em>waiting&lt;/em>, and with no task &lt;em>done&lt;/em>, &lt;code>poll()&lt;/code>
will return an empty vector. This is problematic, because &lt;code>poll()&lt;/code>
promises to either wait until the specified timeout &lt;em>or&lt;/em> return a task
that is &lt;em>done&lt;/em>. So we need to wrap the simplified &lt;code>poll()&lt;/code> into a loop, and
keep calling &lt;code>processx::poll()&lt;/code> until either the timeout
expires or a task is &lt;em>done&lt;/em>. The final &lt;code>poll()&lt;/code> looks like this:&lt;/p>
&lt;pre class="r">&lt;code> poll = function(timeout = 0) {
limit &amp;lt;- Sys.time() + timeout
as_ms &amp;lt;- function(x) if (x == Inf) -1L else as.integer(x)
repeat{
topoll &amp;lt;- which(private$tasks$state == &amp;quot;running&amp;quot;)
conns &amp;lt;- lapply(
private$tasks$worker[topoll],
function(x) x$get_poll_connection())
pr &amp;lt;- processx::poll(conns, as_ms(timeout))
private$tasks$state[topoll][pr == &amp;quot;ready&amp;quot;] &amp;lt;- &amp;quot;ready&amp;quot;
private$schedule()
ret &amp;lt;- private$tasks$id[private$tasks$state == &amp;quot;done&amp;quot;]
if (is.finite(timeout)) timeout &amp;lt;- limit - Sys.time()
if (length(ret) || timeout &amp;lt; 0) break;
}
ret
}&lt;/code>&lt;/pre>
&lt;p>Only the private &lt;code>schedule()&lt;/code> method is missing now:&lt;/p>
&lt;pre class="r">&lt;code> schedule = function() {
ready &amp;lt;- which(private$tasks$state == &amp;quot;ready&amp;quot;)
if (!length(ready)) return()
rss &amp;lt;- private$tasks$worker[ready]
private$tasks$result[ready] &amp;lt;- lapply(rss, function(x) x$read())
private$tasks$worker[ready] &amp;lt;- replicate(length(ready), NULL)
private$tasks$state[ready] &amp;lt;-
ifelse(private$tasks$idle[ready], &amp;quot;waiting&amp;quot;, &amp;quot;done&amp;quot;)
waiting &amp;lt;- which(private$tasks$state == &amp;quot;waiting&amp;quot;)[1:length(ready)]
private$tasks$worker[waiting] &amp;lt;- rss
private$tasks$state[waiting] &amp;lt;-
ifelse(private$tasks$idle[waiting], &amp;quot;ready&amp;quot;, &amp;quot;running&amp;quot;)
lapply(waiting, function(i) {
if (! private$tasks$idle[i]) {
private$tasks$worker[[i]]$call(private$tasks$fun[[i]],
private$tasks$args[[i]])
}
})
}&lt;/code>&lt;/pre>
&lt;p>&lt;code>schedule()&lt;/code>’s job is to perform the &lt;em>ready&lt;/em> to &lt;em>done&lt;/em> and the
&lt;em>waiting&lt;/em> to &lt;em>running&lt;/em> state transitions. The first involves reading
out the results of the &lt;em>ready&lt;/em> tasks and the second involves starting
new computation on the workers.&lt;/p>
&lt;p>For every &lt;em>ready&lt;/em> task, &lt;code>schedule()&lt;/code> perform three steps:&lt;/p>
&lt;ol style="list-style-type: decimal">
&lt;li>Reads out and stores its result. (It can do this for the idle tasks
as well, for these &lt;code>r_session$read()&lt;/code> will return &lt;code>NULL&lt;/code>.)&lt;/li>
&lt;li>Removes its worker, i.e. sets it to &lt;code>NULL&lt;/code>.&lt;/li>
&lt;li>Updates its state to &lt;em>done&lt;/em>. (Or to &lt;em>waiting&lt;/em> if it is an idle task.)&lt;/li>
&lt;/ol>
&lt;p>Then it deals with the &lt;em>waiting&lt;/em> tasks, but not more than the number of
&lt;em>ready&lt;/em> tasks the queue had. For these &lt;em>waiting&lt;/em> tasks &lt;code>schedule()&lt;/code>
performs three steps:&lt;/p>
&lt;ol style="list-style-type: decimal">
&lt;li>Assigns a just removed worker to it.&lt;/li>
&lt;li>Sets state to &lt;em>running&lt;/em>. (Or to &lt;em>ready&lt;/em> for idle tasks.)&lt;/li>
&lt;li>Calls &lt;code>fun(args)&lt;/code> in the background session.&lt;/li>
&lt;/ol>
&lt;p>When selecting the waiting tasks to run, the ordering of the task table
makes sure that the oldest task is selected first, and that idle tasks
are only selected if there is nothing else to run. The idle tasks make sure
that &lt;code>schedule()&lt;/code> always has at least as many waiting tasks as ready.&lt;/p>
&lt;p>It is possible that &lt;code>schedule()&lt;/code> first sets an idle task to &lt;em>waiting&lt;/em> and
then selects it and (re-)assigns a worker to it. This is perfectly fine.&lt;/p>
&lt;/div>
&lt;div id="try-it-out" class="section level2">
&lt;h2>Try it out&lt;/h2>
&lt;p>As a simple example, we add a bunch of fake tasks to a queue, and then
run a simple event loop to completion. (To run this code, first
you need to run the complete code at the end of the post.)&lt;/p>
&lt;pre class="r">&lt;code>q &amp;lt;- task_q$new()
for (i in 1:10) {
q$push(function(i) { Sys.sleep(runif(1)); paste(i, &amp;quot;done&amp;quot;) }, list(i = i))
}&lt;/code>&lt;/pre>
&lt;p>This is how the queue looks after adding all these tasks:&lt;/p>
&lt;pre class="r">&lt;code>q$list_tasks()&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-output">&lt;CODE>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 14 x 7&lt;/span>&lt;span>
#&amp;gt; id idle state fun args worker result
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;lgl&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 1&lt;/span>&lt;span> .1 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 2&lt;/span>&lt;span> .2 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 3&lt;/span>&lt;span> .3 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 4&lt;/span>&lt;span> .4 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 5&lt;/span>&lt;span> .5 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 6&lt;/span>&lt;span> .6 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 7&lt;/span>&lt;span> .7 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 8&lt;/span>&lt;span> .8 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 9&lt;/span>&lt;span> .9 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>10&lt;/span>&lt;span> .10 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>11&lt;/span>&lt;span> .idle-1 TRUE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>12&lt;/span>&lt;span> .idle-2 TRUE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>13&lt;/span>&lt;span> .idle-3 TRUE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>14&lt;/span>&lt;span> .idle-4 TRUE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;p>Probably no tasks are running just yet. The queue only has the chance to
change its state when you &lt;code>push()&lt;/code>, &lt;code>pop()&lt;/code> or &lt;code>poll()&lt;/code>. When pushing the
tasks to the queue, the workers were still starting up (i.e. the idle tasks
are &lt;em>running&lt;/em>), so &lt;code>push()&lt;/code> could not start any real tasks. Never mind, as
soon as you try to &lt;code>pop()&lt;/code> or &lt;code>poll()&lt;/code>, they’ll start running:&lt;/p>
&lt;pre class="r">&lt;code>q$poll(1000L)
#&amp;gt; [1] &amp;quot;.2&amp;quot;
q$list_tasks()&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-output">&lt;CODE>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 14 x 7&lt;/span>&lt;span>
#&amp;gt; id idle state fun args worker result
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;lgl&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 1&lt;/span>&lt;span> .1 FALSE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 2&lt;/span>&lt;span> .2 FALSE done &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;cllr_ss_&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 3&lt;/span>&lt;span> .3 FALSE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 4&lt;/span>&lt;span> .4 FALSE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 5&lt;/span>&lt;span> .5 FALSE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 6&lt;/span>&lt;span> .6 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 7&lt;/span>&lt;span> .7 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 8&lt;/span>&lt;span> .8 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 9&lt;/span>&lt;span> .9 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>10&lt;/span>&lt;span> .10 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>11&lt;/span>&lt;span> .idle-1 TRUE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;cllr_ss_&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>12&lt;/span>&lt;span> .idle-2 TRUE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;cllr_ss_&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>13&lt;/span>&lt;span> .idle-3 TRUE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;cllr_ss_&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>14&lt;/span>&lt;span> .idle-4 TRUE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;cllr_ss_&amp;gt;&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;pre class="r">&lt;code>while (!q$is_idle()) {
task_result &amp;lt;- q$pop(Inf)
print(task_result$result)
}
#&amp;gt; [1] &amp;quot;1 done&amp;quot;
#&amp;gt; [1] &amp;quot;2 done&amp;quot;
#&amp;gt; [1] &amp;quot;3 done&amp;quot;
#&amp;gt; [1] &amp;quot;4 done&amp;quot;
#&amp;gt; [1] &amp;quot;6 done&amp;quot;
#&amp;gt; [1] &amp;quot;5 done&amp;quot;
#&amp;gt; [1] &amp;quot;7 done&amp;quot;
#&amp;gt; [1] &amp;quot;8 done&amp;quot;
#&amp;gt; [1] &amp;quot;9 done&amp;quot;
#&amp;gt; [1] &amp;quot;10 done&amp;quot;&lt;/code>&lt;/pre>
&lt;p>&lt;code>pop()&lt;/code> just returns whatever &lt;code>r_session$read()&lt;/code> returns. Here is the last
result from the loop:&lt;/p>
&lt;pre class="r">&lt;code>task_result
#&amp;gt; $code
#&amp;gt; [1] 200
#&amp;gt;
#&amp;gt; $message
#&amp;gt; [1] &amp;quot;done file47c57a1f62b5&amp;quot;
#&amp;gt;
#&amp;gt; $result
#&amp;gt; [1] &amp;quot;10 done&amp;quot;
#&amp;gt;
#&amp;gt; $stdout
#&amp;gt; [1] &amp;quot;&amp;quot;
#&amp;gt;
#&amp;gt; $stderr
#&amp;gt; [1] &amp;quot;&amp;quot;
#&amp;gt;
#&amp;gt; $error
#&amp;gt; NULL
#&amp;gt;
#&amp;gt; $task_id
#&amp;gt; [1] &amp;quot;.10&amp;quot;&lt;/code>&lt;/pre>
&lt;p>The important fields are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>result&lt;/code>: the R object returned from the function. This is &lt;code>NULL&lt;/code> on
error.&lt;/li>
&lt;li>&lt;code>stdout&lt;/code>: the standard output of the background session, while running the
function.&lt;/li>
&lt;li>&lt;code>stderr&lt;/code>: the standard error.&lt;/li>
&lt;li>&lt;code>error&lt;/code>: error object if the function failed. &lt;code>NULL&lt;/code> otherwise.&lt;/li>
&lt;li>&lt;code>task_id&lt;/code>: the user supplied or auto-generated task id.&lt;/li>
&lt;/ul>
&lt;p>Let’s see a task that errors.&lt;/p>
&lt;pre class="r">&lt;code>q$push(function() stop(&amp;quot;This failed, sorry&amp;quot;))
res &amp;lt;- q$pop(Inf)
res$error
#&amp;gt; &amp;lt;callr_status_error: callr subprocess failed: This failed, sorry&amp;gt;
#&amp;gt; in process
#&amp;gt; --&amp;gt;
#&amp;gt; &amp;lt;callr_remote_error in (function () stop(&amp;quot;This failed, sorry&amp;quot;))(): This failed, sorry&amp;gt;&lt;/code>&lt;/pre>
&lt;p>The error has two parts, the first refers to the main process, and the
second is the original error, thrown in the background process. To help with
debugging, the error from the background process includes a stack trace:&lt;/p>
&lt;pre class="r">&lt;code>res$error$parent$trace&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-output">&lt;CODE>#&amp;gt;
#&amp;gt; &lt;span style='font-weight: bold;'> ERROR TRACE for simpleError&lt;/span>&lt;span>
#&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 12. &lt;/span>&lt;span>(function () ...
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 13. &lt;/span>&lt;span style='color: #BBBB00;'>base:::stop&lt;/span>&lt;span>("This failed, sorry")
#&amp;gt; &lt;/span>&lt;span style='color: #00BBBB;font-style: italic;'>R/&amp;lt;text&amp;gt;:1:8&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 14. &lt;/span>&lt;span style='color: #BBBB00;'>base:::.handleSimpleError&lt;/span>&lt;span>(function (e) ...
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 15. &lt;/span>&lt;span style='color: #BBBB00;'>h&lt;/span>&lt;span>(simpleError(msg, call))
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;font-weight: bold;'>
#&amp;gt; x This failed, sorry &lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;p>For this simple function that just calls &lt;code>stop()&lt;/code>, the trace is not
very exciting, but it can be very helpful in general.&lt;/p>
&lt;/div>
&lt;div id="how-about-process-cleanup" class="section level2">
&lt;h2>How about process cleanup?&lt;/h2>
&lt;p>Luckily we don’t have to do anything extra to clean up the R processes.
&lt;code>callr::r_session&lt;/code> objects kill their background R session in their
finalizer, i.e. when they are garbage collected. As soon as the
workers have no references, because e.g. the queue object itself has no
references, the garbage collector will clean them up. An explicit &lt;code>kill()&lt;/code>
method would be still useful sometimes, but we leave that as an exercise to
the reader.&lt;/p>
&lt;/div>
&lt;div id="possible-improvements" class="section level2">
&lt;h2>Possible improvements&lt;/h2>
&lt;p>To use this task queue in real code, you would need to make it a bit more
robust and flexible.&lt;/p>
&lt;ol style="list-style-type: decimal">
&lt;li>Most importantly, you would need to handle crashes and freezes in the
worker tasks. &lt;code>callr::r_session&lt;/code> does handle crashes properly, i.e.
&lt;code>poll()&lt;/code> returns immediately if the session crashes, and then &lt;code>read()&lt;/code>
returns an informative error result. But the task queue should also do
something sensible in this case, e.g. return the error result, and
restart the worker.&lt;/li>
&lt;li>To handle freezing worker tasks, the queue could support task timeouts,
and then kill the tasks that don’t finish before their timeout expires.
This can be probably implemented using the &lt;code>r_session$interrupt()&lt;/code> and
&lt;code>r_session$kill()&lt;/code> methods.&lt;/li>
&lt;li>Make the queue interrupt-safe. All operations of the queue (e.g.
&lt;code>poll()&lt;/code>, &lt;code>pop()&lt;/code>, etc.) are interruptible by the user, but they
don’t always leave the task data frame and the background sessions in a
consistent state. E.g. if &lt;code>schedule()&lt;/code> is interrupted and you are
unlucky, you might lose all worker processes. This is a very hard issue
to solve, the relatively new &lt;code>suspendInterrupts()&lt;/code> function probably
helps a lot.&lt;/li>
&lt;li>It would be great to be able to change the number of worker tasks of
the queue dynamically, i.e. add and remove worker processes.&lt;/li>
&lt;li>The whole queue could be implemented in a background process, so that
the scheduler runs concurrently with the main R process. This is far
from being trivial, especially if one wants to avoid copying data
(the function arguments) twice for every task.&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div id="complete-code" class="section level2">
&lt;h2>Complete code&lt;/h2>
&lt;p>It is also available &lt;a href="https://github.com/r-lib/callr/blob/811a02f604de2cf03264f6b35ce9ec8a412f2581/vignettes/taskq.R">on GitHub&lt;/a>.&lt;/p>
&lt;pre class="r">&lt;code>task_q &amp;lt;- R6::R6Class(
&amp;quot;task_q&amp;quot;,
public = list(
initialize = function(concurrency = 4L) {
private$start_workers(concurrency)
invisible(self)
},
list_tasks = function() private$tasks,
get_num_waiting = function()
sum(!private$tasks$idle &amp;amp; private$tasks$state == &amp;quot;waiting&amp;quot;),
get_num_running = function()
sum(!private$tasks$idle &amp;amp; private$tasks$state == &amp;quot;running&amp;quot;),
get_num_done = function() sum(private$tasks$state == &amp;quot;done&amp;quot;),
is_idle = function() sum(!private$tasks$idle) == 0,
push = function(fun, args = list(), id = NULL) {
if (is.null(id)) id &amp;lt;- private$get_next_id()
if (id %in% private$tasks$id) stop(&amp;quot;Duplicate task id&amp;quot;)
before &amp;lt;- which(private$tasks$idle)[1]
private$tasks &amp;lt;- tibble::add_row(private$tasks, .before = before,
id = id, idle = FALSE, state = &amp;quot;waiting&amp;quot;, fun = list(fun),
args = list(args), worker = list(NULL), result = list(NULL))
private$schedule()
invisible(id)
},
poll = function(timeout = 0) {
limit &amp;lt;- Sys.time() + timeout
as_ms &amp;lt;- function(x) if (x == Inf) -1L else as.integer(x)
repeat{
topoll &amp;lt;- which(private$tasks$state == &amp;quot;running&amp;quot;)
conns &amp;lt;- lapply(
private$tasks$worker[topoll],
function(x) x$get_poll_connection())
pr &amp;lt;- processx::poll(conns, as_ms(timeout))
private$tasks$state[topoll][pr == &amp;quot;ready&amp;quot;] &amp;lt;- &amp;quot;ready&amp;quot;
private$schedule()
ret &amp;lt;- private$tasks$id[private$tasks$state == &amp;quot;done&amp;quot;]
if (is.finite(timeout)) timeout &amp;lt;- limit - Sys.time()
if (length(ret) || timeout &amp;lt; 0) break;
}
ret
},
pop = function(timeout = 0) {
if (is.na(done &amp;lt;- self$poll(timeout)[1])) return(NULL)
row &amp;lt;- match(done, private$tasks$id)
result &amp;lt;- private$tasks$result[[row]]
private$tasks &amp;lt;- private$tasks[-row, ]
c(result, list(task_id = done))
}
),
private = list(
tasks = NULL,
next_id = 1L,
get_next_id = function() {
id &amp;lt;- private$next_id
private$next_id &amp;lt;- id + 1L
paste0(&amp;quot;.&amp;quot;, id)
},
start_workers = function(concurrency) {
private$tasks &amp;lt;- tibble::tibble(
id = character(), idle = logical(),
state = c(&amp;quot;waiting&amp;quot;, &amp;quot;running&amp;quot;, &amp;quot;ready&amp;quot;, &amp;quot;done&amp;quot;)[NULL],
fun = list(), args = list(), worker = list(), result = list())
for (i in seq_len(concurrency)) {
rs &amp;lt;- callr::r_session$new(wait = FALSE)
private$tasks &amp;lt;- tibble::add_row(private$tasks,
id = paste0(&amp;quot;.idle-&amp;quot;, i), idle = TRUE, state = &amp;quot;running&amp;quot;,
fun = list(NULL), args = list(NULL), worker = list(rs),
result = list(NULL))
}
},
schedule = function() {
ready &amp;lt;- which(private$tasks$state == &amp;quot;ready&amp;quot;)
if (!length(ready)) return()
rss &amp;lt;- private$tasks$worker[ready]
private$tasks$result[ready] &amp;lt;- lapply(rss, function(x) x$read())
private$tasks$worker[ready] &amp;lt;- replicate(length(ready), NULL)
private$tasks$state[ready] &amp;lt;-
ifelse(private$tasks$idle[ready], &amp;quot;waiting&amp;quot;, &amp;quot;done&amp;quot;)
waiting &amp;lt;- which(private$tasks$state == &amp;quot;waiting&amp;quot;)[1:length(ready)]
private$tasks$worker[waiting] &amp;lt;- rss
private$tasks$state[waiting] &amp;lt;-
ifelse(private$tasks$idle[waiting], &amp;quot;ready&amp;quot;, &amp;quot;running&amp;quot;)
lapply(waiting, function(i) {
if (! private$tasks$idle[i]) {
private$tasks$worker[[i]]$call(private$tasks$fun[[i]],
private$tasks$args[[i]])
}
})
}
)
)&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>It depends - A dialog about dependencies</title><link>https://www.tidyverse.org/blog/2019/05/itdepends/</link><pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2019/05/itdepends/</guid><description>
&lt;h1 id="it-depends---a-dialog-about-dependencies">It depends - A dialog about dependencies
&lt;a href="#it-depends---a-dialog-about-dependencies">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h1>&lt;blockquote>
&lt;p>This post paraphrases my
&lt;a href="https://resources.rstudio.com/rstudio-conf-2019/it-depends-a-dialog-about-dependencies" target="_blank" rel="noopener">talk with the same name&lt;/a> at rstudio::conf 2019.&lt;/p>
&lt;/blockquote>
&lt;p>Software dependencies can be a double-edged sword.&lt;/p>
&lt;p>On one hand, they let you take advantage of others&amp;rsquo; work, giving your software
marvelous new features and reducing bugs.&lt;/p>
&lt;p>On the other hand, they can change over time, causing your software to break
unexpectedly and (potentially) increasing your maintenance burden. They can also
take additional disk space and installation time.&lt;/p>
&lt;p>These downsides have led some to suggest a &amp;lsquo;dependency zero&amp;rsquo; mindset.&lt;/p>
&lt;p>We feel that this is a major mistake for most projects, and will instead increase
maintenance burden, lower functionality and introduce additional bugs.&lt;/p>
&lt;h2 id="dependencies-are-not-equal">Dependencies are not equal
&lt;a href="#dependencies-are-not-equal">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>One issue with striving for minimal dependencies is it treats all dependencies
as equivalent. However, in reality this is far from the case. There are many
axes upon which dependencies can differ, but some of the most important include:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The type of the dependency. Some dependencies come bundled with R
itself (e.g. base, utils, stats) or are part of the &amp;lsquo;Recommended&amp;rsquo; packages
(e.g. Matrix, survival). These packages are very low cost to depend on,
as they are (nearly) universally installed on all users systems, and change
generally only with new R versions. In contrast dependencies can also come
from
&lt;a href="https://CRAN.r-project.org" target="_blank" rel="noopener">CRAN&lt;/a> or even from non-CRAN repositories
such as
&lt;a href="https://www.bioconductor.org/" target="_blank" rel="noopener">Bioconductor&lt;/a>,
&lt;a href="http://www.omegahat.net/" target="_blank" rel="noopener">Omegahat&lt;/a> or
&lt;a href="https://github.com/eddelbuettel/drat" target="_blank" rel="noopener">drat&lt;/a> which require users to configure
additional repositories before installation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The number of upstream dependencies. For example, the
&lt;a href="https://github.com/r-lib/rlang" target="_blank" rel="noopener">rlang&lt;/a> package has no upstream
dependencies apart from R; while the
&lt;a href="https://cran.r-project.org/package=CNVScope" target="_blank" rel="noopener">CNVscope&lt;/a> package has 125 upstream
dependencies, on both CRAN and Bioconductor.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Already fulfilled dependencies. If your package depends on dplyr then
taking an additional dependency on tibble comes at no additional cost, as
dplyr itself already depends on tibble. Additionally some of the most
popular packages (e.g. ggplot2) will already be installed on the majority
of users&amp;rsquo; machines. So adding a ggplot2 dependency is unlikely to incur additional
installation costs in most cases.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The time taken to compile the package from source. Packages containing R code
generally install in roughly the same amount of time, but those that contain
C, C++ or Fortran code can take very different amounts of time depending
on the complexity of the code. For example, the
&lt;a href="https://cran.r-project.org/package=glue" target="_blank" rel="noopener">glue&lt;/a> package takes ~5 seconds to
compile on CRAN&amp;rsquo;s build machines, whereas the
&lt;a href="https://cran.r-project.org/package=readr" target="_blank" rel="noopener">readr&lt;/a> package takes ~500
seconds to install on the same machines.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The size of the built binary package. Users installing binary packages need
to download them, so the size of the built binary is relevant, particularly
for those with slow internet connections. This also varies a great deal
across packages. The
&lt;a href="https://cran.r-project.org/package=awspack" target="_blank" rel="noopener">awspack&lt;/a>
binary is only 8.6 Kb in size, while the
&lt;a href="https://cran.r-project.org/package=h2o" target="_blank" rel="noopener">h2o&lt;/a> package is 123 Mb, and the
largest binary on Bioconductor is over 4 Gb!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The system requirements to build and use the package. Some packages
require additional system dependencies in order to be used.
For instance, the
&lt;a href="https://cran.r-project.org/package=rgdal" target="_blank" rel="noopener">rgdal&lt;/a> package
requires the GDAL and PROJ.4 dependencies, each of which in turn have
additional system dependencies. Another example is
&lt;a href="https://cran.r-project.org/package=rJava" target="_blank" rel="noopener">rJava&lt;/a> which requires a Java SDK
and also has additional steps needed to configure R for the proper Java
installation, which has caused
&lt;a href="https://stackoverflow.com/questions/tagged/rjava" target="_blank" rel="noopener">installation issues for many
people&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>I hope the above examples illustrate that not all package dependencies are
equal, and we should not treat them as such by using a simple count of
dependencies as our metric.&lt;/p>
&lt;h2 id="prefer-a-holistic-balanced-and-quantitative-approach">Prefer a holistic, balanced and quantitative approach
&lt;a href="#prefer-a-holistic-balanced-and-quantitative-approach">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Instead of striving for a minimal number of dependencies, I would instead suggest
a more holistic, balanced, and quantitative approach.&lt;/p>
&lt;p>A holistic approach looks at the project as a whole and asks who is the primary
audience? If the audience is other package authors, then a leaner package with fewer
dependencies may be more appropriate. If instead it is primarily data scientists or
statisticians they will likely already have many popular dependencies installed and
a more feature-full package is preferred.&lt;/p>
&lt;p>A balanced approach understands that adding (or removing) dependencies
come with trade-offs. Adding a dependency gives you additional features,
bug fixes, and real-world testing, at the costs of increased installation time,
disk space and maintenance if the dependency has breaking changes. In some
cases it makes sense to &lt;em>increase&lt;/em> dependencies for a package, even if an
implementation already exists. For instance base R has a number of different
implementations of non-standard evaluation with varying semantics across its
functions. The same used to be true of tidyverse packages as well, but now they
all depend on the implementations in the tidyselect and rlang packages,
which improves consistency of the feature substantially.&lt;/p>
&lt;p>In contrast, removing a dependency lowers installation time, disk space and
avoids potential breaking changes. However it also removes potential features,
increases bugs and takes additional development time.&lt;/p>
&lt;p>A quantitative approach lets you more accurately measure your dependencies, and
see which are heavier or lighter along various axes. Measuring each of the
dependencies gives you more power to reason about which dependencies would be
most beneficial to remove (if any).&lt;/p>
&lt;p>How you weigh these costs and benefits varies by the skills and experience of
the maintainer and the goals of the project.&lt;/p>
&lt;h2 id="beware-illusory-superiority">Beware illusory superiority
&lt;a href="#beware-illusory-superiority">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>When making these decisions it is important to consider the
psychological phenomenon of
&lt;a href="https://en.wikipedia.org/wiki/Illusory_superiority" target="_blank" rel="noopener">Illusory
Superiority&lt;/a>. Illusory
superiority is the idea that people (regardless of background) overestimate
(sometimes greatly) their own abilities in a given field. No one is truly
immune to this phenomenon, including the author of this post! This phenomenon
will cause you to overestimate your ability to re-implement features, and
underestimate the introduction of new bugs.&lt;/p>
&lt;p>However, even if you truly &lt;em>are&lt;/em> a more skilled programmer than the maintainer of
a dependency, we would still advise caution. The existing package has the
significant benefits of &lt;em>time&lt;/em> and &lt;em>users&lt;/em>. Users who have undoubtedly uncovered
numerous bugs using the package in the real world, which are now fixed.&lt;/p>
&lt;h2 id="itdepends-a-package-to-help-with-dependencies">itdepends, a package to help with dependencies
&lt;a href="#itdepends-a-package-to-help-with-dependencies">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The
&lt;a href="https://github.com/r-lib/itdepends" target="_blank" rel="noopener">itdepends&lt;/a> package
aids you in having a holistic, balanced and quantitative approach. It provides tools to
assess usage, measure weights, visualize proportions and if needed, assist
removal of dependencies.&lt;/p>
&lt;h2 id="assess-usage-with-itdependsdep_usage">Assess usage with &lt;code>itdepends::dep_usage()&lt;/code>
&lt;a href="#assess-usage-with-itdependsdep_usage">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>&lt;code>dep_usage_proj()&lt;/code> and &lt;code>dep_usage_pkg()&lt;/code> return a tibble of
every function call in your project or package. This information can then be
used to do things like&lt;/p>
&lt;ul>
&lt;li>show which packages you are using the most in a project&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidyverse&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">itdepends&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">dep_usage_pkg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ggplot2&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pkg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sort&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 23 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; pkg n&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 base 10333&lt;/span>
&lt;span class="c1">#&amp;gt; 2 ggplot2 1225&lt;/span>
&lt;span class="c1">#&amp;gt; 3 grid 313&lt;/span>
&lt;span class="c1">#&amp;gt; 4 scales 118&lt;/span>
&lt;span class="c1">#&amp;gt; 5 gtable 78&lt;/span>
&lt;span class="c1">#&amp;gt; 6 rlang 68&lt;/span>
&lt;span class="c1">#&amp;gt; 7 plyr 53&lt;/span>
&lt;span class="c1">#&amp;gt; 8 stats 44&lt;/span>
&lt;span class="c1">#&amp;gt; 9 utils 24&lt;/span>
&lt;span class="c1">#&amp;gt; 10 grDevices 20&lt;/span>
&lt;span class="c1">#&amp;gt; # … with 13 more rows&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>show the most frequently used &lt;em>function&lt;/em> from each package&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">itdepends&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">dep_usage_pkg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ggplot2&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pkg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fun&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">top_n&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">arrange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">desc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">head&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">#&amp;gt; Selecting by n&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 6 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; # Groups: pkg [6]&lt;/span>
&lt;span class="c1">#&amp;gt; pkg fun n&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 base &amp;lt;- 1627&lt;/span>
&lt;span class="c1">#&amp;gt; 2 grid unit 101&lt;/span>
&lt;span class="c1">#&amp;gt; 3 ggplot2 waiver 99&lt;/span>
&lt;span class="c1">#&amp;gt; 4 gtable gtable_add_grob 30&lt;/span>
&lt;span class="c1">#&amp;gt; 5 scales alpha 17&lt;/span>
&lt;span class="c1">#&amp;gt; 6 utils head 12&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="measure-weights-with-itdependsdep_weight">Measure weights with &lt;code>itdepends::dep_weight()&lt;/code>
&lt;a href="#measure-weights-with-itdependsdep_weight">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>&lt;code>dep_weight()&lt;/code> weighs the supplied packages and returns a tibble of 24
different metrics that can be used to compare them. The most important metric
varies by person, so it is useful to examine the full spectrum.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">weights&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">itdepends&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">dep_weight&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;dplyr&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;data.table&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">weights&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 2 x 25&lt;/span>
&lt;span class="c1">#&amp;gt; package num_user bin_self bin_user install_self install_user funs&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 dplyr 21 1821891 23147844 272. 436. 260&lt;/span>
&lt;span class="c1">#&amp;gt; 2 data.t… 0 6222622 6222622 29.5 29.5 108&lt;/span>
&lt;span class="c1">#&amp;gt; # … with 18 more variables: downloads &amp;lt;dbl&amp;gt;, last_release &amp;lt;dttm&amp;gt;,&lt;/span>
&lt;span class="c1">#&amp;gt; # open_issues &amp;lt;int&amp;gt;, last_updated &amp;lt;dttm&amp;gt;, stars &amp;lt;int&amp;gt;, forks &amp;lt;int&amp;gt;,&lt;/span>
&lt;span class="c1">#&amp;gt; # first_release &amp;lt;dttm&amp;gt;, total_releases &amp;lt;dbl&amp;gt;, releases_last_52 &amp;lt;int&amp;gt;,&lt;/span>
&lt;span class="c1">#&amp;gt; # num_dev &amp;lt;int&amp;gt;, install_dev &amp;lt;dbl&amp;gt;, bin_dev &amp;lt;dbl&amp;gt;, src_size &amp;lt;int&amp;gt;,&lt;/span>
&lt;span class="c1">#&amp;gt; # user_deps &amp;lt;list&amp;gt;, dev_deps &amp;lt;list&amp;gt;, self_timings &amp;lt;list&amp;gt;,&lt;/span>
&lt;span class="c1">#&amp;gt; # user_timings &amp;lt;list&amp;gt;, dev_timings &amp;lt;list&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The measures break down into a few rough categories:&lt;/p>
&lt;ul>
&lt;li>package and repository information (&lt;code>package&lt;/code>, &lt;code>funs&lt;/code>, &lt;code>downloads&lt;/code>, &lt;code>open_issues&lt;/code>, &lt;code>last_updated&lt;/code>, &lt;code>forks&lt;/code>, &lt;code>stars&lt;/code>)&lt;/li>
&lt;li>dependency information (&lt;code>num_users&lt;/code>, &lt;code>num_dev&lt;/code>, &lt;code>user_deps&lt;/code>, &lt;code>dev_deps&lt;/code>)&lt;/li>
&lt;li>compiled binary sizes (&lt;code>bin_self&lt;/code>, &lt;code>bin_user&lt;/code>, &lt;code>bin_dev&lt;/code>)&lt;/li>
&lt;li>time to compile dependencies, and the raw times (&lt;code>install_self&lt;/code>, &lt;code>install_user&lt;/code>, &lt;code>install_dev&lt;/code>, &lt;code>self_timings&lt;/code>, &lt;code>user_timings&lt;/code>, &lt;code>dev_timings&lt;/code>)&lt;/li>
&lt;li>CRAN release information (&lt;code>downloads&lt;/code>, &lt;code>first_release&lt;/code>, &lt;code>last_release&lt;/code>, &lt;code>total_releases&lt;/code>, &lt;code>releases_last_52&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>The total number of dependencies, binary sizes, and installation times give you
a good idea the magnitude of the dependency load.&lt;/p>
&lt;p>Equally important, however, are the downloads, release information and open
issues, which tell you how long the package has existed, how many people are
using it and how many open issues exist. Packages that have existed longer,
with more users and fewer issues should generally be more reliable.&lt;/p>
&lt;h2 id="visualize-proportions-with-itdependsdep_plot">Visualize proportions with &lt;code>itdepends::dep_plot()&lt;/code>
&lt;a href="#visualize-proportions-with-itdependsdep_plot">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>There are two functions available to plot the relative weights of dependencies.&lt;/p>
&lt;ol>
&lt;li>&lt;code>dep_plot_time()&lt;/code> plots the median compilation time on CRAN&amp;rsquo;s servers.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">itdepends&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">dep_plot_time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;dplyr&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://www.tidyverse.org/articles/2019-05-itdepends_files/figure-html/unnamed-chunk-4-1.png" width="672" style="display: block; margin: auto;" />&lt;/p>
&lt;p>From the above plot we see that the installation time of dplyr for users is
mostly due to compiling dplyr itself. However, for development dependencies, the
readr, stringi and RSQLite packages also take significant time to install.&lt;/p>
&lt;ol start="2">
&lt;li>&lt;code>dep_plot_size()&lt;/code> plots the pre-compiled binary size, which is often the more
useful measure, as most users install pre-compiled binaries.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">itdepends&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">dep_plot_size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;dplyr&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://www.tidyverse.org/articles/2019-05-itdepends_files/figure-html/unnamed-chunk-5-1.png" width="672" style="display: block; margin: auto;" />&lt;/p>
&lt;p>From this we see the largest user dependencies are BH and Rcpp, and the largest
development dependencies are stringi, and two data packages, Lahman and
nycflights13.&lt;/p>
&lt;h2 id="assist-removal-with-itdependsdep_locate">Assist removal with &lt;code>itdepends::dep_locate()&lt;/code>
&lt;a href="#assist-removal-with-itdependsdep_locate">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>If you do decide that a given dependency is too heavy or is too unstable to
keep, what are the best practices for removing it?&lt;/p>
&lt;p>First carefully review the operation of the function you are replacing. Many
functions in CRAN packages appear superficially similar to base equivalents,
but often handle edge cases (that you&amp;rsquo;ve likely never encountered) more
consistently. Next and most importantly, write &lt;em>tests&lt;/em> for the existing
behavior. This is an essential step which will greatly reduce the introduction
of new bugs. Only once you have written the tests should you start performing
the replacement. If you are porting a function with existing tests a good practice is
to port its tests as well.&lt;/p>
&lt;p>Then, use the &lt;code>dep_locate()&lt;/code> function to find all the instances when you use
functions from a given dependency in your code base. If &lt;code>dep_locate()&lt;/code> is run
in RStudio the function will add source markers for all the locations, which
can then be clicked individually to do the replacement.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">itdepends&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">dep_locate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;purrr&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;~/p/tidyversedashboard&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://www.tidyverse.org/images/itdepends/dep_locate.png" width="100%" style="display: block; margin: auto;" />&lt;/p>
&lt;h2 id="be-balanced-and-use-data">Be balanced and use data
&lt;a href="#be-balanced-and-use-data">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>In almost any area of life striving towards absolutes rarely provides the best
outcome. Package dependencies are no exception. Keep the expected users of your
package in mind, and use the tools provided in itdepends to
obtain data which can help you assess which dependencies to remove (if any).&lt;/p>
&lt;p>Donald Knuth has great advice about the importance of measurement during
performance optimization&lt;/p>
&lt;blockquote>
&lt;p>Programmers waste enormous amounts of time thinking about, or worrying about,
the speed of noncritical parts of their programs, and these attempts at
efficiency actually have a strong negative impact when debugging and
maintenance are considered. We should forget about small efficiencies, say
about 97% of the time: premature optimization is the root of all evil. Yet we
should not pass up our opportunities in that critical 3%.&lt;/p>
&lt;/blockquote>
&lt;p>Performance optimization &lt;em>is&lt;/em> important, but we should not seek to optimize
it until we have &lt;em>measured&lt;/em> our program to see where the this critical 3% lies.
The same is true of dependencies, lowering the dependencies &lt;em>is&lt;/em>
important for some packages, however we should not do so blindly without
identifying if it is truly necessary and measuring to discover what the most
critical dependencies are.&lt;/p>
&lt;p>Finally it is important to remember
&lt;a href="https://en.wikipedia.org/wiki/Goodhart%27s_law" target="_blank" rel="noopener">Goodhart&amp;rsquo;s Law&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>When a measure becomes a target, it ceases to be a good measure.&lt;/p>
&lt;/blockquote></description></item><item><title>Resource Cleanup in C and the R API</title><link>https://www.tidyverse.org/blog/2019/05/resource-cleanup-in-c-and-the-r-api/</link><pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2019/05/resource-cleanup-in-c-and-the-r-api/</guid><description>
&lt;style>
h1 code, h2 code {
font-size: 0.8em;
}
&lt;/style>
&lt;div id="introduction" class="section level1">
&lt;h1>Introduction&lt;/h1>
&lt;p>We have just released the &lt;a href="https://github.com/r-lib/cleancall#readme">cleancall&lt;/a> package to CRAN. &lt;a href="https://github.com/r-lib/cleancall#readme">cleancall&lt;/a> is a
new package that helps avoiding resource leaks in the C code of your
R package. In this blog post, we show some example resource leaks from
base R and R packages, and also show three different ways to fix them,
one of which uses the &lt;a href="https://github.com/r-lib/cleancall#readme">cleancall&lt;/a> package.&lt;/p>
&lt;/div>
&lt;div id="the-problem" class="section level1">
&lt;h1>The problem&lt;/h1>
&lt;p>When writing C code in R packages, one non-trivial issue is to make
sure that resources acquired by a C function are correctly released
or wrapped before giving back control to R. The difficulties partially
arise from the many ways a C function can terminate and transfer control
back to R:&lt;/p>
&lt;ul>
&lt;li>regular termination,&lt;/li>
&lt;li>error,&lt;/li>
&lt;li>warning or other condition caught with &lt;code>tryCatch()&lt;/code>,&lt;/li>
&lt;li>debugger exit,&lt;/li>
&lt;li>keyboard interruption.&lt;/li>
&lt;/ul>
&lt;p>Resources that need to be released include:&lt;/p>
&lt;ul>
&lt;li>memory areas,&lt;/li>
&lt;li>file handles,&lt;/li>
&lt;li>connections (sockets),&lt;/li>
&lt;li>database connections,&lt;/li>
&lt;li>Windows handles for threads, events, etc.,&lt;/li>
&lt;li>others.&lt;/li>
&lt;/ul>
&lt;div id="regular-termination" class="section level2">
&lt;h2>Regular termination&lt;/h2>
&lt;p>Most functions terminate successfully, most of the time. Releasing
resources is easy in this case, we can simply do it at the end of the
function, before returning.&lt;/p>
&lt;/div>
&lt;div id="error" class="section level2">
&lt;h2>Error&lt;/h2>
&lt;p>Errors may happen two ways. They can be thrown directly, or by the R API.
A function that reads a file will throw an error it if
fails to open the file for reading. These errors are easy to handle, we
can release all resources before throwing the error.&lt;/p>
&lt;p>Errors can also be thrown by the R API. The R C API functions do not
return on error, instead they perform an error (a &lt;code>longjmp&lt;/code> technically),
that can be caught by R or (recently) C code. Releasing resources is
trickier in this case, as our C function never gets back the control after
the failed R API call.&lt;/p>
&lt;/div>
&lt;div id="warning-or-other-condition-caught-with-trycatch" class="section level2">
&lt;h2>Warning or other condition caught with &lt;code>tryCatch()&lt;/code>&lt;/h2>
&lt;p>Usually we assume that throwing a warning (or other non-error condition)
does not cause an early exit, but this is not always the case. Warnings can
be caught by an exiting &lt;code>tryCatch()&lt;/code>.&lt;/p>
&lt;/div>
&lt;div id="debugger-exit" class="section level2">
&lt;h2>Debugger exit&lt;/h2>
&lt;p>If the C function calls back to R to evaluate R expressions, then
these might invoke the debugger, see &lt;code>?debug&lt;/code> or &lt;code>?trace&lt;/code>. The &lt;code>Q&lt;/code> debugger
command invokes the &lt;code>abort&lt;/code> restart, to get back to the top-level prompt.
In this case most functions on the (R and C) stack are removed at once.&lt;/p>
&lt;/div>
&lt;div id="keyboard-interruption" class="section level2">
&lt;h2>Keyboard interruption&lt;/h2>
&lt;p>C code can call &lt;code>R_CheckUserInterrupt()&lt;/code>, and it is indeed suggested to do
so during long computation or I/O. If the user initiates an interrupt via
the keyboard or a signal, then &lt;code>R_CheckUserInterrupt()&lt;/code> never returns, and
the control goes back to top level.&lt;/p>
&lt;p>To illustrate the resource cleanup problem more, we’ll show some examples
from base R and CRAN packages that contain potential resource leaks.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="example-1-download.filemethod-internal" class="section level1">
&lt;h1>Example 1: &lt;code>download.file(method = &amp;quot;internal&amp;quot;)&lt;/code>&lt;/h1>
&lt;p>The C implementation of &lt;code>download.file()&lt;/code> opens a file for saving the
downloaded data to, and it does not clean or even close this file on a
keyboard interrupt. The file is opened here:
&lt;a href="https://github.com/wch/r-source/blob/f3a67c36c5cf4c715dac374e33168cfc348106aa/src/modules/internet/internet.c#L553" class="uri">https://github.com/wch/r-source/blob/f3a67c36c5cf4c715dac374e33168cfc348106aa/src/modules/internet/internet.c#L553&lt;/a>&lt;/p>
&lt;pre class="c">&lt;code> FILE *out;
[...]
out = R_fopen(R_ExpandFileName(file), mode);
[...]&lt;/code>&lt;/pre>
&lt;p>We can easily show the problem in practice as well.
First, we create a handy function that interrupts the current process
one second after calling it. This allows us to simulate an interrupt from
the keyboard. It starts a background process that will send an interrupt
(SIGINT on Unix, CTRL+C on Windows) to our R process.&lt;/p>
&lt;pre class="r">&lt;code>interrupt &amp;lt;- function(expr, after = 1) {
tryCatch({
p &amp;lt;- callr::r_bg(function(pid, after) {
Sys.sleep(after)
ps::ps_interrupt(ps::ps_handle(pid))
}, list(pid = Sys.getpid(), after = after))
expr
p$kill()
}, interrupt = function(e) e)
}&lt;/code>&lt;/pre>
&lt;p>&lt;code>ps::ps_open_files()&lt;/code> lists all open files of a process,&lt;code>ps::ps_handle()&lt;/code>
returns a handle for the current R process. You should see the three
file descriptors corresponding to standard input, output and error here,
and another file is used by the blogdown engine rendering this page. If you
run this code in your R session you’ll not see that file, but of course you
may see others.&lt;/p>
&lt;pre class="r">&lt;code>ps::ps_open_files(ps::ps_handle())
#&amp;gt; # A tibble: 4 x 2
#&amp;gt; fd path
#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
#&amp;gt; 1 0 /dev/ttys021
#&amp;gt; 2 1 /dev/ttys021
#&amp;gt; 3 2 /dev/ttys021
#&amp;gt; 4 7 /Users/gaborcsardi/R/blogdown/scripts/render_page.R&lt;/code>&lt;/pre>
&lt;p>Now we will start downloading a file, and while it is downloading, we’ll
send an interrupt to our R process, causing an early exit.&lt;/p>
&lt;pre class="r">&lt;code>interrupt(
download.file(&amp;quot;http://httpbin.org/delay/3&amp;quot;, tempfile(), method = &amp;quot;internal&amp;quot;)
)
#&amp;gt; &amp;lt;interrupt: &amp;gt;&lt;/code>&lt;/pre>
&lt;p>The list of open files will now include the one opened by &lt;code>download.file()&lt;/code>:&lt;/p>
&lt;pre class="r">&lt;code>ps::ps_open_files(ps::ps_handle())
#&amp;gt; # A tibble: 5 x 2
#&amp;gt; fd path
#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
#&amp;gt; 1 0 /dev/ttys021
#&amp;gt; 2 1 /dev/ttys021
#&amp;gt; 3 2 /dev/ttys021
#&amp;gt; 4 7 /Users/gaborcsardi/R/blogdown/scripts/render_page.R
#&amp;gt; 5 9 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…&lt;/code>&lt;/pre>
&lt;p>Because &lt;code>download.file()&lt;/code> fails to clean up this file handle, it is not
released until the R session quits. On Windows this file is probably locked,
and cannot be removed until R exits.&lt;/p>
&lt;/div>
&lt;div id="example-2-download.filemethod-libcurl" class="section level1">
&lt;h1>Example 2: &lt;code>download.file(method = &amp;quot;libcurl&amp;quot;)&lt;/code>&lt;/h1>
&lt;p>There is a very similar bug in the implementation of the &lt;code>download.file()&lt;/code>
libcurl method, which opens an output file here:
&lt;a href="https://github.com/wch/r-source/blob/def075db88ae87104c38437a57e9327b078bb804/src/modules/internet/libcurl.c#L566" class="uri">https://github.com/wch/r-source/blob/def075db88ae87104c38437a57e9327b078bb804/src/modules/internet/libcurl.c#L566&lt;/a>
but it does not close it on error or interrupt. This method can download
many files in parallel, in which case multiple file handles may be lost:&lt;/p>
&lt;pre class="r">&lt;code>ps::ps_open_files(ps::ps_handle())
#&amp;gt; # A tibble: 5 x 2
#&amp;gt; fd path
#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
#&amp;gt; 1 0 /dev/ttys021
#&amp;gt; 2 1 /dev/ttys021
#&amp;gt; 3 2 /dev/ttys021
#&amp;gt; 4 7 /Users/gaborcsardi/R/blogdown/scripts/render_page.R
#&amp;gt; 5 9 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…
interrupt(
download.file(
rep(&amp;quot;https://httpbin.org/delay/3&amp;quot;, 3), paste0(tempfile(), 1:3),
method = &amp;quot;libcurl&amp;quot;)
)
#&amp;gt; &amp;lt;interrupt: &amp;gt;
ps::ps_open_files(ps::ps_handle())
#&amp;gt; # A tibble: 8 x 2
#&amp;gt; fd path
#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
#&amp;gt; 1 0 /dev/ttys021
#&amp;gt; 2 1 /dev/ttys021
#&amp;gt; 3 2 /dev/ttys021
#&amp;gt; 4 7 /Users/gaborcsardi/R/blogdown/scripts/render_page.R
#&amp;gt; 5 9 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…
#&amp;gt; 6 15 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…
#&amp;gt; 7 16 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…
#&amp;gt; 8 17 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="example-3-edit" class="section level1">
&lt;h1>Example 3: &lt;code>edit()&lt;/code>&lt;/h1>
&lt;p>&lt;code>edit()&lt;/code> invokes the text editor specified by the &lt;code>editor&lt;/code> option, with the
supplied object to be edited. &lt;code>edit()&lt;/code> can also write the edited version
to a file. It opens a file here to create its first version, before starting
the editor:
&lt;a href="https://github.com/wch/r-source/blob/019f16d3dec4f97c1b4e4f0ec905148e36979e37/src/main/edit.c#L121-L128" class="uri">https://github.com/wch/r-source/blob/019f16d3dec4f97c1b4e4f0ec905148e36979e37/src/main/edit.c#L121-L128&lt;/a>&lt;/p>
&lt;pre class="c">&lt;code>121 if((fp=R_fopen(R_ExpandFileName(filename), &amp;quot;w&amp;quot;)) == NULL)
122 errorcall(call, _(&amp;quot;unable to open file&amp;quot;));
123 if (LENGTH(STRING_ELT(fn, 0)) == 0) EdFileUsed++;
124 PROTECT(src = deparse1(x, 0, FORSOURCING)); /* deparse for sourcing, not for display */
125 for (i = 0; i &amp;lt; LENGTH(src); i++)
126 fprintf(fp, &amp;quot;%s\n&amp;quot;, translateChar(STRING_ELT(src, i)));
127 UNPROTECT(1); /* src */
128 fclose(fp);&lt;/code>&lt;/pre>
&lt;p>If all goes well, then it will close it just 7 code lines later.
However, it also calls the R API a number of times before closing the file,
so if any of these API calls fail, the file is never closed. In particular,
it calls &lt;code>deparse1()&lt;/code> which is roughly equivalent to the R &lt;code>deparse()&lt;/code>
function, and &lt;code>deparse&lt;/code>()` fails on long vectors:&lt;/p>
&lt;pre class="r">&lt;code>ps::ps_open_files(ps::ps_handle())
#&amp;gt; # A tibble: 8 x 2
#&amp;gt; fd path
#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
#&amp;gt; 1 0 /dev/ttys021
#&amp;gt; 2 1 /dev/ttys021
#&amp;gt; 3 2 /dev/ttys021
#&amp;gt; 4 7 /Users/gaborcsardi/R/blogdown/scripts/render_page.R
#&amp;gt; 5 9 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…
#&amp;gt; 6 15 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…
#&amp;gt; 7 16 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…
#&amp;gt; 8 17 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…
edit(1:10e10, file = tempfile())
#&amp;gt; Error in edit.default(1:1e+11, file = tempfile()): long vectors not supported yet: ../../../../R-3.5.3/src/include/Rinlinedfuns.h:519
ps::ps_open_files(ps::ps_handle())
#&amp;gt; # A tibble: 9 x 2
#&amp;gt; fd path
#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
#&amp;gt; 1 0 /dev/ttys021
#&amp;gt; 2 1 /dev/ttys021
#&amp;gt; 3 2 /dev/ttys021
#&amp;gt; 4 7 /Users/gaborcsardi/R/blogdown/scripts/render_page.R
#&amp;gt; 5 8 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…
#&amp;gt; 6 9 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…
#&amp;gt; 7 15 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…
#&amp;gt; 8 16 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…
#&amp;gt; 9 17 /private/var/folders/59/0gkmw1yj2w7bf2dfc3jznv5w0000gn/T/Rtmp0Uww3…&lt;/code>&lt;/pre>
&lt;p>Notice that we have one more extra open file here.&lt;/p>
&lt;/div>
&lt;div id="example-4-the-wait-method-in-processx" class="section level1">
&lt;h1>Example 4: the wait() method in &lt;a href="https://github.com/r-lib/processx#readme">processx&lt;/a>:&lt;/h1>
&lt;p>&lt;code>processx::process&lt;/code> is an R6 class for a subprocess. Its &lt;code>$wait()&lt;/code> method
waits for the subprocess to finish, with a timeout. To implement &lt;code>$wait()&lt;/code>
on Unix, &lt;a href="https://github.com/r-lib/processx#readme">processx&lt;/a> opens a pair of pipe file descriptors. These are
temporary and should be closed once the function exits. &lt;code>$wait()&lt;/code> is
interruptible, it calls &lt;code>R_CheckUserInterrupt()&lt;/code> periodically. However,
in the current, 3.3.0 version of &lt;a href="https://github.com/r-lib/processx#readme">processx&lt;/a> it does not close the pipe
file descriptors on an interrupt. Here is an illustration:&lt;/p>
&lt;pre class="r">&lt;code>ps::ps_num_fds(ps::ps_handle())
#&amp;gt; [1] 20
p &amp;lt;- processx::process$new(&amp;quot;sleep&amp;quot;, &amp;quot;10&amp;quot;)
interrupt(
p$wait()
)
#&amp;gt; &amp;lt;interrupt: &amp;gt;
p$kill()
#&amp;gt; [1] TRUE
gc()
#&amp;gt; used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)
#&amp;gt; Ncells 626041 33.5 1203691 64.3 NA 1203691 64.3
#&amp;gt; Vcells 1188386 9.1 8388608 64.0 16384 2160124 16.5
ps::ps_num_fds(ps::ps_handle())
#&amp;gt; [1] 22&lt;/code>&lt;/pre>
&lt;p>&lt;code>ps_num_fds()&lt;/code> prints the number of open file descriptors of a process.
The two extra file descriptors that are open after garbage collection are
the two ends of the (supposedly) temporary pipe, just opened by &lt;code>$wait()&lt;/code>.&lt;/p>
&lt;/div>
&lt;div id="fix-1-external-pointer-and-finalizer" class="section level1">
&lt;h1>Fix 1: External pointer and finalizer&lt;/h1>
&lt;p>One generic solution to resource cleanup is to wrap all C resources into
one or more R external pointer objects, and add finalizers to them. We
show how this can fix the &lt;a href="https://github.com/r-lib/processx#readme">processx&lt;/a> problem in the previous example.&lt;/p>
&lt;p>This is how the &lt;code>processx_wait()&lt;/code> C function looks like before the fix:
&lt;a href="https://github.com/r-lib/processx/blob/a8f09d147fead78347a87fcf4e0fbd1c07de1c21/src/unix/processx.c#L507-L589" class="uri">https://github.com/r-lib/processx/blob/a8f09d147fead78347a87fcf4e0fbd1c07de1c21/src/unix/processx.c#L507-L589&lt;/a>&lt;/p>
&lt;p>First, we need to create a finalizer function, that will be called by
the R garbage collector, after &lt;code>$wait()&lt;/code> has finished, at the next
garbage collection:&lt;/p>
&lt;pre class="c">&lt;code>static void processx__wait_finalizer(SEXP xptr) {
SEXP tag = R_ExternalPtrTag(xptr);
if (INTEGER(tag)[0] &amp;gt;= 0) close(INTEGER(tag)[0]);
if (INTEGER(tag)[1] &amp;gt;= 0) close(INTEGER(tag)[1]);
}&lt;/code>&lt;/pre>
&lt;p>An external pointer can have a &lt;em>tag&lt;/em>, which is an R object that is kept
alive as long the pointer object itself is alive. In this case we can put
the file descriptors in the tag, in an integer vector of length two.
In more complicated cases the resources cannot easily be represented as
R objects, so you would use the actual C pointer, with a custom C
&lt;code>struct&lt;/code> to store them.&lt;/p>
&lt;p>Now we need to create the external pointer, before the pipes are opened:&lt;/p>
&lt;pre class="c">&lt;code> SEXP tag = PROTECT(allocVector(INTSXP, 2));
INTEGER(tag)[0] = INTEGER(tag)[1] = -1;
SEXP xptr = PROTECT(R_MakeExternalPtr(NULL, tag, R_NilValue));
R_RegisterCFinalizerEx(xptr, processx__wait_finalizer, 0);&lt;/code>&lt;/pre>
&lt;p>We initialize the file descriptors to -1, which is guard value, meaning
that no cleanup is needed.&lt;/p>
&lt;p>We can now open the pipes and save their file descriptors in the tag of
the external pointer.&lt;/p>
&lt;pre class="c">&lt;code> if (pipe(handle-&amp;gt;waitpipe)) {
processx__unblock_sigchld();
error(&amp;quot;processx error: %s&amp;quot;, strerror(errno));
}
INTEGER(tag)[0] = handle-&amp;gt;waitpipe[0];
INTEGER(tag)[1] = handle-&amp;gt;waitpipe[1];&lt;/code>&lt;/pre>
&lt;p>At the end of the function, we need to unprotect the external pointer,
and the tag:&lt;/p>
&lt;pre class="c">&lt;code> UNPROTECT(2);
return ScalarLogical(ret != 0);
}&lt;/code>&lt;/pre>
&lt;p>One potential problem with the external pointer fix is that the resources
will only be cleaned up at the next garbage collection, and sometimes this
is too late. For example, if an open file is locked by the operating system,
then we won’t be able to remove that file, or its directory, until the
garbage collector runs and closes it. It is easier to program if
resource cleanup is immediate, and luckily the other two fixes below are.&lt;/p>
&lt;/div>
&lt;div id="fix-2-the-r_execwithcleanup-function" class="section level1">
&lt;h1>Fix 2: the &lt;code>R_ExecWithCleanup()&lt;/code> function&lt;/h1>
&lt;p>&lt;code>R_ExecWithCleanup()&lt;/code> is a function in the R API, that can add a cleanup
function to a regular C function call. The cleanup function is always
executed, even on early exit:&lt;/p>
&lt;pre class="c">&lt;code>SEXP R_ExecWithCleanup(SEXP (*fun)(void *), void *data,
void (*cleanfun)(void *), void *cleandata);&lt;/code>&lt;/pre>
&lt;p>&lt;code>R_ExecWithCleanup()&lt;/code> calls &lt;code>fun&lt;/code> with &lt;code>data&lt;/code>, and then calls
&lt;code>cleanfun&lt;/code> with &lt;code>cleandata&lt;/code>. If &lt;code>fun&lt;/code> calls the R API and exits early,
then it will still call &lt;code>cleanfun&lt;/code> with &lt;code>cleandata&lt;/code>, before throwing
the error up the stack.&lt;/p>
&lt;p>To fix &lt;code>$wait()&lt;/code> with &lt;code>R_ExecWithCleanup()&lt;/code>, we’ll need to define a
cleanup function first. The cleanup function receives the cleanup data
as a &lt;code>void&lt;/code> pointer, we’ll define a &lt;code>struct&lt;/code> for this. For simplicity,
this struct will also include the arguments to &lt;code>processx_wait()&lt;/code>, so
we can use the same struct for both &lt;code>fun&lt;/code> and &lt;code>cleanupfun&lt;/code>.&lt;/p>
&lt;pre class="c">&lt;code>struct processx_wait_data {
SEXP status;
SEXP timeout;
int fds[2];
};
void processx_wait_cleanup(void *data) {
struct processx_wait_data *pdata = data;
if (pdata-&amp;gt;fds[0] &amp;gt;= 0) close(pdata-&amp;gt;fds[0]);
if (pdata-&amp;gt;fds[1] &amp;gt;= 0) close(pdata-&amp;gt;fds[1]);
}&lt;/code>&lt;/pre>
&lt;p>The new &lt;code>processx_wait()&lt;/code> function will call &lt;code>R_ExecWithCleanup()&lt;/code>,
to call the original &lt;code>processx_wait()&lt;/code>, under a new name:&lt;/p>
&lt;pre class="c">&lt;code>SEXP processx_wait_internal(void *data);
SEXP processx_wait(SEXP status, SEXP timeout) {
struct processx_wait_data pdata = { status, timeout, { -1, -1 } };
SEXP result = R_ExecWithCleanup(processx_wait_internal, &amp;amp;pdata,
processx_wait_cleanup, &amp;amp;pdata);
return result;
}&lt;/code>&lt;/pre>
&lt;p>&lt;code>processx_wait_internal()&lt;/code> is very much like &lt;code>processx_wait()&lt;/code> used to
be, but we need to extract the arguments from the struct at the beginning:&lt;/p>
&lt;pre class="c">&lt;code>SEXP processx_wait_internal(void *data) {
struct processx_wait_data *pdata = data;
SEXP status = pdata-&amp;gt;status;
SEXP timeout = pdata-&amp;gt;timeout;
int *fds = pdata-&amp;gt;fds;
...&lt;/code>&lt;/pre>
&lt;p>Now the only other thing we need to do is saving the file descriptors
in the data struct:&lt;/p>
&lt;pre>&lt;code> if (pipe(handle-&amp;gt;waitpipe)) {
processx__unblock_sigchld();
error(&amp;quot;processx error: %s&amp;quot;, strerror(errno));
}
fds[0] = handle-&amp;gt;waitpipe[0];
fds[1] = handle-&amp;gt;waitpipe[1];&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="fix-3-the-cleancall-package" class="section level1">
&lt;h1>Fix 3: the &lt;a href="https://github.com/r-lib/cleancall#readme">cleancall&lt;/a> package&lt;/h1>
&lt;p>&lt;code>R_ExecWithCleanup()&lt;/code> is a good fix to the resource cleanup problem,
but it can be verbose and error prone. It also requires that you
replace your original function with a wrapper that packs the original
function arguments into a &lt;code>struct&lt;/code> and an internal function that
only has a &lt;code>void*&lt;/code> argument.&lt;/p>
&lt;p>We created the &lt;a href="https://github.com/r-lib/cleancall#readme">cleancall&lt;/a> package to make resource cleanup easier.
This package automates wrapping your functions with &lt;code>R_ExecWithCleanup()&lt;/code>.
&lt;a href="https://github.com/r-lib/cleancall#readme">cleancall&lt;/a> has been just published on CRAN. Here we show how to use it to
fix the &lt;a href="https://github.com/r-lib/processx#readme">processx&lt;/a> &lt;code>$wait()&lt;/code> method.&lt;/p>
&lt;p>To use it in your package, you need to specify &lt;a href="https://github.com/r-lib/cleancall#readme">cleancall&lt;/a> as a dependency,
both as &lt;code>LinkingTo&lt;/code> and &lt;code>Imports&lt;/code>:&lt;/p>
&lt;pre>&lt;code>...
Imports: cleancall
LinkingTo: cleancall
...&lt;/code>&lt;/pre>
&lt;p>&lt;a href="https://github.com/r-lib/cleancall#readme">cleancall&lt;/a> defines the &lt;code>call_with_cleanup()&lt;/code> R function and the
&lt;code>r_call_on_exit()&lt;/code> and &lt;code>r_call_on_early_exit()&lt;/code> C functions.&lt;/p>
&lt;p>You need to replace &lt;code>.Call()&lt;/code> with &lt;code>call_with_cleanup()&lt;/code> in your R code:&lt;/p>
&lt;pre>&lt;code>cleancall::call_with_cleanup(c_processx_wait, private$status,
as.integer(timeout))&lt;/code>&lt;/pre>
&lt;p>In your C code, include the &lt;code>cleancall.h&lt;/code> header:&lt;/p>
&lt;pre class="c">&lt;code>#include &amp;lt;cleancall.h&amp;gt;&lt;/code>&lt;/pre>
&lt;p>Next, create a cleanup function for the resource type:&lt;/p>
&lt;pre class="c">&lt;code>void processx__close_fd(void *ptr) {
int *fd = ptr;
if (*fd &amp;gt;= 0) close(*fd);
}&lt;/code>&lt;/pre>
&lt;p>This cleanup function closes a file descriptor. Once your resource type
has a cleanup function, you can call &lt;code>r_call_on_exit()&lt;/code> or
&lt;code>r_call_on_early_exit()&lt;/code> every time you acquire a resource of that type.
Use &lt;code>r_call_on_exit()&lt;/code> if the resource must be released on normal
termination as well, and &lt;code>r_call_on_early_exit()&lt;/code> if it must be released
on early termination only:&lt;/p>
&lt;pre class="c">&lt;code> if (pipe(handle-&amp;gt;waitpipe)) {
processx__unblock_sigchld();
error(&amp;quot;processx error: %s&amp;quot;, strerror(errno));
}
r_call_on_exit(processx__close_fd, handle-&amp;gt;waitpipe);
r_call_on_exit(processx__close_fd, handle-&amp;gt;waitpipe + 1);&lt;/code>&lt;/pre>
&lt;p>Typically &lt;code>r_call_on_exit()&lt;/code> is more convenient for temporary resources.
&lt;code>r_call_on_early_exit()&lt;/code> is more convenient if the C function returns a
handle (e.g. external pointer), for which it needs to allocate resources
gradually. If all resource allocations are successful, and the function
returns normally, then no cleanup is needed. However if an intermediate
step fails, you need to release the resources acquired before the failure.&lt;/p>
&lt;p>In does not matter much in this simple example, but it in important in
general that exit handlers are always executed in reverse order (last one in
is the first one out, LIFO). This makes it easy to build a resource
gradually. Exit handlers installed via &lt;code>r_call_on_exit()&lt;/code> and
&lt;code>r_call_on_early_exit()&lt;/code> share the same stack.&lt;/p>
&lt;p>We suggest that exit handlers are kept as simple and fast as possible.
In particular, errors (and other early exits) triggered from exit handlers
are not caught currently. If an exit handler exits early the others do not
run. If this is an issue, you can wrap the exit handler in &lt;code>R_tryCatch()&lt;/code>
(available for R 3.4.0 and later). But in general the best error handlers
do not call the R API at all.&lt;/p>
&lt;/div>
&lt;div id="what-about-c" class="section level1">
&lt;h1>What about C++?&lt;/h1>
&lt;p>The resource cleanup problem is also present if you interface C++ code.
While &lt;a href="https://github.com/r-lib/cleancall#readme">cleancall&lt;/a> can be used with C++, it works best with C code,
since it follows C idioms.&lt;/p>
&lt;p>Using external pointers and finalizers works for C++ as well, as does
wrapping R API calls in &lt;code>R_ExecWithCleanup()&lt;/code>.&lt;/p>
&lt;p>Alternatively, you can wrap your R API calls in &lt;code>R_tryCatch()&lt;/code> (R 3.4.0
and later), or use &lt;code>R_UnwindProtect()&lt;/code> (R 3.5.0 and later).&lt;/p>
&lt;p>If your C++ code needs to support older R versions, that is more
challenging, and one possibility is to call back to R and call &lt;code>tryCatch()&lt;/code>
there.&lt;/p>
&lt;/div>
&lt;div id="summary" class="section level1">
&lt;h1>Summary&lt;/h1>
&lt;p>Resource cleanup in C code can be challenging, especially given that there
is not very much documentation on this topic.&lt;/p>
&lt;p>Hopefully this post and the &lt;a href="https://github.com/r-lib/cleancall#readme">cleancall&lt;/a> package will make resource
cleanup much simpler, and fewer R packages will suffer from resource
leaks in the future.&lt;/p>
&lt;/div></description></item><item><title>Project-oriented workflow</title><link>https://www.tidyverse.org/blog/2017/12/workflow-vs-script/</link><pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2017/12/workflow-vs-script/</guid><description>
&lt;p>I was honored to speak this week at the &lt;a href="http://www.nzsa2017.com">IASC-ARS/NZSA Conference&lt;/a>, hosted by the Stats Department at The University of Auckland. One of the conference themes is to celebrate the accomplishments of Ross Ihaka, who got R started back in 1992, along with Robert Gentleman. My talk included advice on setting up your R life to maximize effectiveness and reduce frustration.&lt;/p>
&lt;p>Two specific slides generated &lt;a href="https://twitter.com/hadleywickham/status/940021008764846080">much discussion and consternation in #rstats Twitter&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>If the first line of your R script is&lt;/p>
&lt;p>&lt;code>setwd(&amp;quot;C:\Users\jenny\path\that\only\I\have&amp;quot;)&lt;/code>&lt;/p>
&lt;p>I will come into your office and
SET YOUR COMPUTER ON FIRE 🔥.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If the first line of your R script is&lt;/p>
&lt;p>&lt;code>rm(list = ls())&lt;/code>&lt;/p>
&lt;p>I will come into your office and
SET YOUR COMPUTER ON FIRE 🔥.&lt;/p>
&lt;/blockquote>
&lt;p>I stand by these strong opinions, but on their own, threats to commit
arson aren’t terribly helpful! Here I explain &lt;em>why&lt;/em> these habits can
be harmful and may be indicative of an awkward workflow. Feel free to
discuss more on
&lt;a href="https://community.rstudio.com/t/project-oriented-workflow-setwd-rm-list-ls-and-computer-fires/3549">community.rstudio.com&lt;/a>.&lt;/p>
&lt;p>Caveat: only you can decide how much you care about this. The importance of these practices has a lot to do with whether your code will be run by other people, on other machines, and in the future. If your current practices serve your purposes, then go forth and be happy.&lt;/p>
&lt;div id="workflow-versus-product" class="section level2">
&lt;h2>Workflow versus Product&lt;/h2>
&lt;p>Let’s make a distinction between things you do because of personal taste and habits (“workflow”) versus the logic and output that is the essence of your project (“product”). These are part of your workflow:&lt;/p>
&lt;ul>
&lt;li>The editor you use to write your R code.&lt;/li>
&lt;li>The name of your home directory.&lt;/li>
&lt;li>The R code you ran before lunch.&lt;/li>
&lt;/ul>
&lt;p>I consider these to be clearly product:&lt;/p>
&lt;ul>
&lt;li>The raw data.&lt;/li>
&lt;li>The R code someone needs to run on your raw data to get your results, including the explicit &lt;code>library()&lt;/code> calls to load necessary packages.&lt;/li>
&lt;/ul>
&lt;p>Ideally, you don’t hardwire anything about your workflow into your product. Workflow-related operations should be executed by you interactively, using whatever means is appropriate to your setup, but not built into the scripts themselves.&lt;/p>
&lt;/div>
&lt;div id="self-contained-projects" class="section level2">
&lt;h2>Self-contained projects&lt;/h2>
&lt;p>I suggest organizing each data analysis into a &lt;em>project&lt;/em>: a folder on your computer that holds all the files relevant to that particular piece of work. I’m &lt;strong>not&lt;/strong> assuming this is an &lt;a href="https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects">RStudio Project&lt;/a>, though this is a nice implementation discussed below.&lt;/p>
&lt;p>Any resident R script is written assuming that it will be run from a fresh R process with working directory set to the project directory. It creates everything it needs, in its own workspace or folder, and it touches nothing it did not create. For example, it does not install additional packages (another pet peeve of mine).&lt;/p>
&lt;p>This convention guarantees that the project can be moved around on your computer or onto other computers and will still “just work”. I argue that this is the only practical convention that creates reliable, polite behavior across different computers or users and over time. This convention is neither new, nor unique to R.&lt;/p>
&lt;p>It’s like agreeing that we will all drive on the left or the right. A hallmark of civilization is following conventions that constrain your behavior a little, in the name of public safety.&lt;/p>
&lt;/div>
&lt;div id="use-of-a-development-environment" class="section level2">
&lt;h2>Use of a development environment&lt;/h2>
&lt;p>You will notice that the workflow recommendations given here are
easier to implement if you use an IDE (&lt;a href="https://en.wikipedia.org/wiki/Integrated_development_environment">integrated development
environment&lt;/a>). &lt;a href="https://www.rstudio.com/products/rstudio-desktop/">RStudio&lt;/a>
is a great example (what I use today), but there are many others, including: &lt;a href="https://ess.r-project.org">Emacs + ESS&lt;/a> (what I used for ~15 years before RStudio), &lt;a href="https://medium.com/@kadek/turning-vim-into-an-r-ide-cd9602e8c217">vim + Nvim-R&lt;/a>, &lt;a href="https://docs.microsoft.com/en-us/visualstudio/rtvs/">Visual Studio + RTVS&lt;/a>.&lt;/p>
&lt;p>Direction of causality: long-time coders don’t organize their work into self-contained projects and use relative paths &lt;em>because&lt;/em> they use an IDE. They use an IDE &lt;em>because&lt;/em> it makes it easier to follow standard practices, such as these.&lt;/p>
&lt;/div>
&lt;div id="whats-wrong-with-setwd" class="section level2">
&lt;h2>What’s wrong with &lt;code>setwd()&lt;/code>?&lt;/h2>
&lt;p>I run a lot of student code in &lt;a href="http://stat545.com">STAT 545&lt;/a> and, at the start, I see a lot of R scripts that look like this:&lt;/p>
&lt;pre class="r">&lt;code>library(ggplot2)
setwd(&amp;quot;/Users/jenny/cuddly_broccoli/verbose_funicular/foofy/data&amp;quot;)
df &amp;lt;- read.delim(&amp;quot;raw_foofy_data.csv&amp;quot;)
p &amp;lt;- ggplot(df, aes(x, y)) + geom_point()
ggsave(&amp;quot;../figs/foofy_scatterplot.png&amp;quot;)&lt;/code>&lt;/pre>
&lt;p>The chance of the &lt;code>setwd()&lt;/code> command having the desired effect – making the file paths work – for anyone besides its author is 0%. It’s also unlikely to work for the author one or two years or computers from now. The project is not self-contained and portable. To recreate and perhaps extend this plot, the lucky recipient will need to hand edit one or more paths to reflect where the project has landed on their machine. When you do this for the 73rd time in 2 days, while marking an assignment, you start to fantasize about lighting the perpetrator’s computer on fire.&lt;/p>
&lt;p>This use of &lt;code>setwd()&lt;/code> is also highly suggestive that the useR does all of their work in one R process and manually switches gears when they shift from one project to another. That sort of workflow makes it unpleasant to work on more than one project at a time and also makes it easy for work done on one project to accidentally leak into subsequent work on another (e.g., objects, loaded packages, session options).&lt;/p>
&lt;/div>
&lt;div id="use-projects-and-the-here-package" class="section level2">
&lt;h2>Use projects and the &lt;a href="https://CRAN.R-project.org/package=here">here package&lt;/a>&lt;/h2>
&lt;p>How can you avoid &lt;code>setwd()&lt;/code> at the top of every script?&lt;/p>
&lt;ul>
&lt;li>Organize each logical project into a folder on your computer.&lt;/li>
&lt;li>Make sure the top-level folder advertises itself as such. This can be as simple as having an empty file named &lt;code>.here&lt;/code>. Or, if you use RStudio and/or Git, those both leave characteristic files behind that will get the job done.&lt;/li>
&lt;li>Use the &lt;code>here()&lt;/code> function from the &lt;a href="https://CRAN.R-project.org/package=here">here package&lt;/a> to build the path when you read or write a file. Create paths relative to the top-level directory.&lt;/li>
&lt;li>Whenever you work on this project, launch the R process from the project’s top-level directory. If you launch R from the shell, &lt;code>cd&lt;/code> to the correct folder first.&lt;/li>
&lt;/ul>
&lt;p>To continue our example, start R in the &lt;code>foofy&lt;/code> directory, wherever that may be. Now the code looks like so:&lt;/p>
&lt;pre class="r">&lt;code>library(ggplot2)
library(here)
df &amp;lt;- read.delim(here(&amp;quot;data&amp;quot;, &amp;quot;raw_foofy_data.csv&amp;quot;))
p &amp;lt;- ggplot(df, aes(x, y)) + geom_point()
ggsave(here(&amp;quot;figs&amp;quot;, &amp;quot;foofy_scatterplot.png&amp;quot;))&lt;/code>&lt;/pre>
&lt;p>This will run, with no edits, for anyone who follows the convention about launching R in the project folder. In fact, it will even work if R’s working directory is anywhere inside the project, i.e. it will work from sub-folders. This plays well with knitr/rmarkdown’s default behavior around working directory and in package development/checking workflows.&lt;/p>
&lt;p>Read up on the &lt;a href="https://CRAN.R-project.org/package=here">here package&lt;/a> to learn
about more features, such as additional ways to mark the top directory and
troubleshooting with &lt;code>dr_here()&lt;/code>. I have also written a &lt;a href="https://github.com/jennybc/here_here">more detailed
paean&lt;/a> to this package before.&lt;/p>
&lt;/div>
&lt;div id="rstudio-projects" class="section level2">
&lt;h2>RStudio Projects&lt;/h2>
&lt;p>This work style is so crucial that RStudio has an official notion of a &lt;a href="https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects">Project&lt;/a> (with a capital “P”). You can designate a new or existing folder as a Project. All this means is that RStudio leaves a file, e.g., &lt;code>foofy.Rproj&lt;/code>, in the folder, which is used to store settings specific to that project.&lt;/p>
&lt;p>Double-click on a &lt;code>.Rproj&lt;/code> file to open a fresh instance of RStudio, with the working directory and file browser pointed at the project folder. The here package is aware of this and the presence of an &lt;code>.Rproj&lt;/code> is one of the ways it recognizes the top-level folder for a project.&lt;/p>
&lt;p>RStudio fully supports Project-based workflows, making it easy to switch from one to another, have many projects open at once, re-launch recently used Projects, etc.&lt;/p>
&lt;/div>
&lt;div id="whats-wrong-with-rmlist-ls" class="section level2">
&lt;h2>What’s wrong with &lt;code>rm(list = ls())&lt;/code>?&lt;/h2>
&lt;p>It’s also fairly common to see data analysis scripts that begin with this object-nuking command:&lt;/p>
&lt;pre class="r">&lt;code>rm(list = ls())&lt;/code>&lt;/pre>
&lt;p>Just like hard-wiring the working directory, this is highly suggestive that
the useR works in one R process and manually switches gears when they shift from
one project to another. That, in turn, suggests that development frequently
happens in a long-running R process that has been used vs. fresh and clean.&lt;/p>
&lt;p>The problem is that &lt;code>rm(list = ls())&lt;/code> does NOT, in fact, create a fresh R process. All it does is delete user-created objects from the global workspace.&lt;/p>
&lt;p>Many other changes to the R landscape persist invisibly and can have profound effects on subsequent development. Any packages that have been loaded are still available. Any options that have been set to non-default values remain that way. Working directory is not affected (which is, of course, why we see &lt;code>setwd()&lt;/code> so often here too!).&lt;/p>
&lt;p>Why does this matter? It makes your script vulnerable to hidden dependencies on things you ran in this R process before you executed &lt;code>rm(list = ls())&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>You might use functions from a package without including the necessary &lt;code>library()&lt;/code> call. Your collaborator won’t be able to run this script.&lt;/li>
&lt;li>You might code up an analysis assuming that &lt;code>stringsAsFactors = FALSE&lt;/code> but next week, when you have restarted R, everything will inexplicably be broken.&lt;/li>
&lt;li>You might write paths relative to some random working directory, then be puzzled next month when nothing can be found or results don’t appear where you expect.&lt;/li>
&lt;/ul>
&lt;p>The solution is to write every script assuming it will be run in a fresh R process. How do you adopt this style? Key steps:&lt;/p>
&lt;ul>
&lt;li>User-level setup: Do not save &lt;code>.RData&lt;/code> when you quit R and don’t load &lt;code>.RData&lt;/code> when you fire up R.
&lt;ul>
&lt;li>In RStudio, this behavior can be requested in the General tab of Preferences.&lt;/li>
&lt;li>If you run R from the shell, put something like this in your &lt;code>.bash_profile&lt;/code>: &lt;code>alias R='R --no-save --no-restore-data'&lt;/code>.&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>Don’t do things in your &lt;code>.Rprofile&lt;/code> that affect how R code runs, such as loading a package like dplyr or ggplot or setting an option such as &lt;code>stringsAsFactors = FALSE&lt;/code>.&lt;/li>
&lt;li>Daily work habit: Restart R very often and re-run your under-development script from the top.
&lt;ul>
&lt;li>If you use RStudio, use the menu item &lt;em>Session &amp;gt; Restart
R&lt;/em> or the associated keyboard shortcut Ctrl+Shift+F10 (Windows and
Linux) or Command+Shift+F10 (Mac OS). You can re-run all code up to
the current line with Ctrl+Alt+B (Windows and Linux) or
Command+Option+B (Mac OS).&lt;/li>
&lt;li>If you run R from the shell, use Ctrl+D to quit, then &lt;code>R&lt;/code> to restart.&lt;/li>
&lt;/ul>&lt;/li>
&lt;/ul>
&lt;p>This requires that you fully embrace the idea that &lt;strong>source is real&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>The source code is real. The objects are realizations of the source code. Source for EVERY user modified object is placed in a particular directory or directories, for later editing and retrieval.
– from the &lt;a href="https://ess.r-project.org/Manual/ess.html#Philosophies-for-using-ESS_0028S_0029">ESS manual&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>This doesn’t mean that your scripts need to be perfectly polished and ready to
run unattended on a remote server. Scripts can be messy, anticipating
interactive execution, but still be &lt;em>complete&lt;/em>. Clean them up when and if you
need to.&lt;/p>
&lt;p>What about objects that take a long time to create? Isolate that bit in its own
script and write the precious object to file with &lt;code>saveRDS(my_precious, here(&amp;quot;results&amp;quot;, &amp;quot;my_precious.rds&amp;quot;))&lt;/code>. Now you can develop scripts to do
downstream work that reload the precious object via &lt;code>my_precious &amp;lt;- readRDS(here(&amp;quot;results&amp;quot;, &amp;quot;my_precious.rds&amp;quot;))&lt;/code>. It is a good idea to break data
analysis into logical, isolated pieces anyway.&lt;/p>
&lt;p>Lastly, &lt;code>rm(list = ls())&lt;/code> is hostile to anyone that you ask to help you with your R problems. If they take a short break from their own work to help debug your code, their generosity is rewarded by losing all of their previous work. Now granted, if your helper has bought into all the practices recommended here, this is easy to recover from, but it’s still irritating. When this happens for the 100th time in a semester, it rekindles the computer arson fantasies triggered by last week’s fiascos with &lt;code>setwd()&lt;/code>.&lt;/p>
&lt;/div></description></item><item><title>Contributing code to the tidyverse</title><link>https://www.tidyverse.org/blog/2017/08/contributing/</link><pubDate>Mon, 14 Aug 2017 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2017/08/contributing/</guid><description>&lt;blockquote>
&lt;p>This post originally appeared at &lt;a href="http://www.jimhester.com/2017/08/08/contributing/">http://www.jimhester.com/2017/08/08/contributing/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Contributing code to open source projects can be intimidating. These projects
are often widely used and have well known maintainers. Contributing code and
having it accepted seems an almost insurmountable task.&lt;/p>
&lt;p>However if you follow a few simple strategies you can have your code accepted
into even the most popular projects in the
&lt;a href="https://tidyverse.org" target="_blank" rel="noopener">tidyverse&lt;/a>.&lt;/p>
&lt;h3 id="dont-contribute-code-">Don&amp;rsquo;t contribute code
&lt;a href="#dont-contribute-code-">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The easiest way to contribute to an open source package is not to contribute
code at all. Find a typo in the documentation, add a reproducible
example to an open issue without one, post a solution to a question in an
issue, on
&lt;a href="https://twitter.com/search?q=%23rstats" target="_blank" rel="noopener">twitter&lt;/a> or
&lt;a href="https://stackoverflow.com/questions/tagged/r" target="_blank" rel="noopener">stackoverflow&lt;/a>. These types of
contributions are among the easiest things for maintainers to review and
accept, so it is a great place to start getting used to the contribution
process.&lt;/p>
&lt;h3 id="read-contributingmd-">Read CONTRIBUTING.md
&lt;a href="#read-contributingmd-">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Often projects will have a &lt;code>CONTRIBUTING.md&lt;/code> document that has instructions for
contributing to the project. These are guidelines the maintainers would like
contributors to adhere to and exist to make the process flow more smoothly. As a
contributor you should try to make accepting your code as easy as you
can, this greatly increases the chance your contribution will be accepted.
These files are not currently widespread in the tidyverse, but it&amp;rsquo;s something
we will be working on in the future!&lt;/p>
&lt;h3 id="explore-previously-merged-contributions-">Explore previously merged contributions
&lt;a href="#explore-previously-merged-contributions-">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Next you should read a few previously merged pull requests for additional
context. If a project does not have a &lt;code>CONTRIBUTING.md&lt;/code> (or similar)
document this is your best source of information on expected practices for
contributions.&lt;/p>
&lt;p>Things you should look for include how are the commit messages formatted? Are
any additional files changed apart from the code changes (such as NEWS
updates)? Do the contributions all include additional test cases? Do internal
only changes need documentation?&lt;/p>
&lt;p>Some Common tidyverse conventions are&lt;/p>
&lt;ul>
&lt;li>Add a bullet to &lt;code>NEWS.md&lt;/code> for each change referencing the issue number and your GitHub username.&lt;/li>
&lt;li>Add &lt;code>Closes #123&lt;/code> at the end of your commit message to automatically close the issue with the PR is merged.&lt;/li>
&lt;li>Document functions with
&lt;a href="https://github.com/klutometis/roxygen" target="_blank" rel="noopener">roxygen&lt;/a> and be sure to run &lt;code>devtools::document()&lt;/code> before submitting.&lt;/li>
&lt;/ul>
&lt;p>Read the reviewer comments in the pull request
to get an idea of what in particular reviewers are looking for. Do they require
certain
&lt;a href="http://style.tidyverse.org" target="_blank" rel="noopener">code style&lt;/a>, variable names or code
organization? Are there common requests such as adding a note to the NEWS
commonly forgotten? If you can handle these things &lt;em>before&lt;/em> the reviewer even
sees your code is greatly reduces the friction in merging your changes.&lt;/p>
&lt;h3 id="make-your-changes-as-_small_-as-possible-">Make your changes as &lt;em>small&lt;/em> as possible
&lt;a href="#make-your-changes-as-_small_-as-possible-">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>One of the most common mistakes contributors make is to add a complicated new
feature as their first contribution.&lt;/p>
&lt;p>Accepting code as a maintainer means you
have to &lt;em>maintain&lt;/em> that code in the future, fixing bugs, updating
documentation, refactoring it as the rest of the code evolves. This means the
maintainer need to fully understand any code they accept.&lt;/p>
&lt;p>What this means for contributors is they should strive to make their
contribution as simple to understand as possible. The best way to do this is to
make the contribution as short and clear as possible, changing as little of the
existing code as you can. First time contributions is not the time to do major
restructuring or reformatting of existing code. The best way to check exactly
what changes you are proposing is to use &lt;code>git diff&lt;/code> &lt;em>prior&lt;/em> to submitting your
contribution. This will ensure it contains only the changes necessary for the
new functionality.&lt;/p>
&lt;h3 id="include-tests-">Include tests
&lt;a href="#include-tests-">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Contributions with test cases are easier to accept because the tests ensure the
code does what it intends to do and nothing else. Without tests the maintainer
needs to check the new functionality by hand, a burden you can lessen or remove
by including tests. If you are not sure what parts of your code is covered by
tests
&lt;a href="https://cran.r-project.org/package=covr" target="_blank" rel="noopener">covr&lt;/a> is a great tool to use
before submission. Just run the following to get a local coverage report of the
package so you can see exactly what lines are not covered in the project.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># install.packages(&amp;#34;covr&amp;#34;)&lt;/span>
&lt;span class="n">co&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">covr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">package_coverage&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">covr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">report&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">co&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In addition adding tests to parts of the code base that is not currently
covered is a great way to contribute to a project.&lt;/p>
&lt;h3 id="follow-the-style-">Follow the style
&lt;a href="#follow-the-style-">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>One of the first barriers to acceptance is coding style. Do not submit a
contribution using camelCase to a project that uses snake_case, or use tabs
when the project uses spaces. For tidyverse projects read the
&lt;a href="http://style.tidyverse.org" target="_blank" rel="noopener">Style
Guide&lt;/a> and use the
&lt;a href="https://cran.r-project.org/package=lintr" target="_blank" rel="noopener">lintr&lt;/a> package to find code which
does not adhere to the style guide.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># install.packages(&amp;#34;lintr&amp;#34;)&lt;/span>
&lt;span class="n">lintr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">lint_package&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember to include style changes only in code you are contributing. If you
want to fix style overall in the package that is a great idea, but it should be
in a separate pull request!&lt;/p>
&lt;h3 id="contribute-to-active-projects-">Contribute to active projects
&lt;a href="#contribute-to-active-projects-">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Development of tidyverse projects typically progresses in waves. We work
intensely on a certain project for a period of time, then let it lie fallow for
awhile and work on other things. Because of this contributions to projects
which are not being actively developed may not be addressed for a long length
of time. This does not mean the contribution is not appreciated, but it does
mean you have to be patient and when it is reviewed be prompt with a response.&lt;/p>
&lt;p>You can avoid these lengthy wait times by contributing to projects being
actively developed. Look at the GitHub contributions of members of the
tidyverse and times of recent commits of projects to see which are active and
which are fallow.&lt;/p>
&lt;h3 id="be-attentive-not-pushy-">Be attentive, not pushy
&lt;a href="#be-attentive-not-pushy-">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>When a maintainer does review a contribution, try to address the comments in
short order, your changes are much more likely to be accepted if they
are addressed in the next day than the next month. In addition occasional
comments bumping the issue can be useful if changes have been made, but do not
repeatably &amp;lsquo;ping&amp;rsquo; an issue because you feel it is been opened too long without
acceptance.&lt;/p>
&lt;p>If you absolutely need a feature from a development package an option is to
install your personal fork with the features included, or even install the
package directly from the pull request.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># install.packages(&amp;#34;devtools&amp;#34;)&lt;/span>
&lt;span class="c1"># install from personal fork&lt;/span>
&lt;span class="n">devtools&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">install&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/path/to/pkg&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># install from a pull request #123&lt;/span>
&lt;span class="n">devtools&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">install_github&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tidyverse/glue#123&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="view-contributing-as-a-relationship-not-a-transaction-">View contributing as a relationship, not a transaction
&lt;a href="#view-contributing-as-a-relationship-not-a-transaction-">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The best way to be successful contributing to open source projects is to do so
repeatedly. This means cultivating trust between yourself and the maintainer by
multiple successful contributions. After a series of smaller contributions the
maintainer will be much more willing to review and accept more substantial
changes. As with any relationship being polite and considerate throughout will
go a long way to improve trust. If you instead view the contribution as a
solitary transaction to add your pet feature you are much less likely to be
successful.&lt;/p>
&lt;h3 id="contribute-">Contribute!
&lt;a href="#contribute-">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Contributing to open source software will make you a better programmer, gain
valuable feedback through code review, look great on your resume and increase
your visibility in the community. It may even get you a job; I am on the
tidyverse team today mainly because I was a frequent open source contributor to
tidyverse packages over a number of years.&lt;/p></description></item></channel></rss>