<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>deep-dive | Tidyverse</title><link>https://www.tidyverse.org/categories/deep-dive/</link><atom:link href="https://www.tidyverse.org/categories/deep-dive/index.xml" rel="self" type="application/rss+xml"/><description>deep-dive</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 12 May 2025 00:00:00 +0000</lastBuildDate><item><title>Fonts in R</title><link>https://www.tidyverse.org/blog/2025/05/fonts-in-r/</link><pubDate>Mon, 12 May 2025 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2025/05/fonts-in-r/</guid><description>&lt;style type='text/css'>
pre {
text-wrap: nowrap;
overflow-x: scroll;
}
figure {
margin-top: 2em;
}
figcaption {
text-align: center;
margin-top: 1em;
}
table {
max-width: 99%
}
&lt;/style>
&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>(An updated version of this blog post will be available at
&lt;a href="https://systemfonts.r-lib.org" target="_blank" rel="noopener">the systemfonts webpage&lt;/a>)&lt;/p>
&lt;p>The purpose of this document is to give you a thorough overview of fonts in R. However, for this to be possible, you&amp;rsquo;ll first need a basic understanding of fonts in general. If you already have a thorough understanding of digital typography you can skip to
&lt;a href="#font-handling-in-r">the next section&lt;/a>.&lt;/p>
&lt;h2 id="digital-typography">Digital typography
&lt;a href="#digital-typography">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Many books could be, and have been, written about the subject of typography. This blog post is not meant to be an exhaustive deep dive into all areas of this vast subject. Rather, it is meant to give you just enough understanding of core concepts and terminology to appreciate how it all plays into using fonts in R.&lt;/p>
&lt;h3 id="typeface-or-font">Typeface or font?
&lt;a href="#typeface-or-font">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>There is a good chance that you, like 99% of world, use &amp;ldquo;font&amp;rdquo; as the term describing &amp;ldquo;the look&amp;rdquo; of the letters you type. You may, perhaps, have heard the term &amp;ldquo;typeface&amp;rdquo; as well and thought it synonymous. This is in fact slightly wrong, and a great deal of typography snobbery has been dealt out on that account (much like the distinction between packages and libraries in R). It is a rather inconsequential mix-up for the most part, especially because 99% of the population wouldn&amp;rsquo;t bat an eye if you use them interchangeably. However, the distinction between the two serves as a good starting point to talk about other terms in digital typography as well as the nature of font files, so let&amp;rsquo;s dive in.&lt;/p>
&lt;p>When most people use the word &amp;ldquo;font&amp;rdquo; or &amp;ldquo;font family&amp;rdquo;, what they are actually describing is a typeface. A &lt;strong>typeface&lt;/strong> is a style of lettering that forms a cohesive whole. As an example, consider the well-known &amp;ldquo;Helvetica&amp;rdquo; typeface. This name embraces many different weights (bold, normal, light) as well as slanted (italic) and upright. However, all of these variations are all as much Helvetica as the others - they are all part of the same typeface.&lt;/p>
&lt;p>A &lt;strong>font&lt;/strong> is a subset of a typeface, describing a particular variation of the typeface, i.e. the combination of weight, width, and slant that comes together to describe the specific subset of a typeface that is used. We typically give a specific combination of these features a name, like &amp;ldquo;bold&amp;rdquo; or &amp;ldquo;medium&amp;rdquo; or &amp;ldquo;italic&amp;rdquo;, which we call the &lt;strong>font style&lt;/strong>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. In other words, a font is a particularly style within a typeface.&lt;/p>
&lt;div class="highlight">
&lt;div class="figure" style="text-align: center">
&lt;p>&lt;img src="figs/unnamed-chunk-2-1.png" alt="Different fonts from the Avenir Next typeface" width="700px" />&lt;/p>
&lt;p class="caption">
Different fonts from the Avenir Next typeface
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>In the rest of this document we will use the terms typeface and font with the meaning described above.&lt;/p>
&lt;h3 id="font-files">Font files
&lt;a href="#font-files">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Next, we need to talk about how typefaces are represented for use by computers. Font files record information on how to draw the individual glyphs (characters), but also instructions about how to draw sequences of glyphs like distance adjustments (kerning) and substitution rules (ligatures). Font files typically encode a single font but can encode a full typeface:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>typefaces&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/system_fonts.html'>system_fonts&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>[&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"path"&lt;/span>, &lt;span class='s'>"index"&lt;/span>, &lt;span class='s'>"family"&lt;/span>, &lt;span class='s'>"style"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>]&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='c'># Full typeface in one file&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>typefaces&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='nv'>typefaces&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>family&lt;/span> &lt;span class='o'>==&lt;/span> &lt;span class='s'>"Helvetica"&lt;/span>, &lt;span class='o'>]&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 6 × 4&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; path index family style &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> /System/Library/Fonts/Helvetica.ttc 2 Helvetica Oblique &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> /System/Library/Fonts/Helvetica.ttc 4 Helvetica Light &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> /System/Library/Fonts/Helvetica.ttc 5 Helvetica Light Oblique&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>4&lt;/span> /System/Library/Fonts/Helvetica.ttc 1 Helvetica Bold &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>5&lt;/span> /System/Library/Fonts/Helvetica.ttc 3 Helvetica Bold Oblique &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>6&lt;/span> /System/Library/Fonts/Helvetica.ttc 0 Helvetica Regular&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='c'># One font per font file&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>typefaces&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='nv'>typefaces&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>family&lt;/span> &lt;span class='o'>==&lt;/span> &lt;span class='s'>"Arial"&lt;/span>, &lt;span class='o'>]&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 4 × 4&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; path index family style &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> /System/Library/Fonts/Supplemental/Arial.ttf 0 Arial Regular &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> /System/Library/Fonts/Supplemental/Arial Bold.ttf 0 Arial Bold &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> /System/Library/Fonts/Supplemental/Arial Bold Italic.ttf 0 Arial Bold Italic&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>4&lt;/span> /System/Library/Fonts/Supplemental/Arial Italic.ttf 0 Arial Italic&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Here, each row is a font, with &lt;strong>family&lt;/strong> giving the name of the typeface, and &lt;strong>style&lt;/strong> the font style.&lt;/p>
&lt;p>It took a considerable number of tries before the world managed to nail the digitial representation of fonts, leading to a proliferation of file types. As an R user, there are three formats that are particularly improtant:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>TrueType&lt;/strong> (ttf/ttc). Truetype is the baseline format that all modern formats stand on top of. It was developed by Apple in the &amp;rsquo;80s and became popular due to its great balance between size and quality. Fonts can be encoded, either as scalable paths, or as bitmaps of various sizes, the former generally being preferred as it allows for seamless scaling and small file size at the same time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>OpenType&lt;/strong> (otf/otc). OpenType was created by Microsoft and Adobe to improve upon TrueType. While TrueType was a great success, the number of glyphs it could contain was limited and so was its support for selecting different features during
&lt;a href="#text-shaping">shaping&lt;/a>. OpenType resolved these issues, so if you want access to advanced typography features you&amp;rsquo;ll need a font in OpenType format.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Web Open Font Format&lt;/strong> (woff/woff2). TrueType and OpenType tend to create large files. Since a large percentage of the text consumed today is delivered over the internet this creates a problem. WOFF resolves this problem by acting as a compression wrapper around TrueType/OpenType to reduce file sizes while also limiting the number of advanced features provided to those relevant to web fonts. The woff2 format is basically identical to woff except it uses the more efficient
&lt;a href="https://en.wikipedia.org/wiki/Brotli" target="_blank" rel="noopener">brotli&lt;/a> compression algorithm. WOFF was designed specifically to be delivered over the internet and support is still a bit limited outside of browsers.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>While we have mainly talked about font files as containers for the shape of glyphs, they also carries a lot of other information needed for rendering text in a way pleasant for reading. Font level information records a lot of stylistic information about typeface/font, statistics on the number of glyphs and how many different mappings between character encodings and glyphs it contains, and overall sizing information such as the maximum descend of the font, the position of an underline relative to the baseline etc. systemfonts provdies a convenient way to access this data from R:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>dplyr&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://pillar.r-lib.org/reference/glimpse.html'>glimpse&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/font_info.html'>font_info&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Helvetica"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Rows: 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Columns: 24&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ path &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> "/System/Library/Fonts/Helvetica.ttc"&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ index &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> 0&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ family &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> "Helvetica"&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ style &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> "Regular"&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ italic &lt;span style='color: #555555; font-style: italic;'>&amp;lt;lgl&amp;gt;&lt;/span> FALSE&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ bold &lt;span style='color: #555555; font-style: italic;'>&amp;lt;lgl&amp;gt;&lt;/span> FALSE&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ monospace &lt;span style='color: #555555; font-style: italic;'>&amp;lt;lgl&amp;gt;&lt;/span> FALSE&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ weight &lt;span style='color: #555555; font-style: italic;'>&amp;lt;ord&amp;gt;&lt;/span> normal&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ width &lt;span style='color: #555555; font-style: italic;'>&amp;lt;ord&amp;gt;&lt;/span> normal&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ kerning &lt;span style='color: #555555; font-style: italic;'>&amp;lt;lgl&amp;gt;&lt;/span> FALSE&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ color &lt;span style='color: #555555; font-style: italic;'>&amp;lt;lgl&amp;gt;&lt;/span> FALSE&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ scalable &lt;span style='color: #555555; font-style: italic;'>&amp;lt;lgl&amp;gt;&lt;/span> TRUE&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ vertical &lt;span style='color: #555555; font-style: italic;'>&amp;lt;lgl&amp;gt;&lt;/span> FALSE&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ n_glyphs &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> 2252&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ n_sizes &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> 0&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ n_charmaps &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> 10&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ bbox &lt;span style='color: #555555; font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span> &amp;lt;-11.406250, 17.343750, -5.765625, 13.453125&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ max_ascend &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> 9.234375&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ max_descend &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> -2.765625&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ max_advance_width &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> 18&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ max_advance_height &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> 12&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ lineheight &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> 12&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ underline_pos &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> -1.203125&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ underline_size &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> 0.59375&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Further, for each glyph there is a range of information in addition to its shape:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/glyph_info.html'>glyph_info&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"j"&lt;/span>, family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Helvetica"&lt;/span>, size &lt;span class='o'>=&lt;/span> &lt;span class='m'>30&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 1 × 9&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; glyph index width height x_bearing y_bearing x_advance y_advance bbox &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> j 77 6 27 -&lt;span style='color: #BB0000;'>1&lt;/span> 21 7 0 &lt;span style='color: #555555;'>&amp;lt;dbl [4]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>These terms are more easily understood with a diagram:&lt;/p>
&lt;div class="highlight">
&lt;p>&lt;img src="figs/unnamed-chunk-6-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>The &lt;code>x_advance&lt;/code> in particular is important when rendering text because it tells you how far to move to the right before rendering the next glyph (ignoring for a bit the concept of kerning)&lt;/p>
&lt;h3 id="text-shaping">Text shaping
&lt;a href="#text-shaping">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The next important concept to understand is &lt;strong>text shaping&lt;/strong>, which, in the simplest of terms, is to convert a succession of characters into a sequence of glyphs along with their locations. Important here is the distinction between &lt;strong>characters&lt;/strong>, the things you think of as letters, and &lt;strong>glyphs&lt;/strong>, which is what the font will draw. For example, think of the character &amp;ldquo;f&amp;rdquo;, which is often tricky to draw because the &amp;ldquo;hook&amp;rdquo; of the f can interfere with other characters. To solve this problem, many typefaces include &lt;strong>ligatures&lt;/strong>, like &amp;ldquo;ﬁ&amp;rdquo;, which are used for specific pairs of characaters. Ligatures are extremely important for languages like Arabic.&lt;/p>
&lt;p>A few of the challenges of text shaping include kerning, bidirectional text, and font substitution. &lt;strong>Kerning&lt;/strong> is the adjustment of distance between specific pairs of characters. For example, you can put &amp;ldquo;VM&amp;rdquo; a little closer together but &amp;ldquo;OO&amp;rdquo; needs to be a little further apart. Kerning is an integral part of all modern text rendering and you will almost solemnly notice it when it is absent (or worse,
&lt;a href="https://www.fastcompany.com/91324550/kerning-on-pope-francis-tomb-is-a-travesty" target="_blank" rel="noopener">wrongly applied&lt;/a>).&lt;/p>
&lt;p>Not every language writes text in the same direction, but regardless of your native script, you are likely to use arabic numerals which are always written left-to-right. This gives rise to the challenge of &lt;strong>bidirectional&lt;/strong> (or bidi) text, which mixes text flowing in different directions. This imposes a whole new range of challenges!&lt;/p>
&lt;p>Finally, you might request a character that a font doesn&amp;rsquo;t contain. One way to deal with this is to render a glyph representing a missing glyph, usually an empty box or a question mark. But it&amp;rsquo;s typically more useful to use the correct glyph from a different font. This is called &lt;strong>font fallback&lt;/strong> and happens all the time for emojis, but can also happen when you suddenly change script without bothering to pick a new font. Font fallback is an imprecise science, typically relying on an operating system font that has a very large number of characters, but might look very different from your existing font.&lt;/p>
&lt;p>Once you have determined the order and location of glyphs, you are still not done. Text often needs to be wrapped to fit into a specific width, it may need a specific justification, perhaps, indentation or tracking must be applied, etc. Thankfully, all of this is generally a matter of (often gnarly) math that you just have to get right. That is, all except text wrapping which should happen at the right boundaries, and may need to break up a word and inserting a hyphen etc.&lt;/p>
&lt;p>Like I said, the pit of despair is bottomless&amp;hellip;&lt;/p>
&lt;h2 id="font-handling-in-r">Font handling in R
&lt;a href="#font-handling-in-r">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>You hopefully arrive at this section with an appreciation of the horrors that goes into rendering text. If not, maybe this
&lt;a href="https://faultlore.com/blah/text-hates-you/" target="_blank" rel="noopener">blog post&lt;/a> will convince you.&lt;/p>
&lt;p>Are you still here? Good.&lt;/p>
&lt;p>Now that you understand the basics of what goes into handling fonts and text, we can now discuss the details of fonts in R specifically.&lt;/p>
&lt;h3 id="fonts-and-text-from-a-user-perspective">Fonts and text from a user perspective
&lt;a href="#fonts-and-text-from-a-user-perspective">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The users perception of working with fonts in R is largely shaped by plots. This means using either base or grid graphics or one of the packages that have been build on top of it, like
&lt;a href="https://ggplot2.tidyverse.org" target="_blank" rel="noopener">ggplot2&lt;/a>. While the choice of tool will affect &lt;em>where&lt;/em> you specify the font to use, they generally agree on how to specify it.&lt;/p>
&lt;table style="width:99%;">
&lt;colgroup>
&lt;col style="width: 37%" />
&lt;col style="width: 5%" />
&lt;col style="width: 18%" />
&lt;col style="width: 37%" />
&lt;/colgroup>
&lt;thead>
&lt;tr>
&lt;th>Graphic system&lt;/th>
&lt;th>Argument&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;em>Typeface&lt;/em>&lt;/td>
&lt;td>&lt;em>Font&lt;/em>&lt;/td>
&lt;td>&lt;em>Size&lt;/em>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;p>&lt;strong>Base&lt;/strong>&lt;/p>
&lt;p>&lt;em>Arguments are passed to &lt;code>par()&lt;/code> to set globally or directly to the call that renders text (e.g. &lt;code>text()&lt;/code>)&lt;/em>&lt;/p>&lt;/td>
&lt;td>&lt;code>family&lt;/code>&lt;/td>
&lt;td>&lt;code>font&lt;/code>&lt;/td>
&lt;td>&lt;code>cra&lt;/code> (pixels) or &lt;code>cin&lt;/code> (inches) multiplied by &lt;code>cex&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;p>&lt;strong>Grid&lt;/strong>&lt;/p>
&lt;p>Arguments are passed to the &lt;code>gp&lt;/code> argument of relevant grobs using the &lt;code>gpar()&lt;/code> constructor&lt;/p>&lt;/td>
&lt;td>&lt;code>fontfamily&lt;/code>&lt;/td>
&lt;td>&lt;code>fontface&lt;/code>&lt;/td>
&lt;td>&lt;code>fontsize&lt;/code> (points) multiplied by &lt;code>cex&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;p>&lt;strong>ggplot2&lt;/strong>&lt;/p>
&lt;p>Arguments are set in &lt;code>element_text()&lt;/code> to alter theme fonts or directly in the geom call to alter geom fonts&lt;/p>&lt;/td>
&lt;td>&lt;code>family&lt;/code>&lt;/td>
&lt;td>&lt;code>face&lt;/code> (in &lt;code>element_text()&lt;/code>) or &lt;code>fontface&lt;/code> (in geoms)&lt;/td>
&lt;td>&lt;code>size&lt;/code> (points when used in &lt;code>element_text()&lt;/code>, depends on the value of &lt;code>size.unit&lt;/code> argument when used in geom)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>From the table it is clear that in R &lt;code>fontfamily&lt;/code>/&lt;code>family&lt;/code> is used to describe the typeface and &lt;code>font&lt;/code>/&lt;code>fontface&lt;/code>/&lt;code>face&lt;/code> is used to select a font from the typeface. Size settings is just a plain mess.&lt;/p>
&lt;p>The major limitation in &lt;code>fontface&lt;/code> (and friends) is that it takes a number, not a string, and you can only select from four options: &lt;code>1&lt;/code>: plain, &lt;code>2&lt;/code>: bold, &lt;code>3&lt;/code>: italic, and &lt;code>4&lt;/code>: bold-italic. This means, for example, that there&amp;rsquo;s no way to select Futura Condensed Extra Bold. Another limitation is that it&amp;rsquo;s not possible to specify any font variations such as using tabular numbers or stylistic ligatures.&lt;/p>
&lt;h3 id="fonts-and-text-from-a-graphics-device-perspective">Fonts and text from a graphics device perspective
&lt;a href="#fonts-and-text-from-a-graphics-device-perspective">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>In R, a graphics device is the part responsible for doing the rendering you request and put it on your screen or in a file. When you call
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>png()&lt;/code>&lt;/a> or
&lt;a href="https://ragg.r-lib.org/reference/agg_png.html" target="_blank" rel="noopener">&lt;code>ragg::agg_png()&lt;/code>&lt;/a> you open up a graphics device that will receive all the plotting instructions from R. Both graphics devices will ultimately produce the same file type (PNG), but how they choose to handle and respond to the plotting instructions may differ (greatly). Nowhere is this difference more true than when it comes to text rendering.&lt;/p>
&lt;p>After a user has made a call that renders some text, it is funneled through the graphic system (base or grid), handed off to the graphics engine, which ultimately asks the graphics device to render the text. From the perspective of the graphics device it is much the same information that the user provided which are presented to it. The
&lt;a href="https://rdrr.io/r/graphics/text.html" target="_blank" rel="noopener">&lt;code>text()&lt;/code>&lt;/a> method of the device are given an array of characters, the typeface, the size in points, and an integer denoting if the style is regular, bold, italic, or bold-italic.&lt;/p>
&lt;figure>
&lt;img src="text_call_flow.svg" data-fig-alt="A diagram showing the flow of text rendering instructions from ggplot2, grid, the graphics engine, and down to the graphics device. Very little changes in the available information about the font during the flow" alt="Flow of font information through the R rendering stack" />
&lt;figcaption aria-hidden="true">Flow of font information through the R rendering stack&lt;/figcaption>
&lt;/figure>
&lt;p>This means that it is up to the graphics device to find the approprate font file (using the provided typeface and font style) and shape the text with all that that entails. This is a lot of work, which is why text is handled so inconsistently between graphics devices. Issues can range from not being able to find fonts installed on the computer, to not providing font fallback mechanisms, or even handling right-to-left text. It may also be that certain font file formats are not well supported so that e.g. color emojis are not rendered correctly.&lt;/p>
&lt;p>There have been a number of efforts to resolve these problems over the years:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>extrafont&lt;/strong>: Developed by Winston Chang,
&lt;a href="https://github.com/wch/extrafont" target="_blank" rel="noopener">extrafont&lt;/a> sought to mainly improve the situation for the
&lt;a href="https://rdrr.io/r/grDevices/pdf.html" target="_blank" rel="noopener">&lt;code>pdf()&lt;/code>&lt;/a> device which generally only had access to the postscript fonts that comes with R. The package allows the
&lt;a href="https://rdrr.io/r/grDevices/pdf.html" target="_blank" rel="noopener">&lt;code>pdf()&lt;/code>&lt;/a> device to get access to TrueType fonts installed on the computer, as well as provide means for embedding the font into the PDF so that it can be opened on systems where the font is not installed. (It also provides the capabilities to the Windows
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>png()&lt;/code>&lt;/a> device).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>sysfonts&lt;/strong> and &lt;strong>showtext&lt;/strong>. These packages are developed by Yixuan Qiu and provide support for system fonts to all graphics devices, by hijacking the
&lt;a href="https://rdrr.io/r/graphics/text.html" target="_blank" rel="noopener">&lt;code>text()&lt;/code>&lt;/a> method of the graphics device to treat text as polygons or raster images. This guarantees your plots will look the same on every device, but it doesn&amp;rsquo;t do advanced text shaping, so there&amp;rsquo;s no support for ligatures or font substitution. Additionally, it produces large files with inaccessible text when used to produce pdf and svg outputs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>systemfonts&lt;/strong> and &lt;strong>textshaping&lt;/strong>. These packages are developed by me to provide a soup-to-nuts solution to text rendering for graphics devices.
&lt;a href="https://systemfonts.r-lib.org" target="_blank" rel="noopener">systemfonts&lt;/a> provides access to fonts installed on the system along with font fallback mechanisms, registration of non-system fonts, reading of font files etc.
&lt;a href="https://github.com/r-lib/textshaping" target="_blank" rel="noopener">textshaping&lt;/a> builds on top of systemfonts and provides a fully modern engine for shaping text. The functionality is exposed both at the R level and at the C level, so that graphics devices can directly access to font lookup and shaping.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>We will fosus on systemfonts, because it&amp;rsquo;s designed to give R a modern text rendering stack. That&amp;rsquo;s unfortunately impossible without coordination with the graphics device, which means that to use all these features you need a supported graphics device. There are currently two options:&lt;/p>
&lt;ul>
&lt;li>The
&lt;a href="https://ragg.r-lib.org" target="_blank" rel="noopener">ragg&lt;/a> package provides graphics devices for rendering raster graphics in a variety of formats (PNG, JPEG, TIFF) and uses systemfonts and textshaping extensively.&lt;/li>
&lt;li>The
&lt;a href="https://svglite.r-lib.org" target="_blank" rel="noopener">svglite&lt;/a> package provides a graphic device for rendering vector graphics to SVG using systemfonts and textshaping for text.&lt;/li>
&lt;/ul>
&lt;p>You might notice there&amp;rsquo;s currently a big hole in this workflow: PDFs. This is something we plan to work on in the future.&lt;/p>
&lt;h2 id="a-systemfonts-based-workflow">A systemfonts based workflow
&lt;a href="#a-systemfonts-based-workflow">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>With all that said, how do you actually use systemfonts to use custom fonts in your plots? First, you&amp;rsquo;ll need to use ragg or svglite.&lt;/p>
&lt;h3 id="using-ragg">Using ragg
&lt;a href="#using-ragg">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>While there is no way to unilaterally make
&lt;a href="https://ragg.r-lib.org/reference/agg_png.html" target="_blank" rel="noopener">&lt;code>ragg::agg_png()&lt;/code>&lt;/a> the default everywhere, it&amp;rsquo;s possible to get close:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Positron: recent versions automatically use ragg for the plot pane if it&amp;rsquo;s installed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RStudio IDE: set &amp;ldquo;AGG&amp;rdquo; as the backend under Global Options &amp;gt; General &amp;gt; Graphics.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggplot2::ggsave()&lt;/code>&lt;/a>: ragg will be automatically used for raster output if installed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>R Markdown and Quarto: you need to set the &lt;code>dev&lt;/code> option to &lt;code>&amp;quot;ragg_png&amp;quot;&lt;/code>. You can either do this with code:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1">#| include: false&lt;/span>
&lt;span class="n">knitr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">opts_chunk&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="nf">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;ragg_png&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or in Quarto, you can set it in the yaml metadata:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">---&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;My Document&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">format&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>html&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">knitr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">opts_chunk&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">dev&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;ragg_png&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>---&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>If you want to use a font installed on your computer, you&amp;rsquo;re done!&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.text.html'>grid.text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='s'>"FUTURA 🎉"&lt;/span>,&lt;/span>
&lt;span> gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fontfamily &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Futura"&lt;/span>, fontface &lt;span class='o'>=&lt;/span> &lt;span class='m'>3&lt;/span>, fontsize &lt;span class='o'>=&lt;/span> &lt;span class='m'>30&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-7-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>Or, if using ggplot2&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/na.fail.html'>na.omit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>penguins&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_point.html'>geom_point&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>bill_len&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>body_mass&lt;/span>, colour &lt;span class='o'>=&lt;/span> &lt;span class='nv'>species&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/labs.html'>labs&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Bill Length"&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Body Mass"&lt;/span>, colour &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Species"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggtheme.html'>theme_minimal&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>base_family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Futura"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-8-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>If the results don&amp;rsquo;t look as you expect, you can use various systemfonts helpers to diagnose the problem:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/match_fonts.html'>match_fonts&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Futura"&lt;/span>, weight &lt;span class='o'>=&lt;/span> &lt;span class='s'>"bold"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 1 × 3&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; path index features &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> /System/Library/Fonts/Supplemental/Futura.ttc 2 &lt;span style='color: #555555;'>&amp;lt;font_ftr&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/font_fallback.html'>font_fallback&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"🎉"&lt;/span>, family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Futura"&lt;/span>, weight &lt;span class='o'>=&lt;/span> &lt;span class='s'>"bold"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; path index&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; 1 /System/Library/Fonts/Apple Color Emoji.ttc 0&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>If you want to see all the fonts that are available for use, you can use
&lt;a href="https://systemfonts.r-lib.org/reference/system_fonts.html" target="_blank" rel="noopener">&lt;code>systemfonts::system_fonts()&lt;/code>&lt;/a>&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/system_fonts.html'>system_fonts&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 570 × 9&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; path index name family style weight width italic monospace&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;ord&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;ord&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;lgl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;lgl&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 1&lt;/span> /System/Library/Fonts/Supplemental/Rockwell… 2 Rock… Rockw… Bold bold norm… FALSE FALSE &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 2&lt;/span> /System/Library/Fonts/Noteworthy.ttc 0 Note… Notew… Light normal norm… FALSE FALSE &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 3&lt;/span> /System/Library/Fonts/Supplemental/Devanaga… 1 Deva… Devan… Bold bold norm… FALSE FALSE &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 4&lt;/span> /System/Library/Fonts/Supplemental/Kannada … 0 Kann… Kanna… Regu… normal norm… FALSE FALSE &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 5&lt;/span> /System/Library/Fonts/Supplemental/Verdana … 0 Verd… Verda… Bold bold norm… FALSE FALSE &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 6&lt;/span> /System/Library/Fonts/ArialHB.ttc 8 Aria… Arial… Light light norm… FALSE FALSE &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 7&lt;/span> /System/Library/Fonts/AppleSDGothicNeo.ttc 10 Appl… Apple… Thin thin norm… FALSE FALSE &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 8&lt;/span> /System/Library/Fonts/Supplemental/DecoType… 0 Deco… DecoT… Regu… normal norm… FALSE FALSE &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 9&lt;/span> /System/Library/Fonts/Supplemental/Trebuche… 0 Treb… Trebu… Ital… normal norm… TRUE FALSE &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>10&lt;/span> /System/Library/Fonts/Supplemental/Khmer MN… 0 Khme… Khmer… Regu… normal norm… FALSE FALSE &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># ℹ 560 more rows&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="extra-font-styles">Extra font styles
&lt;a href="#extra-font-styles">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>As we discussed above, the R interface only allows you to select between four styles: plain, italic, bold, and bold-italic. If you want to use a thin font, you have no way of communicating this wish to the device. To overcome this, systemfonts provides &lt;code>register_variant()&lt;/code> which allows you to register a font with a new typeface name. For example, to use the thin font from the Avenir Next typeface you can register it as follows:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/register_variant.html'>register_variant&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> name &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Avenir Thin"&lt;/span>,&lt;/span>
&lt;span> family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Avenir Next"&lt;/span>,&lt;/span>
&lt;span> weight &lt;span class='o'>=&lt;/span> &lt;span class='s'>"thin"&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Now you can use Avenir Thin where you would otherwise specify the typeface:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.text.html'>grid.text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='s'>"Thin weight is soo classy"&lt;/span>,&lt;/span>
&lt;span> gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fontfamily &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Avenir Thin"&lt;/span>, fontsize &lt;span class='o'>=&lt;/span> &lt;span class='m'>30&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-13-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>&lt;code>register_variant()&lt;/code> also allows you to turn on font features otherwise hidden away:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/register_variant.html'>register_variant&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> name &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Avenir Small Caps"&lt;/span>,&lt;/span>
&lt;span> family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Avenir Next"&lt;/span>,&lt;/span>
&lt;span> features &lt;span class='o'>=&lt;/span> &lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/font_feature.html'>font_feature&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> letters &lt;span class='o'>=&lt;/span> &lt;span class='s'>"small_caps"&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.text.html'>grid.text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='s'>"All caps — Small caps"&lt;/span>,&lt;/span>
&lt;span> gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fontfamily &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Avenir Small Caps"&lt;/span>, fontsize &lt;span class='o'>=&lt;/span> &lt;span class='m'>30&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-14-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;h3 id="fonts-from-other-places">Fonts from other places
&lt;a href="#fonts-from-other-places">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Historically, systemfonts primary role was to access the font installed on your computer, the &lt;strong>system fonts&lt;/strong>. But what if you&amp;rsquo;re using a computer where you don&amp;rsquo;t have the rights to install new fonts, or you don&amp;rsquo;t want the hassle of installing a font just to use it for a single plot? That&amp;rsquo;s the problem solved by &lt;code>systemfonts::add_font()&lt;/code> which makes it easy to use a font based on a path. But in many cases you don&amp;rsquo;t even need that as systemfont now scans &lt;code>./fonts&lt;/code> and &lt;code>~/fonts&lt;/code> and adds any font files it find. This means that you can put personal fonts in a fonts folder in your home directory, and project fonts in a fonts directory at the root of the project. This is a great way to ensure that specific fonts are available when you deploy some code to a server.&lt;/p>
&lt;p>And you don&amp;rsquo;t even need to leave R to populate these folders.
&lt;a href="https://systemfonts.r-lib.org/reference/web-fonts.html" target="_blank" rel="noopener">&lt;code>systemfonts::get_from_google_fonts()&lt;/code>&lt;/a> will download and install a google font in &lt;code>~/fonts&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/web-fonts.html'>get_from_google_fonts&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Barrio"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.text.html'>grid.text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='s'>"A new font a day keeps Tufte away"&lt;/span>,&lt;/span>
&lt;span> gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fontfamily &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Barrio"&lt;/span>, fontsize &lt;span class='o'>=&lt;/span> &lt;span class='m'>30&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-15-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>And if you want to make sure this code works for anyone using your code (regardless of whether or not they already have the font installed), you can use
&lt;a href="https://systemfonts.r-lib.org/reference/require_font.html" target="_blank" rel="noopener">&lt;code>systemfonts::require_font()&lt;/code>&lt;/a>. If the font isn&amp;rsquo;t already installed, this function download it from one of the repositories it knows about. If it can&amp;rsquo;t find it it will either throw an error (the default) or remap the name to another font so that plotting will still succeed.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/require_font.html'>require_font&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Rubik Distressed"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Trying Google Fonts... Found! Downloading font to /var/folders/l4/tvfrd0ps4dqdr2z7kvnl9xh40000gn/T//Rtmp2qw4bE&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.text.html'>grid.text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='s'>"There are no bad fonts\nonly bad text"&lt;/span>,&lt;/span>
&lt;span> gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fontfamily &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Rubik Distressed"&lt;/span>, fontsize &lt;span class='o'>=&lt;/span> &lt;span class='m'>30&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-16-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>By default, &lt;code>require_font()&lt;/code> places new fonts in a temporary folder so it doesn&amp;rsquo;t pollute your carefully curated collection of fonts.&lt;/p>
&lt;h3 id="font-embedding-in-svg">Font embedding in SVG
&lt;a href="#font-embedding-in-svg">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Fonts work a little differently in vector formats like SVG. These formats include the raw text and only render the font when you open the file. This makes for small, accessible files with crisp text at every level of zoom. But it comes with a price: since the text is rendered when it&amp;rsquo;s opened, it relies on the font in use being available on the viewer&amp;rsquo;s computer. This obviously puts you at the mercy of their font selection, so if you want consistent outputs you&amp;rsquo;ll need to &lt;strong>embed&lt;/strong> the font.&lt;/p>
&lt;p>In SVG, you can embed fonts using an &lt;code>@import&lt;/code> statement in the stylesheet, and can point to a web resource so the SVG doesn&amp;rsquo;t need to contain the entire font. systemfonts provides facilities to generate URLs for import statements and can provide them in a variety of formats:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/fonts_as_import.html'>fonts_as_import&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Barrio"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] "https://fonts.bunny.net/css2?family=Barrio&amp;amp;display=swap"&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/fonts_as_import.html'>fonts_as_import&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Rubik Distressed"&lt;/span>, type &lt;span class='o'>=&lt;/span> &lt;span class='s'>"link"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] "&amp;lt;link rel=\"stylesheet\" href=\"https://fonts.bunny.net/css2?family=Rubik+Distressed&amp;amp;display=swap\"/&amp;gt;"&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Further, if the font is not available from an online repository, it can embed the font data directly into the URL:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/substr.html'>substr&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>systemfonts&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://systemfonts.r-lib.org/reference/fonts_as_import.html'>fonts_as_import&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Chalkduster"&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='m'>1&lt;/span>, &lt;span class='m'>200&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] "data:text/css,@font-face%20%7B%0A%20%20font-family:%20%22Chalkduster%22;%0A%20%20src:%20url(data:font/ttf;charset=utf-8;base64,AAEAAAAMAIAAAwC4T1MvMmk8+wsAAAFIAAAAYGNtYXBJhgfNAAAEOAAACspnbHlmLDPYGwAAf"&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>svglite uses this feature to allow seamless font embedding with the &lt;code>web_fonts&lt;/code> argument. It can take a URL as returned by &lt;code>fonts_as_import()&lt;/code> or just the name of the typeface and the URL will automatically be resolved. Look at line 6 in the SVG generated below&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>svg&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>svglite&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://svglite.r-lib.org/reference/svgstring.html'>svgstring&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>web_fonts &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Barrio"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.text.html'>grid.text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Example"&lt;/span>, gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fontfamily &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Barrio"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/invisible.html'>invisible&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grDevices/dev.html'>dev.off&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grDevices/cairo.html'>svg&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;?xml version='1.0' encoding='UTF-8' ?&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='720.00pt' height='576.00pt' viewBox='0 0 720.00 576.00'&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;g class='svglite'&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;defs&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;style type='text/css'&amp;gt;&amp;lt;![CDATA[&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; @import url('https://fonts.bunny.net/css2?family=Barrio&amp;amp;display=swap');&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle &amp;#123;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; fill: none;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; stroke: #000000;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; stroke-linecap: round;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; stroke-linejoin: round;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; stroke-miterlimit: 10.00;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;#125;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; .svglite text &amp;#123;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; white-space: pre;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;#125;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; .svglite g.glyphgroup path &amp;#123;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; fill: inherit;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; stroke: none;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;#125;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ]]&amp;gt;&amp;lt;/style&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;/defs&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;defs&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA='&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;rect x='0.00' y='0.00' width='720.00' height='576.00' /&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;/clipPath&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;/defs&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;text x='360.00' y='292.32' text-anchor='middle' style='font-size: 12.00px; font-family: "Barrio";' textLength='48.12px' lengthAdjust='spacingAndGlyphs'&amp;gt;Example&amp;lt;/text&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;/g&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;/g&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &amp;lt;/svg&amp;gt;&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="want-more">Want more?
&lt;a href="#want-more">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>This document has mainly focused on how to use the fonts you desire from within R. R has other limitations when it comes to text rendering specifically how to render text that consists of a mix of fonts. This has been solved by
&lt;a href="https://marquee.r-lib.org" target="_blank" rel="noopener">marquee&lt;/a> and the curious soul can continue there in order to up their skills in rendering text with R&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.draw.html'>grid.draw&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>marquee&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://marquee.r-lib.org/reference/marquee_grob.html'>marquee_grob&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='s'>"_This_ **is** the &amp;#123;.red end&amp;#125;"&lt;/span>,&lt;/span>
&lt;span> &lt;span class='nf'>marquee&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://marquee.r-lib.org/reference/classic_style.html'>classic_style&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>base_size &lt;span class='o'>=&lt;/span> &lt;span class='m'>30&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-20-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Be aware that the style name is at the discretion of the developer of the typeface. It is very common to see discrepancies between the style name and e.g. the weight reported by the font (e.g. Avenir Next Ultra Light is a &lt;em>thin&lt;/em> weight font). &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>webR 0.2.0 has been released</title><link>https://www.tidyverse.org/blog/2023/08/webr-0-2-0/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2023/08/webr-0-2-0/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
* [x] Release webR 0.2.0
* [] Update all links from /0.2.0-rc.1 to /0.2.0
* [x] Update webr-repo packages
* [x] Update webr-repo dashboard
-->
&lt;!-- Initialise webR in the page -->
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css">
&lt;style>
.CodeMirror pre {
background-color: unset !important;
}
.btn-webr {
background-color: #EEEEEE;
border-bottom-left-radius: 0;
border-bottom-right-radius: 0;
}
&lt;/style>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js">&lt;/script>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/r/r.js">&lt;/script>
&lt;script type="module">
import { WebR } from 'https://webr.r-wasm.org/v0.4.2/webr.mjs';
globalThis.webR = new WebR();
await globalThis.webR.init();
await webR.FS.mkdir('/persist');
await webR.FS.mount('IDBFS', {}, '/persist');
await webR.FS.syncfs(true);
await webR.evalRVoid("webr::shim_install()");
await webR.evalRVoid("webr::global_prompt_install()", { withHandlers: false });
globalThis.webRCodeShelter = await new globalThis.webR.Shelter();
document.querySelectorAll(".btn-webr").forEach((btn) => {
btn.innerText = 'Run code';
btn.disabled = false;
});
&lt;/script>
&lt;!-- Add webr engine for knit -->
&lt;div class="highlight">
&lt;/div>
&lt;p>We&amp;rsquo;re absolutely thrilled to announce the release of
&lt;a href="https://docs.r-wasm.org/webr/v0.2.0/" target="_blank" rel="noopener">webR&lt;/a> 0.2.0! This release gathers together many updates and improvements to webR over the last few months, including improvements to the HTML canvas graphics device, support for Cairo-based bitmap graphics, accessibility and internationalisation improvements, additional Wasm R package support (including Shiny), a new webR REPL app, and various updates to the webR developer API.&lt;/p>
&lt;p>This blog post will take a deep dive through the major breaking changes and new features available in webR 0.2.0. I also plan to record and release a series of companion videos discussing the new release, so keep an eye out if you&amp;rsquo;re someone who prefers watching and listening over reading long-form articles. I&amp;rsquo;ll update this post with all the links once they&amp;rsquo;re available.&lt;/p>
&lt;h2 id="webassembly-and-webr">WebAssembly and webR
&lt;a href="#webassembly-and-webr">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>My previous
&lt;a href="https://www.tidyverse.org/blog/2023/03/webr-0-1-0/" target="_blank" rel="noopener">webR release blog post&lt;/a> goes into detail about what WebAssembly is, why people are excited about it, and how it relates to the R community and ecosystem in general through webR. I would recommend it as a good place to start, if the project is new to you&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>A short explanation is that WebAssembly (also known as Wasm) allows software that&amp;rsquo;s normally compiled for a specific computer system to instead run anywhere, including in web browsers. Wasm is the technology that powers
&lt;a href="https://pyodide.org" target="_blank" rel="noopener">Pyodide&lt;/a> (used by
&lt;a href="https://shiny.rstudio.com/py/docs/shinylive.html" target="_blank" rel="noopener">Shinylive for Python&lt;/a>) and webR brings this technology to the R world. Using webR it is possible to run R code directly in a web browser&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, without the need for the traditional supporting R server to execute the code.&lt;/p>
&lt;p>Running R code directly in a browser opens the door for many new and exciting uses for R on the web. Applications that I&amp;rsquo;m personally excited in seeing developed are,&lt;/p>
&lt;ul>
&lt;li>Live and interactive R code and graphics in documents &amp;amp; presentations,&lt;/li>
&lt;li>Tactile educational content for R, with examples that can be remixed on-the-fly by learners,&lt;/li>
&lt;li>Reproducible statistics through containerisation and notebook-style literate programming.&lt;/li>
&lt;/ul>
&lt;p>Even in these early days, some of this is already being provided by development of downstream projects such as James Balamuta&amp;rsquo;s
&lt;a href="https://github.com/coatless/quarto-webr" target="_blank" rel="noopener">quarto-webr&lt;/a> extension, allowing Quarto users to easily embed interactive R code blocks in their documents.&lt;/p>
&lt;h3 id="interactive-code-blocks">Interactive code blocks
&lt;a href="#interactive-code-blocks">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>One of my favourite demonstrations of what webR can do is interactive code blocks for R code. After a short loading period while the webR binary is downloaded, a &lt;strong>Run code&lt;/strong> button will be enabled below. Using examples like this, R code can be immediately edited and executed &amp;ndash; feel free to experiment! Click the &amp;ldquo;Run code&amp;rdquo; button to see the resulting box plot, change the colour from &lt;code>mediumseagreen&lt;/code> to &lt;code>red&lt;/code> and run the code again.&lt;/p>
&lt;div class="highlight">
&lt;button class="btn btn-default btn-webr" disabled type="button" id="webr-run-button-1">Loading webR...&lt;/button>
&lt;div id="webr-editor-1">&lt;/div>
&lt;div id="webr-code-output-1">&lt;pre style="visibility: hidden">&lt;/pre>&lt;/div>
&lt;script type="module">
const runButton = document.getElementById('webr-run-button-1');
const outputDiv = document.getElementById('webr-code-output-1');
const editorDiv = document.getElementById('webr-editor-1');
const editor = CodeMirror((elt) => {
elt.style.border = '1px solid #eee';
elt.style.height = 'auto';
editorDiv.append(elt);
},{
value: `colnames(mtcars)\n\nboxplot(\n mpg ~ cyl, data = mtcars,\n col = "mediumseagreen",\n xlab = "Number of Cylinders",\n ylab = "Miles/(US) gallon",\n main = "Motor Trend Car Road Tests",\n sub = "Source: 1974 Motor Trend US magazine"\n)`,
lineNumbers: true,
mode: 'r',
theme: 'light default',
viewportMargin: Infinity,
});
runButton.onclick = async () => {
runButton.disabled = true;
let canvas = undefined;
await webR.init();
await webR.evalRVoid('webr::canvas(width=504, height=311.472)');
await webR.FS.syncfs(false);
const result = await webRCodeShelter.captureR(editor.getValue(), {
withAutoprint: true,
captureStreams: true,
captureConditions: false,
captureGraphics: false,
env: {},
});
try {
await webR.evalRVoid("dev.off()");
const out = result.output.filter(
evt => evt.type == 'stdout' || evt.type == 'stderr'
).map((evt) => evt.data).join('\n');
outputDiv.innerHTML = '';
const pre = document.createElement("pre");
if (/\S/.test(out)) {
const code = document.createElement("code");
code.innerText = out;
pre.appendChild(code);
} else {
pre.style.visibility = 'hidden';
}
outputDiv.appendChild(pre);
const msgs = await webR.flush();
msgs.forEach(msg => {
if (msg.type === 'canvas'){
if (msg.data.event === 'canvasImage') {
canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
} else if (msg.data.event === 'canvasNewPage') {
canvas = document.createElement('canvas');
canvas.setAttribute('width', 2 * 504);
canvas.setAttribute('height', 2 * 311.472);
canvas.style.width="700px";
canvas.style.display="block";
canvas.style.margin="auto";
const p = document.createElement("p");
p.appendChild(canvas);
outputDiv.appendChild(p);
}
}
});
} finally {
webRCodeShelter.purge();
runButton.disabled = false;
}
}
&lt;/script>
&lt;/div>
&lt;p>It&amp;rsquo;s easy to see the potential teaching benefit examples like this could bring to educational content or R package documentation.&lt;/p>
&lt;h2 id="the-webr-repl-app">The webR REPL app
&lt;a href="#the-webr-repl-app">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>WebR can be loaded into a web page to be used as a part of a wider web application, and ships with a demo application that does just that. The webR REPL app&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> provides a simple R environment directly in your web browser. The app can be accessed at &lt;a href="https://webr.r-wasm.org/v0.2.0/">https://webr.r-wasm.org/v0.2.0/&lt;/a> and includes sections for R console input/output, code editing, file management, and graphics device output.&lt;/p>
&lt;p>With the webR REPL app, a casual user could get up and running with R in seconds, without having to install any software on their machine. It is entirely feasible that they could perform the basics of data science entirely within their web browser!&lt;/p>
&lt;p>Other than interactive code blocks, like in the example earlier, the webR REPL app is perhaps the first thing that users new to webR will interact with. For this reason, we have spent some time working to improve the technical implementation and user experience of using the app. The app has been completely rewritten in the React web framework, replacing the older jQuery library. This allows for better component code organisation and more rapid development of features and updates.&lt;/p>
&lt;p>&lt;a href="repl.png">&lt;img alt="A screenshot the webR REPL app. The code to generate a ggplot, along with its output, is shown in the app." width="95%" src="repl.png">&lt;/a>&lt;/p>
&lt;h3 id="code-editor">Code editor
&lt;a href="#code-editor">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The app now comes with a tabbed code editor, allowing for easier editing and execution of R code. The editor integrates with the webR virtual filesystem (VFS), meaning that multiple R scripts can be opened, edited, and saved and they will be available to the running Wasm R process.&lt;/p>
&lt;p>The editor pane is built upon the excellent
&lt;a href="https://codemirror.net" target="_blank" rel="noopener">CodeMirror&lt;/a> text editor, which provides most of the component&amp;rsquo;s functionality. CodeMirror provides built-in support for syntax highlighting of R code, which is enabled by default when R source files are displayed.&lt;/p>
&lt;p>The editor is integrated with the currently running R process and automatic code suggestions are shown as you type, provided by R&amp;rsquo;s
&lt;a href="https://stat.ethz.ch/R-manual/R-devel/library/utils/html/rcompgen.html" target="_blank" rel="noopener">built in completion generator&lt;/a>. The suggestions are context sensitive and are aware of package and function names, valid arguments, and even objects that exist in the global environment.&lt;/p>
&lt;p>&lt;a href="completion.png">&lt;img alt="A screenshot of the editor component showing code completion results. One of the suggestions is a data set available in the global environment." width="70%" src="completion.png">&lt;/a>&lt;/p>
&lt;p>The running Wasm R process is also configured at initialisation to use the editor component as its display
&lt;a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/file.show.html" target="_blank" rel="noopener">pager mechanism&lt;/a>. With this configuration in place running commands such as
&lt;a href="https://rdrr.io/r/stats/Normal.html" target="_blank" rel="noopener">&lt;code>?rnorm&lt;/code>&lt;/a> in the app automatically opens a new read-only tab in the editor displaying R&amp;rsquo;s built-in documentation.&lt;/p>
&lt;p>&lt;a href="documentation.png">&lt;img alt="A screenshot of the editor component showing built-in R documentation" width="80%" src="documentation.png">&lt;/a>&lt;/p>
&lt;h3 id="plotting-pane">Plotting pane
&lt;a href="#plotting-pane">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The plotting pane has been updated to take advantage of improvements in webR&amp;rsquo;s HTML canvas graphics device, set as the default device as part of initialisation. In particular, multiple plots are now supported and older plots can be directly accessed using the previous and next buttons in the plotting toolbar. You can try this out with R&amp;rsquo;s built in graphics demo, by running &lt;code>demo(graphics)&lt;/code> and/or &lt;code>demo(persp)&lt;/code>.&lt;/p>
&lt;p>&lt;a href="plotting.png">&lt;img alt="A screenshot of the plot pane showing a built-in R graphics demo" width="75%" src="plotting.png">&lt;/a>&lt;/p>
&lt;h3 id="files-pane">Files pane
&lt;a href="#files-pane">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The files pane has been completely redesigned, removing its dependency on jQuery and instead making use of the
&lt;a href="https://www.npmjs.com/package/react-accessible-treeview" target="_blank" rel="noopener">react-accessible-treeview&lt;/a> package. As well as a technical improvement, this change means that interacting with the webR filesystem should be more usable to those with web accessibility requirements. We feel it&amp;rsquo;s important that, where possible, everybody is able to use our software.&lt;/p>
&lt;p>&lt;a href="files.png">&lt;img alt="A screenshot of the files pane showing the path /home/web_user/plot_random_numbers.R" width="90%" src="files.png">&lt;/a>&lt;/p>
&lt;p>Additional buttons have also been added to this pane, allowing users to easily manipulate the virtual file system visible to the running Wasm R process. New files and directories can be created or deleted, and text-based files can be directly opened and modified in the editor pane, removing the need to download, edit and then re-upload files.&lt;/p>
&lt;h3 id="console-pane">Console pane
&lt;a href="#console-pane">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The R console component shown in the lower left portion of the app is powered by the wonderful
&lt;a href="https://xtermjs.org" target="_blank" rel="noopener">xterm.js&lt;/a> software, which provides a high performance terminal emulator on the web. R output looks at its best when running in this kind of environment, so that
&lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code" target="_blank" rel="noopener">ANSI escape codes&lt;/a> can be used to provide a much smoother console experience incorporating cursor placement, box drawing characters, bold text, terminal colours, and more.&lt;/p>
&lt;p>&lt;a href="term.png">&lt;img alt="An example of ANSI escape sequences in R console output while loading the tidyverse package." width="90%" src="term.png">&lt;/a>&lt;/p>
&lt;p>An optional accessibility mode is provided by xterm.js so that terminal output is readable by screen reader software, such as
&lt;a href="https://support.apple.com/en-gb/guide/voiceover/welcome/mac" target="_blank" rel="noopener">macOS&amp;rsquo;s VoiceOver&lt;/a>. The webR REPL app now enables this mode by default to improve the accessibility of terminal output.&lt;/p>
&lt;h2 id="html-canvas-graphics-device">HTML Canvas graphics device
&lt;a href="#html-canvas-graphics-device">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The webR support package provides a custom
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a> graphics device that renders output using the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API" target="_blank" rel="noopener">Web Canvas API&lt;/a>. When the graphics device is used, drawing commands from R are translated into Canvas API calls. The browser renders the graphics and the resulting image data is drawn to a HTML &lt;code>&amp;lt;canvas&amp;gt;&lt;/code> element on the page.&lt;/p>
&lt;p>With the release of webR 0.2.0, we have improved the performance and added new features to the HTML canvas graphics device.&lt;/p>
&lt;h3 id="performance-improvements-with-offscreencanvas">Performance improvements with &lt;code>OffscreenCanvas&lt;/code>
&lt;a href="#performance-improvements-with-offscreencanvas">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Using the Canvas API to draw graphics in a browser is elegant, but presents a problem. R is running via WebAssembly in a JavaScript
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener">Web Worker&lt;/a> thread, but the &lt;code>&amp;lt;canvas&amp;gt;&lt;/code> element the plot image data is written to is on the main thread, part of the web page
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener">DOM&lt;/a>. And, unfortunately, JavaScript Web Worker threads have no direct access to the DOM.&lt;/p>
&lt;p>Previous releases of webR solve this problem in a rather naive way, it simply sends the Canvas API calls to the main thread to be executed there. This leads to a few issues,&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Canvas API calls are serialised as text to be sent to the main thread. Sufficiently complex plot text must therefore be quoted and escaped.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Each API call is sent in a separate message. For a complex plot this can be thousands of messages to dispatch and handle.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The messaging is one-way, results of useful methods like
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText" target="_blank" rel="noopener">&lt;code>measureText()&lt;/code>&lt;/a> cannot easily be retrieved.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Parsing and executing the API call on the main thread means using JavaScript&amp;rsquo;s
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval" target="_blank" rel="noopener">&lt;code>eval()&lt;/code>&lt;/a> or
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener">&lt;code>Function()&lt;/code>&lt;/a>, leading to poor performance. These functions should also be avoided when possible in any case, for security reasons.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Solid engineering efforts could be made to improve the situation, e.g. through batching API calls and better encoding, but there is a better way: the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas" target="_blank" rel="noopener">&lt;code>OffscreenCanvas&lt;/code>&lt;/a> interface. &lt;code>OffscreenCanvas&lt;/code> is designed to solve this exact problem of rendering graphics off-screen, such as in a worker thread. With &lt;code>OffscreenCanvas&lt;/code> the Canvas API calls can all be executed on the worker thread, and only a single message containing the completed image data transferred to the main thread when rendering is complete. It is an efficient and technically satisfying solution, except that when webR 0.1.1 was released &lt;code>OffscreenCanvas&lt;/code> wasn&amp;rsquo;t supported by the Safari web browser.&lt;/p>
&lt;p>Today, on the other hand, &lt;code>OffscreenCanvas&lt;/code> is
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas#browser_compatibility" target="_blank" rel="noopener">supported&lt;/a> in all major desktop and mobile browsers. Safari has supported it since version 16.4, and so with webR 0.2.0 we have rewritten the
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a> graphics device to take full advantage of the &lt;code>OffscreenCanvas&lt;/code> interface. This has led to a significant performance improvement, particularly when creating plots containing many points. The two videos below show the same plot rendered in webR 0.1.1 and 0.2.0, the difference is not just visible, but an order of magnitude faster.&lt;/p>
&lt;video controls loop width="100%" src="plot.mp4" style="border: 2px solid #CCC;">
&lt;source src="plot.mp4">
&lt;/video>
&lt;div style="text-align: center; font-weight: bold;">
&lt;p>A performance comparison plotting 300000 points in webR 0.1.1 and 0.2.0.&lt;/p>
&lt;/div>
&lt;p>A potential downside is that users of less up-to-date browsers without &lt;code>OffscreenCanvas&lt;/code> support won&amp;rsquo;t be able to use the
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a> graphics device. Such users should instead make use of our additional updates to webR to support the traditional Cairo-based bitmap devices. The
&lt;a href="#built-in-bitmap-graphics-devices">built-in graphics devices section&lt;/a> discusses that in more detail.&lt;/p>
&lt;h3 id="modern-text-rendering-and-internationalisation">Modern text rendering and internationalisation
&lt;a href="#modern-text-rendering-and-internationalisation">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>With webR 0.1.1, the canvas graphics device had only minimal support for rendering text. The typeface was fixed, the font metrics were estimated with a heuristic, and Unicode characters outside the Basic Latin block often failed to render. It worked most of the time, but it was far from ideal. This area of software engineering is
&lt;a href="https://faultlore.com/blah/text-hates-you/" target="_blank" rel="noopener">suprisingly difficult&lt;/a> to get right, and even native installations of R can have
&lt;a href="https://www.tidyverse.org/blog/2021/02/modern-text-features/" target="_blank" rel="noopener">serious text rendering issues&lt;/a>.&lt;/p>
&lt;p>In comparison, web browser support for text rendering is excellent. Now that we use the &lt;code>OffscreenCanvas&lt;/code> interface, we too can take advantage of the years of work behind browser&amp;rsquo;s support for text on the web. The example below demonstrates several of the modern text rendering features now supported by
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="highlight">
&lt;button class="btn btn-default btn-webr" disabled type="button" id="webr-run-button-2">Loading webR...&lt;/button>
&lt;div id="webr-editor-2">&lt;/div>
&lt;div id="webr-code-output-2">&lt;pre style="visibility: hidden">&lt;/pre>&lt;/div>
&lt;script type="module">
const runButton = document.getElementById('webr-run-button-2');
const outputDiv = document.getElementById('webr-code-output-2');
const editorDiv = document.getElementById('webr-editor-2');
const editor = CodeMirror((elt) => {
elt.style.border = '1px solid #eee';
elt.style.height = 'auto';
editorDiv.append(elt);
},{
value: `plot(\n rnorm(1000), rnorm(1000),\n col = rgb(0, 0, 0, 0.5),\n xlim = c(-5, 5), ylim = c(-5, 5),\n main = "This is the title 🚀",\n xlab = "This is the x label",\n ylab = "This is the y label",\n family = "Futura"\n)\ntext(-3.5, 4, "This is English", family = "monospace")\ntext(-3.5, -4, "هذا مكتوب باللغة العربية")\ntext(3.5, 4, "これは日本語です")\ntext(3.5, -4, "זה כתוב בעברית")`,
lineNumbers: true,
mode: 'r',
theme: 'light default',
viewportMargin: Infinity,
});
runButton.onclick = async () => {
runButton.disabled = true;
let canvas = undefined;
await webR.init();
await webR.evalRVoid('webr::canvas(width=504, height=311.472)');
await webR.FS.syncfs(false);
const result = await webRCodeShelter.captureR(editor.getValue(), {
withAutoprint: true,
captureStreams: true,
captureConditions: false,
captureGraphics: false,
env: {},
});
try {
await webR.evalRVoid("dev.off()");
const out = result.output.filter(
evt => evt.type == 'stdout' || evt.type == 'stderr'
).map((evt) => evt.data).join('\n');
outputDiv.innerHTML = '';
const pre = document.createElement("pre");
if (/\S/.test(out)) {
const code = document.createElement("code");
code.innerText = out;
pre.appendChild(code);
} else {
pre.style.visibility = 'hidden';
}
outputDiv.appendChild(pre);
const msgs = await webR.flush();
msgs.forEach(msg => {
if (msg.type === 'canvas'){
if (msg.data.event === 'canvasImage') {
canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
} else if (msg.data.event === 'canvasNewPage') {
canvas = document.createElement('canvas');
canvas.setAttribute('width', 2 * 504);
canvas.setAttribute('height', 2 * 311.472);
canvas.style.width="700px";
canvas.style.display="block";
canvas.style.margin="auto";
const p = document.createElement("p");
p.appendChild(canvas);
outputDiv.appendChild(p);
}
}
});
} finally {
webRCodeShelter.purge();
runButton.disabled = false;
}
}
&lt;/script>
&lt;/div>
&lt;p>Any system font available to the web browser can now be used&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>. As well as a nice-to-have, this also provides improved accessibility. For example, there are fonts designed specifically for use by readers with dyslexia and other similar reading barriers&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> that could be used for drawing text in plots.&lt;/p>
&lt;p>Font metrics are now exact, using
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText" target="_blank" rel="noopener">&lt;code>measureText()&lt;/code>&lt;/a>, rather than estimating the width and height of Latin glyphs using heuristics. This gives more accurate positioning of rendered text and improves the general quality of resulting plots.&lt;/p>
&lt;p>Support for Unicode, font glyph fallback, complex ligatures, and right-to-left (RTL) text have all been improved. This vastly improves results when rendering text for international users, particularly for non-Latin RTL scripts such as the Arabic and Hebrew text in the example above.&lt;/p>
&lt;p>Also, colour emoji can now be added to plots. 😃&lt;/p>
&lt;h3 id="paths-and-winding-rules">Paths and winding rules
&lt;a href="#paths-and-winding-rules">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Additional support for the drawing and filling of paths and polygons, including with different
&lt;a href="https://oreillymedia.github.io/Using_SVG/extras/ch06-fill-rule.html" target="_blank" rel="noopener">winding rules&lt;/a>, has been added to the webR canvas graphics device. An area where this new functionality makes a world of difference is plotting spatial features and maps. Previously broken R code for plotting maps with the &lt;code>ggplot2&lt;/code> and &lt;code>sf&lt;/code> packages now works well with webR 0.2.0.&lt;/p>
&lt;p>&lt;a href="paths.png">&lt;img alt="A screenshot of R plotting code testing paths with winding settings and map plotting. Output on the left for webR 0.1.1 is broken. Output on the right for webR 0.2.0 works correctly" width="95%" src="paths.png">&lt;/a>&lt;/p>
&lt;h3 id="output-messages-from-the-canvas-graphics-device">Output messages from the canvas graphics device
&lt;a href="#output-messages-from-the-canvas-graphics-device">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>As a result of the changes to the HTML canvas graphics device, the structure of output messages communicated to the main thread has been redesigned. This is a breaking change and existing webR applications will need to be updated to listen for the new output messaging format.&lt;/p>
&lt;p>
&lt;a href="https://docs.r-wasm.org/webr/latest/plotting.html" target="_blank" rel="noopener">A Plotting section&lt;/a> has been added to the webR documentation describing how plotting works with the
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a> device, and how to handle the output messages in your own web applications.&lt;/p>
&lt;p>A &lt;code>'canvas'&lt;/code> type output message with an &lt;code>event&lt;/code> property of &lt;code>'canvasNewPage'&lt;/code> indicates the start of a new plot,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="p">{&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;canvas&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;canvasNewPage&amp;#39;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>An output message with an &lt;code>event&lt;/code> property of &lt;code>'canvasImage'&lt;/code> indicates that there is some graphics data ready to be drawn,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="p">{&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;canvas&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;canvasImage&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">image&lt;/span>: &lt;span class="kt">ImageBitmap&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>image&lt;/code> property in the message data contains a JavaScript
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap" target="_blank" rel="noopener">&lt;code>ImageBitmap&lt;/code>&lt;/a> object. This can be drawn to a HTML &lt;code>&amp;lt;canvas&amp;gt;&lt;/code> element using the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage" target="_blank" rel="noopener">&lt;code>drawImage()&lt;/code>&lt;/a> method.&lt;/p>
&lt;h2 id="built-in-bitmap-graphics-devices">Built-in bitmap graphics devices
&lt;a href="#built-in-bitmap-graphics-devices">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Not all environments where webR could be running support plotting to a HTML &lt;code>&amp;lt;canvas&amp;gt;&lt;/code> element. Older browsers may not support the required &lt;code>OffscreenCanvas&lt;/code> interface, webR might be running server-side in Node.js, or webR might be running more traditional R code or packages that are unaware of the
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a> graphics device.&lt;/p>
&lt;p>For supporting these use cases, with webR 0.2.0 the built-in bitmap graphics devices are now able to be used, writing their output to the webR VFS. This includes the
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>png()&lt;/code>&lt;/a>,
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>bmp()&lt;/code>&lt;/a>,
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>jpeg()&lt;/code>&lt;/a>,
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>tiff()&lt;/code>&lt;/a> devices, and potentially others implemented using the Cairo graphics library.&lt;/p>
&lt;p>In the example below, webR is loaded into a JavaScript environment and plotting is done using the built-in
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>png()&lt;/code>&lt;/a> graphics device. The resulting image is written to the virtual filesystem and its contents can then be obtained using webR&amp;rsquo;s
&lt;a href="https://docs.r-wasm.org/webr/latest/api/js/classes/WebR.WebR.html#fs" target="_blank" rel="noopener">&lt;code>FS&lt;/code>&lt;/a> interface, designed to be similar to
&lt;a href="https://emscripten.org/docs/api_reference/Filesystem-API.html" target="_blank" rel="noopener">Emscripten&amp;rsquo;s filesystem API&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">WebR&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;webr&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">webR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">WebR&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalRVoid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`
&lt;/span>&lt;span class="sb"> png(&amp;#39;/tmp/Rplot.png&amp;#39;, width = 800, height = 800, res = 144)
&lt;/span>&lt;span class="sb"> hist(rnorm(1000))
&lt;/span>&lt;span class="sb"> dev.off()
&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">plotImageData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/tmp/Rplot.png&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The image data is contained in the &lt;code>plotImageData&lt;/code> variable as a JavaScript
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noopener">&lt;code>UInt8Array&lt;/code>&lt;/a>. Once obtained from the VFS, the image can be served to the end user as a
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">&lt;code>Blob&lt;/code>&lt;/a> file download, displayed on a web page, or if running webR server-side returned over the network.&lt;/p>
&lt;h3 id="text-rendering-and-font-support">Text rendering and font support
&lt;a href="#text-rendering-and-font-support">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>As with the
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a> improvements described in the previous section, we feel it is important that the built in R graphics devices provides a high level of support for text rendering in webR. Here, however, the approach is different. The built-in graphics devices renders image data entirely within the WebAssembly environment, so we can no longer rely on the web browser for high quality text!&lt;/p>
&lt;p>The built-in graphics devices are powered by the Cairo graphics library, which can now optionally be compiled for Wasm as part of the webR build process. In addition, when enabled various other libraries are compiled for Wasm to improve the quality of text rendering in Cairo,&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://pango.gnome.org" target="_blank" rel="noopener">pango&lt;/a>&lt;/li>
&lt;li>
&lt;a href="http://fribidi.org" target="_blank" rel="noopener">fribidi&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://harfbuzz.github.io" target="_blank" rel="noopener">harfbuzz&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://freetype.org" target="_blank" rel="noopener">freetype&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://www.freedesktop.org/wiki/Software/fontconfig/" target="_blank" rel="noopener">fontconfig&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Public releases of webR distributed via GitHub and CDN will be built with these libraries all enabled and included.&lt;/p>
&lt;h4 id="font-files-on-the-vfs">Font files on the VFS
&lt;a href="#font-files-on-the-vfs">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h4>&lt;p>When plotting with the built-in bitmap graphics devices, fonts must be accessible to the Cairo library through the webR VFS. A minimal selection of
&lt;a href="https://fonts.google.com/noto" target="_blank" rel="noopener">Google&amp;rsquo;s Noto fonts&lt;/a> are bundled with webR when Cairo graphics is enabled.&lt;/p>
&lt;p>The fontconfig library is also configured to search the VFS directory &lt;code>/home/web_user/fonts&lt;/code> for additional fonts. Users who wish to use custom fonts, or alternative writing systems, may do so by uploading font files to this directory. In the case of international scripts or non-Latin Unicode such as emoji, fontconfig will automatically use font fallback to select reasonable fonts containing the required glyphs.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">png&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">800&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">180&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">plot&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nf">rnorm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">rnorm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">col&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rgb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.5&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">xlim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">-5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">ylim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">-5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">main&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;This is the title 🚀&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">xlab&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;This is the x label&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ylab&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;This is the y label&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nf">text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">-3.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;This is English&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">-3.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">-4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;هذا مكتوب باللغة العربية&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;これは日本語です&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">-4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;זה כתוב בעברית&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">dev.off&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is essentially the same example as in the previous section, demonstrating a selection of advanced font functionality. In this example we are rendering a PNG file using the built-in
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>png()&lt;/code>&lt;/a> graphics device. We can see that by uploading appropriate fonts to the VFS, the same set of advanced text rendering features that are provided by the browser can also be used with R&amp;rsquo;s built-in bitmap graphics devices.&lt;/p>
&lt;p>&lt;a href="textplot.png">&lt;img alt="A screenshot showing the output of the above plotting code is shown on the left. The additional fonts uploaded to the VFS are listed on the right." width="100%" src="textplot.png">&lt;/a>&lt;/p>
&lt;h2 id="lazy-virtual-filesystem">Lazy virtual filesystem
&lt;a href="#lazy-virtual-filesystem">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>All of the additional features I&amp;rsquo;ve written about so far come with a price: increased Wasm binary and data download size. Consider the fonts in the previous section - each font file bundled with webR is going to increase the total size of the default webR filesystem by around 500KB.&lt;/p>
&lt;p>This is a high price to pay in time and bandwidth when not every user is going to need every feature. A similar principle also applies to other files included with R by default. It&amp;rsquo;s nice that all the default R documentation, examples, and datasets are available on the VFS, but we don&amp;rsquo;t necessarily need those files downloaded every time to every client machine.&lt;/p>
&lt;p>With webR 0.2.0 a &amp;ldquo;lazy&amp;rdquo; virtual filesystem mechanism, powered by
&lt;a href="https://emscripten.org/docs/porting/files/Synchronous-Virtual-XHR-Backed-File-System-Usage.html" target="_blank" rel="noopener">a feature of Emscripten&amp;rsquo;s FS API&lt;/a>, is introduced. With this, only the files required to launch R and use the default packages are downloaded at initialisation time. Additional files provided on the VFS are still available for use, but they are only downloaded from the remote server when they are requested in some way by the running Wasm R process.&lt;/p>
&lt;p>With the introduction of the lazy virtual filesystem, along with other efficiency improvements, the initial download size for webR is now much smaller, a great improvement.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Component&lt;/th>
&lt;th>0.1.1&lt;/th>
&lt;th>0.2.0&lt;/th>
&lt;th>(% of previous)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>R.bin.data&lt;/code>&lt;/td>
&lt;td>25.3MB&lt;/td>
&lt;td>5.2MB&lt;/td>
&lt;td>20.6%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R.bin.wasm&lt;/code>&lt;/td>
&lt;td>12.8MB&lt;/td>
&lt;td>1.7MB&lt;/td>
&lt;td>7.5%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Total for the webR REPL app&lt;/strong>&lt;/td>
&lt;td>40.2MB&lt;/td>
&lt;td>9.5MB&lt;/td>
&lt;td>23.6%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="r-packages">R packages
&lt;a href="#r-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Since initial release, webR has supported loading R packages by first installing them to the Emscripten VFS using the helper function
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#install-one-or-more-packages-from-a-webr-binary-package-repo" target="_blank" rel="noopener">&lt;code>webr::install()&lt;/code>&lt;/a> or by manually placing R packages in the VFS at &lt;code>/usr/lib/R/library&lt;/code>. We find that pure R packages usually work well, but R packages with underlying C (or Fortran, or otherwise&amp;hellip;) code must be compiled from source for Wasm.&lt;/p>
&lt;p>We host a public CRAN-like R package repository containing packages built for Wasm in this way, so that there exists a subset of useful and supported R packages that can be used with webR. The public repository is hosted at &lt;a href="https://repo.r-wasm.org">https://repo.r-wasm.org&lt;/a> and this repo URL is used by default when running
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#install-one-or-more-packages-from-a-webr-binary-package-repo" target="_blank" rel="noopener">&lt;code>webr::install()&lt;/code>&lt;/a> to install a Wasm R package.&lt;/p>
&lt;p>It remains the case that building custom R packages for Wasm is not well documented, but we do hope to improve the situation over time as our package build infrastructure develops and matures. In the future, we plan to provide a Wasm R package build system as a set of Docker containers, so that users are able to build their own packages for webR using a container environment.&lt;/p>
&lt;h3 id="webassembly-system-libraries-for-r-packages">WebAssembly system libraries for R packages
&lt;a href="#webassembly-system-libraries-for-r-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Many R packages require linking with system libraries to build and run. When building such R packages for WebAssembly, not only does the package code require compiling for Wasm, but also any system libraries that code depends on.&lt;/p>
&lt;p>To expand support for R packages, webR 0.2.0 ships with
&lt;a href="https://github.com/r-wasm/webr/tree/main/libs/recipes" target="_blank" rel="noopener">additional recipes&lt;/a> to build system libraries from source for Wasm. The libraries consist of a selection of utility, database, graphics, text rendering, geometry, and geospatial support packages, with specific libraries chosen for their possibility to be compiled for Wasm as well as the number of R packages relying on them. I expect that the number of system libraries supported will continue to grow over time as we attempt to build more R packages for Wasm.&lt;/p>
&lt;p>As of webR 0.1.1, &lt;strong>219&lt;/strong> packages were available to install through our public Wasm R package repo. With the release of webR 0.2.0 and its additional system libraries, the number of available packages is now &lt;strong>10324&lt;/strong> (approximately 51% of CRAN packages). Though, it should be noted that these packages have not been tested in detail. Here, &amp;ldquo;available&amp;rdquo; just means that the Emscripten compiler successfully built the R package for Wasm, along with its prerequisite packages.&lt;/p>
&lt;h3 id="public-wasm-r-packages-dashboard">Public Wasm R packages dashboard
&lt;a href="#public-wasm-r-packages-dashboard">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>While available R packages can be listed using
&lt;a href="https://rdrr.io/r/utils/available.packages.html" target="_blank" rel="noopener">&lt;code>available.packages()&lt;/code>&lt;/a> with our CRAN-like Wasm R package repo, it&amp;rsquo;s not the smoothest experience for users simply wanting to check if a given package is available. A dashboard has been added to the
&lt;a href="https://repo.r-wasm.org" target="_blank" rel="noopener">repo index page&lt;/a> which lists the available packages compiled for Wasm in an interactive table. The table also lists package dependencies, noting which prerequisite packages, if any, are still missing.&lt;/p>
&lt;p>&lt;a href="repo.png">&lt;img alt="A screenshot of the webR binary R package repository index page. A table of available R packages is shown, along with their prerequisites" width="95%" src="repo.png">&lt;/a>&lt;/p>
&lt;p>It might be interesting to note that this dashboard itself is running under webR, through a fully client-side Shiny app.&lt;/p>
&lt;h2 id="running-httpuv--shiny-under-webr">Running httpuv &amp;amp; Shiny under webR
&lt;a href="#running-httpuv--shiny-under-webr">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Using features new to webR 0.2.0, a
&lt;a href="https://github.com/r-wasm/httpuv" target="_blank" rel="noopener">httpuv webR package shim&lt;/a> has been created that provides the functionality usually provided by the
&lt;a href="https://cran.r-project.org/web/packages/httpuv/index.html" target="_blank" rel="noopener">httpuv&lt;/a> R package. The package enables R to handle HTTP and WebSocket traffic, and is a prerequisite for the R Shiny package.&lt;/p>
&lt;p>The shim works by taking advantage of the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener">JavaScript Service Worker API&lt;/a>. Normally Service Workers are used to implement fast offline caching of web content, but they can also be used as a general network proxy. The httpuv shim makes use of a Service Worker to intercept network traffic from a running Shiny web client, and forward that traffic to be handled by an instance of webR.&lt;/p>
&lt;p>From the Shiny server&amp;rsquo;s point of view, it is communicating with the usual httpuv package using its R API. From the point of view of the Shiny web client, it is talking to a Shiny server over the network. Between the two, the JavaScript Service Worker and webR work together to act as a network proxy and handle the traffic entirely within the client&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>&lt;a href="httpuv.png">&lt;img alt="A block diagram showing how the httpuv shim, webR worker thread, and Shiny work together. See the preceding diagram for an explanation of how the blocks interact" width="90%" src="httpuv.png">&lt;/a>&lt;/p>
&lt;p>The httpuv shim package is still in the experimental stage, but it is currently available for testing and is included in our public webR package repository.&lt;/p>
&lt;h3 id="an-example-shiny-app">An example shiny app
&lt;a href="#an-example-shiny-app">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>&lt;a href="shiny.png">&lt;img alt="A screenshot of the webR Shiny demo. The shiny app is shown in the top section of the screenshot, an input slider and an output histogram plot. The lower section shows the normally server-side Shiny package console output when tracing is enabled." width="90%" src="shiny.png">&lt;/a>&lt;/p>
&lt;p>An example Shiny app, making use of the httpuv shim and running fully client-side, is available at &lt;a href="https://shiny-standalone-webr-demo.netlify.app">https://shiny-standalone-webr-demo.netlify.app&lt;/a>.&lt;/p>
&lt;p>Once the app has loaded in your browser, it&amp;rsquo;s possible to confirm that the app is running entirely client-side by observing the Shiny server trace output at the bottom of the screen. You should even be able to disconnect completely from the internet and continue to use the app offline.&lt;/p>
&lt;p>The source code for the demo, which includes some information describing how to set up a webR Shiny server in this way, can be found at &lt;a href="https://github.com/georgestagg/shiny-standalone-webr-demo">georgestagg/shiny-standalone-webr-demo&lt;/a>. Note that this repository is targeted towards advanced web developers with prior experience of development with JavaScript Web Workers. It is intended as a demonstration of the technology, rather than a tutorial.&lt;/p>
&lt;p>A coming-soon version of Shinylive for R will provide a much better user experience for getting fully client-side R Shiny apps up and running, without requiring advanced knowledge of JavaScript&amp;rsquo;s Worker API. I believe Shinylive with webR integration will pave the way for providing a user-friendly method to build and deploy containerised R Shiny apps, running on WebAssembly.&lt;/p>
&lt;h2 id="changes-to-the-webr-developer-api">Changes to the webR developer API
&lt;a href="#changes-to-the-webr-developer-api">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>It&amp;rsquo;s possible for webR to be used in isolation, but it&amp;rsquo;s likely that developers will want to interface webR with other JavaScript frameworks and tools. The dynamism and interconnectivity of the web is one of its great strengths, and we&amp;rsquo;d like the same to be true of webR. This section describes changes to webR&amp;rsquo;s developer API, used to interact with the running R session from the JavaScript environment.&lt;/p>
&lt;h3 id="performance-improvements-with-messagepack-protocol">Performance improvements with MessagePack protocol
&lt;a href="#performance-improvements-with-messagepack-protocol">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>When working to integrate webR into a wider application, at some point we will need to move data into the running R process, and later return results back to JavaScript. It&amp;rsquo;s possible to move data into R by evaluating R code directly, but the webR library also provides
&lt;a href="https://docs.r-wasm.org/webr/latest/convert-js-to-r.html" target="_blank" rel="noopener">other ways to transfer raw data to R&lt;/a>.&lt;/p>
&lt;p>Consider the example below. Data is transferred from JavaScript into the running R process by binding &lt;code>jsData&lt;/code> to an R variable in the global environment using
&lt;a href="https://docs.r-wasm.org/webr/latest/convert-js-to-r.html#binding-objects-to-an-r-environment" target="_blank" rel="noopener">&lt;code>webR.objs.globalEnv.bind()&lt;/code>&lt;/a>. Next, some computation on the data is done, represented as evaluating the &lt;code>do_analysis()&lt;/code> R function. Finally the result is returned back to JavaScript, first as a reference to an R object and then transferring the result data back to the JavaScript environment using
&lt;a href="https://docs.r-wasm.org/webr/latest/convert-r-to-js.html#serialising-r-objects" target="_blank" rel="noopener">&lt;code>toJs()&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">jsData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[...&lt;/span> &lt;span class="nx">some&lt;/span> &lt;span class="nx">large&lt;/span> &lt;span class="nx">JavaScript&lt;/span> &lt;span class="nx">dataset&lt;/span> &lt;span class="p">...];&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">objs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">globalEnv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">jsData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;do_analysis(data)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">ret&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toJs&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s easy to see how this workflow could be useful as part of a wider application, enabling a complex data manipulation or a statistical modelling in R that would otherwise be awkward to perform directly in JavaScript.&lt;/p>
&lt;p>Behind the scenes, we&amp;rsquo;ve done work to ensure that data is transferred efficiently to and from the R environment, and in webR 0.2.0 the
&lt;a href="https://msgpack.org/index.html" target="_blank" rel="noopener">MessagePack&lt;/a> protocol is now used as the main way that data is serialised and transferred, replacing JSON encoding.&lt;/p>
&lt;p>This change provides a significant performance improvement.
&lt;a href="https://github.com/r-wasm/webr/pull/204" target="_blank" rel="noopener">Initial testing&lt;/a> shows an order of magnitude speed boost when transferring large sets of data from the JavaScript environment into R. Thanks to
&lt;a href="https://github.com/r-wasm/webr/issues/203" target="_blank" rel="noopener">@jeroen&lt;/a> for prompting me to look into it!&lt;/p>
&lt;h3 id="the-typing-of-r-object-references">The typing of R object references
&lt;a href="#the-typing-of-r-object-references">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>When working with webR in TypeScript it is important to keep track of R object types. All references to R objects are instances of the
&lt;a href="https://docs.r-wasm.org/webr/latest/objects.html" target="_blank" rel="noopener">&lt;code>RObject&lt;/code>&lt;/a> class, and various subclasses implement specific features for each fundamental R data type.&lt;/p>
&lt;p>In this example, an
&lt;a href="https://docs.r-wasm.org/webr/latest/api/js/classes/RWorker.RDouble.html" target="_blank" rel="noopener">&lt;code>RDouble&lt;/code>&lt;/a> object is returned at runtime, but &lt;code>webR.evalR()&lt;/code> is typed to return a generic &lt;code>RObject&lt;/code>. Notice that the
&lt;a href="https://docs.r-wasm.org/webr/latest/api/js/classes/RWorker.RDouble.html#tonumber" target="_blank" rel="noopener">&lt;code>.toNumber()&lt;/code>&lt;/a> method exists on &lt;code>RDouble&lt;/code>, but not on the &lt;code>RObject&lt;/code> superclass. So while this example runs with no problem once compiled to JavaScript, it gives an error under TypeScript!&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1.23456&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toJs&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toNumber&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// An error under TypeScript!
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>One solution is to use the
&lt;a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions" target="_blank" rel="noopener">&lt;code>as&lt;/code>&lt;/a> keyword to assert a specific type of &lt;code>RObject&lt;/code> subclass. Alternatively, webR also provides
&lt;a href="https://docs.r-wasm.org/webr/latest/evaluating.html#returning-javascript-values-when-evaluating-r-code" target="_blank" rel="noopener">variants of the &lt;code>evalR()&lt;/code> function&lt;/a> that return and convert results to a specific type of JavaScript object.&lt;/p>
&lt;p>In many cases these methods will work well, &lt;em>but they require you to know for sure what type of R object has been returned&lt;/em>. Additional support has been added in webR 0.2.0 to better handle typing when it is not entirely clear what type of &lt;code>RObject&lt;/code> you have.&lt;/p>
&lt;h4 id="type-predicate-functions">Type predicate functions
&lt;a href="#type-predicate-functions">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h4>&lt;p>TypeScript supports a kind of return type known as a
&lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates" target="_blank" rel="noopener">type predicate&lt;/a>. These return types can be used to create user-defined type guards, functions that take an object argument and return a boolean indicating if the object is of a compatible type. With this, TypeScript is able to automatically
&lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html" target="_blank" rel="noopener">narrow&lt;/a> types based on the return value from the type predicate function.&lt;/p>
&lt;p>WebR 0.2.0 ships with a selection of
&lt;a href="https://docs.r-wasm.org/webr/latest/objects.html#type-predicate-functions" target="_blank" rel="noopener">type predicate functions for each fundamental R data type&lt;/a> supported by webR. In the following example, the TypeScript error described above is dealt with by using the function
&lt;a href="https://docs.r-wasm.org/webr/latest/api/js/modules/RMain.html#isrdouble" target="_blank" rel="noopener">&lt;code>isRDouble()&lt;/code>&lt;/a>. Inside the branch, TypeScript narrows the object type to an &lt;code>RDouble&lt;/code>, resolving the issue.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">isRDouble&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;webr&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1.23456&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isRDouble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// In this branch, TypeScript narrows the type of `obj` to an `RDouble`
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toNumber&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Do something with `num` ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">destroy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="handling-errors-with-webrerror">Handling errors with &lt;code>WebRError&lt;/code>
&lt;a href="#handling-errors-with-webrerror">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>When executing R code with webR&amp;rsquo;s &lt;code>evalR()&lt;/code> family of functions, by default any error condition from R is converted into a JavaScript
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noopener">&lt;code>Error&lt;/code>&lt;/a> and thrown. This feature can be very useful, because it allows developers to catch issues while executing R code in the native JavaScript environment.&lt;/p>
&lt;p>However, consider the following example,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;some_R_code()&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">doSomethingWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Handle some error that occured
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If an error is thrown, how can we tell if the error came from R or from some issue inside the JavaScript function? Nested &lt;code>try&lt;/code>/&lt;code>catch&lt;/code> could be used, but this becomes unwieldy quickly. Parsing the error message text is another option, though not so elegant.&lt;/p>
&lt;p>With webR 0.2.0 any errors that occur in R code executed using &lt;code>evalR()&lt;/code>, or any internal webR issues, are thrown as instances of
&lt;a href="https://docs.r-wasm.org/webr/latest/api/js/classes/WebR.WebRError.html" target="_blank" rel="noopener">&lt;code>WebRError&lt;/code>&lt;/a>. With this change, the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noopener">&lt;code>instanceof&lt;/code>&lt;/a> keyword can be used to differentiate between errors occurring in R, and errors in JavaScript code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">WebRError&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;webR&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;some_R_code()&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">doSomethingWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nx">WebRError&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;An error occured executing R code&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;An error occured in JavaScript&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="nx">e&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="safely-handling-webr-termination">Safely handling webR termination
&lt;a href="#safely-handling-webr-termination">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Consider the following &lt;code>async&lt;/code> loop, a useful pattern to continuously handle webR output messages,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">run() {&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(;;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">read&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;stdout&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;stderr&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">warn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unhandled output type: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">.`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here &lt;code>await webR.read()&lt;/code> waits asynchronously for output messages from webR&amp;rsquo;s communication channel. For example, a running R process might print results between long computational delays. Such occasional printed output might be received as messages with a &lt;code>type&lt;/code> property of &lt;code>'stdout'&lt;/code>.&lt;/p>
&lt;p>After a message is received, it is handled in a &lt;code>switch&lt;/code> statement and then the loop continues around to wait for another output message. This works well while webR is running, but what happens when terminated with
&lt;a href="https://docs.r-wasm.org/webr/latest/api/js/classes/WebR.WebR.html#close" target="_blank" rel="noopener">&lt;code>webR.close()&lt;/code>&lt;/a>? The R worker thread is stopped and destroyed, but the loop continues to wait for a message that will never come.&lt;/p>
&lt;p>With webR 0.2.0 a new type of message is issued when webR is terminated using &lt;code>webR.close()&lt;/code>. After the webR worker thread has been destroyed, a message is emitted on the usual output channel with a &lt;code>type&lt;/code> property of &lt;code>'closed'&lt;/code>, with no associated &lt;code>data&lt;/code> property. The implication is that once this message has been emitted, that particular instance of webR has terminated and the the async loop is no longer needed.&lt;/p>
&lt;p>With this change, exiting the loop once webR has terminated could be as simple as adding an extra &lt;code>case&lt;/code> statement,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">run() {&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(;;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">read&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;stdout&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;stderr&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;closed&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">warn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unhandled output type: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">.`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="installation-and-next-steps">Installation and next steps
&lt;a href="#installation-and-next-steps">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Developers can integrate webR in their own JavaScript or TypeScript projects by installing the
&lt;a href="https://www.npmjs.com/package/webr" target="_blank" rel="noopener">webR npm package&lt;/a>, or by directly importing webR from CDN. Issues and PRs are accepted and welcome on the main
&lt;a href="https://github.com/r-wasm/webr" target="_blank" rel="noopener">r-wasm/webr&lt;/a> GitHub repository.&lt;/p>
&lt;h3 id="npm">npm
&lt;a href="#npm">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>With this release, the webR npm package name has been updated, simplified from the original &lt;code>@r-wasm/webr&lt;/code> package name to simply &lt;code>webr&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm i webr
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The original namespaced package &lt;code>@r-wasm/webr&lt;/code> will be deprecated, and from v0.2.0 onwards npm will display a message pointing to the new package name.&lt;/p>
&lt;h3 id="cdn-url">CDN URL
&lt;a href="#cdn-url">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Alternatively, webR can be imported directly as a module from CDN.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">WebR&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;https://webr.r-wasm.org/v0.2.0/webr.mjs&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="binary-release-packages">Binary release packages
&lt;a href="#binary-release-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Finally, binary webR packages can be downloaded from GitHub on the releases page of the
&lt;a href="https://github.com/r-wasm/webr" target="_blank" rel="noopener">r-wasm/webr&lt;/a> repo.&lt;/p>
&lt;h3 id="documentation">Documentation
&lt;a href="#documentation">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The next step of integrating webR into your own software should be to visit the documentation pages, provided at &lt;a href="https://docs.r-wasm.org/webr/v0.2.0/">https://docs.r-wasm.org/webr/v0.2.0/&lt;/a>. My previous
&lt;a href="https://www.tidyverse.org/blog/2023/03/webr-0-1-0/" target="_blank" rel="noopener">webR release blog post&lt;/a> also briefly explains how to get started, though the docs go into much more detail.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A big thank you to all of webR&amp;rsquo;s early adopters, experimenting with the system and providing feedback in the form of GitHub Issues and PRs.&lt;/p>
&lt;p>
&lt;a href="https://github.com/Anurodhyadav" target="_blank" rel="noopener">@Anurodhyadav&lt;/a>,
&lt;a href="https://github.com/arkraieski" target="_blank" rel="noopener">@arkraieski&lt;/a>,
&lt;a href="https://github.com/averissimo" target="_blank" rel="noopener">@averissimo&lt;/a>,
&lt;a href="https://github.com/awconway" target="_blank" rel="noopener">@awconway&lt;/a>,
&lt;a href="https://github.com/bahadzie" target="_blank" rel="noopener">@bahadzie&lt;/a>,
&lt;a href="https://github.com/ceciliacsilva" target="_blank" rel="noopener">@ceciliacsilva&lt;/a>,
&lt;a href="https://github.com/DanielEWeeks" target="_blank" rel="noopener">@DanielEWeeks&lt;/a>,
&lt;a href="https://github.com/eteitelbaum" target="_blank" rel="noopener">@eteitelbaum&lt;/a>,
&lt;a href="https://github.com/fortunewalla" target="_blank" rel="noopener">@fortunewalla&lt;/a>,
&lt;a href="https://github.com/gedw99" target="_blank" rel="noopener">@gedw99&lt;/a>,
&lt;a href="https://github.com/gwd-at" target="_blank" rel="noopener">@gwd-at&lt;/a>,
&lt;a href="https://github.com/hatemhosny" target="_blank" rel="noopener">@hatemhosny&lt;/a>,
&lt;a href="https://github.com/hrbrmstr" target="_blank" rel="noopener">@hrbrmstr&lt;/a>,
&lt;a href="https://github.com/ivelasq" target="_blank" rel="noopener">@ivelasq&lt;/a>,
&lt;a href="https://github.com/JeremyPasco" target="_blank" rel="noopener">@JeremyPasco&lt;/a>,
&lt;a href="https://github.com/jeroen" target="_blank" rel="noopener">@jeroen&lt;/a>,
&lt;a href="https://github.com/jooyoungseo" target="_blank" rel="noopener">@jooyoungseo&lt;/a>,
&lt;a href="https://github.com/jpjais" target="_blank" rel="noopener">@jpjais&lt;/a>,
&lt;a href="https://github.com/kforner" target="_blank" rel="noopener">@kforner&lt;/a>,
&lt;a href="https://github.com/lauritowal" target="_blank" rel="noopener">@lauritowal&lt;/a>,
&lt;a href="https://github.com/lionel-" target="_blank" rel="noopener">@lionel-&lt;/a>,
&lt;a href="https://github.com/matthiasbirkich" target="_blank" rel="noopener">@matthiasbirkich&lt;/a>,
&lt;a href="https://github.com/neocarto" target="_blank" rel="noopener">@neocarto&lt;/a>,
&lt;a href="https://github.com/noamross" target="_blank" rel="noopener">@noamross&lt;/a>,
&lt;a href="https://github.com/Polkas" target="_blank" rel="noopener">@Polkas&lt;/a>,
&lt;a href="https://github.com/qiushiyan" target="_blank" rel="noopener">@qiushiyan&lt;/a>,
&lt;a href="https://github.com/ries9112" target="_blank" rel="noopener">@ries9112&lt;/a>,
&lt;a href="https://github.com/SugarRayLua" target="_blank" rel="noopener">@SugarRayLua&lt;/a>,
&lt;a href="https://github.com/timelyportfolio" target="_blank" rel="noopener">@timelyportfolio&lt;/a>,
&lt;a href="https://github.com/WebReflection" target="_blank" rel="noopener">@WebReflection&lt;/a>, and
&lt;a href="https://github.com/WillemSleegers" target="_blank" rel="noopener">@WillemSleegers&lt;/a>.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>In addition,
&lt;a href="https://blog.djnavarro.net/posts/2023-04-09_webr/" target="_blank" rel="noopener">Danielle Navarro&amp;rsquo;s webR blog post&lt;/a> is very good and Bob Rudis&amp;rsquo;s
&lt;a href="https://rud.is/webr-experiments/" target="_blank" rel="noopener">webR experiments&lt;/a> are well worth exploring, along with his recent
&lt;a href="https://youtu.be/inpwcTUmBDY" target="_blank" rel="noopener">NY R conference talk&lt;/a>. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Also other JavaScript/Wasm environments, such as Node.js. For example,
&lt;a href="https://ropensci.org/r-universe/" target="_blank" rel="noopener">ROpenSci&amp;rsquo;s r-universe&lt;/a> package platform provides download links for datasets contained in R packages, in a variety of formats,
&lt;a href="https://fosstodon.org/@jeroenooms/110299179903212170" target="_blank" rel="noopener">powered by running webR server-side in Node.js&lt;/a>. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>REPL stands for &amp;ldquo;Read, Eval, Print, Loop&amp;rdquo;, and is another name for the R console that you&amp;rsquo;re probably familiar with. The application is named the &amp;ldquo;webR REPL app&amp;rdquo; because the original version simply provided the user with a fullscreen R console in their web browser. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>This also includes the world of CSS web fonts, but it is a little tricky.
&lt;a href="https://stackoverflow.com/a/53808942" target="_blank" rel="noopener">Extra work&lt;/a> must be done so that the font is available to the Web Worker. Probably this can be handled better in a future release of
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a>. &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>
&lt;a href="https://www.dyslexiefont.com" target="_blank" rel="noopener">Dyslexie&lt;/a>,
&lt;a href="https://opendyslexic.org" target="_blank" rel="noopener">Open Dyslexic&lt;/a>. Results of research in this area is mixed, but even if these fonts don&amp;rsquo;t improve the speed of text comprehension, some users may simply prefer or feel more comfortable with them. &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>
&lt;a href="https://shiny.posit.co/py/docs/shinylive.html" target="_blank" rel="noopener">Shinylive for Python&lt;/a> also uses a JavaScript Service Worker scheme to serve fully client-side apps. &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>webR 0.1.0 has been released</title><link>https://www.tidyverse.org/blog/2023/03/webr-0-1-0/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2023/03/webr-0-1-0/</guid><description>&lt;!--
TODO:
* [X] Look over / edit the post's title in the yaml
* [X] Edit (or delete) the description; note this appears in the Twitter card
* [X] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [X] Find photo &amp; update yaml metadata
* [X] Create `thumbnail-sq.jpg`; height and width should be equal
* [X] Create `thumbnail-wd.jpg`; width should be >5x height
* [X] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
* [x] Update temporary URLS to r-wasm.org
* [x] Check for evalR API changes
* [ ] Change r-wasm/jupyterlite-webr-kernel GitHub repo public
* [x] Update r-wasm/webR repo for AWS and r-wasm.org URLs
* [ ] Push npm update for r-wasm/webr package
* [x] Update static service worker URLs
* [x] Update webR shortcode URLs
* [x] Update post date
-->
&lt;!-- Initialise webR in the page -->
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css">
&lt;style>
.CodeMirror pre {
background-color: unset !important;
}
.btn-webr {
background-color: #EEEEEE;
border-bottom-left-radius: 0;
border-bottom-right-radius: 0;
}
&lt;/style>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js">&lt;/script>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/r/r.js">&lt;/script>
&lt;script type="module">
import { WebR } from 'https://webr.r-wasm.org/v0.4.2/webr.mjs';
globalThis.webR = new WebR();
await globalThis.webR.init();
await webR.FS.mkdir('/persist');
await webR.FS.mount('IDBFS', {}, '/persist');
await webR.FS.syncfs(true);
await webR.evalRVoid("webr::shim_install()");
await webR.evalRVoid("webr::global_prompt_install()", { withHandlers: false });
globalThis.webRCodeShelter = await new globalThis.webR.Shelter();
document.querySelectorAll(".btn-webr").forEach((btn) => {
btn.innerText = 'Run code';
btn.disabled = false;
});
&lt;/script>
&lt;!-- Add webr engine for knit -->
&lt;div class="highlight">
&lt;/div>
&lt;!-- Blog post main content -->
&lt;p>We&amp;rsquo;re super excited to announce the release of webR v0.1.0! This is the first release of webR intended for general use by the web development and R communities and is the result of almost a year of hard work by the webR developers.&lt;/p>
&lt;p>This post will introduce webR, demonstrate some of the possibilities that running R in a web browser brings, and give a quick overview of how to include webR in your own TypeScript or JavaScript web applications.&lt;/p>
&lt;h2 id="introduction">Introduction
&lt;a href="#introduction">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>WebR is a version of the open-source R interpreter compiled for WebAssembly, along with a supporting TypeScript library for interacting with the console and R objects from a JavaScript environment.&lt;/p>
&lt;p>By compiling R to WebAssembly a user can visit a website and run R code directly within the web browser, without R installed on their device or a supporting computational R server. All that is required is a normal web server, including the type of cloud hosting service provided by Github Pages or Netlify.&lt;/p>
&lt;h2 id="how-it-works">How it works
&lt;a href="#how-it-works">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>WebR&amp;rsquo;s core is based around compiling the open-source R interpreter for
&lt;a href="https://webassembly.org" target="_blank" rel="noopener">WebAssembly&lt;/a>, using the
&lt;a href="https://emscripten.org" target="_blank" rel="noopener">Emscripten&lt;/a> compiler suite along with
&lt;a href="https://flang.llvm.org/docs/" target="_blank" rel="noopener">LLVM Flang&lt;/a> to work with R&amp;rsquo;s pre-existing C and Fortran based source code.&lt;/p>
&lt;p>WebAssembly (often abbreviated as Wasm) is a standard defining a virtual stack machine along with a corresponding &lt;em>bytecode&lt;/em>. Efficient Wasm engines have already been implemented in most modern web browsers, which allows for the deployment of high performance Wasm applications on the web.&lt;/p>
&lt;p>While it&amp;rsquo;s certainly possible for an interested programmer to write Wasm bytecode by hand, it is not a requirement to do so. Similar to how code and data is compiled into &lt;em>machine code&lt;/em> for a certain computer processor, code and data can be compiled into the Wasm bytecode by compiler software that supports the Wasm standard.&lt;/p>
&lt;p>However, unlike with traditional machine code, the Wasm virtual machine (VM) is consistent across multiple different types of environment, architecture, and device &amp;ndash; in theory the same bytecode binary can run anywhere without having to be recompiled for that environment. In this way the Wasm VM is similar to Java&amp;rsquo;s JVM. However, in comparison to the JVM, Wasm has been designed and built from the ground up for use on the modern web, requiring strict sandboxing and security controls.&lt;/p>
&lt;p>Future use for WebAssembly has also been identified in server-side web development, containerisation, cloud computing, and more. With these applications, Wasm has been suggested as a universal binary format of the future. Multiple implementations of the Wasm VM already exist designed to run &lt;em>outside&lt;/em> a web browser, through proposed Wasm standards such as
&lt;a href="https://wasi.dev" target="_blank" rel="noopener">WASI&lt;/a>.&lt;/p>
&lt;h2 id="whats-possible">What&amp;rsquo;s possible?
&lt;a href="#whats-possible">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Undoubtedly, webR opens a world of possibilities for the interactive use of R and data science on the web.&lt;/p>
&lt;h3 id="an-online-r-console">An online R console
&lt;a href="#an-online-r-console">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>A web-based interactive R console is included in the webR source repository as a demonstration of integrating webR into a wider web application. A publicly accessible instance of the webR console can be found at &lt;a href="https://webr.r-wasm.org/latest/">https://webr.r-wasm.org/latest/&lt;/a>.&lt;/p>
&lt;p>&lt;a href="webr-repl.png" target="_blank">&lt;img src="webr-repl.png" alt="A screenshot showing the demo webR console creating a plot">&lt;/a>&lt;/p>
&lt;p>With the webR online console a new user can get up and running with R in seconds. The webR console is also functional on many modern mobile devices, where traditional versions of R are not always available for installation at all&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>It&amp;rsquo;s possible to perform data analysis on reasonably large datasets by uploading data to a Virtual File System (VFS). The webR console provides an interface to view and interact with the VFS (&lt;strong>Files&lt;/strong> tab, top right). Once a data file has been uploaded to the VFS it can be read by R like any standard file.&lt;/p>
&lt;p>&lt;a href="webr-repl2.png" target="_blank">&lt;img src="webr-repl2.png" alt="A screenshot showing the demo webR console loading a data file">&lt;/a>&lt;/p>
&lt;p>Note that uploading and downloading files to the VFS in this way does not actually involve transferring any data over the network. However, webR has been built so that it is possible to load data into webR over the network by using R&amp;rsquo;s built in functions that can download from URL, such as
&lt;a href="https://rdrr.io/r/utils/read.table.html" target="_blank" rel="noopener">&lt;code>read.csv()&lt;/code>&lt;/a>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>&lt;a href="webr-repl3.png" target="_blank">&lt;img src="webr-repl3.png" alt="A screenshot showing the demo webR console loading a data file from URL">&lt;/a>&lt;/p>
&lt;p>Plotting is also supported (&lt;strong>Plotting&lt;/strong> tab, top right), meaning a user can produce beautiful plot output with the webR console, closing the loop of reading data, performing analysis, and producing output. It is entirely feasible that a casual user could perform the basics of data science entirely within their web browser using webR.&lt;/p>
&lt;h3 id="an-educational-tool">An educational tool
&lt;a href="#an-educational-tool">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Consider the following code block containing some simple R code. After a short loading period while the webR binary and supporting files are downloaded, a &lt;strong>Run code&lt;/strong> button is enabled on the code block, with the code itself able to be edited and remixed on the fly. Feel free to try this out now!&lt;/p>
&lt;div class="highlight">
&lt;button class="btn btn-default btn-webr" disabled type="button" id="webr-run-button-1">Loading webR...&lt;/button>
&lt;div id="webr-editor-1">&lt;/div>
&lt;div id="webr-code-output-1">&lt;pre style="visibility: hidden">&lt;/pre>&lt;/div>
&lt;script type="module">
const runButton = document.getElementById('webr-run-button-1');
const outputDiv = document.getElementById('webr-code-output-1');
const editorDiv = document.getElementById('webr-editor-1');
const editor = CodeMirror((elt) => {
elt.style.border = '1px solid #eee';
elt.style.height = 'auto';
editorDiv.append(elt);
},{
value: `fit &lt;- lm(mpg ~ am, data=mtcars)\nsummary(fit)`,
lineNumbers: true,
mode: 'r',
theme: 'light default',
viewportMargin: Infinity,
});
runButton.onclick = async () => {
runButton.disabled = true;
let canvas = undefined;
await webR.init();
await webR.evalRVoid('webr::canvas(width=504, height=311.472)');
await webR.FS.syncfs(false);
const result = await webRCodeShelter.captureR(editor.getValue(), {
withAutoprint: true,
captureStreams: true,
captureConditions: false,
captureGraphics: false,
env: {},
});
try {
await webR.evalRVoid("dev.off()");
const out = result.output.filter(
evt => evt.type == 'stdout' || evt.type == 'stderr'
).map((evt) => evt.data).join('\n');
outputDiv.innerHTML = '';
const pre = document.createElement("pre");
if (/\S/.test(out)) {
const code = document.createElement("code");
code.innerText = out;
pre.appendChild(code);
} else {
pre.style.visibility = 'hidden';
}
outputDiv.appendChild(pre);
const msgs = await webR.flush();
msgs.forEach(msg => {
if (msg.type === 'canvas'){
if (msg.data.event === 'canvasImage') {
canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
} else if (msg.data.event === 'canvasNewPage') {
canvas = document.createElement('canvas');
canvas.setAttribute('width', 2 * 504);
canvas.setAttribute('height', 2 * 311.472);
canvas.style.width="700px";
canvas.style.display="block";
canvas.style.margin="auto";
const p = document.createElement("p");
p.appendChild(canvas);
outputDiv.appendChild(p);
}
}
});
} finally {
webRCodeShelter.purge();
runButton.disabled = false;
}
}
&lt;/script>
&lt;/div>
&lt;p>After executing the R code once, try changing the &lt;code>am&lt;/code> variable in the model to &lt;code>gear&lt;/code> and then clicking &lt;strong>Run code&lt;/strong> again. You should immediately see how changing the model affects the components of the resulting fit. There is a real R session running and powering this code block &amp;ndash; try replacing the entire code with something new!&lt;/p>
&lt;p>The following interactive code block produces an R plot that is directly embedded into the page. As with the previous example, the plot can be recreated or remixed multiple times by the reader simply by clicking the &lt;strong>Run Code&lt;/strong> button.&lt;/p>
&lt;div class="highlight">
&lt;button class="btn btn-default btn-webr" disabled type="button" id="webr-run-button-2">Loading webR...&lt;/button>
&lt;div id="webr-editor-2">&lt;/div>
&lt;div id="webr-code-output-2">&lt;pre style="visibility: hidden">&lt;/pre>&lt;/div>
&lt;script type="module">
const runButton = document.getElementById('webr-run-button-2');
const outputDiv = document.getElementById('webr-code-output-2');
const editorDiv = document.getElementById('webr-editor-2');
const editor = CodeMirror((elt) => {
elt.style.border = '1px solid #eee';
elt.style.height = 'auto';
editorDiv.append(elt);
},{
value: `data &lt;- rnorm(1000, 10, 1)\nhist(data, c = rainbow(12))`,
lineNumbers: true,
mode: 'r',
theme: 'light default',
viewportMargin: Infinity,
});
runButton.onclick = async () => {
runButton.disabled = true;
let canvas = undefined;
await webR.init();
await webR.evalRVoid('webr::canvas(width=504, height=311.472)');
await webR.FS.syncfs(false);
const result = await webRCodeShelter.captureR(editor.getValue(), {
withAutoprint: true,
captureStreams: true,
captureConditions: false,
captureGraphics: false,
env: {},
});
try {
await webR.evalRVoid("dev.off()");
const out = result.output.filter(
evt => evt.type == 'stdout' || evt.type == 'stderr'
).map((evt) => evt.data).join('\n');
outputDiv.innerHTML = '';
const pre = document.createElement("pre");
if (/\S/.test(out)) {
const code = document.createElement("code");
code.innerText = out;
pre.appendChild(code);
} else {
pre.style.visibility = 'hidden';
}
outputDiv.appendChild(pre);
const msgs = await webR.flush();
msgs.forEach(msg => {
if (msg.type === 'canvas'){
if (msg.data.event === 'canvasImage') {
canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
} else if (msg.data.event === 'canvasNewPage') {
canvas = document.createElement('canvas');
canvas.setAttribute('width', 2 * 504);
canvas.setAttribute('height', 2 * 311.472);
canvas.style.width="700px";
canvas.style.display="block";
canvas.style.margin="auto";
const p = document.createElement("p");
p.appendChild(canvas);
outputDiv.appendChild(p);
}
}
});
} finally {
webRCodeShelter.purge();
runButton.disabled = false;
}
}
&lt;/script>
&lt;/div>
&lt;p>In my experience this way of interacting and experimenting with R code without the mental overhead of context switching from a web browser to an R console, or copying and pasting lines of example code, feels extremely fresh and exciting. An exciting potential application for webR is providing high-quality educational web content in exactly this kind of format.&lt;/p>
&lt;h3 id="reproducible-reports">Reproducible reports
&lt;a href="#reproducible-reports">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>A core principle of good science is that results should be repeatable and reproducible by others. Unfortunately the misuse of data analysis, leading to unreliable results,
&lt;a href="https://en.wikipedia.org/wiki/Misuse_of_statistics" target="_blank" rel="noopener">is a known issue&lt;/a>.&lt;/p>
&lt;p>The idea of a reproducible report is to bring the philosophy of repeatability to the delivery format itself. Reproducible reports weave together explanatory prose, data science, source code, output and figures; all in a single place with a consistent execution environment. With this, a user reading the report has everything they need to reproduce and confirm results for themselves.&lt;/p>
&lt;p>While Jupyter notebooks were not the first implementation of executable documents&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, their popularity has grown over the last decade or so as a way to support high quality reproducible reports. Jupyter has been named
&lt;a href="https://www.nature.com/articles/d41586-018-07196-1" target="_blank" rel="noopener">&lt;em>&amp;ldquo;The data scientists&amp;rsquo; computational notebook of choice&amp;rdquo;&lt;/em>&lt;/a> and almost 10 million Jupyter notebooks were publicly accessible on GitHub as of Oct 2020&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>While a Jupyter notebook usually requires a Python and Jupyter installation to fully reproduce results, recent work by the
&lt;a href="https://jupyterlite.readthedocs.io/en/latest/" target="_blank" rel="noopener">JupyterLite&lt;/a> team uses Wasm to bring Jupyter to the web browser. JupyterLite can be used with
&lt;a href="https://pyodide.org/en/stable/" target="_blank" rel="noopener">Pyodide&lt;/a> to run Python based notebooks directly in the browser.&lt;/p>
&lt;p>WebR aims to provide that same experience for Jupyter notebooks based on R. As part of the initial release of webR, we are also releasing a
&lt;a href="https://github.com/r-wasm/jupyterlite-webr-kernel" target="_blank" rel="noopener">webR kernel for JupyterLite&lt;/a>, allowing users to write and execute reproducible Jupyter notebooks for R directly in the web browser.&lt;/p>
&lt;p>A JupyterLite instance with the webR kernel available can be found at &lt;a href="https://jupyter.r-wasm.org/">https://jupyter.r-wasm.org/&lt;/a>, along with a sample R Jupyter notebook demonstrating a reproducible report.&lt;/p>
&lt;p>&lt;a href="jupyter.png" target="_blank">&lt;img src="jupyter.png" alt="A screenshot showing the webR JupyterLite kernel">&lt;/a>&lt;/p>
&lt;p>The JupyterLite kernel for R is still in the early stages of development and
&lt;a href="https://github.com/r-wasm/jupyterlite-webr-kernel#limitations" target="_blank" rel="noopener">includes some limitations&lt;/a>, but the core infrastructure is in place with the release of webR.&lt;/p>
&lt;h3 id="r-packages">R packages
&lt;a href="#r-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>R has a rich history of user-created extensions through the use of R packages. Most packages are a combination of R and C or C++ code, and so many packages must be compiled from source for the system they are running on. Unfortunately, it is not possible to install packages in this way in webR. Such an installation process would require an entire C/C++ to WebAssembly compiler toolchain running in the web page!&lt;/p>
&lt;p>For the moment, downloading pre-compiled Wasm binaries is the only supported way to install packages in webR. A pre-installed &lt;code>webr&lt;/code> support package provides a helper function &lt;code>webr::install()&lt;/code> which can be used to install packages from a CRAN-like repository. As part of the webR release we have provided a small repository of binary R packages compiled for Wasm, publicly hosted with URL &lt;code>https://repo.r-wasm.org/&lt;/code>.&lt;/p>
&lt;h2 id="using-webr-in-your-own-projects">Using webR in your own projects
&lt;a href="#using-webr-in-your-own-projects">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>WebR aims to be as quick and easy to use as possible for those familiar with JavaScript web development. While a short introduction to using webR follows in this blog post, we think the best way to get up and running is by reading the Getting Started section of the
&lt;a href="https://docs.r-wasm.org/webr/latest/" target="_blank" rel="noopener">webR documentation&lt;/a>. The documentation goes into further detail about how to download webR, technical requirements for serving web pages that use webR, and provides more detailed examples.&lt;/p>
&lt;h3 id="downloading-and-using-webr-from-npm">Downloading and using webR from npm
&lt;a href="#downloading-and-using-webr-from-npm">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>For a project with dependencies managed by npm, the
&lt;a href="https://www.npmjs.com/package/@r-wasm/webr" target="_blank" rel="noopener">webR JavaScript package&lt;/a> can be installed by using the command,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm i @r-wasm/webr
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once available, webR can be imported into a project and a new instance of webR initialised with,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">WebR&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@r-wasm/webr&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">webR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">WebR&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once a new instance of the &lt;code>WebR()&lt;/code> class has been created, webR will begin to download WebAssembly binaries from the public CDN, and R will be started.&lt;/p>
&lt;h3 id="downloading-webr-release-packages">Downloading webR release packages
&lt;a href="#downloading-webr-release-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Full release packages for webR can also be downloaded from the webR
&lt;a href="https://github.com/r-wasm/webR/releases" target="_blank" rel="noopener">GitHub Releases&lt;/a> page. The full release packages include the webR JavaScript loader, along with WebAssembly binaries for R and its supporting libraries.&lt;/p>
&lt;p>Hosting a full release package on a web server makes it possible to use webR entirely on your own infrastructure, rather than relying on downloading Wasm binaries from the public CDN.&lt;/p>
&lt;h3 id="an-example-of-executing-r-code">An example of executing R code
&lt;a href="#an-example-of-executing-r-code">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Once R is ready, the JavaScript promise returned by &lt;code>webR.init()&lt;/code> will resolve. At this point R code can be evaluated and results converted into JavaScript objects,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">let&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;rnorm(10,5,1)&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toArray&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above example the &lt;code>result&lt;/code> object can be thought of as a reference to a specific R object, and is converted into a standard JavaScript array using the &lt;code>toArray()&lt;/code> function.&lt;/p>
&lt;p>Further examples and details of how to interact with the R console and work with R objects can be found in the
&lt;a href="https://docs.r-wasm.org/webr/latest/examples.html" target="_blank" rel="noopener">webR documentation&lt;/a>.&lt;/p>
&lt;h2 id="the-future-of-webr">The future of webR
&lt;a href="#the-future-of-webr">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Going forward we plan to expand and improve webR, including compiling more R packages for the webR public package repository. It is our hope that we can provide the same web-based computational infrastructure for R that
&lt;a href="https://pyodide.org/en/stable/" target="_blank" rel="noopener">Pyodide&lt;/a> has provided for the Python ecosystem.&lt;/p>
&lt;p>While WebAssembly engines are in theory able to provide near-native performance, when it comes to the requirements for advanced data science or the deployment of sophisticated machine learning models, the benefits of running tools such as the RStudio IDE natively or a high-performance cloud deployment will likely always outperform the relatively restricted WebAssembly virtual machine. Despite this, webR can provide a smooth, interactive and immediate introduction to the world of working with data in R. Users who have not had the chance to use R in the past due to the barriers raised by the installation of new software to their workstation, or registration for a cloud-based service, might yet still be convinced to introduce R to their workflow though an introduction with interactive examples or short reports powered by webR.&lt;/p>
&lt;p>The opportunity for enhancing educational content also continues beyond introductory materials. Many R packages are documented online, using automated tools such as
&lt;a href="https://pkgdown.r-lib.org" target="_blank" rel="noopener">pkgdown&lt;/a> to produce a dedicated website for the package. Alongside an introductory description, package websites usually also include usage details in the form of example code, reference documentation, and vignette articles. However, if a potential user would like to try the package for themselves, often the only way is by installing the package onto their own machine. Immediately interactive examples, powered by webR, are an interesting future possibility that would reduce this kind of barrier to entry.&lt;/p>
&lt;p>Fairly recently, the Shiny team announced
&lt;a href="https://shiny.rstudio.com/py/" target="_blank" rel="noopener">Shiny for Python&lt;/a>, a feature rich reactive web application framework targeting Python. Of particular note, the team used WebAssembly and Pyodide as a way to run a
&lt;a href="https://shiny.rstudio.com/py/docs/shinylive.html" target="_blank" rel="noopener">Shinylive&lt;/a> server directly in the user&amp;rsquo;s web browser. One of the most exciting possible applications for webR is a similar architecture targeting the traditional R version of Shiny. Is it possible for a &lt;em>Shinylive for R&lt;/em> to be powered by webR? We certainly hope so.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A massive thank you to all early webR users for their willingness to experiment and their feedback in the form of GitHub issues and pull requests,&lt;/p>
&lt;p>
&lt;a href="https://github.com/Anurodhyadav" target="_blank" rel="noopener">@Anurodhyadav&lt;/a>,
&lt;a href="https://github.com/barryrowlingson" target="_blank" rel="noopener">@barryrowlingson&lt;/a>,
&lt;a href="https://github.com/christianp" target="_blank" rel="noopener">@christianp&lt;/a>,
&lt;a href="https://github.com/ekianjo" target="_blank" rel="noopener">@ekianjo&lt;/a>,
&lt;a href="https://github.com/georgestagg" target="_blank" rel="noopener">@georgestagg&lt;/a>,
&lt;a href="https://github.com/HTUser-1" target="_blank" rel="noopener">@HTUser-1&lt;/a>,
&lt;a href="https://github.com/jason-variadiclabs" target="_blank" rel="noopener">@jason-variadiclabs&lt;/a>,
&lt;a href="https://github.com/jjesusfilho" target="_blank" rel="noopener">@jjesusfilho&lt;/a>,
&lt;a href="https://github.com/kdpsingh" target="_blank" rel="noopener">@kdpsingh&lt;/a>,
&lt;a href="https://github.com/lionel-" target="_blank" rel="noopener">@lionel-&lt;/a>,
&lt;a href="https://github.com/psychemedia" target="_blank" rel="noopener">@psychemedia&lt;/a>,
&lt;a href="https://github.com/Sjesc" target="_blank" rel="noopener">@Sjesc&lt;/a>,
&lt;a href="https://github.com/SugarRayLua" target="_blank" rel="noopener">@SugarRayLua&lt;/a>
&lt;a href="https://github.com/unclecode" target="_blank" rel="noopener">@unclecode&lt;/a>, and
&lt;a href="https://github.com/wch" target="_blank" rel="noopener">@wch&lt;/a>.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>I am aware of at least one early adopter using webR as a way to access R on their Apple iPad. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Note that there are some security measures in place when fetching data that are applied to all web applications. Downloading datasets from URL requires that the web server providing the data supports and allows
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noopener">Cross Origin Resource Sharing (CORS)&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Knuth originally introduced the precursor
&lt;a href="https://en.wikipedia.org/wiki/Literate_programming" target="_blank" rel="noopener">Literate Programming&lt;/a> paradigm in 1984, and more recently tools such as Sweave, knitr and RMarkdown enable embedding R and computational results directly into a report. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Admittedly, only a small proportion using an R kernel.
&lt;a href="https://blog.jetbrains.com/datalore/2020/12/17/we-downloaded-10-000-000-jupyter-notebooks-from-github-this-is-what-we-learned/" target="_blank" rel="noopener">The overwhelming majority use Python, R comes second, and Julia third.&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Make your ggplot2 extension package understand the new linewidth aesthetic</title><link>https://www.tidyverse.org/blog/2022/08/ggplot2-3-4-0-size-to-linewidth/</link><pubDate>Wed, 24 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2022/08/ggplot2-3-4-0-size-to-linewidth/</guid><description>&lt;p>We are hard at work finishing the next release of ggplot2. While this release is mostly about internal changes, there are a few quite user visible changes as well. One of these upends the idea that the &lt;code>size&lt;/code> aesthetic is responsible for &lt;em>both&lt;/em> the sizing of point/text and the width of lines. With the next release we will have a &lt;code>linewidth&lt;/code> aesthetic to take care of the latter, while &lt;code>size&lt;/code> will continue handling the former.&lt;/p>
&lt;p>There are many excellent reasons for this change, all of which will have to wait until the release post to be discussed. This blog post is for those that maintain an extension package for ggplot2 and are left wondering how they should respond to this &amp;mdash; if that is you, please read on!&lt;/p>
&lt;h2 id="the-way-it-works">The way it works
&lt;a href="#the-way-it-works">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Before going into technicalities we&amp;rsquo;ll describe how it is intended to work. We are well aware that we can&amp;rsquo;t just make a change that would instantly break everyone&amp;rsquo;s code. So, we have gone to great length to make old code work as before while gently coercing users into adopting the new paradigm. For example, take a look at this old code:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://ggplot2.tidyverse.org'>ggplot2&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>airquality&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_path.html'>geom_line&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>Day&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>Temp&lt;/span>, size &lt;span class='o'>=&lt;/span> &lt;span class='nv'>Wind&lt;/span>, group &lt;span class='o'>=&lt;/span> &lt;span class='nv'>Month&lt;/span>&lt;span class='o'>)&lt;/span>,
lineend &lt;span class='o'>=&lt;/span> &lt;span class='s'>"round"&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>size&lt;/span> aesthetic has been deprecated for use with lines as of ggplot2 3.4.0&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> Please use &lt;span style='color: #00BB00;'>linewidth&lt;/span> aesthetic instead&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>This message is displayed once every 8 hours.&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-1-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>As you can see, ggplot2 detects the use of the &lt;code>size&lt;/code> aesthetic and informs the user about the new &lt;code>linewidth&lt;/code> aesthetic but otherwise proceeds as before, producing the expected plot. As expected,
&lt;a href="https://ggplot2.tidyverse.org/reference/scale_size.html" target="_blank" rel="noopener">&lt;code>scale_size()&lt;/code>&lt;/a> also works in this situation:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>airquality&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_path.html'>geom_line&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>Day&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>Temp&lt;/span>, size &lt;span class='o'>=&lt;/span> &lt;span class='nv'>Wind&lt;/span>, group &lt;span class='o'>=&lt;/span> &lt;span class='nv'>Month&lt;/span>&lt;span class='o'>)&lt;/span>,
lineend &lt;span class='o'>=&lt;/span> &lt;span class='s'>"round"&lt;/span>
&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/scale_size.html'>scale_size&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Windspeed (mph)"&lt;/span>, range &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0.5&lt;/span>, &lt;span class='m'>3&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>size&lt;/span> aesthetic has been deprecated for use with lines as of ggplot2 3.4.0&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> Please use &lt;span style='color: #00BB00;'>linewidth&lt;/span> aesthetic instead&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>This message is displayed once every 8 hours.&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-2-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>but ultimately we want users to migrate to the following code:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>airquality&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_path.html'>geom_line&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>Day&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>Temp&lt;/span>, linewidth &lt;span class='o'>=&lt;/span> &lt;span class='nv'>Wind&lt;/span>, group &lt;span class='o'>=&lt;/span> &lt;span class='nv'>Month&lt;/span>&lt;span class='o'>)&lt;/span>,
lineend &lt;span class='o'>=&lt;/span> &lt;span class='s'>"round"&lt;/span>
&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/scale_linewidth.html'>scale_linewidth&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Windspeed (mph)"&lt;/span>, range &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0.5&lt;/span>, &lt;span class='m'>3&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-3-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;blockquote>
&lt;p>Note that there&amp;rsquo;s an important difference between these two plots (and one of the reasons we&amp;rsquo;re making the change): The last two plots differ because the default &lt;code>linewidth&lt;/code> scale correctly use a linear transform instead of a square root transform (which is only sensible for scaling of areas).&lt;/p>
&lt;/blockquote>
&lt;h2 id="how-to-adopt-this">How to adopt this
&lt;a href="#how-to-adopt-this">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We have been able to add this automatic translation in a quite non-intrusive way which means that you as a package developer don&amp;rsquo;t need to do that much to adapt to the new naming. To show this I&amp;rsquo;ll create a geom drawing circles then update it to use linewidth instead:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>GeomCircle&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggproto.html'>ggproto&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"GeomCircle"&lt;/span>, &lt;span class='nv'>Geom&lt;/span>,
draw_panel &lt;span class='o'>=&lt;/span> &lt;span class='kr'>function&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>data&lt;/span>, &lt;span class='nv'>panel_params&lt;/span>, &lt;span class='nv'>coord&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>
&lt;span class='c'># Expand x, y, radius data to points along circle&lt;/span>
&lt;span class='nv'>circle_data&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/funprog.html'>Map&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='kr'>function&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span>, &lt;span class='nv'>y&lt;/span>, &lt;span class='nv'>r&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>
&lt;span class='nv'>radians&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/seq.html'>seq&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0&lt;/span>, &lt;span class='m'>2&lt;/span>&lt;span class='o'>*&lt;/span>&lt;span class='nv'>pi&lt;/span>, length.out &lt;span class='o'>=&lt;/span> &lt;span class='m'>101&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='o'>-&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>]&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/data.frame.html'>data.frame&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
x &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/Trig.html'>cos&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>radians&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='nv'>r&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>x&lt;/span>,
y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/Trig.html'>sin&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>radians&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='nv'>r&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>y&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>&amp;#125;&lt;/span>, x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>x&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>y&lt;/span>, r &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>radius&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>circle_data&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/do.call.html'>do.call&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>rbind&lt;/span>, &lt;span class='nv'>circle_data&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'># Transform to viewport coords&lt;/span>
&lt;span class='nv'>circle_data&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>coord&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nf'>transform&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>circle_data&lt;/span>, &lt;span class='nv'>panel_params&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'># Draw as grob&lt;/span>
&lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.polygon.html'>polygonGrob&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>circle_data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>x&lt;/span>,
y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>circle_data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>y&lt;/span>,
id.lengths &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/rep.html'>rep&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>100&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/nrow.html'>nrow&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>data&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>,
default.units &lt;span class='o'>=&lt;/span> &lt;span class='s'>"native"&lt;/span>,
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
col &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>colour&lt;/span>,
fill &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>fill&lt;/span>,
lwd &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>size&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='nv'>.pt&lt;/span>,
lty &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>linetype&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>&amp;#125;&lt;/span>,
required_aes &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"x"&lt;/span>, &lt;span class='s'>"y"&lt;/span>, &lt;span class='s'>"radius"&lt;/span>&lt;span class='o'>)&lt;/span>,
default_aes &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
colour &lt;span class='o'>=&lt;/span> &lt;span class='s'>"black"&lt;/span>,
fill &lt;span class='o'>=&lt;/span> &lt;span class='s'>"grey"&lt;/span>,
size &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.5&lt;/span>,
linetype &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>,
alpha &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NA&lt;/span>
&lt;span class='o'>)&lt;/span>,
draw_key &lt;span class='o'>=&lt;/span> &lt;span class='nv'>draw_key_polygon&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>geom_circle&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='kr'>function&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mapping&lt;/span> &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NULL&lt;/span>, &lt;span class='nv'>data&lt;/span> &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NULL&lt;/span>, &lt;span class='nv'>stat&lt;/span> &lt;span class='o'>=&lt;/span> &lt;span class='s'>"identity"&lt;/span>,
&lt;span class='nv'>position&lt;/span> &lt;span class='o'>=&lt;/span> &lt;span class='s'>"identity"&lt;/span>, &lt;span class='nv'>...&lt;/span>, &lt;span class='nv'>na.rm&lt;/span> &lt;span class='o'>=&lt;/span> &lt;span class='kc'>FALSE&lt;/span>,
&lt;span class='nv'>show.legend&lt;/span> &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NA&lt;/span>, &lt;span class='nv'>inherit.aes&lt;/span> &lt;span class='o'>=&lt;/span> &lt;span class='kc'>TRUE&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/layer.html'>layer&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>,
mapping &lt;span class='o'>=&lt;/span> &lt;span class='nv'>mapping&lt;/span>,
stat &lt;span class='o'>=&lt;/span> &lt;span class='nv'>stat&lt;/span>,
geom &lt;span class='o'>=&lt;/span> &lt;span class='nv'>GeomCircle&lt;/span>,
position &lt;span class='o'>=&lt;/span> &lt;span class='nv'>position&lt;/span>,
show.legend &lt;span class='o'>=&lt;/span> &lt;span class='nv'>show.legend&lt;/span>,
inherit.aes &lt;span class='o'>=&lt;/span> &lt;span class='nv'>inherit.aes&lt;/span>,
params &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
na.rm &lt;span class='o'>=&lt;/span> &lt;span class='nv'>na.rm&lt;/span>,
&lt;span class='nv'>...&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>&amp;#125;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>As a sanity check, let us check that this actually works:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>random_points&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/data.frame.html'>data.frame&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
x &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/Uniform.html'>runif&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>20&lt;/span>&lt;span class='o'>)&lt;/span>,
y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/Uniform.html'>runif&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>20&lt;/span>&lt;span class='o'>)&lt;/span>,
radius &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/Uniform.html'>runif&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>20&lt;/span>, max &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.1&lt;/span>&lt;span class='o'>)&lt;/span>,
value &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/Uniform.html'>runif&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>20&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>random_points&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>geom_circle&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>x&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>y&lt;/span>, radius &lt;span class='o'>=&lt;/span> &lt;span class='nv'>radius&lt;/span>, size &lt;span class='o'>=&lt;/span> &lt;span class='nv'>value&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-5-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>It seems to work as intended. As can be seen from the code above, the &lt;code>size&lt;/code> aesthetics is not used much and is passed directly into &lt;code>polygonGrob()&lt;/code>. It follows that updating the code to using linewidth is not a huge operation.&lt;/p>
&lt;blockquote>
&lt;p>There is nothing preventing you from keeping the code as is &amp;mdash; it will continue to work as always. However, your users may begin to feel a disconnect with the style as they adapt to the new &lt;code>linewidth&lt;/code> aesthetic so it is highly recommended to make the proposed changes&lt;/p>
&lt;/blockquote>
&lt;h3 id="the-fix">The fix
&lt;a href="#the-fix">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>There are a few things you need to do to update the old code but they are all pretty benign. The changes are commented in the code below and will also be discussed afterwards.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>GeomCircle&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggproto.html'>ggproto&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"GeomCircle"&lt;/span>, &lt;span class='nv'>Geom&lt;/span>,
draw_panel &lt;span class='o'>=&lt;/span> &lt;span class='kr'>function&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>data&lt;/span>, &lt;span class='nv'>panel_params&lt;/span>, &lt;span class='nv'>coord&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>
&lt;span class='c'># Expand x, y, radius data to points along circle&lt;/span>
&lt;span class='nv'>circle_data&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/funprog.html'>Map&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='kr'>function&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span>, &lt;span class='nv'>y&lt;/span>, &lt;span class='nv'>r&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>
&lt;span class='nv'>radians&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/seq.html'>seq&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0&lt;/span>, &lt;span class='m'>2&lt;/span>&lt;span class='o'>*&lt;/span>&lt;span class='nv'>pi&lt;/span>, length.out &lt;span class='o'>=&lt;/span> &lt;span class='m'>101&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='o'>-&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>]&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/data.frame.html'>data.frame&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
x &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/Trig.html'>cos&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>radians&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='nv'>r&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>x&lt;/span>,
y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/Trig.html'>sin&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>radians&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='nv'>r&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>y&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>&amp;#125;&lt;/span>, x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>x&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>y&lt;/span>, r &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>radius&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>circle_data&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/do.call.html'>do.call&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>rbind&lt;/span>, &lt;span class='nv'>circle_data&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'># Transform to viewport coords&lt;/span>
&lt;span class='nv'>circle_data&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>coord&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nf'>transform&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>circle_data&lt;/span>, &lt;span class='nv'>panel_params&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'># Draw as grob&lt;/span>
&lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.polygon.html'>polygonGrob&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>circle_data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>x&lt;/span>,
y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>circle_data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>y&lt;/span>,
id.lengths &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/rep.html'>rep&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>100&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/nrow.html'>nrow&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>data&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>,
default.units &lt;span class='o'>=&lt;/span> &lt;span class='s'>"native"&lt;/span>,
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>grid&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
col &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>colour&lt;/span>,
fill &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>fill&lt;/span>,
&lt;span class='c'># Use linewidth or fall back to size in old ggplot2 versions&lt;/span>
lwd &lt;span class='o'>=&lt;/span> &lt;span class='o'>(&lt;/span>&lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>linewidth&lt;/span> &lt;span class='o'>&lt;a href='https://rlang.r-lib.org/reference/op-null-default.html'>%||%&lt;/a>&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>size&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='nv'>.pt&lt;/span>,
lty &lt;span class='o'>=&lt;/span> &lt;span class='nv'>data&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>linetype&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>&amp;#125;&lt;/span>,
required_aes &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"x"&lt;/span>, &lt;span class='s'>"y"&lt;/span>, &lt;span class='s'>"radius"&lt;/span>&lt;span class='o'>)&lt;/span>,
default_aes &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
colour &lt;span class='o'>=&lt;/span> &lt;span class='s'>"black"&lt;/span>,
fill &lt;span class='o'>=&lt;/span> &lt;span class='s'>"grey"&lt;/span>,
&lt;span class='c'># Switch size to linewidth&lt;/span>
linewidth &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.5&lt;/span>,
linetype &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>,
alpha &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NA&lt;/span>
&lt;span class='o'>)&lt;/span>,
draw_key &lt;span class='o'>=&lt;/span> &lt;span class='nv'>draw_key_polygon&lt;/span>,
&lt;span class='c'># To allow using size in ggplot2 &amp;lt; 3.4.0&lt;/span>
non_missing_aes &lt;span class='o'>=&lt;/span> &lt;span class='s'>"size"&lt;/span>,
&lt;span class='c'># Tell ggplot2 to perform automatic renaming&lt;/span>
rename_size &lt;span class='o'>=&lt;/span> &lt;span class='kc'>TRUE&lt;/span>
&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>As we can see above, we need two changes and two additions to our implementation. First (but last in the code), we add &lt;code>rename_size = TRUE&lt;/code> to our geom implementation. This instructs ggplot2 that this layer has a &lt;code>size&lt;/code> aesthetic that should be converted automatically with a deprecation warning. Setting this to &lt;code>TRUE&lt;/code> allows you to rest assured that as far as your code goes you can expect to have a &lt;code>linewidth&lt;/code> aesthetic. Second, we update the &lt;code>default_aes&lt;/code> to use &lt;code>linewidth&lt;/code> instead of &lt;code>size&lt;/code>. Third, wherever we use &lt;code>size&lt;/code> in our geom logic we instead use &lt;code>linewidth %||% size&lt;/code>. The reason for the fallback is that if your package is used together with an older version of ggplot2 the &lt;code>rename_size = TRUE&lt;/code> line has no effect and you need to fall back to &lt;code>size&lt;/code> if that is what the user has specified. Fourth, we add &lt;code>size&lt;/code> to the &lt;code>non_missing_aes&lt;/code> field. As with the last point, this is only relevant for use with older versions of ggplot2 as it instructs the geom to not warn when &lt;code>size&lt;/code> is used.&lt;/p>
&lt;p>Let&amp;rsquo;s try out the new implementation:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>random_points&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>geom_circle&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>x&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>y&lt;/span>, radius &lt;span class='o'>=&lt;/span> &lt;span class='nv'>radius&lt;/span>, size &lt;span class='o'>=&lt;/span> &lt;span class='nv'>value&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>size&lt;/span> aesthetic has been deprecated for use with lines as of ggplot2 3.4.0&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> Please use &lt;span style='color: #00BB00;'>linewidth&lt;/span> aesthetic instead&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>This message is displayed once every 8 hours.&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-7-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>We see that we get the deprecation warning we know and that everything also renders as expected. Using the new naming also works, picks up the linear &lt;code>linewidth&lt;/code> scale, and doesn&amp;rsquo;t have a warning.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>random_points&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>geom_circle&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>x&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>y&lt;/span>, radius &lt;span class='o'>=&lt;/span> &lt;span class='nv'>radius&lt;/span>, linewidth &lt;span class='o'>=&lt;/span> &lt;span class='nv'>value&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-8-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>The legend looks a bit wonky, but that is because the polygon key function caps the linewidth at a certain size relative to the size of the key. We can see that it works fine using a lower range:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/last_plot.html'>last_plot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/scale_linewidth.html'>scale_linewidth&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>range &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0.1&lt;/span>, &lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-9-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;h2 id="faq">FAQ
&lt;a href="#faq">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>&lt;em>I&amp;rsquo;m creating a geom as a subclass of one of the ggplot2 geoms that now uses &lt;code>linewidth&lt;/code> &amp;mdash; what should I do?&lt;/em>&lt;/p>
&lt;p>If your geom inherits from e.g. 
&lt;a href="https://ggplot2.tidyverse.org/reference/geom_polygon.html" target="_blank" rel="noopener">&lt;code>geom_polygon()&lt;/code>&lt;/a> which in the next version will begin using &lt;code>linewidth&lt;/code> all you have to do is to update your code to refer to &lt;code>linetype&lt;/code> instead of &lt;code>size&lt;/code> if it uses that anywhere. Your geom will already inherit the correct &lt;code>rename_size&lt;/code> value.&lt;/p>
&lt;p>&lt;em>I&amp;rsquo;m creating a stat &amp;mdash; should I do anything?&lt;/em>&lt;/p>
&lt;p>Probably not. The only exception is if you set &lt;code>size&lt;/code> in &lt;code>default_aes&lt;/code> to a calculated value and the expectance is that the geom used with the stat will change to using &lt;code>linewidth&lt;/code>. In such situations you should change the &lt;code>default_aes&lt;/code> setting to use &lt;code>linewidth&lt;/code> instead. We haven&amp;rsquo;t had any such situations in the ggplot2 code base so the chance of this being relevant is pretty low.&lt;/p>
&lt;p>&lt;em>I&amp;rsquo;m creating a geom that uses &lt;code>size&lt;/code> for both point sizing and line width &amp;mdash; how should I proceed?&lt;/em>&lt;/p>
&lt;p>If you have a geom where &lt;code>size&lt;/code> doubles for both point sizes and linewidth (an example from ggplot2 is
&lt;a href="https://ggplot2.tidyverse.org/reference/geom_linerange.html" target="_blank" rel="noopener">&lt;code>geom_pointrange()&lt;/code>&lt;/a>) you shouldn&amp;rsquo;t set &lt;code>rename_size = TRUE&lt;/code> since &lt;code>size&lt;/code> remains a valid aesthetic. However, you should add &lt;code>linewidth&lt;/code> to &lt;code>default_aes&lt;/code> and use this wherever in your code &lt;code>size&lt;/code> was used for linewidth scaling before. Do note that this is a breaking change for your users since the same piece of code may no longer produce the same output.&lt;/p></description></item><item><title>Using case weights with tidymodels</title><link>https://www.tidyverse.org/blog/2022/05/case-weights/</link><pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2022/05/case-weights/</guid><description>&lt;!--
TODO:
* [ ] Look over / edit the post's title in the yaml
* [ ] Edit (or delete) the description; note this appears in the Twitter card
* [ ] Pick category and tags (see existing with `hugodown::tidy_show_meta()`)
* [ ] Find photo &amp; update yaml metadata
* [ ] Create `thumbnail-sq.jpg`; height and width should be equal
* [ ] Create `thumbnail-wd.jpg`; width should be >5x height
* [ ] `hugodown::use_tidy_thumbnails()`
* [ ] Add intro sentence, e.g. the standard tagline for the package
* [ ] `usethis::use_tidy_thanks()`
-->
&lt;p>We are pleased to announce that tidymodels packages now support the use of case weights. There has been a ton of work and multiple technical hurdles to overcome. The diversity of the types of weights and how they should be used is very complex, but I think that we&amp;rsquo;ve come up with a solution that is fairly straightforward for users.&lt;/p>
&lt;p>Several packages are affected by these changes and we&amp;rsquo;re keeping them on GitHub until everything is finalized. See the last section for instructions for installing the development versions.&lt;/p>
&lt;h2 id="what-are-case-weights">What are case weights?
&lt;a href="#what-are-case-weights">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Case weights are non-negative numbers used to specify how much each observation influences the estimation of a model.&lt;/p>
&lt;p>If you are new to this term, it is worth reading Thomas Lumley’s excellent post
&lt;a href="https://notstatschat.rbind.io/2020/08/04/weights-in-statistics/" target="_blank" rel="noopener">&lt;em>Weights in statistics&lt;/em>&lt;/a> as well as
&lt;a href="https://projecteuclid.org/journals/statistical-science/volume-22/issue-2/Struggles-with-Survey-Weighting-and-Regression-Modeling/10.1214/088342306000000691.full" target="_blank" rel="noopener">&amp;ldquo;Struggles with Survey Weighting and Regression Modeling&amp;rdquo;&lt;/a>. Although &amp;ldquo;case weights&amp;rdquo; isn&amp;rsquo;t a universally used term, we&amp;rsquo;ll use it to distinguish it from other types of weights, such as class weights in cost-sensitive learning and others.&lt;/p>
&lt;p>There are different types of case weights whose terminology can be very different across problem domains. Here are some examples:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Frequency weights&lt;/strong> are integers that denote how many times a particular row of data has been observed. They help compress redundant rows into a single entry.&lt;/li>
&lt;li>&lt;strong>Importance weights&lt;/strong> focus on how much each row of the data set should influence model estimation. These can be based on data or arbitrarily set to achieve some goal.&lt;/li>
&lt;li>When survey respondents have different probabilities of selection, (inverse) &lt;strong>probability weights&lt;/strong> can help reduce bias in the results of a data analysis.&lt;/li>
&lt;li>If a data point has an associated precision, &lt;strong>analytic weighting&lt;/strong> helps a model focus on the data points with less uncertainty (such as in meta-analysis).&lt;/li>
&lt;/ul>
&lt;p>There are undoubtedly more types of weights in other domains. Quoting
&lt;a href="https://projecteuclid.org/journals/statistical-science/volume-22/issue-2/Struggles-with-Survey-Weighting-and-Regression-Modeling/10.1214/088342306000000691.full" target="_blank" rel="noopener">Andrew Gelman&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Weighting causes no end of confusion both in applied and theoretical statistics. People just assume because something has one name (&amp;ldquo;weights&amp;rdquo;), it is one thing. So then we get questions like, &amp;ldquo;How do you do weighted regression in Stan,&amp;rdquo; and we have to reply, &amp;ldquo;What is it that you actually want to do?&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h2 id="how-are-they-used-in-traditional-modeling">How are they used in traditional modeling?
&lt;a href="#how-are-they-used-in-traditional-modeling">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A traditional example is categorical data where a small number of possible categories are observed many times. For example, &lt;code>UCBAdmissions&lt;/code> contains &amp;ldquo;Aggregate data on applicants to graduate school at Berkeley for the six largest departments in 1973 classified by admission and sex.&amp;rdquo;&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;UCBAdmissions&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">UCBAdmissions&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## , , Dept = A
##
## Gender
## Admit Male Female
## Admitted 512 89
## Rejected 313 19
##
## , , Dept = B
##
## Gender
## Admit Male Female
## Admitted 353 17
## Rejected 207 8
##
## , , Dept = C
##
## Gender
## Admit Male Female
## Admitted 120 202
## Rejected 205 391
##
## , , Dept = D
##
## Gender
## Admit Male Female
## Admitted 138 131
## Rejected 279 244
##
## , , Dept = E
##
## Gender
## Admit Male Female
## Admitted 53 94
## Rejected 138 299
##
## , , Dept = F
##
## Gender
## Admit Male Female
## Admitted 22 24
## Rejected 351 317
&lt;/code>&lt;/pre>&lt;p>This is a 3D array, so let&amp;rsquo;s convert it to a rectangular data format:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidymodels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ucb&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">as_tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UCBAdmissions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">across&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.character&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="nf">as.factor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">.)&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">ucb&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 24 × 4
## Admit Gender Dept n
## &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Admitted Male A 512
## 2 Rejected Male A 313
## 3 Admitted Female A 89
## 4 Rejected Female A 19
## 5 Admitted Male B 353
## 6 Rejected Male B 207
## 7 Admitted Female B 17
## 8 Rejected Female B 8
## 9 Admitted Male C 120
## 10 Rejected Male C 205
## # … with 14 more rows
&lt;/code>&lt;/pre>&lt;p>There are 24 possible configurations of the variables but a total of 4526 observations. If we want to model the data in this format, we could use a logistic regression:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">glm_fit&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">glm&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">Admit&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">Gender&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Dept&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ucb&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">weights&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">family&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;binomial&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">glm_fit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>##
## Call: glm(formula = Admit ~ Gender + Dept, family = &amp;quot;binomial&amp;quot;, data = ucb,
## weights = n)
##
## Coefficients:
## (Intercept) GenderMale DeptB DeptC DeptD DeptE
## -0.68192 0.09987 0.04340 1.26260 1.29461 1.73931
## DeptF
## 3.30648
##
## Degrees of Freedom: 23 Total (i.e. Null); 17 Residual
## Null Deviance: 6044
## Residual Deviance: 5187 AIC: 5201
&lt;/code>&lt;/pre>&lt;p>&lt;em>This is not quite right though&lt;/em>. There are 12 combinations of &lt;code>Gender&lt;/code> and &lt;code>Dept&lt;/code>. How can the model have 23 total degrees of freedom?&lt;/p>
&lt;p>If we are treating our data as binomial, the traditional method for fitting this model is to convert the data to a format with columns for the number of events and non-events (per covariate pattern). Let&amp;rsquo;s convert our data into that format:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">ucb_grouped_data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">ucb&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">pivot_wider&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">id_cols&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Gender&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Dept&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">names_from&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Admit&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">values_from&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">values_fill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0L&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">ucb_grouped_data&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 12 × 4
## Gender Dept Admitted Rejected
## &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Male A 512 313
## 2 Female A 89 19
## 3 Male B 353 207
## 4 Female B 17 8
## 5 Male C 120 205
## 6 Female C 202 391
## 7 Male D 138 279
## 8 Female D 131 244
## 9 Male E 53 138
## 10 Female E 94 299
## 11 Male F 22 351
## 12 Female F 24 317
&lt;/code>&lt;/pre>&lt;p>Now, since there are really only 12 covariate combinations, the appropriate model can be created.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">glm&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nf">cbind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Rejected&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Admitted&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">Gender&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Dept&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ucb_grouped_data&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">family&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binomial&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>##
## Call: glm(formula = cbind(Rejected, Admitted) ~ Gender + Dept, family = binomial,
## data = ucb_grouped_data)
##
## Coefficients:
## (Intercept) GenderMale DeptB DeptC DeptD DeptE
## -0.68192 0.09987 0.04340 1.26260 1.29461 1.73931
## DeptF
## 3.30648
##
## Degrees of Freedom: 11 Total (i.e. Null); 5 Residual
## Null Deviance: 877.1
## Residual Deviance: 20.2 AIC: 103.1
&lt;/code>&lt;/pre>&lt;p>In both cases the model coefficients are the same but the standard errors and degrees of freedom are only correct for the model with grouped data.&lt;/p>
&lt;h2 id="why-is-this-so-complicated">Why is this so complicated?
&lt;a href="#why-is-this-so-complicated">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Traditionally, weights in base R functions are used to fit the model and to report a few measures of model efficacy. Here, &lt;code>glm()&lt;/code> reports the deviance while &lt;code>lm()&lt;/code> shows estimates of the RMSE and adjusted-R&lt;sup>2&lt;/sup>.&lt;/p>
&lt;p>Believe it or not, the logistic regression code shown above, which is a typical example of using weights in a classical statistical setting, is much simpler than what we have to contend with in modern data analysis. There are a few things that we do in modern data analysis where correctly using weights is not so straightforward. These include:&lt;/p>
&lt;ul>
&lt;li>Resampling (e.g. bootstrap or cross-validation).&lt;/li>
&lt;li>Preprocessing methods such as centering and scaling.&lt;/li>
&lt;li>Additional measures of performance (e.g. area under the ROC curve, mean absolute deviations, Kohen&amp;rsquo;s Kappa, and so on).&lt;/li>
&lt;/ul>
&lt;p>A framework like tidymodels should enable users to utilize case weights across all phases of their data analysis.&lt;/p>
&lt;p>Additionally, the type of case weights &lt;strong>and their intent&lt;/strong> affect which of these operations should be affected.&lt;/p>
&lt;p>For example, frequency weights should affect the estimation of the model, the preprocessing steps, and performance estimation. If the predictors require centering, a weighted mean should be used to appropriately ensure that the mean of that column is truly zero. Let&amp;rsquo;s say that sensitivity and specificity estimates are required. The 2x2 table of observed and predicted results should have cell counts that reflect the case weights. If they did not, infrequently occurring data points have as much weight as the rows that have a high prevalence.&lt;/p>
&lt;p>As a counter example, importance weights reflect the idea that they should only influence &lt;em>the model fitting procedure&lt;/em>. It wouldn&amp;rsquo;t make sense to use a weighted mean to center a predictor; the weight shouldn&amp;rsquo;t influence an unsupervised operation in the same way as model estimation. More critically, any holdout data set used to quantify model efficacy should reflect the data as seen in the wild (without the impact of the weights).&lt;/p>
&lt;h2 id="how-does-tidymodels-handle-weights">How does tidymodels handle weights?
&lt;a href="#how-does-tidymodels-handle-weights">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;ve decided to add some additional vector data types that allow users to describe the type of weights. These data types also help tidymodels functions know what the intent of the analysis should be.&lt;/p>
&lt;p>In parsnip, the functions &lt;code>frequency_weights()&lt;/code> and &lt;code>importance_weights()&lt;/code> can be used to set the weights:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># For the UC admissions data&lt;/span>
&lt;span class="n">ucb&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">ucb&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">frequency_weights&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">ucb&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">n&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## &amp;lt;frequency_weights[24]&amp;gt;
## [1] 512 313 89 19 353 207 17 8 120 205 202 391 138 279 131 244 53 138 94
## [20] 299 22 351 24 317
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># For a general vector of importance weights: &lt;/span>
&lt;span class="nf">importance_weights&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">runif&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## &amp;lt;importance_weights[10]&amp;gt;
## [1] 0.91 0.53 0.72 0.81 0.33 0.11 0.61 0.61 0.20 0.49
&lt;/code>&lt;/pre>&lt;p>The class of these objects tells packages like recipes and yardstick if their values should be used for preprocessing and performance metrics, respectively:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Importance weights only affect the model estimation and &lt;em>supervised&lt;/em> recipes steps. They are not used with yardstick functions for calculating measures of model performance.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Frequency weights are used for all parts of the preprocessing, model fitting, and performance estimation operations.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Currently, these are the only classes implemented. We are doing a lot of reading on how the analysis of survey data should use case weights and how we can enable this and other data analysis use cases.
&lt;a href="https://community.rstudio.com/t/case-weight-blog-post-discussion/136281" target="_blank" rel="noopener">We&amp;rsquo;d love to hear from you&lt;/a> if you have expertise in this area.&lt;/p>
&lt;h2 id="about-resampling">About resampling
&lt;a href="#about-resampling">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>This is a topic that we are still unsure about. We definitively think that importance weights should not affect how the data are split or resampled.&lt;/p>
&lt;p>Frequency weights are more complex. Suppose we are using 10-fold cross-validation with the logistic regression on the UCB admission data, should we:&lt;/p>
&lt;ul>
&lt;li>Have all the case weights be placed into either the modeling or holdout set?&lt;/li>
&lt;li>Fractionally, split the case weights into both the modeling and holdout data?&lt;/li>
&lt;/ul>
&lt;p>For the latter case, suppose a row of data has a case weight of 100 and we use 10-fold cross-validation. We would always put 90 of those 100 into the modeling data set and the other 10 into the holdout. This seems to be consistent with the sampling of the data and is what would happen if there were actually 100 rows in the data (instead of one row with a case weight of 100). However, it does raise questions regarding data leakage by just re-predicting the same data that went into the model.&lt;/p>
&lt;p>This is also an area where we&amp;rsquo;d like
&lt;a href="https://community.rstudio.com/t/case-weight-blog-post-discussion/136281" target="_blank" rel="noopener">community feedback&lt;/a>.&lt;/p>
&lt;h2 id="tidymodels-syntax">Tidymodels syntax
&lt;a href="#tidymodels-syntax">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Let&amp;rsquo;s work through an example. We&amp;rsquo;ll use some data simulated with a severe class imbalance. These functions are in the
&lt;a href="https://modeldata.tidymodels.org/dev/reference/sim_classification.html" target="_blank" rel="noopener">development version of the modeldata package&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">training_sim&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">sim_classification&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">intercept&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">-25&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">training_sim&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">class&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 2 × 2
## class n
## &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;
## 1 class_1 80
## 2 class_2 4920
&lt;/code>&lt;/pre>&lt;p>If we would like to encourage models to more accurately predict the minority class, we can give these samples a much larger weight in the analysis&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">training_sim&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">training_sim&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">case_wts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">ifelse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">class&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;class_1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">60&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">case_wts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">importance_weights&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">case_wts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We strongly advise that users set the case weight column before any other tidymodels functions are used. This ensures that they are handled correctly in the analyses that follow. In some cases, such as recipes, we prohibit changing the case weight column. Since the intent of the weights is needed, errors could occur if that intent was changed during the analysis.&lt;/p>
&lt;p>Let&amp;rsquo;s use 10-fold cross-validation to resample the data. This case is unaffected by the presence of weights:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sim_folds&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">vfold_cv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">training_sim&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">class&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;ll fit a regularized logistic regression model to the data using glmnet:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">lr_spec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">logistic_reg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">penalty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">tune&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">mixture&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;glmnet&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For this model, we need to ensure that the predictors are in the same units. We&amp;rsquo;ll use a recipe to center and scale the data and also add some spline terms for predictors that appear to have a nonlinear relationship with the outcome:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">sim_rec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">class&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">training_sim&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_ns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">starts_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;non_linear&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">deg_free&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_normalize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">all_numeric_predictors&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">sim_rec&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## Recipe
##
## Inputs:
##
## role #variables
## case_weights 1
## outcome 1
## predictor 15
##
## Operations:
##
## Natural splines on starts_with(&amp;quot;non_linear&amp;quot;)
## Centering and scaling for all_numeric_predictors()
&lt;/code>&lt;/pre>&lt;p>There are a few things to point out here. The recipe automatically detects the case weights even though they are captured by the dot in the right-hand side of the formula. The recipe automatically sets their role and will error if that column is changed in any way.&lt;/p>
&lt;p>As mentioned above, any unsupervised steps are unaffected by importance weights so neither &lt;code>step_ns()&lt;/code> or &lt;code>step_normalize()&lt;/code> use the weights in their calculations.&lt;/p>
&lt;p>When using case weights, we would like to encourage users to keep their model and preprocessing tool within a workflow. The workflows package now has an &lt;code>add_case_weights()&lt;/code> function to help here:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">lr_wflow&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">workflow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_model&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lr_spec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sim_rec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_case_weights&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">case_wts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">lr_wflow&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## ══ Workflow ═════════════════════════════════════════════════════════════════════════
## Preprocessor: Recipe
## Model: logistic_reg()
##
## ── Preprocessor ─────────────────────────────────────────────────────────────────────
## 2 Recipe Steps
##
## • step_ns()
## • step_normalize()
##
## ── Case Weights ─────────────────────────────────────────────────────────────────────
## case_wts
##
## ── Model ────────────────────────────────────────────────────────────────────────────
## Logistic Regression Model Specification (classification)
##
## Main Arguments:
## penalty = tune()
## mixture = 1
##
## Computational engine: glmnet
&lt;/code>&lt;/pre>&lt;p>Existing &lt;code>add_*()&lt;/code> functions in workflows add objects (instead of data). Rather than specifying case weights in each preprocessor function (e.g. &lt;code>add_formula()&lt;/code> and so on), this syntax is more simple and works with any type of preprocessor.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">cls_metrics&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">metric_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sensitivity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">specificity&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">grid&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">penalty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="nf">^seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">-3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length.out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">20&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">lr_res&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">lr_wflow&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">tune_grid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">resamples&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sim_folds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">grid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">grid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metrics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cls_metrics&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">autoplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lr_res&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="figure/sim-tune-1.svg" title="plot of chunk sim-tune" alt="plot of chunk sim-tune" width="100%" />&lt;/p>
&lt;p>In tidymodels, the default is that the first level of the outcome factor is the event of interest. Since the first level of the outcome has the fewest values, we would expect the sensitivity of the model to suffer. These results suggest that the weights are making the model focus on the majority class.&lt;/p>
&lt;p>For comparison, let&amp;rsquo;s remove the weights and then tune the same parameter values.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">lr_unwt_wflow&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">lr_wflow&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">remove_case_weights&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">lr_unwt_res&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">lr_unwt_wflow&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">tune_grid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">resamples&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sim_folds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">grid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">grid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metrics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cls_metrics&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>How do the results compare?&lt;/p>
&lt;p>&lt;img src="figure/plot-results-1.svg" title="plot of chunk plot-results" alt="plot of chunk plot-results" width="100%" />&lt;/p>
&lt;p>The importance weights certainly did their job since the weighted analysis has a better balance of sensitivity and specificity.&lt;/p>
&lt;h2 id="getting-feedback">Getting feedback
&lt;a href="#getting-feedback">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;ve laid the groundwork for using case weights holistically in tidymodels. For those of you who use case weights, we&amp;rsquo;d like to know what you think of our approach and answer any questions that you have. We have an
&lt;a href="https://community.rstudio.com/t/case-weight-blog-post-discussion/136281" target="_blank" rel="noopener">RStudio Community post&lt;/a> queued up to discuss this topic.&lt;/p>
&lt;p>We&amp;rsquo;ve waited to release packages with case weight support until the main pieces were in place. If you would like to play around with what we&amp;rsquo;ve done, you can load the development versions of the packages using:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">rlang&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">is_installed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;pak&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;pak&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">pkgs&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hardhat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;parsnip&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;recipes&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;modeldata&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;tune&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;workflows&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;yardstick&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">pkgs&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">paste0&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tidymodels/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pkgs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">pak&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">pak&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pkgs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you use any of the parsnip extension packages (e.g. discrim, rules, etc), make sure to install the development versions of these too.&lt;/p></description></item><item><title>ragg, svglite, and the new graphics features</title><link>https://www.tidyverse.org/blog/2022/02/new-graphic-features/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2022/02/new-graphic-features/</guid><description>&lt;!--
TODO:
* [ ] Look over / edit the post's title in the yaml
* [ ] Edit (or delete) the description; note this appears in the Twitter card
* [ ] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [ ] Find photo &amp; update yaml metadata
* [ ] Create `thumbnail-sq.jpg`; height and width should be equal
* [ ] Create `thumbnail-wd.jpg`; width should be >5x height
* [ ] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [ ] Add intro sentence, e.g. the standard tagline for the package
* [ ] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>The release of
&lt;a href="https://ragg.r-lib.org" target="_blank" rel="noopener">ragg 1.2&lt;/a> and
&lt;a href="https://svglite.r-lib.org" target="_blank" rel="noopener">svglite 2.1&lt;/a> brought support for some exciting new graphics engine features, including gradients and patterns, which were
&lt;a href="https://developer.r-project.org/Blog/public/2020/07/15/new-features-in-the-r-graphics-engine/" target="_blank" rel="noopener">added in R 4.1&lt;/a> by Paul Murrell from R Core. This post will dive into these new features, as well as discuss what the future might hold for the R graphics engine.&lt;/p>
&lt;p>If you want to follow along on your own computer, you can install the latest versions of ragg and svglite from CRAN&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/install.packages.html'>install.packages&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"ragg"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/install.packages.html'>install.packages&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"svglite"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This post will rarely make any specific call-outs to ragg or svglite, as these are simply the packages that facilitate what is now possible with R graphics.&lt;/p>
&lt;h2 id="what-is-the-graphics-engine">What is the graphics engine?
&lt;a href="#what-is-the-graphics-engine">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>You might wonder what is meant by the &lt;em>R graphics engine&lt;/em>. It&amp;rsquo;s pretty deep in the R graphics stack, so as a user, you are unlikely to ever engage with it directly. But, since I somehow caught your attention, we might as well indulge in the finer points of the graphics implementation.&lt;/p>
&lt;p>While you may mainly be familiar with ggplot2 and perhaps a variety of graphics devices (e.g. 
&lt;a href="https://rdrr.io/r/grDevices/pdf.html" target="_blank" rel="noopener">&lt;code>pdf()&lt;/code>&lt;/a> or
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>png()&lt;/code>&lt;/a>), they sit at opposite ends of a fairly elaborate graphics pipeline. ggplot2 is a high(er) level plotting package that allows you to express your data-visualization intent through a structured grammar. Graphics devices such as ragg and svglite are low-level packages that translate simple graphics instructions into a given file format. In between these two poles we have a two additional abstractions that helps translate between the extremes. In very broad terms, the R graphic stack looks like this:&lt;/p>
&lt;p>&lt;img src="pipeline.png" alt="An overview of the different steps in the R graphics pipeline. A graphics package is build on top of a graphic system. All graphic systems calls into the same shared graphics engine which then relay graphic instructions to the active graphic device." title="graphics pipeline">&lt;/p>
&lt;h3 id="graphic-systems">Graphic systems
&lt;a href="#graphic-systems">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>R currently sports two different systems, one colloquially known as &lt;em>base&lt;/em> graphics (implemented in the graphics package), and one called &lt;em>grid&lt;/em> graphics (implemented in the grid package). If you call
&lt;a href="https://rdrr.io/r/graphics/plot.default.html" target="_blank" rel="noopener">&lt;code>plot()&lt;/code>&lt;/a> you are most likely to end up using the base graphics system, while grid is used as the basis for e.g. ggplot2. The two systems are largely silos, though effort has been made to allow users to embed base graphics into grid graphics. In RStudio we are mainly invested in the grid graphics system since it powers ggplot2, but by and large, this is all an implementation detail that the user shouldn&amp;rsquo;t care too much about. There might come other graphic systems in the future, and other ways of drawing things on screen or to files also exist outside of the R graphics pipeline (e.g. rgl which allows you to create 3D graphics using an OpenGL/WebGL interface).&lt;/p>
&lt;h3 id="the-graphics-engine">The graphics engine
&lt;a href="#the-graphics-engine">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>What unites base and grid graphics and sets them apart from e.g. rgl is that they both call into the same low-level C API provided by R, the &lt;strong>graphics engine&lt;/strong>. The graphics engine is responsible for communicating with the graphics devices while also providing selected utility functionality common for both base and grid graphics. It is because of this abstraction that creating graphics in R is largely decoupled from how it is outputted, be it on screen, in a file, or directly to a printer.&lt;/p>
&lt;p>While it sounds nice and neat when it is all laid out like this, the current structure and division has grown out over many years, and the boundaries between the graphic systems, the graphics engine, and the graphic devices are blurry. Still, the design is much more mature than what we see in other languages, and as graphics/data-viz developers in R we are pretty spoiled compared to our peers in other languages &amp;mdash; perhaps without really knowing it.&lt;/p>
&lt;h2 id="a-fragmented-future">A fragmented future
&lt;a href="#a-fragmented-future">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>With the division of responsibility described above, there are many points in the pipeline that may impose limitations in functionality. The graphic system might not provide the higher-level API to use functionality in the graphics engine, or a graphic device might not provide support for instructions coming in from the graphics engine. While this has mainly been a hypothetical situation prior to R 4.1, it is now the new reality. The new features in the graphics engine were implemented along with high-level support in grid, and low-level support in the pdf device along with the cairo-based devices. This leaves base plot in the dark, and also excludes a range of built-in devices, including the default devices on Windows and macOS. At this point, where high-level support from e.g. ggplot2 is still not present, it might not be a big problem, as you will probably use these features quite deliberately and know their limitations in support. In the future, however, this could lead to surprises.&lt;/p>
&lt;p>As users, this fragmentation is most apparent in the choice of graphic device. After all, you don&amp;rsquo;t expect the graphic system to be capable of something outside of its API, simply because new features were announced for the graphics device. However, if a graphic device lacks support it will simply not use the new features, and you may end up surprised at what it renders.&lt;/p>
&lt;p>When it comes to graphic systems, you can expect that grid will be the first (perhaps only) system that ends up supporting new features in the graphics engine. Part of the reason for that is that the grid API is more powerful in general, and, as new and more complex graphic powers are exposed, it can be easiest to make them fit into the most expressive API. This is definitely the case for the latest batch of new features, but I also expect it to be the case going forward. Just because a functionality is exposed in grid, doesn&amp;rsquo;t mean that it can easily be handled in e.g. ggplot2. I&amp;rsquo;ll address what the new features may mean for the future of ggplot2 at the end of the post.&lt;/p>
&lt;p>For graphic &lt;em>devices&lt;/em> the water is more muddled. Not all devices are under active development, and such devices are unlikely to add support for new features. Further, it may be that a graphics device writes to a format, or uses a library that does not support a new feature provided by the graphics engine. The bottom line is that we can expect an increased fragmentation of the graphics devices in R in terms of which will be up to spec with the latest graphics engine features. It appears that the cairo-based devices along with the pdf device from grDevices can be expected to stay current. On our end, we will do our best to make sure that our graphic-device packages (currently ragg and svglite) will stay on top of any new additions to the graphics engine.&lt;/p>
&lt;h2 id="the-new-features">The new features
&lt;a href="#the-new-features">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>OK, so we&amp;rsquo;ve talked a lot about some new features without ever going into detail about what they are. If you&amp;rsquo;ve never felt constrained by the capabilities of the graphics in R, you may be forgiven for thinking that this is all a big fuss over nothing. You may be right, but new capabilities will often allow the ecosystem to evolve in new and unexpected ways to the benefit of all.&lt;/p>
&lt;h3 id="gradients">Gradients
&lt;a href="#gradients">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>While gradients have been a part of R graphics for a while, they have always relied on some hack - most often cutting the line or polygon in smaller bits and coloring these with color sampled from a gradient. However, now gradients are supported at the device level, meaning that the pixel color is calculated based on a gradient function. This means that the gradient is pixel-perfect at any resolution, and if you are writing to vector format (e.g. svg), you can reduce the file size by not having to write the coordinates for a chopped-up polygon to support the gradient. For now, the functionality is limited to fills. So, if you want to draw a gradient line, you still have to cut it up into small segments.&lt;/p>
&lt;p>Gradients can be created with the
&lt;a href="https://rdrr.io/r/grid/patterns.html" target="_blank" rel="noopener">&lt;code>linearGradient()&lt;/code>&lt;/a> and
&lt;a href="https://rdrr.io/r/grid/patterns.html" target="_blank" rel="noopener">&lt;code>radialGradient()&lt;/code>&lt;/a> which can be assigned to the fill of a grob:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>grid&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.circle.html'>grid.circle&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
fill &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/patterns.html'>linearGradient&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"firebrick"&lt;/span>, &lt;span class='s'>"steelblue"&lt;/span>, &lt;span class='s'>"forestgreen"&lt;/span>&lt;span class='o'>)&lt;/span>,
stops &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0&lt;/span>, &lt;span class='m'>0.7&lt;/span>, &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>,
col &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NA&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-3-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.circle.html'>grid.circle&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
fill &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/patterns.html'>radialGradient&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"white"&lt;/span>, &lt;span class='s'>"steelblue"&lt;/span>&lt;span class='o'>)&lt;/span>,
cx1 &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.8&lt;/span>,
cy1 &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.8&lt;/span>
&lt;span class='o'>)&lt;/span>,
col &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NA&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-4-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>At the basic level, both of the constructors takes a vector of colors. Optionally, you can provide a vector of stops that define where along the span of the gradient each color is placed. Each gradient type also lets you specify where in the graphic the gradient runs between. For a linear gradient, you provide the x and y position of the start and end of the gradient. For a radial gradient, you provide the center and radius of the start and end circle. Lastly, you can also tell it how it should behave outside of the given range using the &lt;code>extend&lt;/code> argument:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.circle.html'>grid.circle&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
fill &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/patterns.html'>linearGradient&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"firebrick"&lt;/span>, &lt;span class='s'>"steelblue"&lt;/span>&lt;span class='o'>)&lt;/span>,
x1 &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, y1 &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, x2 &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.5&lt;/span>, y2 &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>,
extend &lt;span class='o'>=&lt;/span> &lt;span class='s'>"repeat"&lt;/span>
&lt;span class='o'>)&lt;/span>,
col &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NA&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-5-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.circle.html'>grid.circle&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
fill &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/patterns.html'>linearGradient&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"firebrick"&lt;/span>, &lt;span class='s'>"steelblue"&lt;/span>&lt;span class='o'>)&lt;/span>,
x1 &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, y1 &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, x2 &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.5&lt;/span>, y2 &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>,
extend &lt;span class='o'>=&lt;/span> &lt;span class='s'>"pad"&lt;/span>
&lt;span class='o'>)&lt;/span>,
col &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NA&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-6-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>One thing to note is that the extent of the gradient is given relative to the bounding box of the grob being drawn. We could move the circle above around and the gradient would follow along with it.&lt;/p>
&lt;h3 id="patterns">Patterns
&lt;a href="#patterns">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Like gradients, patterns are a new type of fill made possible in grid through the new features in the graphic engine. Patterns are crazy powerful in that they can be &lt;em>any&lt;/em> grob you can imagine. The grob itself can consist of other grobs and these grobs could have patterned fill as well (or gradient fills for that matter).&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>gradient_rec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.rect.html'>rectGrob&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
width &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.1&lt;/span>,
height &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.1&lt;/span>,
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fill &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/patterns.html'>linearGradient&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"firebrick"&lt;/span>, &lt;span class='s'>"steelblue"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.draw.html'>grid.draw&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>gradient_rec&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-7-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.circle.html'>grid.circle&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fill &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/patterns.html'>pattern&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>gradient_rec&lt;/span>, width &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.15&lt;/span>, height &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.15&lt;/span>, extend &lt;span class='o'>=&lt;/span> &lt;span class='s'>"reflect"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-8-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>Understanding the sizing of the grob used for the pattern can take some getting used to. Basically, the pattern is drawn relative to the grob. The &lt;code>width&lt;/code> and &lt;code>height&lt;/code> arguments in the
&lt;a href="https://rdrr.io/r/grid/patterns.html" target="_blank" rel="noopener">&lt;code>pattern()&lt;/code>&lt;/a> call is then used to define a region of the grob that will be used as a pattern. Thus, you cannot scale the pattern grob using the &lt;code>width&lt;/code> and &lt;code>height&lt;/code> arguments in
&lt;a href="https://rdrr.io/r/grid/patterns.html" target="_blank" rel="noopener">&lt;code>pattern()&lt;/code>&lt;/a>. This can be seen below&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.circle.html'>grid.circle&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fill &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/patterns.html'>pattern&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>gradient_rec&lt;/span>, width &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.35&lt;/span>, height &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.35&lt;/span>, extend &lt;span class='o'>=&lt;/span> &lt;span class='s'>"reflect"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-9-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>As we see, we are just defining a larger (empty) region from our rect grob, effectively adding more space between each rectangle, rather than creating larger rectangles. This also means that the pattern scales with the grob:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>pat&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/patterns.html'>pattern&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nv'>gradient_rec&lt;/span>,
width &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.15&lt;/span>,
height &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.15&lt;/span>,
extend &lt;span class='o'>=&lt;/span> &lt;span class='s'>"reflect"&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.circle.html'>grid.circle&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
x &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.25&lt;/span>, r &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.25&lt;/span>,
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fill &lt;span class='o'>=&lt;/span> &lt;span class='nv'>pat&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.circle.html'>grid.circle&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
x &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.75&lt;/span>, r &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.5&lt;/span>,
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fill &lt;span class='o'>=&lt;/span> &lt;span class='nv'>pat&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-10-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>In order to ensure the same scale of pattern is used across separate grobs, be sure to use absolute units when defining the pattern grob as well as the region:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>gradient_rec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.rect.html'>rectGrob&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
width &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/unit.html'>unit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='s'>"cm"&lt;/span>&lt;span class='o'>)&lt;/span>,
height &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/unit.html'>unit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='s'>"cm"&lt;/span>&lt;span class='o'>)&lt;/span>,
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fill &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/patterns.html'>linearGradient&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"firebrick"&lt;/span>, &lt;span class='s'>"steelblue"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>pat&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/patterns.html'>pattern&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nv'>gradient_rec&lt;/span>,
width &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/unit.html'>unit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1.5&lt;/span>, &lt;span class='s'>"cm"&lt;/span>&lt;span class='o'>)&lt;/span>,
height &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/unit.html'>unit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1.5&lt;/span>, &lt;span class='s'>"cm"&lt;/span>&lt;span class='o'>)&lt;/span>,
extend &lt;span class='o'>=&lt;/span> &lt;span class='s'>"reflect"&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.circle.html'>grid.circle&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
x &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.25&lt;/span>, r &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.25&lt;/span>,
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fill &lt;span class='o'>=&lt;/span> &lt;span class='nv'>pat&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.circle.html'>grid.circle&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
x &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.75&lt;/span>, r &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.5&lt;/span>,
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fill &lt;span class='o'>=&lt;/span> &lt;span class='nv'>pat&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-11-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>As you can see, patterns can take some getting used to, but this is mainly because the API covers such a large span of functionality in terms of sizing, etc.&lt;/p>
&lt;h3 id="arbitrary-clipping-paths">Arbitrary clipping paths
&lt;a href="#arbitrary-clipping-paths">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Clipping is an integral part of graphics. You set up a region in your canvas and only this region will get drawn to. Up until now, the graphics engine has supported clipping, but only of rectangular, axis-aligned regions. Now, however, any grob can be used to define a clipping region. This is done at the viewport level, where the &lt;code>clip&lt;/code> argument now can take a grob in addition to the standard &lt;code>&amp;quot;on&amp;quot;&lt;/code>/&lt;code>&amp;quot;off&amp;quot;&lt;/code> values.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>clip_path&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.text.html'>textGrob&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Clipping"&lt;/span>, gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fontface &lt;span class='o'>=&lt;/span> &lt;span class='s'>"bold"&lt;/span>, fontsize &lt;span class='o'>=&lt;/span> &lt;span class='m'>100&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.points.html'>grid.points&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
x &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/Uniform.html'>runif&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>5000&lt;/span>&lt;span class='o'>)&lt;/span>,
y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/Uniform.html'>runif&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>5000&lt;/span>&lt;span class='o'>)&lt;/span>,
default.units &lt;span class='o'>=&lt;/span> &lt;span class='s'>'npc'&lt;/span>,
vp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/viewport.html'>viewport&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>clip &lt;span class='o'>=&lt;/span> &lt;span class='nv'>clip_path&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-12-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>Clipping is not only possible with single grobs. By combining grobs in a gList, you can making the clipping region arbitrarily complex:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>circle&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.circle.html'>circleGrob&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0.2&lt;/span>, &lt;span class='m'>0.8&lt;/span>&lt;span class='o'>)&lt;/span>, r &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.3&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>rect&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.rect.html'>rectGrob&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
width &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/unit.html'>unit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0.7&lt;/span>, &lt;span class='s'>'snpc'&lt;/span>&lt;span class='o'>)&lt;/span>,
height &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/unit.html'>unit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0.7&lt;/span>, &lt;span class='s'>'snpc'&lt;/span>&lt;span class='o'>)&lt;/span>,
vp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/viewport.html'>viewport&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>angle &lt;span class='o'>=&lt;/span> &lt;span class='m'>45&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>clip_path&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.grob.html'>gTree&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>children &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.grob.html'>gList&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>circle&lt;/span>, &lt;span class='nv'>rect&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.points.html'>grid.points&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
x &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/Uniform.html'>runif&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>5000&lt;/span>&lt;span class='o'>)&lt;/span>,
y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/Uniform.html'>runif&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>5000&lt;/span>&lt;span class='o'>)&lt;/span>,
default.units &lt;span class='o'>=&lt;/span> &lt;span class='s'>'npc'&lt;/span>,
vp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/viewport.html'>viewport&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>clip &lt;span class='o'>=&lt;/span> &lt;span class='nv'>clip_path&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-13-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>The examples above seems quite contrived and decoupled from data visualization, but there are of course real world usages, e.g. clipping a 2D density estimate to the shape of a country or clipping data points inside a circular canvas for polar plots.&lt;/p>
&lt;p>The user interface for clipping paths is easy enough to understand, but it should be noted that there may be slight differences between devices as to which grob types can be used. Most notably, the use of text grobs for defining clipping paths is not something that will work for every device (but does work in ragg).&lt;/p>
&lt;h3 id="alpha-masks">Alpha masks
&lt;a href="#alpha-masks">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The last feature added to the graphics engine in this round is the ability of viewports to have an alpha mask assigned. When a mask is present, the grobs being drawn will apply the opacity of the mask. Note that this is different than a luminosity mask, which uses the lightness of the mask as the alpha value. A mask can be any grob you want, or a collection of multiples:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>circle&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.circle.html'>circleGrob&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
x &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0.2&lt;/span>, &lt;span class='m'>0.8&lt;/span>&lt;span class='o'>)&lt;/span>,
r &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.3&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>rect&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.rect.html'>rectGrob&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
width &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/unit.html'>unit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0.7&lt;/span>, &lt;span class='s'>'snpc'&lt;/span>&lt;span class='o'>)&lt;/span>,
height &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/unit.html'>unit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0.7&lt;/span>, &lt;span class='s'>'snpc'&lt;/span>&lt;span class='o'>)&lt;/span>,
vp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/viewport.html'>viewport&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>angle &lt;span class='o'>=&lt;/span> &lt;span class='m'>45&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>mask&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.grob.html'>gTree&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>children &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.grob.html'>gList&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>circle&lt;/span>, &lt;span class='nv'>rect&lt;/span>&lt;span class='o'>)&lt;/span>, gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fill &lt;span class='o'>=&lt;/span> &lt;span class='s'>"#00000066"&lt;/span>, col &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NA&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/grid.rect.html'>grid.rect&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
x &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0.25&lt;/span>, &lt;span class='m'>0.25&lt;/span>, &lt;span class='m'>0.75&lt;/span>, &lt;span class='m'>0.75&lt;/span>&lt;span class='o'>)&lt;/span>,
y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0.25&lt;/span>, &lt;span class='m'>0.75&lt;/span>, &lt;span class='m'>0.75&lt;/span>, &lt;span class='m'>0.25&lt;/span>&lt;span class='o'>)&lt;/span>,
width &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.5&lt;/span>,
height &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.5&lt;/span>,
gp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/gpar.html'>gpar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>fill &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"steelblue"&lt;/span>, &lt;span class='s'>"firebrick"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>,
vp &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/viewport.html'>viewport&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>mask &lt;span class='o'>=&lt;/span> &lt;span class='nv'>mask&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-14-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>As we see above, the areas in the mask where nothing is drawn have an opacity of 0, meaning that whatever is being drawn by the rectangle grob in these areas will be invisible. We also see that opacity is compounded by overlaying shapes as the areas covered both by the circle and the square in the mask has a higher opacity.&lt;/p>
&lt;h2 id="future-features">Future features
&lt;a href="#future-features">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>It is, of course, dangerous to promise what the future brings. However, I do know of a few features adjacent to what has been discussed above that might make sense to know about.&lt;/p>
&lt;p>When it comes to clipping paths, there is currently a lack of way to describe how multiple shapes are combined, since the fill rule is implicitly &amp;ldquo;winding&amp;rdquo; and you have no control over the direction the graphic device trace circles and rectangles. Work is already being done to let you control this from grid, so it will become easier to e.g. punch out holes in a clipping path by overlaying two grobs.&lt;/p>
&lt;p>As noted in the discussion about masks, only alpha masks are currently possible. However, producing an exact transparency through compounded shapes can be tough because of the way opacity combines. In the future there will also be support for luminosity masks and this should greatly improve the user experience of this feature in my opinion.&lt;/p>
&lt;p>Still, the main takeaway from all of the above is that the graphic engine is once again a living breathing code-base with big user-facing features on the horizon.&lt;/p>
&lt;h2 id="the-ggplot2-implications">The ggplot2 implications
&lt;a href="#the-ggplot2-implications">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>While ggplot2 uses grid underneath it&amp;rsquo;s grammar API, these features are generally not directly available in ggplot2. This is because most of these features are not directly applicable to the current API. Both gradients and patterns are obvious candidates for extensions of the ggplot2 API. But, for now, the grid API doesn&amp;rsquo;t support a vector of patterns/gradients. Once this limitation is removed (it is in the works), we will need to figure out how scaling of these more flexible fill types should work. The starting point is, of course, to allow mapping from one data-value to a predefined pattern/gradient, but it would be interesting to think about how to map data-values to features of the pattern/gradient, e.g. have the gradient defined by two or more columns that all maps to different colors. Some of this work and exploration is already happening in
&lt;a href="https://coolbutuseless.github.io/package/ggpattern" target="_blank" rel="noopener">ggpattern&lt;/a>, which could form the basis of future ggplot2 support.&lt;/p>
&lt;p>As for path clipping, we could imagine that geoms could take a clipping grob, but it is not obvious how this grob should be constructed in a manner consistent with the grammar. The same goes for masks. Maybe most of this work should be relegated to
&lt;a href="https://ggfx.data-imaginist.com" target="_blank" rel="noopener">ggfx&lt;/a> which has an extended API that seems better suited to masks and arbitrary clipping.&lt;/p>
&lt;h2 id="acknowledgement">Acknowledgement
&lt;a href="#acknowledgement">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>I&amp;rsquo;d like to extend a huge thanks to Paul Murrell for continuing to support and improve the graphics API in R, and for his willingness to answer questions during the implementation of the new features in ragg and svglite. The new graphics engine features were joint work with Paul Murrell, partly sponsored by RStudio.&lt;/p></description></item><item><title>Survival Analysis in tidymodels</title><link>https://www.tidyverse.org/blog/2021/11/survival-analysis-parsnip-adjacent/</link><pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2021/11/survival-analysis-parsnip-adjacent/</guid><description>&lt;p>Survival analysis is an important field in modeling and there are many R packages available which implement various models, from &amp;ldquo;classic&amp;rdquo; parametric models to boosted trees. While they cover a great variety of model types, they also come with considerable amounts of heterogeneity in syntax and levels of documentation. The
&lt;a href="https://www.tidymodels.org/" target="_blank" rel="noopener">tidymodels&lt;/a> framework is a collection of R packages for modeling and machine learning using tidyverse principles. It provides a consistent interface to a variety of modelling functions along with tools for resampling, assessing performance, and hyperparameter tuning.&lt;/p>
&lt;p>In terms of survival analysis, however, tidymodels so far hasn&amp;rsquo;t been as feature-rich as we&amp;rsquo;d like it to be, e.g., the available models only covered parametric survival models. With this post we&amp;rsquo;d like to provide an update on recent work to extend the tooling for survival analysis in tidymodels and gather feedback on future plans.&lt;/p>
&lt;p>Making survival analysis a first-class citizen in tidymodels requires touching several aspects across the collection of packages:&lt;/p>
&lt;ul>
&lt;li>Pre-processing to accommodate the data structure of censored data.&lt;/li>
&lt;li>A bigger selection of models which can be specified, fitted, and used for prediction.&lt;/li>
&lt;li>Additional performance metrics tailored to survival data.&lt;/li>
&lt;/ul>
&lt;p>The new
&lt;a href="https://censored.tidymodels.org/" target="_blank" rel="noopener">censored&lt;/a> package along with
&lt;a href="https://parsnip.tidymodels.org/" target="_blank" rel="noopener">parsnip&lt;/a> offers several new models, engines, and prediction types. The censored package is not on CRAN yet but we are looking for early adopters to try it out and give us feedback! You can install it via&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>devtools&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://devtools.r-lib.org//reference/remote-reexports.html'>install_github&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"tidymodels/censored"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="a-new-mode-for-parsnip">A new mode for parsnip
&lt;a href="#a-new-mode-for-parsnip">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Some model types can be used for multiple purposes with the same computation engine, e.g. a
&lt;a href="https://parsnip.tidymodels.org/reference/decision_tree.html" target="_blank" rel="noopener">&lt;code>decision_tree()&lt;/code>&lt;/a> model can be used for either classification or regression with the &lt;code>rpart&lt;/code> engine. This distinction is made in parsnip by
&lt;a href="https://parsnip.tidymodels.org/articles/parsnip_Intro.html#motivation" target="_blank" rel="noopener">specifying the mode of a model&lt;/a>. We have now introduced a new &lt;code>&amp;quot;censored regression&amp;quot;&lt;/code> mode in parsnip for models which can be used for survival analysis. The aforementioned
&lt;a href="https://parsnip.tidymodels.org/reference/decision_tree.html" target="_blank" rel="noopener">&lt;code>decision_tree()&lt;/code>&lt;/a> with the &lt;code>rpart&lt;/code> engine can also be used to fit a survival decision tree:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://github.com/tidymodels/censored'>censored&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/decision_tree.html'>decision_tree&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"rpart"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_args.html'>set_mode&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"censored regression"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; Decision Tree Model Specification (censored regression)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; Computational engine: rpart&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="model-fitting">Model fitting
&lt;a href="#model-fitting">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>For fitting a model, parsnip typically supports a formula and a matrix interface, regardless of the interface of the engine. For censored regression models, we are currently only supporting a formula interface. Most engines already support this type of interface, and a formula allows us to specify the outcome via the standard
&lt;a href="https://rdrr.io/pkg/survival/man/Surv.html" target="_blank" rel="noopener">&lt;code>survival::Surv()&lt;/code>&lt;/a> function, tying together event time and status.&lt;/p>
&lt;p>A formula also let&amp;rsquo;s us specify stratification for a proportional hazards model. For the
&lt;a href="https://rdrr.io/pkg/survival/man/coxph.html" target="_blank" rel="noopener">&lt;code>survival::coxph()&lt;/code>&lt;/a> function, which powers the &lt;code>survival&lt;/code> engine for
&lt;a href="https://parsnip.tidymodels.org/reference/proportional_hazards.html" target="_blank" rel="noopener">&lt;code>proportional_hazards()&lt;/code>&lt;/a>, this may look like&lt;/p>
&lt;div align="center">
&lt;p>&lt;code>Surv(time, event) ~ x + z + strata(s)&lt;/code>&lt;/p>
&lt;/div>
&lt;p>Some other packages can fit this model, let&amp;rsquo;s use the glmnet package. However,
&lt;a href="https://glmnet.stanford.edu/reference/glmnet.html" target="_blank" rel="noopener">&lt;code>glmnet::glmnet()&lt;/code>&lt;/a>, does not have a formula interface and it requires us to specify the strata by stratifying the response via &lt;code>stratifySurv(y, s)&lt;/code>. The response is typically a &lt;code>Surv&lt;/code> object, so you could end up with a formula like this:&lt;/p>
&lt;div align="center">
&lt;p>&lt;code>stratifySurv(Surv(time, event), strata) ~ x + z&lt;/code>&lt;/p>
&lt;/div>
&lt;p>This works for fitting the model but the syntax is rather convoluted on the left-hand side of the formula. The specification of the stratification is inconsistent with the approach taken by the survival package. Additionally, without further modification, prediction fails because variables on the left-hand side of the formula are treated as response variables by parsnip and are not available at prediction time.&lt;/p>
&lt;p>We already need to translate from formula interface to matrix interface for this engine, and we like interfaces to be as consistent as possible here in tidymodels so we decided to go with the specification of stratification through a
&lt;a href="https://rdrr.io/pkg/survival/man/strata.html" target="_blank" rel="noopener">&lt;code>strata()&lt;/code>&lt;/a> term on the right-hand side of the formula for proportional hazards models, regardless of the engine.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://github.com/therneau/survival'>survival&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>bladder_train&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>bladder&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='o'>-&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;span class='o'>]&lt;/span>
&lt;span class='nv'>bladder_test&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>bladder&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span>,&lt;span class='o'>]&lt;/span>
&lt;span class='nv'>cox_spec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/proportional_hazards.html'>proportional_hazards&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>penalty &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.123&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"glmnet"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>f_fit&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/fit.html'>fit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>cox_spec&lt;/span>,
&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/Surv.html'>Surv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>stop&lt;/span>, &lt;span class='nv'>event&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>rx&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>size&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>number&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/strata.html'>strata&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>enum&lt;/span>&lt;span class='o'>)&lt;/span>,
data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>bladder_train&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="prediction">Prediction
&lt;a href="#prediction">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>We have introduced several new prediction types: time to event (&lt;code>time&lt;/code>), linear predictor (&lt;code>linear_pred&lt;/code>), survival probability (&lt;code>survival&lt;/code>), and hazard (&lt;code>hazard&lt;/code>). Some of these types are time-dependent, e.g., the survival probability is the probability to survive beyond a certain time point. In keeping with the tidymodels design principle that each row of the data set you&amp;rsquo;re predicting on should give you exactly one row in the dataset of predictions, &lt;code>predict(type = &amp;quot;survival&amp;quot;, time)&lt;/code> returns a nested tibble if &lt;code>time&lt;/code> contains multiple time points. This can be used to approximate survival curves.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>f_pred&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>f_fit&lt;/span>, new_data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>bladder_test&lt;/span>,
type &lt;span class='o'>=&lt;/span> &lt;span class='s'>"survival"&lt;/span>, time &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/seq.html'>seq&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0&lt;/span>, &lt;span class='m'>20&lt;/span>, &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>f_pred&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>f_pred&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>mutate&lt;/span>&lt;span class='o'>(&lt;/span>id &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/factor.html'>factor&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>unnest&lt;/span>&lt;span class='o'>(&lt;/span>cols &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.pred&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>f_pred&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>ggplot&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>aes&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.time&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.pred_survival&lt;/span>, col &lt;span class='o'>=&lt;/span> &lt;span class='nv'>id&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>geom_step&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/predict-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>Usually, the linear predictor is the linear combination of the predictors, weighted with the coefficients, often denoted as $x^{T} \beta$. This is what is being returned by the &lt;code>glmnet&lt;/code> engine for
&lt;a href="https://parsnip.tidymodels.org/reference/proportional_hazards.html" target="_blank" rel="noopener">&lt;code>proportional_hazards()&lt;/code>&lt;/a> models and by the &lt;code>mboost&lt;/code> engine for
&lt;a href="https://parsnip.tidymodels.org/reference/boost_tree.html" target="_blank" rel="noopener">&lt;code>boost_tree()&lt;/code>&lt;/a> models (e.g., with mode &lt;code>&amp;quot;censored regression&amp;quot;&lt;/code>). For proportional hazards models, the linear predictor describes &lt;em>relative&lt;/em> risk, i.e., it refers to a pair of observations: the observation $x$ and a reference observation of predictors with value 0.&lt;/p>
&lt;p>The survival package implements different choices for the reference observation. As a default it uses the mean predictor, i.e., the observation $x$ is centered with the mean predictor before the usual weighted linear combination is calculated. What makes a useful reference observation is context-dependent and can be more complex than just 0 or the average. In a medical setting with predictors age and drug concentration, one might be interested in the effect relative to mean age but a drug concentration of 0 (the control group). While we think through a more general approach to specifying such a reference observation or baseline hazard, we ensure that all engines in censored use the same approach: a reference observation of 0.&lt;/p>
&lt;p>Let&amp;rsquo;s illustrate the difference in (default) predictions derived from the survival and censored packages and their relationship with the linear predictor. The prodlim package lets us simulate survival data with two predictors &lt;code>X1&lt;/code> (binary) and &lt;code>X2&lt;/code> (numeric) which both have an effect of $exp(1)$ on the hazard of the unobserved event time.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://tidymodels.tidymodels.org'>tidymodels&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://ggplot2.tidyverse.org'>ggplot2&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>prodlim&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/Random.html'>set.seed&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>43500&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'># add 0.5 to X2 (with mean 0) to demonstrate the effect of centering&lt;/span>
&lt;span class='nv'>train_dat&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/prodlim/man/SimSurv.html'>SimSurv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>2000&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;span class='nf'>mutate&lt;/span>&lt;span class='o'>(&lt;/span>X2 &lt;span class='o'>=&lt;/span> &lt;span class='nv'>X2&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='m'>0.5&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>test_dat&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/prodlim/man/SimSurv.html'>SimSurv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>20&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;span class='nf'>mutate&lt;/span>&lt;span class='o'>(&lt;/span>X2 &lt;span class='o'>=&lt;/span> &lt;span class='nv'>X2&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='m'>0.5&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>test_pred&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>test_dat&lt;/span>&lt;span class='o'>[&lt;/span>, &lt;span class='m'>5&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>6&lt;/span>&lt;span class='o'>]&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>We can compare the value of the linear predictor using the true coefficients of 1 with the predictions from the survival package. Plotting them against each other shows the offset of the mean of &lt;code>X2&lt;/code>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>fit_survival&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/coxph.html'>coxph&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/Surv.html'>Surv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>time&lt;/span>, &lt;span class='nv'>status&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>X1&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>X2&lt;/span>, data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>train_dat&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>pred_survival&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>fit_survival&lt;/span>, newdata &lt;span class='o'>=&lt;/span> &lt;span class='nv'>test_pred&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>pred&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>bind_cols&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nv'>test_pred&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;span class='nf'>mutate&lt;/span>&lt;span class='o'>(&lt;/span>linear_pred &lt;span class='o'>=&lt;/span> &lt;span class='nv'>X1&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='m'>1&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>X2&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>,
&lt;span class='nf'>tibble&lt;/span>&lt;span class='o'>(&lt;/span>pred_survival &lt;span class='o'>=&lt;/span> &lt;span class='nv'>pred_survival&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/mean.html'>mean&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>train_dat&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>X2&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; [1] 0.4683339&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>pred&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>linear_pred&lt;/span>, &lt;span class='nv'>pred_survival&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_point.html'>geom_point&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_abline.html'>geom_abline&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>slope &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>, intercept &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/lp-center-plot-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>Measuring performance is a key element of predictive modelling. Our design philosophy in tidymodels is that the calculation of performance metrics should be agnostic to ancillary information such as the model type or the training set. Essentially all you need are the observations and the predictions. For proportional hazards models, the observation and the prediction actually describe different aspects of survival: the observation is the survival time while the prediction describes the risk; the two have an inverse relationship. To help us standardize the assessment modules, we change the sign of the linear predictor. This may be opposite to the sign of predictions obtained using the underlying engine directly. You can opt out of this by setting the &lt;code>increasing&lt;/code> argument of
&lt;a href="https://rdrr.io/r/stats/predict.html" target="_blank" rel="noopener">&lt;code>predict()&lt;/code>&lt;/a> to &lt;code>FALSE&lt;/code>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>fit_censored&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/proportional_hazards.html'>proportional_hazards&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"survival"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/fit.html'>fit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/Surv.html'>Surv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>time&lt;/span>, &lt;span class='nv'>status&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>X1&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>X2&lt;/span>, data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>train_dat&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>pred_censored&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>fit_censored&lt;/span>, type &lt;span class='o'>=&lt;/span> &lt;span class='s'>"linear_pred"&lt;/span>, new_data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>test_pred&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>pred&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>bind_cols&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nv'>pred&lt;/span>,
&lt;span class='nv'>pred_censored&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;span class='nf'>rename&lt;/span>&lt;span class='o'>(&lt;/span>pred_censored &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.pred_linear_pred&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>pred&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>linear_pred&lt;/span>, &lt;span class='nv'>pred_censored&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_point.html'>geom_point&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_abline.html'>geom_abline&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>slope &lt;span class='o'>=&lt;/span> &lt;span class='o'>-&lt;/span>&lt;span class='m'>1&lt;/span>, intercept &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/lp-sign-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;h3 id="model-and-prediction-types-available-in-censored">Model and prediction types available in censored
&lt;a href="#model-and-prediction-types-available-in-censored">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Currently, censored contains the following models, engine, and prediction types with ✔ indicating &amp;ldquo;available&amp;rdquo;, ✖ indicating &amp;ldquo;unavailable&amp;rdquo;, and ◯ indicating &amp;ldquo;to do&amp;rdquo;.&lt;/p>
&lt;div class="highlight">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">model&lt;/th>
&lt;th align="left">engine&lt;/th>
&lt;th align="left">time&lt;/th>
&lt;th align="left">survival&lt;/th>
&lt;th align="left">linear_pred&lt;/th>
&lt;th align="left">raw&lt;/th>
&lt;th align="left">quantile&lt;/th>
&lt;th align="left">hazard&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">bag_tree&lt;/td>
&lt;td align="left">rpart&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">boost_tree&lt;/td>
&lt;td align="left">mboost&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">decision_tree&lt;/td>
&lt;td align="left">party&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">decision_tree&lt;/td>
&lt;td align="left">rpart&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">proportional_hazards&lt;/td>
&lt;td align="left">glmnet&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">proportional_hazards&lt;/td>
&lt;td align="left">survival&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">rand_forest&lt;/td>
&lt;td align="left">party&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">rand_forest&lt;/td>
&lt;td align="left">randomForestSRC&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">rand_forest&lt;/td>
&lt;td align="left">ranger&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">survival_reg&lt;/td>
&lt;td align="left">flexsurv&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">survival_reg&lt;/td>
&lt;td align="left">survival&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h3 id="whats-next">What&amp;rsquo;s next?
&lt;a href="#whats-next">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>We want survival analysis to be a first-class citizen in tidymodels which means having access to preprocessing, resampling, models, metrics, and tuning. The next steps on that path are:&lt;/p>
&lt;ul>
&lt;li>A role for censoring indicator columns and a step &lt;code>step_surv()&lt;/code> in recipes.&lt;/li>
&lt;li>A new ROC metric for survival models in yardstick.&lt;/li>
&lt;li>An adaption of workflows and tune is to follow after that.&lt;/li>
&lt;/ul>
&lt;p>Additionally, we are in the process of figuring out how different types of censoring and time-dependent effects fit into our API.&lt;/p>
&lt;p>We&amp;rsquo;d love to hear from you! Some questions we have include: Would you find this useful? Are there particular models/methods you&amp;rsquo;d like to see? Do you use time-dependent effects? Do you use interactions? Which types of censoring do you use?&lt;/p>
&lt;p>We&amp;rsquo;d greatly appreciate feedback, ideally in the replies to the
&lt;a href="https://community.rstudio.com/t/feedback-on-the-censored-package-for-survival-analysis-with-tidymodels/119674" target="_blank" rel="noopener">corresponding post on RStudio Community&lt;/a>!&lt;/p></description></item><item><title>Modern Text Features in R</title><link>https://www.tidyverse.org/blog/2021/02/modern-text-features/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2021/02/modern-text-features/</guid><description>&lt;p>I&amp;rsquo;m extremely pleased to present the culmination of several years of work spanning the
&lt;a href="https://github.com/r-lib/systemfonts" target="_blank" rel="noopener">systemfonts&lt;/a>,
&lt;a href="https://github.com/r-lib/textshaping" target="_blank" rel="noopener">textshaping&lt;/a>, and
&lt;a href="https://ragg.r-lib.org" target="_blank" rel="noopener">ragg&lt;/a> packages. These releases complete our efforts to create a high-quality, performant raster graphics device that works the same way on every operating system.&lt;/p>
&lt;p>This blog post presents our improvements to ragg&amp;rsquo;s font rendering so that it now &amp;ldquo;just works&amp;rdquo; regardless of what you throw at it. This includes:&lt;/p>
&lt;ol>
&lt;li>Support for non-Latin scripts including Right-to-Left (RtL) scripts&lt;/li>
&lt;li>Support for OpenType features such as ligatures, glyph substitutions, etc.&lt;/li>
&lt;li>Support for color fonts&lt;/li>
&lt;li>Support for font fallback&lt;/li>
&lt;/ol>
&lt;p>All of the above comes in addition to the fact that ragg is able to use all of your installed fonts.&lt;/p>
&lt;p>To access these features all you need to do install the latest version of ragg:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/install.packages.html'>install.packages&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"ragg"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>But I&amp;rsquo;d invite you to read on to learn how it works, how to control it, and what it all means for you as a user.&lt;/p>
&lt;h3 id="using-ragg">Using ragg
&lt;a href="#using-ragg">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>ragg can be used directly in the same way as the built-in devices, such as
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>png()&lt;/code>&lt;/a>,
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>jpeg()&lt;/code>&lt;/a>, and
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>tiff()&lt;/code>&lt;/a>, by opening the device, running some code that renders graphics, and closing it again when done using
&lt;a href="https://rdrr.io/r/grDevices/dev.html" target="_blank" rel="noopener">&lt;code>dev.off()&lt;/code>&lt;/a>. The devices in ragg are prefixed with &lt;code>agg_&lt;/code> and named by the file format they produce (e.g. 
&lt;a href="https://ragg.r-lib.org/reference/agg_png.html" target="_blank" rel="noopener">&lt;code>agg_png()&lt;/code>&lt;/a>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can use ragg with
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a> by passing the device function to the &lt;code>device&lt;/code> argument (e.g. 
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave(device = agg_tiff)&lt;/code>&lt;/a>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can tell RStudio to use ragg in the &lt;em>Plots&lt;/em> pane be setting the backend to &lt;code>AGG&lt;/code> under &lt;em>Global Options &amp;gt; General &amp;gt; Graphics&lt;/em>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ragg can be used when knitting Rmarkdown files by setting &lt;code>dev=&amp;quot;ragg_png&amp;quot;&lt;/code> in the code chunk options.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Read more about using ragg in the previous release blog posts:
&lt;a href="https://www.tidyverse.org/blog/2020/05/updates-to-ragg-and-systemfonts/" target="_blank" rel="noopener">0.2.0&lt;/a> and
&lt;a href="https://www.tidyverse.org/blog/2019/07/ragg-0-1-0/" target="_blank" rel="noopener">0.1.0&lt;/a>&lt;/p>
&lt;h3 id="graphical-tldr">Graphical tl;dr;
&lt;a href="#graphical-tldr">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>With the new version of ragg, you&amp;rsquo;ll be able to render plots such as this and expect it to simply work:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='http://ggplot2.tidyverse.org'>ggplot2&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>city_names&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='s'>"Tokyo (東京)"&lt;/span>,
&lt;span class='s'>"Yokohama (横浜)"&lt;/span>,
&lt;span class='s'>"Osaka (大阪市)"&lt;/span>,
&lt;span class='s'>"Nagoya (名古屋市)"&lt;/span>,
&lt;span class='s'>"Sapporo (札幌市)"&lt;/span>,
&lt;span class='s'>"Kobe (神戸市)"&lt;/span>,
&lt;span class='s'>"Kyoto (京都市)"&lt;/span>,
&lt;span class='s'>"Fukuoka (福岡市)"&lt;/span>,
&lt;span class='s'>"Kawasaki (川崎市)"&lt;/span>,
&lt;span class='s'>"Saitama (さいたま市)"&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>main_cities&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/data.frame.html'>data.frame&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
name &lt;span class='o'>=&lt;/span> &lt;span class='nv'>city_names&lt;/span>,
lat &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>35.690&lt;/span>, &lt;span class='m'>35.444&lt;/span>, &lt;span class='m'>34.694&lt;/span>, &lt;span class='m'>35.183&lt;/span>, &lt;span class='m'>43.067&lt;/span>,
&lt;span class='m'>34.69&lt;/span>, &lt;span class='m'>35.012&lt;/span>, &lt;span class='m'>33.583&lt;/span>, &lt;span class='m'>35.517&lt;/span>, &lt;span class='m'>35.861&lt;/span>&lt;span class='o'>)&lt;/span>,
lon &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>139.692&lt;/span>, &lt;span class='m'>139.638&lt;/span>, &lt;span class='m'>135.502&lt;/span>, &lt;span class='m'>136.9&lt;/span>, &lt;span class='m'>141.35&lt;/span>,
&lt;span class='m'>135.196&lt;/span>, &lt;span class='m'>135.768&lt;/span>, &lt;span class='m'>130.4&lt;/span>, &lt;span class='m'>139.7&lt;/span>, &lt;span class='m'>139.646&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>japan&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>rnaturalearth&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/rnaturalearth/man/ne_countries.html'>ne_countries&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
scale &lt;span class='o'>=&lt;/span> &lt;span class='m'>10&lt;/span>,
country &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Japan"&lt;/span>,
returnclass &lt;span class='o'>=&lt;/span> &lt;span class='s'>"sf"&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggsf.html'>geom_sf&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>japan&lt;/span>,
fill &lt;span class='o'>=&lt;/span> &lt;span class='s'>"forestgreen"&lt;/span>,
colour &lt;span class='o'>=&lt;/span> &lt;span class='s'>"grey10"&lt;/span>,
size &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.2&lt;/span>
&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>ggrepel&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/ggrepel/man/geom_text_repel.html'>geom_label_repel&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>lon&lt;/span>, &lt;span class='nv'>lat&lt;/span>, label &lt;span class='o'>=&lt;/span> &lt;span class='nv'>name&lt;/span>&lt;span class='o'>)&lt;/span>,
data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>main_cities&lt;/span>,
fill &lt;span class='o'>=&lt;/span> &lt;span class='s'>"#FFFFFF88"&lt;/span>,
box.padding &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/grid/unit.html'>unit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>5&lt;/span>, &lt;span class='s'>"mm"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_point.html'>geom_point&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>lon&lt;/span>, &lt;span class='nv'>lat&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>main_cities&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/labs.html'>ggtitle&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='s'>"Location of largest cities in Japan (日本) 🇯🇵"&lt;/span>
&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggtheme.html'>theme_void&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/theme.html'>theme&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>panel.background &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/element.html'>element_rect&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"steelblue"&lt;/span>&lt;span class='o'>)&lt;/span>,
plot.title &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/element.html'>element_text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>margin &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/element.html'>margin&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>5&lt;/span>, &lt;span class='m'>0&lt;/span>, &lt;span class='m'>5&lt;/span>, &lt;span class='m'>0&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-2-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>Note the effortless mix of text in English and Japanese, along with emoji in the title. If this has piqued your interest, read on!&lt;/p>
&lt;h2 id="advanced-script-support">Advanced script support
&lt;a href="#advanced-script-support">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>English, the lingua franca of programming, has tended to dominate everything related to text within programming, ranging from encoding to rendering. This has made the Latin script, used in most of the Western world, the best (or often only) supported script in many text-rendering pipelines. This has been true in the R world where the built-in graphic devices have struggled to display other scripts (with the exception of Cairo devices on Linux). It is about time (overdue, really!) that the graphics system in R becomes more inclusive of which languages can be used. It is thus with great joy that I announce that ragg finally supports all scripts.&lt;/p>
&lt;h3 id="right-to-left-scripts">Right-to-Left scripts
&lt;a href="#right-to-left-scripts">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>To start off we will look at a sample of different scripts (Arabic, Hebrew, and Sindhi) that pose a challenge because they are written from right to left:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>arabic_text&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='s'>"هذا مكتوب باللغة العربية"&lt;/span>
&lt;span class='nv'>hebrew_text&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='s'>"זה כתוב בעברית"&lt;/span>
&lt;span class='nv'>sindhi_text&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='s'>"هي سنڌيءَ ۾ لکيو ويو آهي"&lt;/span>
&lt;span class='nv'>p&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_text.html'>geom_text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='m'>3&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>1&lt;/span>, label &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>arabic_text&lt;/span>, &lt;span class='nv'>hebrew_text&lt;/span>, &lt;span class='nv'>sindhi_text&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>,
family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Arial"&lt;/span>
&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/expand_limits.html'>expand_limits&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0&lt;/span>, &lt;span class='m'>4&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>preview_devices&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>p&lt;/span>, &lt;span class='s'>"rtl_example"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
&lt;p>&lt;img src="figs/rtl_example_macOS_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/rtl_example_Windows_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/rtl_example_Linux_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/rtl_example_macOS_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/rtl_example_Windows_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/rtl_example_Linux_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/rtl_example_macOS_quartz.png" width="33%" style="display: inline;">&lt;img src="figs/rtl_example_Windows_windows.png" width="33%" style="display: inline;">&lt;/p>
&lt;/div>
&lt;p>If you&amp;rsquo;re not familiar with the languages above it can be hard to see what is right and what is wrong. You may, however, look at how the text in the code is rendered in the browser and compare that to the device rendering. If you do that, you can see that the Hebrew script is rendered in the wrong direction for all the non-ragg devices (except Cairo on Linux). For the Arabic and Sindhi it&amp;rsquo;s even harder to see what&amp;rsquo;s wrong because the text looks fundamentally different. That&amp;rsquo;s because both Arabic and Sindhi rely extensively on text substitution rules and ligatures; the way a letter is written depends critically on what letters it is next to. Still, by comparing to the browser rendering you can see that the same devices failing on the Hebrew script fail here as well.&lt;/p>
&lt;p>The Cairo device on Linux handles this task well, as we have noted above. How come this works, but only on one OS? Cairo is built in to most Linux distributions and is designed to work with Pango, the library that linux uses to layout text. R&amp;rsquo;s Cairo graphics device bundles Cairo on all platforms, but doesn&amp;rsquo;t include Pango, due to the challenges of building it on other operating systems.&lt;/p>
&lt;h3 id="bidirectional-text">Bidirectional text
&lt;a href="#bidirectional-text">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>What happens if you combine right-to-left and left-to-right text in the same sentence? The string needs to be split into pieces that each consist of text running in one direction, laid out individually, and then combined back together&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>bidi_text&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='s'>"The Hebrew (עִברִית) script\nis right-to-left"&lt;/span>
&lt;span class='nv'>p&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_text.html'>geom_text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, label &lt;span class='o'>=&lt;/span> &lt;span class='nv'>bidi_text&lt;/span>&lt;span class='o'>)&lt;/span>,
family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Arial"&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>preview_devices&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>p&lt;/span>, &lt;span class='s'>"bidi_example"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
&lt;p>&lt;img src="figs/bidi_example_macOS_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/bidi_example_Windows_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/bidi_example_Linux_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/bidi_example_macOS_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/bidi_example_Windows_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/bidi_example_Linux_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/bidi_example_macOS_quartz.png" width="33%" style="display: inline;">&lt;img src="figs/bidi_example_Windows_windows.png" width="33%" style="display: inline;">&lt;/p>
&lt;/div>
&lt;p>Given that most devices struggle with RtL scripts, it&amp;rsquo;s not surprising that they also fail when mixed. Again the exception is ragg, and Cairo on Linux.&lt;/p>
&lt;h2 id="advanced-font-feature-support">Advanced font feature support
&lt;a href="#advanced-font-feature-support">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A part of supporting some of the non-Latin scripts described above is to have support for ligatures (substituting multiple glyphs with a single new glyph). While ligatures are a requirement for the correct rendering of some scripts it is also an optional feature of fonts in general in order to support different text variations. More generally, the OpenType font format describes a long range of features, many optional, that defines specific glyph substitutions (both one-to-one and many-to-one) or position adjustments that can be turned on or off and will affect the look of the final rendered text. Some of these features are turned on automatically for specific scripts (e.g. required ligatures for Arabic), while others are left for the user to turn on at their discretion (e.g. tabular numerics). As part of the work to add support for non-Latin scripts the infrastructure to support all OpenType features was built. This, of course, requires that the font in use supports the requested feature.&lt;/p>
&lt;p>Some fonts, like the popular
&lt;a href="https://github.com/tonsky/FiraCode" target="_blank" rel="noopener">Fira Code&lt;/a> programming font, use ligatures as a main part of their appeal. These now work as expected with ragg:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>code&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='s'>"x &amp;lt;- y != z"&lt;/span>
&lt;span class='nv'>logo&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='s'>"twitter"&lt;/span>
&lt;span class='nv'>p&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_text.html'>geom_text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='m'>2&lt;/span>, label &lt;span class='o'>=&lt;/span> &lt;span class='nv'>code&lt;/span>&lt;span class='o'>)&lt;/span>,
family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Fira Code"&lt;/span>
&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_text.html'>geom_text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>, label &lt;span class='o'>=&lt;/span> &lt;span class='nv'>logo&lt;/span>&lt;span class='o'>)&lt;/span>,
family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Font Awesome 5 brands"&lt;/span>
&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/expand_limits.html'>expand_limits&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0&lt;/span>, &lt;span class='m'>3&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>preview_devices&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>p&lt;/span>, &lt;span class='s'>"def_features"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
&lt;p>&lt;img src="figs/def_features_macOS_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/def_features_Windows_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/def_features_Linux_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/def_features_macOS_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/def_features_Windows_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/def_features_Linux_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/def_features_macOS_quartz.png" width="33%" style="display: inline;">&lt;img src="figs/def_features_Windows_windows.png" width="33%" style="display: inline;">&lt;/p>
&lt;/div>
&lt;p>But what about non-default features? The capabilities of the graphics engine in R presents a problem here. There is very little information that the user is able to send along with the text to be plotted, apart from location and font (&lt;strong>bold&lt;/strong> and &lt;em>italic&lt;/em> on/off is the extent of it). So, having a device with support for advanced OpenType features in and of itself is nearly useless as there is no way to specify in your plot code that you want to turn a feature on or off.&lt;/p>
&lt;p>To work around this limitation, systemfonts now allows you to register font variants, providing a custom name that you can use to refer to a font with certain features enabled:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://github.com/r-lib/systemfonts'>systemfonts&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/systemfonts/man/register_variant.html'>register_variant&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
name &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Montserrat Extreme"&lt;/span>,
family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Montserrat"&lt;/span>,
weight &lt;span class='o'>=&lt;/span> &lt;span class='s'>"semibold"&lt;/span>,
features &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/systemfonts/man/font_feature.html'>font_feature&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>ligatures &lt;span class='o'>=&lt;/span> &lt;span class='s'>"discretionary"&lt;/span>, letters &lt;span class='o'>=&lt;/span> &lt;span class='s'>"stylistic"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The code above creates a new font based on Montserrat using a semibold weight and turning on standard ligatures and stylistic letter substitution. Now, in your text plotting code all you have to do is specify &lt;code>&amp;quot;Montserrat Extreme&amp;quot;&lt;/code> as the font family and the features and weights will be used. This only works with ragg, because none of the other devices are build on top of systemfonts, so don&amp;rsquo;t know how to access the registered font:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_text.html'>geom_text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>, label &lt;span class='o'>=&lt;/span> &lt;span class='s'>"This text should definitely differ"&lt;/span>&lt;span class='o'>)&lt;/span>,
family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Montserrat"&lt;/span>,
size &lt;span class='o'>=&lt;/span> &lt;span class='m'>6&lt;/span>
&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_text.html'>geom_text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, label &lt;span class='o'>=&lt;/span> &lt;span class='s'>"This text should definitely differ"&lt;/span>&lt;span class='o'>)&lt;/span>,
family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Montserrat Extreme"&lt;/span>,
size &lt;span class='o'>=&lt;/span> &lt;span class='m'>6&lt;/span>
&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/expand_limits.html'>expand_limits&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>-&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-11-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>We can see that by using this font registration we not only gain access to weights other than normal and bold, but also to glyph substitutions such as the &amp;ldquo;Th&amp;rdquo; ligature, and the stylistic variations seen with the &amp;ldquo;t&amp;rdquo;, &amp;ldquo;f&amp;rdquo;, &amp;ldquo;l&amp;rdquo;, and &amp;ldquo;e&amp;rdquo; glyphs.&lt;/p>
&lt;p>While a lot of the optional OpenType features are mainly of interest to achieve a specific stylistic look of the rendered text, some have more importance for data visualizations, such as those related to how numbers are displayed. It is both possible to force even-width numbers, as well as correct display of fractional numbers (using &lt;code>font_feature(numbers = c(&amp;quot;tabular&amp;quot;, &amp;quot;fractions&amp;quot;)&lt;/code>) using OpenType. as long as the font supports it. So this is definitely something to look into when you want to add that final polish to your visualization.&lt;/p>
&lt;h2 id="color-fonts">Color fonts
&lt;a href="#color-fonts">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A recent (in font technology terms) development is the availability of color fonts, i.e. fonts where the glyphs have designated colors. This development is largely driven by the ubiquity of emojis in modern text, and while it may seem that emojis have been around forever, it is recent enough that the world has yet to converge to a single standard for color fonts. The system emoji font on macOS, Windows, and Linux all uses different font technologies for storing the color glyphs, ranging from storing a single bitmap, to storing each glyph as an SVG. This, unsurprisingly, complicates things. To add insult to injury, emojis often get rendered slightly larger than the surrounding text and with a slightly lowered baseline in a very OS-specific way (this does not apply to all color fonts; only emojis).&lt;/p>
&lt;p>Why am I telling you this? Well, honestly it is mostly to make you appreciate the labor that went into the fact that color fonts (and by extension, emojis) now just work:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>emojis&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='s'>"👩🏾‍💻🔥📊"&lt;/span>
&lt;span class='nv'>p&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_text.html'>geom_label&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, label &lt;span class='o'>=&lt;/span> &lt;span class='nv'>emojis&lt;/span>&lt;span class='o'>)&lt;/span>,
family &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Apple Color Emoji"&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>preview_devices&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>p&lt;/span>, &lt;span class='s'>"emoji"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
&lt;p>&lt;img src="figs/emoji_macOS_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/emoji_Windows_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/emoji_Linux_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/emoji_macOS_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/emoji_Windows_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/emoji_Linux_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/emoji_macOS_quartz.png" width="33%" style="display: inline;">&lt;img src="figs/emoji_Windows_windows.png" width="33%" style="display: inline;">&lt;/p>
&lt;/div>
&lt;p>As one can see, the failures range from not being able to render anything, to rendering in monochrome. Further, it appears as if the devices have trouble figuring out the dimensions of the glyphs. One additional wrinkle is that while Cairo on macOS is capable of rendering in monochrome, it fails to get the correct emoji. This is because emojis rely heavily on ligatures, and the &amp;ldquo;dark-skinned woman at a computer&amp;rdquo; emoji is actually a ligature of the &amp;ldquo;woman&amp;rdquo;, &amp;ldquo;dark skin&amp;rdquo;, and &amp;ldquo;computer&amp;rdquo; emojis.&lt;/p>
&lt;h2 id="font-fallback">Font fallback
&lt;a href="#font-fallback">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>In all of the above examples we have been very mindful in setting the font-face to a font that contains all the glyphs we need. This is not always practical, especially when you want to mix emojis and regular text. It is also an absolute requirement when mixing Latin and CJK (Chinese, Japanese, and Korean) text, as it is infeasible to include all CJK glyphs in a single font. However, we are used to things just working at the system level. No matter which font we choose it seems that a glyph is always displayed in e.g. browsers and text editors. This is because the OS is employing &lt;strong>font fallback&lt;/strong>, which is the act of figuring out an alternative font to use when a glyph is not present in the chosen font. Wouldn&amp;rsquo;t it be great if we could have that in a graphic device? Well, now we do!&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>fallback_text&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='s'>"This is English, この文は日本語です 🚀"&lt;/span>
&lt;span class='nv'>p&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_text.html'>geom_text&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>, label &lt;span class='o'>=&lt;/span> &lt;span class='nv'>fallback_text&lt;/span>&lt;span class='o'>)&lt;/span>, size &lt;span class='o'>=&lt;/span> &lt;span class='m'>2.5&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>preview_devices&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>p&lt;/span>, &lt;span class='s'>"fallback"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
&lt;p>&lt;img src="figs/fallback_macOS_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/fallback_Windows_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/fallback_Linux_ragg.png" width="33%" style="display: inline;">&lt;img src="figs/fallback_macOS_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/fallback_Windows_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/fallback_Linux_cairo.png" width="33%" style="display: inline;">&lt;img src="figs/fallback_macOS_quartz.png" width="33%" style="display: inline;">&lt;img src="figs/fallback_Windows_windows.png" width="33%" style="display: inline;">&lt;/p>
&lt;/div>
&lt;p>The bottom line is that with ragg, you now don&amp;rsquo;t need to think about missing glyphs in any font you choose (unless you request a character that is not covered by any font on your system).&lt;/p>
&lt;h2 id="wheres-the-catch">Where&amp;rsquo;s the catch
&lt;a href="#wheres-the-catch">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Most of what we have shown today simply works automagically and may (depending on your prior frustrations with script support in R) seem too good to be true. Is there any catch? Not really. systemfonts, textshaping, and ragg try to be as smart as possible about text shaping and only take additional action if required. Further everything is heavily cached, so the impact on performance is negligible.&lt;/p>
&lt;p>There is something missing though, which we haven&amp;rsquo;t touched upon. Not all scripts are LtR or RtL. A few, especially Asian scripts, are top-to-bottom. Top-to-bottom scripts are sadly not yet supported. This is not due to any limitation in the underlying shaping technology, but due to limitations in the R graphics engine, which assumes horizontal text in key places of the API. This means that, until the graphics engine is updated, it is outside the grasp of graphic devices to support vertical text. Hopefully, this is an area that will improve in the future.&lt;/p>
&lt;h2 id="wrapping-up">Wrapping up
&lt;a href="#wrapping-up">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>I hope you&amp;rsquo;ll appreciate the new features described here. I&amp;rsquo;d like to thank everyone who have helped validate the text rendering on Twitter. A special thanks goes out to Behdad Esfahbod (&lt;a href="http://behdad.org" class="uri">&lt;a href="http://behdad.org">http://behdad.org&lt;/a>&lt;/a>) for his work on HarfBuzz, Fribidi, and almost everything else underlying modern font rendering. He has been especially gracious in his help and support.&lt;/p></description></item><item><title>Multi Process Task Queue in 100 Lines of R Code</title><link>https://www.tidyverse.org/blog/2019/09/callr-task-q/</link><pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2019/09/callr-task-q/</guid><description>
&lt;STYLE type='text/css' scoped>
PRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};
&lt;/STYLE>
&lt;div id="introduction" class="section level2">
&lt;h2>Introduction&lt;/h2>
&lt;p>This post is a demo of &lt;code>callr::r_session&lt;/code>, a persistent R session you can
use to run R code asynchronously. I set out to build a task queue, which
runs tasks in subprocesses, concurrently, in a mere 100 lines of R code.&lt;/p>
&lt;p>Here is a short teaser for how the queue will work. &lt;code>task_q$new()&lt;/code> creates
a new R6 object, which represents the queue. Its &lt;code>push()&lt;/code> method adds a
task, which is a function and its arguments, similar to &lt;code>callr::r()&lt;/code>.
The &lt;code>pop()&lt;/code> method gets the results of the first task that has finished.
&lt;code>pop()&lt;/code> has a timeout argument, which lets you wait for a task to finish,
if all pushed tasks are still running. It returns &lt;code>NULL&lt;/code> if no task has
finished before the timeout was over. The timeout can be &lt;code>0&lt;/code> or &lt;code>Inf&lt;/code>,
meaning no wait at all, or wait indefinitely. The default timeout is &lt;code>0&lt;/code>.&lt;/p>
&lt;pre class="r">&lt;code>q &amp;lt;- task_q$new()
q$push(function() { Sys.getpid() })
q$push(function() { Sys.sleep(.5); Sys.getpid() })
q$pop()
#&amp;gt; NULL&lt;/code>&lt;/pre>
&lt;p>This &lt;code>pop()&lt;/code> call returned &lt;code>NULL&lt;/code>, as none of the tasks are done yet.
Even though running &lt;code>Sys.getpid()&lt;/code> is fast, the worker processes also need
200-500 ms time start up, when the queue is created. If you are willing to
wait a bit, at least one task should be done in less than half a second
(500 ms), but usually not the second one yet:&lt;/p>
&lt;pre class="r">&lt;code>q$pop(500)$result
#&amp;gt; [1] 18383
q$pop()
#&amp;gt; NULL&lt;/code>&lt;/pre>
&lt;p>The &lt;code>poll()&lt;/code> method checks for finished tasks without removing their
results from the queue. It also has a timeout parameter, which works the
same way as &lt;code>pop()&lt;/code>’s timeout. &lt;code>poll()&lt;/code> returns the identifiers of all
tasks that are done.&lt;/p>
&lt;pre class="r">&lt;code>q$poll(Inf)
#&amp;gt; [1] &amp;quot;.2&amp;quot;
q$pop()$result
#&amp;gt; [1] 18385&lt;/code>&lt;/pre>
&lt;p>If the queue is empty, i.e. no tasks are running and no tasks are waiting,
then &lt;code>pop()&lt;/code> always returns &lt;code>NULL&lt;/code>, immediately, because there is nothing
to wait for:&lt;/p>
&lt;pre class="r">&lt;code>q$pop()
#&amp;gt; NULL&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="api-design" class="section level2">
&lt;h2>API design&lt;/h2>
&lt;p>The task queue will be an R6 class, with &lt;code>push()&lt;/code>, &lt;code>pop()&lt;/code>, &lt;code>poll()&lt;/code>
methods like above, and some other query methods:&lt;/p>
&lt;pre class="r">&lt;code>task_q &amp;lt;- R6::R6Class(
&amp;quot;task_q&amp;quot;,
public = list(
initialize = function(num_workers = 4L) { },
get_num_waiting = function() { },
get_num_running = function() { },
get_num_done = function() { },
is_idle = function() { },
list_tasks = function() { },
push = function(fun, args = list(), id = NULL) { },
poll = function(timeout = 0) { },
pop = function(timeout = 0) { }
)
)&lt;/code>&lt;/pre>
&lt;p>&lt;code>initialize()&lt;/code> has an argument to set the number of workers. The size of
the worker pool remains fixed for the lifetime of the queue.&lt;/p>
&lt;p>The &lt;code>get_num_*()&lt;/code> methods return the number of waiting, running and
completed tasks. &lt;code>get_num_done()&lt;/code> includes tasks that haven’t been
&lt;code>pop()&lt;/code>-d yet. Once a task is &lt;code>pop()&lt;/code>-d, it is removed completely from the
queue.&lt;/p>
&lt;p>&lt;code>is_idle()&lt;/code> returns &lt;code>TRUE&lt;/code> if the queue does not have any tasks (in any
state). &lt;code>list_tasks()&lt;/code> returns a data frame (tibble) with data about the
tasks. This is especially useful for debugging.&lt;/p>
&lt;p>&lt;code>push()&lt;/code> adds a task to the queue. &lt;code>poll()&lt;/code> returns the ids of all tasks
that are done. &lt;code>pop()&lt;/code> returns the result of the oldest task that is done.&lt;/p>
&lt;/div>
&lt;div id="data-structure" class="section level2">
&lt;h2>Data structure&lt;/h2>
&lt;p>Before writing the methods, I’ll design the data structure that will
store all information about the tasks and the worker processes. The
standard data structure for a list of records is a data frame in R.&lt;/p>
&lt;p>A logical choice would be to have two data frames, one for the
tasks, and another one for the workers. Then we could assign unique
identifiers to both tasks and processes and cross-reference them in the
two data frames, to mark which task a worker is running, and which worker
a task is running on.&lt;/p>
&lt;p>I’ll go a step further here, and store both the tasks and the workers
&lt;em>in the same&lt;/em> data frame. This will simplify the implementation
considerably. The queue will create a dummy &lt;em>idle&lt;/em> task for each worker.
Each worker will (pretend to) run its dummy task if there are no other,
real tasks waiting in the queue. So the task list will always contain at
least as many tasks as the number of workers in the queue.&lt;/p>
&lt;p>An example for a task data frame:&lt;/p>
&lt;pre class="r">&lt;code>q$list_tasks()
#&amp;gt; # A tibble: 9 x 7
#&amp;gt; id idle state fun args worker result
#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;list&amp;gt; &amp;lt;list&amp;gt; &amp;lt;list&amp;gt; &amp;lt;list&amp;gt;
#&amp;gt; 1 .11 FALSE running &amp;lt;fn&amp;gt; &amp;lt;list [1]&amp;gt; &amp;lt;r_sessin&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 2 .12 FALSE running &amp;lt;fn&amp;gt; &amp;lt;list [1]&amp;gt; &amp;lt;r_sessin&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 3 .13 FALSE running &amp;lt;fn&amp;gt; &amp;lt;list [1]&amp;gt; &amp;lt;r_sessin&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 4 .14 FALSE running &amp;lt;fn&amp;gt; &amp;lt;list [1]&amp;gt; &amp;lt;r_sessin&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 5 .15 FALSE waiting &amp;lt;fn&amp;gt; &amp;lt;list [1]&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 6 .idle-1 TRUE waiting &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 7 .idle-2 TRUE waiting &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 8 .idle-3 TRUE waiting &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt;
#&amp;gt; 9 .idle-4 TRUE waiting &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt; &amp;lt;NULL&amp;gt;&lt;/code>&lt;/pre>
&lt;p>The columns are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>id&lt;/code>: a character id, which can be user-supplied or auto-assigned (if the
user did not supply it). This is useful to identify tasks.&lt;/li>
&lt;li>&lt;code>idle&lt;/code>: a logical flag, whether this is a dummy idle task or not.&lt;/li>
&lt;li>&lt;code>state&lt;/code>: current state of the task. More about this shortly.&lt;/li>
&lt;li>&lt;code>fun&lt;/code>: the function the task needs to run. This is a list column.&lt;/li>
&lt;li>&lt;code>args&lt;/code>: arguments to pass to the function. This is a list itself,
so the column is a list column.&lt;/li>
&lt;li>&lt;code>worker&lt;/code>: the &lt;code>callr::r_session&lt;/code> object, the R session that is running
the task, or &lt;code>NULL&lt;/code> if the task is not running.&lt;/li>
&lt;li>&lt;code>result&lt;/code>: another list column, the result of the run, if the task is
already done, &lt;code>NULL&lt;/code> otherwise.&lt;/li>
&lt;/ul>
&lt;p>The possible task states are: &lt;em>waiting&lt;/em>, &lt;em>running&lt;/em>, &lt;em>ready&lt;/em> and &lt;em>done&lt;/em>.
The first two are not very surprising. The distinction between the
last two is somewhat technical. A task is &lt;em>ready&lt;/em> if the background R
session has finished running it. The queue hasn’t read out its result yet,
and the R session is still assigned to it. (I.e. the task’s &lt;code>worker&lt;/code> column
is not &lt;code>NULL&lt;/code>.) A task is &lt;em>done&lt;/em> if the queue has already read out the
result of the function call, and has reassigned the R session to another
task, so its &lt;code>worker&lt;/code> column is &lt;code>NULL&lt;/code>.&lt;/p>
&lt;p>Tasks that are &lt;em>running&lt;/em> and &lt;em>ready&lt;/em> always have an R session assigned to
them. Since all R sessions are always assigned to tasks (dummy idle tasks,
if there is nothing else), this means the that the sum of the &lt;em>running&lt;/em>
and &lt;em>ready&lt;/em> tasks always equals the number of workers.&lt;/p>
&lt;p>The idle tasks are somewhat special, because they are never &lt;em>done&lt;/em>. If
an idle task is &lt;em>ready&lt;/em> and its worker is reassigned, it will be &lt;em>waiting&lt;/em>
again. They are also almost never in the &lt;em>running&lt;/em> state. When the queue
assigns a worker to an idle task, the task will immediately go into the
&lt;em>ready&lt;/em> state, since the queue is immediately allowed to re-assign the
worker, should a real task be &lt;em>waiting&lt;/em>.&lt;/p>
&lt;p>However, when a worker is starting up, its idle task is &lt;em>running&lt;/em>, until
their background R process has started up. After this initial &lt;em>running&lt;/em>
state the idle tasks are always either &lt;em>waiting&lt;/em> or &lt;em>ready&lt;/em>.&lt;/p>
&lt;/div>
&lt;div id="implementation" class="section level2">
&lt;h2>Implementation&lt;/h2>
&lt;p>I am ready to start the implementation now. I’ll focus on the individual
methods here, and show the complete code of the R6 class at the end.
Let’s start with the internal data. &lt;code>tasks&lt;/code> contains the task data frame,
&lt;code>initialize()&lt;/code> will create it. &lt;code>next_id&lt;/code> and &lt;code>get_next_id&lt;/code> will provide
us unique task ids. I prefix these with a dot, to increase the probability
that they won’t interfere with user supplied task ids. So they’ll
be &lt;code>&amp;quot;.1&amp;quot;&lt;/code>, &lt;code>&amp;quot;.2&amp;quot;&lt;/code>, etc.&lt;/p>
&lt;pre class="r">&lt;code> private = list(
tasks = NULL,
next_id = 1L,
get_next_id = function() {
id &amp;lt;- private$next_id
private$next_id &amp;lt;- id + 1L
paste0(&amp;quot;.&amp;quot;, id)
}
)&lt;/code>&lt;/pre>
&lt;p>The &lt;code>initialize()&lt;/code> method will just defer the work to a private method.&lt;/p>
&lt;pre class="r">&lt;code> initialize = function(num_workers = 4L) {
private$start_workers(num_workers)
invisible(self)
}&lt;/code>&lt;/pre>
&lt;p>The private &lt;code>start_workers()&lt;/code> method that actually starts the
workers and creates the &lt;code>tasks&lt;/code> data frame:&lt;/p>
&lt;pre class="r">&lt;code> start_workers = function(num_workers) {
private$tasks &amp;lt;- tibble::tibble(
id = character(), idle = logical(),
state = c(&amp;quot;waiting&amp;quot;, &amp;quot;running&amp;quot;, &amp;quot;ready&amp;quot;, &amp;quot;done&amp;quot;)[0],
fun = list(), args = list(), worker = list(), result = list())
for (i in seq_len(num_workers)) {
rs &amp;lt;- callr::r_session$new(wait = FALSE)
private$tasks &amp;lt;- tibble::add_row(private$tasks,
id = paste0(&amp;quot;.idle-&amp;quot;, i), idle = TRUE, state = &amp;quot;running&amp;quot;,
fun = list(NULL), args = list(NULL), worker = list(rs),
result = list(NULL))
}
}&lt;/code>&lt;/pre>
&lt;p>The starting values of the empty task data frame are mostly straightforward.
If you are wondering about the indexing with zero here, it is a simple
way to list all possible task states in the code, in one place, as a note
for the code reader.&lt;/p>
&lt;p>&lt;code>callr::r_session$new()&lt;/code> starts a background R process. The &lt;code>wait = FALSE&lt;/code>
argument tells callr &lt;em>not&lt;/em> to wait until the process is ready to run R
code. This way the R processes start up in parallel, which is worth the
trouble of making our dummy tasks a bit more complicated. The idle tasks
are named &lt;code>.idle-*&lt;/code>. After initialization, the workers are started, and
the &lt;em>running&lt;/em> idle tasks are added to the data frame.&lt;/p>
&lt;p>The query methods are next:&lt;/p>
&lt;pre class="r">&lt;code> list_tasks = function() private$tasks,
get_num_waiting = function()
sum(!private$tasks$idle &amp;amp; private$tasks$state == &amp;quot;waiting&amp;quot;),
get_num_running = function() sum(private$tasks$state == &amp;quot;running&amp;quot;),
get_num_done = function() sum(private$tasks$state == &amp;quot;done&amp;quot;),
is_idle = function() sum(!private$tasks$idle) == 0
&lt;/code>&lt;/pre>
&lt;p>&lt;code>list_tasks()&lt;/code> will just return the task data frame, for simplicity.
If not all data is needed, the &lt;code>get_num_*()&lt;/code> functions are simpler.
For the first two, we need to exclude the dummy idle tasks, because they
can be in the &lt;em>waiting&lt;/em> and &lt;em>running&lt;/em> state as well. They cannot be in the
&lt;em>done&lt;/em> state.&lt;/p>
&lt;p>We still need to write the &lt;code>push()&lt;/code>, &lt;code>pop()&lt;/code> and &lt;code>poll()&lt;/code> public methods.
As the reader might suspect, these are more involved. Let’s start with
&lt;code>push()&lt;/code>.&lt;/p>
&lt;pre class="r">&lt;code> push = function(fun, args = list(), id = NULL) {
if (is.null(id)) id &amp;lt;- private$get_next_id()
if (id %in% private$tasks$id) stop(&amp;quot;Duplicate task id&amp;quot;)
before &amp;lt;- which(private$tasks$idle)[1]
private$tasks &amp;lt;- tibble::add_row(private$tasks, .before = before,
id = id, idle = FALSE, state = &amp;quot;waiting&amp;quot;, fun = list(fun),
args = list(args), worker = list(NULL), result = list(NULL))
private$schedule()
invisible(id)
}&lt;/code>&lt;/pre>
&lt;p>The queue needs to run the tasks in the same order as they were added.
The data frame will keep the correct order, with the additional
tweak that the idle tasks are always at the end. Indeed, these should only
run if there is no other task waiting. So &lt;code>push()&lt;/code> adds the new task right
before the idle tasks.&lt;/p>
&lt;p>The &lt;code>schedule()&lt;/code> private method is the core of the queue. It starts the
tasks on the selected background R workers, and it also reads out the
results after they are done. I.e. it performs the &lt;em>waiting&lt;/em> to &lt;em>running&lt;/em> and
&lt;em>ready&lt;/em> to &lt;em>done&lt;/em> task state transitions. We will show it later.&lt;/p>
&lt;p>&lt;code>push()&lt;/code> returns the id of the newly added task, this can be helpful
to follow the task and match it to the results of a &lt;code>pop()&lt;/code> call.&lt;/p>
&lt;p>&lt;code>pop()&lt;/code> uses &lt;code>poll()&lt;/code> to get a list of tasks that are &lt;em>done&lt;/em>, and returns
the result of the oldest one, which is always the first, thanks to the
ordering of the task data frame.&lt;/p>
&lt;pre class="r">&lt;code> pop = function(timeout = 0) {
if (is.na(done &amp;lt;- self$poll(timeout)[1])) return(NULL)
row &amp;lt;- match(done, private$tasks$id)
result &amp;lt;- private$tasks$result[[row]]
private$tasks &amp;lt;- private$tasks[-row, ]
c(result, list(task_id = done))
}&lt;/code>&lt;/pre>
&lt;p>If no task is &lt;em>done&lt;/em>, then it returns &lt;code>NULL&lt;/code>. The returned task is removed
from the task data frame, and from the queue in general, for good. &lt;code>pop()&lt;/code>
adds the id of the task to the returned result as &lt;code>task_id&lt;/code>, for easier
matching of tasks to results.&lt;/p>
&lt;p>&lt;code>poll()&lt;/code> is the only method that checks on the running workers. This is
important to remember, and unfortunately easy to forget. If the user does
not call &lt;code>poll()&lt;/code>, either directly or via &lt;code>pop()&lt;/code>, the state of a &lt;em>running&lt;/em>
task cannot change, even if the background R session itself has finished.
In other words, one cannot check the status of the tasks by listing
the task data frame with &lt;code>list_tasks()&lt;/code> periodically. This will never
change if &lt;code>poll()&lt;/code> is not called.&lt;/p>
&lt;p>I start with an initial version of &lt;code>poll()&lt;/code>, which will need changes later,
but this is hopefully easier to understand first:&lt;/p>
&lt;pre class="r">&lt;code> poll = function(timeout = 0) {
as_ms &amp;lt;- function(x) if (x == Inf) -1L else as.integer(x)
topoll &amp;lt;- which(private$tasks$state == &amp;quot;running&amp;quot;)
conns &amp;lt;- lapply(
private$tasks$worker[topoll],
function(x) x$get_poll_connection())
pr &amp;lt;- processx::poll(conns, as_ms(timeout))
private$tasks$state[topoll][pr == &amp;quot;ready&amp;quot;] &amp;lt;- &amp;quot;ready&amp;quot;
private$schedule()
private$tasks$id[private$tasks$state == &amp;quot;done&amp;quot;]
}&lt;/code>&lt;/pre>
&lt;p>We only need to check on tasks that are &lt;em>running&lt;/em>. &lt;code>poll()&lt;/code> uses the
&lt;code>processx::poll()&lt;/code> function that can wait on several &lt;code>callr::r_session&lt;/code>s
at once. More precisely, I extract the &lt;em>poll connections&lt;/em> of the
&lt;code>r_session&lt;/code> objects and call &lt;code>processx::poll()&lt;/code> on these. An &lt;code>r_session&lt;/code>
may have multiple pollable connections, one for its standard output
stream, one for its standard error stream. These are not used by default
in &lt;code>r_session&lt;/code>s, and I only want to check on the poll connection, which
signals if the R session has finished with the computation (or encountered
an error while working on it). &lt;code>processx::poll()&lt;/code> returns a list of
character vectors, one entry for each (&lt;em>running&lt;/em>) task. This is &lt;code>&amp;quot;ready&amp;quot;&lt;/code>
if the session is ready with the task. (Or it is &lt;code>&amp;quot;silent&amp;quot;&lt;/code> if it is not
ready, or &lt;code>&amp;quot;timeout&amp;quot;&lt;/code> if the time limit expired and no workers are ready.)&lt;/p>
&lt;p>All tasks that returned &lt;code>&amp;quot;ready&amp;quot;&lt;/code> are indeed set to the &lt;em>ready&lt;/em> state.
After this &lt;code>poll()&lt;/code> calls &lt;code>schedule()&lt;/code> to read out the results of the
&lt;em>ready&lt;/em> tasks and reassign their workers to &lt;em>waiting&lt;/em> ones.&lt;/p>
&lt;p>&lt;code>poll()&lt;/code> returns the ids of all tasks that are &lt;em>done&lt;/em>.&lt;/p>
&lt;p>This version of &lt;code>poll()&lt;/code> has a small issue when the R sessions are starting
up: it might return without any results, before the specified timeout
value is over. At startup the idle tasks are &lt;em>running,&lt;/em> and they are
polled by &lt;code>processx::poll()&lt;/code>. If any of the R sessions start up before the
timeout is over, &lt;code>processx::poll()&lt;/code> returns with &lt;code>&amp;quot;ready&amp;quot;&lt;/code> for them.
But &lt;code>schedule()&lt;/code> cannot mark these tasks as &lt;em>done&lt;/em>, because they are idle
tasks, they’ll be &lt;em>waiting&lt;/em>, and with no task &lt;em>done&lt;/em>, &lt;code>poll()&lt;/code>
will return an empty vector. This is problematic, because &lt;code>poll()&lt;/code>
promises to either wait until the specified timeout &lt;em>or&lt;/em> return a task
that is &lt;em>done&lt;/em>. So we need to wrap the simplified &lt;code>poll()&lt;/code> into a loop, and
keep calling &lt;code>processx::poll()&lt;/code> until either the timeout
expires or a task is &lt;em>done&lt;/em>. The final &lt;code>poll()&lt;/code> looks like this:&lt;/p>
&lt;pre class="r">&lt;code> poll = function(timeout = 0) {
limit &amp;lt;- Sys.time() + timeout
as_ms &amp;lt;- function(x) if (x == Inf) -1L else as.integer(x)
repeat{
topoll &amp;lt;- which(private$tasks$state == &amp;quot;running&amp;quot;)
conns &amp;lt;- lapply(
private$tasks$worker[topoll],
function(x) x$get_poll_connection())
pr &amp;lt;- processx::poll(conns, as_ms(timeout))
private$tasks$state[topoll][pr == &amp;quot;ready&amp;quot;] &amp;lt;- &amp;quot;ready&amp;quot;
private$schedule()
ret &amp;lt;- private$tasks$id[private$tasks$state == &amp;quot;done&amp;quot;]
if (is.finite(timeout)) timeout &amp;lt;- limit - Sys.time()
if (length(ret) || timeout &amp;lt; 0) break;
}
ret
}&lt;/code>&lt;/pre>
&lt;p>Only the private &lt;code>schedule()&lt;/code> method is missing now:&lt;/p>
&lt;pre class="r">&lt;code> schedule = function() {
ready &amp;lt;- which(private$tasks$state == &amp;quot;ready&amp;quot;)
if (!length(ready)) return()
rss &amp;lt;- private$tasks$worker[ready]
private$tasks$result[ready] &amp;lt;- lapply(rss, function(x) x$read())
private$tasks$worker[ready] &amp;lt;- replicate(length(ready), NULL)
private$tasks$state[ready] &amp;lt;-
ifelse(private$tasks$idle[ready], &amp;quot;waiting&amp;quot;, &amp;quot;done&amp;quot;)
waiting &amp;lt;- which(private$tasks$state == &amp;quot;waiting&amp;quot;)[1:length(ready)]
private$tasks$worker[waiting] &amp;lt;- rss
private$tasks$state[waiting] &amp;lt;-
ifelse(private$tasks$idle[waiting], &amp;quot;ready&amp;quot;, &amp;quot;running&amp;quot;)
lapply(waiting, function(i) {
if (! private$tasks$idle[i]) {
private$tasks$worker[[i]]$call(private$tasks$fun[[i]],
private$tasks$args[[i]])
}
})
}&lt;/code>&lt;/pre>
&lt;p>&lt;code>schedule()&lt;/code>’s job is to perform the &lt;em>ready&lt;/em> to &lt;em>done&lt;/em> and the
&lt;em>waiting&lt;/em> to &lt;em>running&lt;/em> state transitions. The first involves reading
out the results of the &lt;em>ready&lt;/em> tasks and the second involves starting
new computation on the workers.&lt;/p>
&lt;p>For every &lt;em>ready&lt;/em> task, &lt;code>schedule()&lt;/code> perform three steps:&lt;/p>
&lt;ol style="list-style-type: decimal">
&lt;li>Reads out and stores its result. (It can do this for the idle tasks
as well, for these &lt;code>r_session$read()&lt;/code> will return &lt;code>NULL&lt;/code>.)&lt;/li>
&lt;li>Removes its worker, i.e. sets it to &lt;code>NULL&lt;/code>.&lt;/li>
&lt;li>Updates its state to &lt;em>done&lt;/em>. (Or to &lt;em>waiting&lt;/em> if it is an idle task.)&lt;/li>
&lt;/ol>
&lt;p>Then it deals with the &lt;em>waiting&lt;/em> tasks, but not more than the number of
&lt;em>ready&lt;/em> tasks the queue had. For these &lt;em>waiting&lt;/em> tasks &lt;code>schedule()&lt;/code>
performs three steps:&lt;/p>
&lt;ol style="list-style-type: decimal">
&lt;li>Assigns a just removed worker to it.&lt;/li>
&lt;li>Sets state to &lt;em>running&lt;/em>. (Or to &lt;em>ready&lt;/em> for idle tasks.)&lt;/li>
&lt;li>Calls &lt;code>fun(args)&lt;/code> in the background session.&lt;/li>
&lt;/ol>
&lt;p>When selecting the waiting tasks to run, the ordering of the task table
makes sure that the oldest task is selected first, and that idle tasks
are only selected if there is nothing else to run. The idle tasks make sure
that &lt;code>schedule()&lt;/code> always has at least as many waiting tasks as ready.&lt;/p>
&lt;p>It is possible that &lt;code>schedule()&lt;/code> first sets an idle task to &lt;em>waiting&lt;/em> and
then selects it and (re-)assigns a worker to it. This is perfectly fine.&lt;/p>
&lt;/div>
&lt;div id="try-it-out" class="section level2">
&lt;h2>Try it out&lt;/h2>
&lt;p>As a simple example, we add a bunch of fake tasks to a queue, and then
run a simple event loop to completion. (To run this code, first
you need to run the complete code at the end of the post.)&lt;/p>
&lt;pre class="r">&lt;code>q &amp;lt;- task_q$new()
for (i in 1:10) {
q$push(function(i) { Sys.sleep(runif(1)); paste(i, &amp;quot;done&amp;quot;) }, list(i = i))
}&lt;/code>&lt;/pre>
&lt;p>This is how the queue looks after adding all these tasks:&lt;/p>
&lt;pre class="r">&lt;code>q$list_tasks()&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-output">&lt;CODE>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 14 x 7&lt;/span>&lt;span>
#&amp;gt; id idle state fun args worker result
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;lgl&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 1&lt;/span>&lt;span> .1 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 2&lt;/span>&lt;span> .2 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 3&lt;/span>&lt;span> .3 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 4&lt;/span>&lt;span> .4 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 5&lt;/span>&lt;span> .5 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 6&lt;/span>&lt;span> .6 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 7&lt;/span>&lt;span> .7 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 8&lt;/span>&lt;span> .8 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 9&lt;/span>&lt;span> .9 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>10&lt;/span>&lt;span> .10 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>11&lt;/span>&lt;span> .idle-1 TRUE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>12&lt;/span>&lt;span> .idle-2 TRUE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>13&lt;/span>&lt;span> .idle-3 TRUE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>14&lt;/span>&lt;span> .idle-4 TRUE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;p>Probably no tasks are running just yet. The queue only has the chance to
change its state when you &lt;code>push()&lt;/code>, &lt;code>pop()&lt;/code> or &lt;code>poll()&lt;/code>. When pushing the
tasks to the queue, the workers were still starting up (i.e. the idle tasks
are &lt;em>running&lt;/em>), so &lt;code>push()&lt;/code> could not start any real tasks. Never mind, as
soon as you try to &lt;code>pop()&lt;/code> or &lt;code>poll()&lt;/code>, they’ll start running:&lt;/p>
&lt;pre class="r">&lt;code>q$poll(1000L)
#&amp;gt; [1] &amp;quot;.2&amp;quot;
q$list_tasks()&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-output">&lt;CODE>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 14 x 7&lt;/span>&lt;span>
#&amp;gt; id idle state fun args worker result
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;lgl&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 1&lt;/span>&lt;span> .1 FALSE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 2&lt;/span>&lt;span> .2 FALSE done &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;cllr_ss_&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 3&lt;/span>&lt;span> .3 FALSE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 4&lt;/span>&lt;span> .4 FALSE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 5&lt;/span>&lt;span> .5 FALSE running &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;r_sessin&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 6&lt;/span>&lt;span> .6 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 7&lt;/span>&lt;span> .7 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 8&lt;/span>&lt;span> .8 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 9&lt;/span>&lt;span> .9 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>10&lt;/span>&lt;span> .10 FALSE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;fn&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;named list [1]&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>11&lt;/span>&lt;span> .idle-1 TRUE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;cllr_ss_&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>12&lt;/span>&lt;span> .idle-2 TRUE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;cllr_ss_&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>13&lt;/span>&lt;span> .idle-3 TRUE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;cllr_ss_&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>14&lt;/span>&lt;span> .idle-4 TRUE waiting &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;NULL&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;'>&amp;lt;cllr_ss_&amp;gt;&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;pre class="r">&lt;code>while (!q$is_idle()) {
task_result &amp;lt;- q$pop(Inf)
print(task_result$result)
}
#&amp;gt; [1] &amp;quot;1 done&amp;quot;
#&amp;gt; [1] &amp;quot;2 done&amp;quot;
#&amp;gt; [1] &amp;quot;3 done&amp;quot;
#&amp;gt; [1] &amp;quot;4 done&amp;quot;
#&amp;gt; [1] &amp;quot;6 done&amp;quot;
#&amp;gt; [1] &amp;quot;5 done&amp;quot;
#&amp;gt; [1] &amp;quot;7 done&amp;quot;
#&amp;gt; [1] &amp;quot;8 done&amp;quot;
#&amp;gt; [1] &amp;quot;9 done&amp;quot;
#&amp;gt; [1] &amp;quot;10 done&amp;quot;&lt;/code>&lt;/pre>
&lt;p>&lt;code>pop()&lt;/code> just returns whatever &lt;code>r_session$read()&lt;/code> returns. Here is the last
result from the loop:&lt;/p>
&lt;pre class="r">&lt;code>task_result
#&amp;gt; $code
#&amp;gt; [1] 200
#&amp;gt;
#&amp;gt; $message
#&amp;gt; [1] &amp;quot;done file47c57a1f62b5&amp;quot;
#&amp;gt;
#&amp;gt; $result
#&amp;gt; [1] &amp;quot;10 done&amp;quot;
#&amp;gt;
#&amp;gt; $stdout
#&amp;gt; [1] &amp;quot;&amp;quot;
#&amp;gt;
#&amp;gt; $stderr
#&amp;gt; [1] &amp;quot;&amp;quot;
#&amp;gt;
#&amp;gt; $error
#&amp;gt; NULL
#&amp;gt;
#&amp;gt; $task_id
#&amp;gt; [1] &amp;quot;.10&amp;quot;&lt;/code>&lt;/pre>
&lt;p>The important fields are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>result&lt;/code>: the R object returned from the function. This is &lt;code>NULL&lt;/code> on
error.&lt;/li>
&lt;li>&lt;code>stdout&lt;/code>: the standard output of the background session, while running the
function.&lt;/li>
&lt;li>&lt;code>stderr&lt;/code>: the standard error.&lt;/li>
&lt;li>&lt;code>error&lt;/code>: error object if the function failed. &lt;code>NULL&lt;/code> otherwise.&lt;/li>
&lt;li>&lt;code>task_id&lt;/code>: the user supplied or auto-generated task id.&lt;/li>
&lt;/ul>
&lt;p>Let’s see a task that errors.&lt;/p>
&lt;pre class="r">&lt;code>q$push(function() stop(&amp;quot;This failed, sorry&amp;quot;))
res &amp;lt;- q$pop(Inf)
res$error
#&amp;gt; &amp;lt;callr_status_error: callr subprocess failed: This failed, sorry&amp;gt;
#&amp;gt; in process
#&amp;gt; --&amp;gt;
#&amp;gt; &amp;lt;callr_remote_error in (function () stop(&amp;quot;This failed, sorry&amp;quot;))(): This failed, sorry&amp;gt;&lt;/code>&lt;/pre>
&lt;p>The error has two parts, the first refers to the main process, and the
second is the original error, thrown in the background process. To help with
debugging, the error from the background process includes a stack trace:&lt;/p>
&lt;pre class="r">&lt;code>res$error$parent$trace&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-output">&lt;CODE>#&amp;gt;
#&amp;gt; &lt;span style='font-weight: bold;'> ERROR TRACE for simpleError&lt;/span>&lt;span>
#&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 12. &lt;/span>&lt;span>(function () ...
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 13. &lt;/span>&lt;span style='color: #BBBB00;'>base:::stop&lt;/span>&lt;span>("This failed, sorry")
#&amp;gt; &lt;/span>&lt;span style='color: #00BBBB;font-style: italic;'>R/&amp;lt;text&amp;gt;:1:8&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 14. &lt;/span>&lt;span style='color: #BBBB00;'>base:::.handleSimpleError&lt;/span>&lt;span>(function (e) ...
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 15. &lt;/span>&lt;span style='color: #BBBB00;'>h&lt;/span>&lt;span>(simpleError(msg, call))
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;font-weight: bold;'>
#&amp;gt; x This failed, sorry &lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;p>For this simple function that just calls &lt;code>stop()&lt;/code>, the trace is not
very exciting, but it can be very helpful in general.&lt;/p>
&lt;/div>
&lt;div id="how-about-process-cleanup" class="section level2">
&lt;h2>How about process cleanup?&lt;/h2>
&lt;p>Luckily we don’t have to do anything extra to clean up the R processes.
&lt;code>callr::r_session&lt;/code> objects kill their background R session in their
finalizer, i.e. when they are garbage collected. As soon as the
workers have no references, because e.g. the queue object itself has no
references, the garbage collector will clean them up. An explicit &lt;code>kill()&lt;/code>
method would be still useful sometimes, but we leave that as an exercise to
the reader.&lt;/p>
&lt;/div>
&lt;div id="possible-improvements" class="section level2">
&lt;h2>Possible improvements&lt;/h2>
&lt;p>To use this task queue in real code, you would need to make it a bit more
robust and flexible.&lt;/p>
&lt;ol style="list-style-type: decimal">
&lt;li>Most importantly, you would need to handle crashes and freezes in the
worker tasks. &lt;code>callr::r_session&lt;/code> does handle crashes properly, i.e.
&lt;code>poll()&lt;/code> returns immediately if the session crashes, and then &lt;code>read()&lt;/code>
returns an informative error result. But the task queue should also do
something sensible in this case, e.g. return the error result, and
restart the worker.&lt;/li>
&lt;li>To handle freezing worker tasks, the queue could support task timeouts,
and then kill the tasks that don’t finish before their timeout expires.
This can be probably implemented using the &lt;code>r_session$interrupt()&lt;/code> and
&lt;code>r_session$kill()&lt;/code> methods.&lt;/li>
&lt;li>Make the queue interrupt-safe. All operations of the queue (e.g.
&lt;code>poll()&lt;/code>, &lt;code>pop()&lt;/code>, etc.) are interruptible by the user, but they
don’t always leave the task data frame and the background sessions in a
consistent state. E.g. if &lt;code>schedule()&lt;/code> is interrupted and you are
unlucky, you might lose all worker processes. This is a very hard issue
to solve, the relatively new &lt;code>suspendInterrupts()&lt;/code> function probably
helps a lot.&lt;/li>
&lt;li>It would be great to be able to change the number of worker tasks of
the queue dynamically, i.e. add and remove worker processes.&lt;/li>
&lt;li>The whole queue could be implemented in a background process, so that
the scheduler runs concurrently with the main R process. This is far
from being trivial, especially if one wants to avoid copying data
(the function arguments) twice for every task.&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div id="complete-code" class="section level2">
&lt;h2>Complete code&lt;/h2>
&lt;p>It is also available &lt;a href="https://github.com/r-lib/callr/blob/811a02f604de2cf03264f6b35ce9ec8a412f2581/vignettes/taskq.R">on GitHub&lt;/a>.&lt;/p>
&lt;pre class="r">&lt;code>task_q &amp;lt;- R6::R6Class(
&amp;quot;task_q&amp;quot;,
public = list(
initialize = function(concurrency = 4L) {
private$start_workers(concurrency)
invisible(self)
},
list_tasks = function() private$tasks,
get_num_waiting = function()
sum(!private$tasks$idle &amp;amp; private$tasks$state == &amp;quot;waiting&amp;quot;),
get_num_running = function()
sum(!private$tasks$idle &amp;amp; private$tasks$state == &amp;quot;running&amp;quot;),
get_num_done = function() sum(private$tasks$state == &amp;quot;done&amp;quot;),
is_idle = function() sum(!private$tasks$idle) == 0,
push = function(fun, args = list(), id = NULL) {
if (is.null(id)) id &amp;lt;- private$get_next_id()
if (id %in% private$tasks$id) stop(&amp;quot;Duplicate task id&amp;quot;)
before &amp;lt;- which(private$tasks$idle)[1]
private$tasks &amp;lt;- tibble::add_row(private$tasks, .before = before,
id = id, idle = FALSE, state = &amp;quot;waiting&amp;quot;, fun = list(fun),
args = list(args), worker = list(NULL), result = list(NULL))
private$schedule()
invisible(id)
},
poll = function(timeout = 0) {
limit &amp;lt;- Sys.time() + timeout
as_ms &amp;lt;- function(x) if (x == Inf) -1L else as.integer(x)
repeat{
topoll &amp;lt;- which(private$tasks$state == &amp;quot;running&amp;quot;)
conns &amp;lt;- lapply(
private$tasks$worker[topoll],
function(x) x$get_poll_connection())
pr &amp;lt;- processx::poll(conns, as_ms(timeout))
private$tasks$state[topoll][pr == &amp;quot;ready&amp;quot;] &amp;lt;- &amp;quot;ready&amp;quot;
private$schedule()
ret &amp;lt;- private$tasks$id[private$tasks$state == &amp;quot;done&amp;quot;]
if (is.finite(timeout)) timeout &amp;lt;- limit - Sys.time()
if (length(ret) || timeout &amp;lt; 0) break;
}
ret
},
pop = function(timeout = 0) {
if (is.na(done &amp;lt;- self$poll(timeout)[1])) return(NULL)
row &amp;lt;- match(done, private$tasks$id)
result &amp;lt;- private$tasks$result[[row]]
private$tasks &amp;lt;- private$tasks[-row, ]
c(result, list(task_id = done))
}
),
private = list(
tasks = NULL,
next_id = 1L,
get_next_id = function() {
id &amp;lt;- private$next_id
private$next_id &amp;lt;- id + 1L
paste0(&amp;quot;.&amp;quot;, id)
},
start_workers = function(concurrency) {
private$tasks &amp;lt;- tibble::tibble(
id = character(), idle = logical(),
state = c(&amp;quot;waiting&amp;quot;, &amp;quot;running&amp;quot;, &amp;quot;ready&amp;quot;, &amp;quot;done&amp;quot;)[NULL],
fun = list(), args = list(), worker = list(), result = list())
for (i in seq_len(concurrency)) {
rs &amp;lt;- callr::r_session$new(wait = FALSE)
private$tasks &amp;lt;- tibble::add_row(private$tasks,
id = paste0(&amp;quot;.idle-&amp;quot;, i), idle = TRUE, state = &amp;quot;running&amp;quot;,
fun = list(NULL), args = list(NULL), worker = list(rs),
result = list(NULL))
}
},
schedule = function() {
ready &amp;lt;- which(private$tasks$state == &amp;quot;ready&amp;quot;)
if (!length(ready)) return()
rss &amp;lt;- private$tasks$worker[ready]
private$tasks$result[ready] &amp;lt;- lapply(rss, function(x) x$read())
private$tasks$worker[ready] &amp;lt;- replicate(length(ready), NULL)
private$tasks$state[ready] &amp;lt;-
ifelse(private$tasks$idle[ready], &amp;quot;waiting&amp;quot;, &amp;quot;done&amp;quot;)
waiting &amp;lt;- which(private$tasks$state == &amp;quot;waiting&amp;quot;)[1:length(ready)]
private$tasks$worker[waiting] &amp;lt;- rss
private$tasks$state[waiting] &amp;lt;-
ifelse(private$tasks$idle[waiting], &amp;quot;ready&amp;quot;, &amp;quot;running&amp;quot;)
lapply(waiting, function(i) {
if (! private$tasks$idle[i]) {
private$tasks$worker[[i]]$call(private$tasks$fun[[i]],
private$tasks$args[[i]])
}
})
}
)
)&lt;/code>&lt;/pre>
&lt;/div></description></item></channel></rss>