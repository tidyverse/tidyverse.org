<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rlang | Tidyverse</title><link>https://www.tidyverse.org/tags/rlang/</link><atom:link href="https://www.tidyverse.org/tags/rlang/index.xml" rel="self" type="application/rss+xml"/><description>rlang</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Jun 2019 00:00:00 +0000</lastBuildDate><item><title>rlang 0.4.0</title><link>https://www.tidyverse.org/blog/2019/06/rlang-0-4-0/</link><pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2019/06/rlang-0-4-0/</guid><description>&lt;p>It is with great excitement that we announce the release of
&lt;a href="https://rlang.r-lib.org" target="_blank" rel="noopener">rlang 0.4.0&lt;/a> on CRAN. rlang is a toolkit for working with core R and Tidyverse features, and hosts the tidy evaluation framework. The full set of changes can be found in the
&lt;a href="https://rlang.r-lib.org/news/index.html#rlang-0-4-0" target="_blank" rel="noopener">changelog&lt;/a>.&lt;/p>
&lt;p>In this article, we introduce the most important of these, the new tidy evaluation operator &lt;code>{{&lt;/code>. We will use a simple dplyr pipeline as a running example, let&amp;rsquo;s start by attaching the package:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dplyr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="the-good-and-bad-of-tidy-evaluation">The good and bad of tidy evaluation
&lt;a href="#the-good-and-bad-of-tidy-evaluation">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Tidy eval powers packages like dplyr and tidyr. It makes it possible to manipulate data frame columns as if they were defined in the workspace:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">gender&lt;/span>
&lt;span class="c1">#&amp;gt; Error in eval(expr, envir, enclos): object &amp;#39;gender&amp;#39; not found&lt;/span>
&lt;span class="n">mass&lt;/span>
&lt;span class="c1">#&amp;gt; Error in eval(expr, envir, enclos): object &amp;#39;mass&amp;#39; not found&lt;/span>
&lt;span class="n">starwars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gender&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mass_maximum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mass&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 5 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; gender mass_maximum&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 &amp;lt;NA&amp;gt; 75&lt;/span>
&lt;span class="c1">#&amp;gt; 2 female 75&lt;/span>
&lt;span class="c1">#&amp;gt; 3 hermaphrodite 1358&lt;/span>
&lt;span class="c1">#&amp;gt; 4 male 159&lt;/span>
&lt;span class="c1">#&amp;gt; 5 none 140&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We call this syntax &lt;strong>data masking&lt;/strong>. This feature is unique to the R language and greatly streamlines the writing and reading of code in interactive scripts. Unfortunately, it also makes it more complex to reuse common patterns inside functions:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">max_by&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">by&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maximum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">starwars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">max_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mass&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gender&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error: Column `by` is unknown&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Technically, this is because data-masked code needs to be &lt;em>delayed&lt;/em> and &lt;em>transported&lt;/em> to the data context. Behind the scenes, dplyr verbs achieve this by capturing the blueprint of your code, and resuming its evaluation inside the data mask. The example above fails because &lt;code>group_by()&lt;/code> is capturing the wrong piece of blueprint. To solve this, tidy evaluation provides &lt;code>enquo()&lt;/code> to delay the interpretation of code and capture its blueprint, and the surgery operator &lt;code>!!&lt;/code> for modifying blueprints. The combination of using &lt;code>enquo()&lt;/code> and &lt;code>!!&lt;/code> is called the &lt;strong>quote-and-unquote&lt;/strong> pattern:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">max_by&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!!&lt;/span>&lt;span class="nf">enquo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">by&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maximum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!!&lt;/span>&lt;span class="nf">enquo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">starwars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">max_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mass&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gender&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 5 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; gender maximum&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 &amp;lt;NA&amp;gt; 75&lt;/span>
&lt;span class="c1">#&amp;gt; 2 female 75&lt;/span>
&lt;span class="c1">#&amp;gt; 3 hermaphrodite 1358&lt;/span>
&lt;span class="c1">#&amp;gt; 4 male 159&lt;/span>
&lt;span class="c1">#&amp;gt; 5 none 140&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We have come to realise that this pattern is difficult to teach and to learn because it involves a new, unfamiliar syntax, and because it introduces two new programming concepts (quote and unquote) that are hard to understand intuitively. This complexity is not really justified because this pattern is overly flexible for basic programming needs.&lt;/p>
&lt;h2 id="a-simpler-interpolation-pattern-with-">A simpler interpolation pattern with &lt;code>{{&lt;/code>
&lt;a href="#a-simpler-interpolation-pattern-with-">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>rlang 0.4.0 provides a new operator, &lt;code>{{&lt;/code> (read: curly curly), which abstracts quote-and-unquote into a single &lt;strong>interpolation&lt;/strong> step. The curly-curly operator should be straightforward to use. When you create a function around a tidyverse pipeline, wrap the function arguments containing data frame variables with &lt;code>{{&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">max_by&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">({{&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="p">}})&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maximum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">({{&lt;/span> &lt;span class="n">var&lt;/span> &lt;span class="p">}},&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">starwars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">max_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 1&lt;/span>
&lt;span class="c1">#&amp;gt; maximum&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 264&lt;/span>
&lt;span class="n">starwars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">max_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gender&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 5 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; gender maximum&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 &amp;lt;NA&amp;gt; 167&lt;/span>
&lt;span class="c1">#&amp;gt; 2 female 213&lt;/span>
&lt;span class="c1">#&amp;gt; 3 hermaphrodite 175&lt;/span>
&lt;span class="c1">#&amp;gt; 4 male 264&lt;/span>
&lt;span class="c1">#&amp;gt; 5 none 200&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This syntax should be reminiscent of string interpolation in the
&lt;a href="https://glue.tidyverse.org/" target="_blank" rel="noopener">glue&lt;/a> package by Jim Hester:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">var&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">sample&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;woof&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;meow&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;mooh&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">glue&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">glue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Did you just say {var}?&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Did you just say mooh?&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="other-simple-tidy-evaluation-patterns">Other simple tidy evaluation patterns
&lt;a href="#other-simple-tidy-evaluation-patterns">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>There are a few existing patterns that aren&amp;rsquo;t emphasised enough in the existing documentation. We are changing our teaching strategy to focus on these simpler patterns.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>If you would like to pass multiple arguments to a data-masking verb, pass &lt;code>...&lt;/code> directly:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">summarise_by&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">...&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">({{&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="p">}})&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">starwars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise_by&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">average&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">maximum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">by&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gender&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 5 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; gender average maximum&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 &amp;lt;NA&amp;gt; 120 167&lt;/span>
&lt;span class="c1">#&amp;gt; 2 female 165. 213&lt;/span>
&lt;span class="c1">#&amp;gt; 3 hermaphrodite 175 175&lt;/span>
&lt;span class="c1">#&amp;gt; 4 male 179. 264&lt;/span>
&lt;span class="c1">#&amp;gt; 5 none 200 200&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You only need quote-and-unquote (with the plural variants &lt;code>enquos()&lt;/code> and &lt;code>!!!&lt;/code>) when you need to modify the inputs or their names in some way.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you have string inputs, use the &lt;code>.data&lt;/code> pronoun:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">max_by&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">.data[[by]]&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maximum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">.data[[var]]&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">starwars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">max_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;height&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;gender&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 5 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; gender maximum&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 &amp;lt;NA&amp;gt; 167&lt;/span>
&lt;span class="c1">#&amp;gt; 2 female 213&lt;/span>
&lt;span class="c1">#&amp;gt; 3 hermaphrodite 175&lt;/span>
&lt;span class="c1">#&amp;gt; 4 male 264&lt;/span>
&lt;span class="c1">#&amp;gt; 5 none 200&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.&lt;/code> pronoun from magrittr is not appropriate here because it represents the whole data frame, whereas &lt;code>.data&lt;/code> represents the subset for the current group.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>To learn more about the different ways of programming around tidyverse pipelines, we recommend reading the
&lt;a href="https://ggplot2.tidyverse.org/dev/articles/ggplot2-in-packages.html#using-aes-and-vars-in-a-package-function" target="_blank" rel="noopener">new programming vignette in ggplot2&lt;/a>, written by
&lt;a href="https://github.com/paleolimbot" target="_blank" rel="noopener">Dewey Dunnington&lt;/a> who is currently interning at RStudio.&lt;/p>
&lt;h2 id="thanks">Thanks!
&lt;a href="#thanks">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The following people have contributed to this release by posting issues and pull requests:&lt;/p>
&lt;p>
&lt;a href="https://github.com/001ben" target="_blank" rel="noopener">@001ben&lt;/a>,
&lt;a href="https://github.com/asardaes" target="_blank" rel="noopener">@asardaes&lt;/a>,
&lt;a href="https://github.com/BillDunlap" target="_blank" rel="noopener">@BillDunlap&lt;/a>,
&lt;a href="https://github.com/burchill" target="_blank" rel="noopener">@burchill&lt;/a>,
&lt;a href="https://github.com/cpsievert" target="_blank" rel="noopener">@cpsievert&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/egnha" target="_blank" rel="noopener">@egnha&lt;/a>,
&lt;a href="https://github.com/flying-sheep" target="_blank" rel="noopener">@flying-sheep&lt;/a>,
&lt;a href="https://github.com/gaborcsardi" target="_blank" rel="noopener">@gaborcsardi&lt;/a>,
&lt;a href="https://github.com/gaelledoucet" target="_blank" rel="noopener">@gaelledoucet&lt;/a>,
&lt;a href="https://github.com/GaGaMan1101" target="_blank" rel="noopener">@GaGaMan1101&lt;/a>,
&lt;a href="https://github.com/grayskripko" target="_blank" rel="noopener">@grayskripko&lt;/a>,
&lt;a href="https://github.com/hadley" target="_blank" rel="noopener">@hadley&lt;/a>,
&lt;a href="https://github.com/harrysouthworth" target="_blank" rel="noopener">@harrysouthworth&lt;/a>,
&lt;a href="https://github.com/holgerbrandl" target="_blank" rel="noopener">@holgerbrandl&lt;/a>,
&lt;a href="https://github.com/IndrajeetPatil" target="_blank" rel="noopener">@IndrajeetPatil&lt;/a>,
&lt;a href="https://github.com/jazzmoe" target="_blank" rel="noopener">@jazzmoe&lt;/a>,
&lt;a href="https://github.com/jennybc" target="_blank" rel="noopener">@jennybc&lt;/a>,
&lt;a href="https://github.com/jjesusfilho" target="_blank" rel="noopener">@jjesusfilho&lt;/a>,
&lt;a href="https://github.com/juangomezduaso" target="_blank" rel="noopener">@juangomezduaso&lt;/a>,
&lt;a href="https://github.com/krlmlr" target="_blank" rel="noopener">@krlmlr&lt;/a>,
&lt;a href="https://github.com/lionel-" target="_blank" rel="noopener">@lionel-&lt;/a>,
&lt;a href="https://github.com/Marieag" target="_blank" rel="noopener">@Marieag&lt;/a>,
&lt;a href="https://github.com/mmuurr" target="_blank" rel="noopener">@mmuurr&lt;/a>,
&lt;a href="https://github.com/moodymudskipper" target="_blank" rel="noopener">@moodymudskipper&lt;/a>,
&lt;a href="https://github.com/paulponcet" target="_blank" rel="noopener">@paulponcet&lt;/a>,
&lt;a href="https://github.com/riccardopinosio" target="_blank" rel="noopener">@riccardopinosio&lt;/a>,
&lt;a href="https://github.com/richierocks" target="_blank" rel="noopener">@richierocks&lt;/a>,
&lt;a href="https://github.com/RolandASc" target="_blank" rel="noopener">@RolandASc&lt;/a>,
&lt;a href="https://github.com/romainfrancois" target="_blank" rel="noopener">@romainfrancois&lt;/a>,
&lt;a href="https://github.com/s-fleck" target="_blank" rel="noopener">@s-fleck&lt;/a>,
&lt;a href="https://github.com/siddharthprabhu" target="_blank" rel="noopener">@siddharthprabhu&lt;/a>,
&lt;a href="https://github.com/subratiter1" target="_blank" rel="noopener">@subratiter1&lt;/a>,
&lt;a href="https://github.com/wch" target="_blank" rel="noopener">@wch&lt;/a>,
&lt;a href="https://github.com/wetlandscapes" target="_blank" rel="noopener">@wetlandscapes&lt;/a>,
&lt;a href="https://github.com/wlandau" target="_blank" rel="noopener">@wlandau&lt;/a>,
&lt;a href="https://github.com/x1o" target="_blank" rel="noopener">@x1o&lt;/a>,
&lt;a href="https://github.com/XWeiZhou" target="_blank" rel="noopener">@XWeiZhou&lt;/a>,
&lt;a href="https://github.com/yenzichun" target="_blank" rel="noopener">@yenzichun&lt;/a>,
&lt;a href="https://github.com/yonicd" target="_blank" rel="noopener">@yonicd&lt;/a>, and
&lt;a href="https://github.com/zachary-foster" target="_blank" rel="noopener">@zachary-foster&lt;/a>&lt;/p></description></item><item><title>rlang 0.3.1</title><link>https://www.tidyverse.org/blog/2019/01/rlang-0-3-1/</link><pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2019/01/rlang-0-3-1/</guid><description>
&lt;p>The patch release 0.3.1 of rlang is now on CRAN! This release polishes the rlang backtraces introduced in 0.3.0. See the &lt;a href="https://rlang.r-lib.org/news/index.html#rlang-0-3-1">NEWS&lt;/a> for the complete set of changes. The main feature is &lt;code>rlang::entrace()&lt;/code>, that you can set as a global error handler to get rlang backtraces for &lt;em>all&lt;/em> errors.&lt;/p>
&lt;div id="numbered-backtraces" class="section level2">
&lt;h2>Numbered backtraces&lt;/h2>
&lt;p>Since rlang 0.3.0, errors thrown with &lt;code>abort()&lt;/code> embed a backtrace that can be consulted by calling &lt;code>last_error()&lt;/code>. We have improved the appearance of the backtraces by numbering its components. Let’s trigger an error within a complicated call stack:&lt;/p>
&lt;pre class="r">&lt;code>f &amp;lt;- function() tryCatch(g(), warning = identity) # Try g()
g &amp;lt;- function() evalq(h()) # Eval h()
h &amp;lt;- function() abort(&amp;quot;Oh no!&amp;quot;) # And fail!
f()&lt;/code>&lt;/pre>
&lt;div class="output">
&lt;pre class="knitr r">#&amp;gt; Error: Oh no!
#&amp;gt; &lt;span style='color: #555555;'>Call `rlang::last_error()` to see a backtrace&lt;/span>&lt;span>
&lt;/span>&lt;/pre>
&lt;/div>
&lt;p>The simplified backtrace shown on error is now numbered:&lt;/p>
&lt;pre class="r">&lt;code>last_error()&lt;/code>&lt;/pre>
&lt;div class="output">
&lt;pre class="knitr r">#&amp;gt; &lt;span style='font-weight: bold;'>&amp;lt;error&amp;gt;&lt;/span>&lt;span>
#&amp;gt; message: &lt;/span>&lt;span style='font-style: italic;'>Oh no!&lt;/span>&lt;span>
#&amp;gt; class: `rlang_error`
#&amp;gt; backtrace:
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 1. &lt;/span>&lt;span style='color: #BB0000;'>global::f()&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 6. &lt;/span>&lt;span style='color: #BB0000;'>global::g()&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 9. &lt;/span>&lt;span style='color: #BB0000;'>global::h()&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>Call `rlang::last_trace()` to see the full backtrace&lt;/span>&lt;span>
&lt;/span>&lt;/pre>
&lt;/div>
&lt;p>Notice how the numbering is not sequential? That’s because &lt;code>last_error()&lt;/code> displays a simplified backtrace by default, that only includes the calls that are most likely to help you figure out a problem. Call the new function &lt;code>last_trace()&lt;/code> to get the full picture:&lt;/p>
&lt;pre class="r">&lt;code>last_trace()&lt;/code>&lt;/pre>
&lt;div class="output">
&lt;pre class="knitr r">#&amp;gt; &lt;span style='color: #555555;'> &lt;/span>&lt;span>█
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 1. &lt;/span>&lt;span>└─global::f()
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 2. &lt;/span>&lt;span> ├─base::tryCatch(g(), warning = identity)
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 3. &lt;/span>&lt;span> │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 4. &lt;/span>&lt;span> │ └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 5. &lt;/span>&lt;span> │ └─base:::doTryCatch(return(expr), name, parentenv, handler)
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 6. &lt;/span>&lt;span> └─global::g()
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 7. &lt;/span>&lt;span> ├─base::evalq(h())
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 8. &lt;/span>&lt;span> │ └─base::evalq(h())
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 9. &lt;/span>&lt;span> └─global::h()
&lt;/span>&lt;/pre>
&lt;/div>
&lt;p>Note that this full backtrace is the equivalent of &lt;code>base::traceback()&lt;/code>, only structured as a tree, presented in reverse order, and with namespace prefixes. Here is the output of &lt;code>traceback()&lt;/code> for comparison:&lt;/p>
&lt;pre class="output">&lt;code>#&amp;gt; 9: h()
#&amp;gt; 8: evalq(h())
#&amp;gt; 7: evalq(h()) at #1
#&amp;gt; 6: g()
#&amp;gt; 5: doTryCatch(return(expr), name, parentenv, handler)
#&amp;gt; 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])
#&amp;gt; 3: tryCatchList(expr, classes, parentenv, handlers)
#&amp;gt; 2: tryCatch(g(), warning = identity) at #1
#&amp;gt; 1: f()&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="backtraces-for-base-errors" class="section level2">
&lt;h2>Backtraces for base errors!&lt;/h2>
&lt;p>These backtraces are normally only recorded for errors thrown with &lt;code>abort()&lt;/code>. This leaves out errors thrown with &lt;code>stop()&lt;/code>, errors thrown from native C code, and warnings converted to errors. Starting from this release, insert this snippet in your RProfile to enable backtraces for all errors:&lt;/p>
&lt;pre class="r">&lt;code>if (requireNamespace(&amp;quot;rlang&amp;quot;, quietly = TRUE)) {
options(error = rlang::entrace)
}&lt;/code>&lt;/pre>
&lt;p>With this in place, any unhandled error will record an rlang backtrace automatically:&lt;/p>
&lt;pre class="r">&lt;code>h &amp;lt;- function() stop(&amp;quot;stop!&amp;quot;)
f()&lt;/code>&lt;/pre>
&lt;div class="output">
&lt;pre class="knitr r">#&amp;gt; Error: stop!
#&amp;gt; &lt;span style='color: #555555;'>Call `rlang::last_error()` to see a backtrace&lt;/span>&lt;span>
&lt;/span>&lt;/pre>
&lt;/div>
&lt;p>The backtrace can be consulted in the ordinary way:&lt;/p>
&lt;pre class="r">&lt;code>last_error()&lt;/code>&lt;/pre>
&lt;div class="output">
&lt;pre class="knitr r">#&amp;gt; &lt;span style='font-weight: bold;'>&amp;lt;error&amp;gt;&lt;/span>&lt;span>
#&amp;gt; message: &lt;/span>&lt;span style='font-style: italic;'>stop!&lt;/span>&lt;span>
#&amp;gt; class: `rlang_error`
#&amp;gt; backtrace:
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 1. &lt;/span>&lt;span style='color: #BB0000;'>global::f()&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 6. &lt;/span>&lt;span style='color: #BB0000;'>global::g()&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 9. &lt;/span>&lt;span style='color: #BB0000;'>global::h()&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>Call `rlang::last_trace()` to see the full backtrace&lt;/span>&lt;span>
&lt;/span>&lt;/pre>
&lt;/div>
&lt;pre class="r">&lt;code>last_trace()&lt;/code>&lt;/pre>
&lt;div class="output">
&lt;pre class="knitr r">#&amp;gt; &lt;span style='color: #555555;'> &lt;/span>&lt;span>█
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 1. &lt;/span>&lt;span>└─global::f()
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 2. &lt;/span>&lt;span> ├─base::tryCatch(g(), warning = identity)
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 3. &lt;/span>&lt;span> │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 4. &lt;/span>&lt;span> │ └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 5. &lt;/span>&lt;span> │ └─base:::doTryCatch(return(expr), name, parentenv, handler)
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 6. &lt;/span>&lt;span> └─global::g()
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 7. &lt;/span>&lt;span> ├─base::evalq(h())
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 8. &lt;/span>&lt;span> │ └─base::evalq(h())
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'> 9. &lt;/span>&lt;span> └─global::h()
&lt;/span>&lt;/pre>
&lt;/div>
&lt;p>Both the entracing of base errors and the simplification of backtraces are experimental, but they should already work well enough to be useful in your day-to-day work. We’d love to hear about your feedback!&lt;/p>
&lt;/div></description></item><item><title>rlang 0.3.0</title><link>https://www.tidyverse.org/blog/2018/10/rlang-0-3-0/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2018/10/rlang-0-3-0/</guid><description>
&lt;h2 id="introduction">Introduction
&lt;a href="#introduction">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;re happy to announce that
&lt;a href="https://cran.r-project.org/package=rlang" target="_blank" rel="noopener">rlang 0.3.0&lt;/a> in now on CRAN! rlang is of most interest to package developers and R programmers, as it is intended for people developing data science tools rather than data scientists. rlang implements a consistent API for working with base types, hosts the tidy evaluation framework, and offers tools for error reporting. This release provides major improvements for each of those themes.&lt;/p>
&lt;p>Consult the
&lt;a href="https://rlang.r-lib.org/news/index.html#rlang-0-3-0" target="_blank" rel="noopener">changelog&lt;/a> for the full list of changes, including many bug fixes. The rlang API is still maturing and a number of functions and arguments were deprecated or renamed. Check the
&lt;a href="https://rlang.r-lib.org/news/index.html#lifecycle" target="_blank" rel="noopener">lifecycle section&lt;/a> for a summary of the API changes.&lt;/p>
&lt;h2 id="tidy-evaluation-and-tidy-dots">Tidy evaluation and tidy dots
&lt;a href="#tidy-evaluation-and-tidy-dots">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Tidy evaluation is the framework that powers data-masking APIs like dplyr, tidyr, or ggplot2. Tidy dots is a related feature that allows you to use &lt;code>!!!&lt;/code> in functions taking dots, among other things.&lt;/p>
&lt;h3 id="referring-to-columns-with-data">Referring to columns with &lt;code>.data&lt;/code>
&lt;a href="#referring-to-columns-with-data">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The main user-facing change is that subsetting the &lt;code>.data&lt;/code> pronoun with &lt;code>[[&lt;/code> now behaves as if the index were implicitly unquoted. Concretely, this means that the index can no longer be confused with a data frame column. Subsetting &lt;code>.data&lt;/code> is now always safe, even in functions:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">suppressPackageStartupMessages&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;dplyr&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="s">&amp;#34;g&amp;#34;&lt;/span>
&lt;span class="c1"># `df` contains `var` but the column doesn&amp;#39;t count!&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">.data[[var]]&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; &lt;span style='color: #555555;'># A tibble: 4 x 2&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'># Groups: g [2]&lt;/span>&lt;span>
#&amp;gt; var g
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #555555;font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>1&lt;/span>&lt;span> 1 1
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>2&lt;/span>&lt;span> 2 1
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>3&lt;/span>&lt;span> 3 2
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>4&lt;/span>&lt;span> 4 2
&lt;/span>&lt;/pre>&lt;/div>
&lt;h3 id="new-tidy-dots-options">New tidy dots options
&lt;a href="#new-tidy-dots-options">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Tidy dots refers to a set of features enabled in functions collecting dots. To enable tidy dots, use &lt;code>list2()&lt;/code> instead of list:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">fn&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">...&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">list2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With tidy dots, users can splice in lists of arguments:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;A&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;B&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">!!!&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; [[1]]
#&amp;gt; [1] 1
#&amp;gt;
#&amp;gt; [[2]]
#&amp;gt; [1] 2
#&amp;gt;
#&amp;gt; $arg1
#&amp;gt; [1] "A"
#&amp;gt;
#&amp;gt; $arg2
#&amp;gt; [1] "B"
#&amp;gt;
#&amp;gt; [[5]]
#&amp;gt; [1] 3
&lt;/pre>&lt;/div>
&lt;p>They can unquote names:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">nm&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="s">&amp;#34;b&amp;#34;&lt;/span>
&lt;span class="nf">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">!!&lt;/span>&lt;span class="n">nm&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; $a
#&amp;gt; [1] 1
#&amp;gt;
#&amp;gt; $b
#&amp;gt; [1] 2
&lt;/pre>&lt;/div>
&lt;p>And trailing empty arguments are always ignored to make copy-pasting easier:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">fn&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; $foo
#&amp;gt; [1] "foo"
#&amp;gt;
#&amp;gt; $foo
#&amp;gt; [1] "bar"
&lt;/pre>&lt;/div>
&lt;p>While &lt;code>list2()&lt;/code> hard-codes these features, &lt;code>dots_list()&lt;/code> gains several options to control how to collect dots:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>.preserve_empty&lt;/code> preserves empty arguments:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">list3&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">...&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">dots_list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">...&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">.preserve_empty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">list3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; $a
#&amp;gt; [1] 1
#&amp;gt;
#&amp;gt; $b
#&amp;gt;
#&amp;gt;
#&amp;gt; $c
#&amp;gt; [1] 2
&lt;/pre>&lt;/div>
&lt;p>We are using this option in &lt;code>env_bind()&lt;/code> and &lt;code>call_modify()&lt;/code> to allow assigning explicit missing values (see &lt;code>?missing_arg()&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">call&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">quote&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">mean&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nf">call_modify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">...&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">trim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; mean(..., trim = )
&lt;/pre>&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;code>.homonyms&lt;/code> controls whether to keep all arguments that have the same name (the default), only the first or last of these, or throw an error:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">list3&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">...&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">dots_list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">...&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">.homonyms&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;last&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">list3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; $foo
#&amp;gt; [1] 3
#&amp;gt;
#&amp;gt; $bar
#&amp;gt; [1] 5
&lt;/pre>&lt;/div>
&lt;/li>
&lt;/ul>
&lt;p>These options can be set in &lt;code>enquos()&lt;/code> as well.&lt;/p>
&lt;h2 id="error-reporting">Error reporting
&lt;a href="#error-reporting">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>&lt;code>abort()&lt;/code> extends &lt;code>base::stop()&lt;/code> to make it easy to create error objects with
&lt;a href="https://adv-r.hadley.nz/conditions.html" target="_blank" rel="noopener">custom class and metadata&lt;/a>. With rlang 0.3.0, &lt;code>abort()&lt;/code> automatically stores a backtrace in the error object and supports chaining errors.&lt;/p>
&lt;h3 id="backtraces">Backtraces
&lt;a href="#backtraces">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Storing a backtrace in rlang errors makes it possible to post-process the call tree that lead to an error and simplify it substantially. Let&amp;rsquo;s define three functions calling each other, with &lt;code>tryCatch()&lt;/code> and &lt;code>evalq()&lt;/code> interspersed in order to create a complicated call tree:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">f&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nf">tryCatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">g&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">warning&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">identity&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Try g()&lt;/span>
&lt;span class="n">g&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nf">evalq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">h&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1"># Eval h()&lt;/span>
&lt;span class="n">h&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nf">abort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Oh no!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># And fail!&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When a function signals an error with &lt;code>abort()&lt;/code>, the user is invited to call &lt;code>last_error()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">f&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; Error: Oh no!
#&amp;gt; &lt;span style='color: #555555;'>Call `rlang::last_error()` to see a backtrace&lt;/span>&lt;span>
&lt;/span>&lt;/pre>&lt;/div>
&lt;p>Calling &lt;code>last_error()&lt;/code> returns the last error object. The error prints with its backtrace:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">last_error&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; &lt;span style='font-weight: bold;'>&amp;lt;error&amp;gt;&lt;/span>&lt;span>
#&amp;gt; message: &lt;/span>&lt;span style='font-style: italic;'>Oh no!&lt;/span>&lt;span>
#&amp;gt; class: `rlang_error`
#&amp;gt; backtrace:
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ─global::f()&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ─global::g()&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ─global::h()&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>Call `summary(rlang::last_error())` to see the full backtrace&lt;/span>&lt;span>
&lt;/span>&lt;/pre>&lt;/div>
&lt;p>The backtrace is simple and to the point because it is printed in a simplified form by default. If you&amp;rsquo;d like to see the full story (or include the full backtrace in a bug report), call &lt;code>summary()&lt;/code> on the error object:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">summary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">last_error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; &lt;span style='font-weight: bold;'>&amp;lt;error&amp;gt;&lt;/span>&lt;span>
#&amp;gt; message: &lt;/span>&lt;span style='font-style: italic;'>Oh no!&lt;/span>&lt;span>
#&amp;gt; class: `rlang_error`
#&amp;gt; fields: `message`, `trace` and `parent`
#&amp;gt; backtrace:
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'>█&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'>└─global::f()&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ├─base::tryCatch(g(), warning = identity)&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> │ └─base:::tryCatchList(expr, classes, parentenv, handlers)&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> │ └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> │ └─base:::doTryCatch(return(expr), name, parentenv, handler)&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> └─global::g()&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ├─base::evalq(h())&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> │ └─base::evalq(h())&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> └─global::h()&lt;/span>&lt;span>
&lt;/span>&lt;/pre>&lt;/div>
&lt;p>Each call is prepended with a namespace prefix&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> to reveal the flow of control across package contexts.&lt;/p>
&lt;h3 id="chained-errors">Chained errors
&lt;a href="#chained-errors">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Chaining errors is relevant when you&amp;rsquo;re calling low-level APIs such as web scraping, JSON parsing, etc. When these APIs encounter an error, they often fail with technical error messages. It is often a good idea to transform these developer-friendly error messages into something more meaningful and actionable for end users.&lt;/p>
&lt;p>Several programming languages provide the ability of chaining errors for these situations. With chained errors, the low level and high level contexts are clearly separated in the error report. This makes the error more legible for the end user, without hiding the low level information that might be crucial for figuring out the problem.&lt;/p>
&lt;p>Say we&amp;rsquo;re writing a function &lt;code>make_report()&lt;/code> to create an automated report and we&amp;rsquo;re downloading a file as part of the process with &lt;code>fetch_csv()&lt;/code>, which might be implemented in a package:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">fetch_csv&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">suppressWarnings&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nf">read.csv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">url&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">prepare_data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">fetch_csv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">tibble&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">as_tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">make_report&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">prepare_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># We&amp;#39;re not going to get there because all our attempts to download&lt;/span>
&lt;span class="c1"># a file are going to fail!&lt;/span>
&lt;span class="kc">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This function might fail in &lt;code>fetch_csv()&lt;/code> because of connection issues:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">make_report&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;https://rstats.edu/awesome-data.csv&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; Error in open.connection(file, "rt"): cannot open the connection to 'https://rstats.edu/awesome-data.csv'
&lt;/pre>&lt;/div>
&lt;p>Chaining errors makes it possible to transform this low-level API error into a high level error, without losing any debugging information. There are two steps involved in error chaining: catch low level errors, and rethrow them with a high level message. Catching can be done with &lt;code>base::tryCatch()&lt;/code> or &lt;code>rlang::with_handlers()&lt;/code>. Both these functions take an error handler: a function of one argument which is passed an error object when an error occurs.&lt;/p>
&lt;p>To chain an error, simply call &lt;code>abort()&lt;/code> in the error handler, with a high level error message and the original error passed as the &lt;code>parent&lt;/code> argument. Here we&amp;rsquo;re going to use &lt;code>with_handlers()&lt;/code> because it supports the rlang syntax for lambda functions (also used in purrr), which makes it easy to write simple handlers:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">prepare_data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">with_handlers&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="nf">abort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Can&amp;#39;t download file!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">.)&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nf">fetch_csv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">tibble&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">as_tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nf">make_report&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;https://rstats.edu/awesome-data.csv&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; Error: Can't download file!
#&amp;gt; Parents:
#&amp;gt; ─cannot open the connection to 'https://rstats.edu/awesome-data.csv'
&lt;/pre>&lt;/div>
&lt;p>The main error message is now the high level one. The low level message is still included in the output to avoid hiding precious debugging information. Errors can be chained multiple times and all the messages and all parent messages are included in the output. But note that only errors thrown with &lt;code>abort()&lt;/code> contain a backtrace:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">last_error&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; &lt;span style='font-weight: bold;'>&amp;lt;error&amp;gt;&lt;/span>&lt;span>
#&amp;gt; message: &lt;/span>&lt;span style='font-style: italic;'>Can't download file!&lt;/span>&lt;span>
#&amp;gt; class: `rlang_error`
#&amp;gt; backtrace:
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ─global::make_report("https://rstats.edu/awesome-data.csv")&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ─global::prepare_data(url)&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='font-weight: bold;'>&amp;lt;error: parent&amp;gt;&lt;/span>&lt;span>
#&amp;gt; message: &lt;/span>&lt;span style='font-style: italic;'>cannot open the connection to 'https://rstats.edu/awesome-data.csv'&lt;/span>&lt;span>
#&amp;gt; class: `simpleError`
&lt;/span>&lt;/pre>&lt;/div>
&lt;p>For this reason, chaining errors is more effective with rlang errors than with errors thrown with &lt;code>stop()&lt;/code> and the error report could be improved if &lt;code>fetch_csv()&lt;/code> used &lt;code>abort()&lt;/code> instead of &lt;code>thrown()&lt;/code>. Fortunately it is easy to transform any error into an rlang error without changing any code!&lt;/p>
&lt;h3 id="promoting-base-errors-to-rlang-errors">Promoting base errors to rlang errors
&lt;a href="#promoting-base-errors-to-rlang-errors">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>rlang provides &lt;code>with_abort()&lt;/code> to run code with base errors automatically promoted to rlang errors. Let&amp;rsquo;s wrap around &lt;code>fetch_csv()&lt;/code> to run it in a &lt;code>with_abort&lt;/code> context:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">my_fetch_csv&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">with_abort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">fetch_csv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">prepare_data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">with_handlers&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="nf">abort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Can&amp;#39;t download file!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">.)&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nf">my_fetch_csv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">tibble&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">as_tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Our own function calls &lt;code>abort()&lt;/code> and the foreign functions are called within a &lt;code>with_abort()&lt;/code>. Let&amp;rsquo;s see how chained errors now look like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">make_report&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;https://rstats.edu/awesome-data.csv&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; Error: Can't download file!
#&amp;gt; Parents:
#&amp;gt; ─cannot open the connection to 'https://rstats.edu/awesome-data.csv'
#&amp;gt; &lt;span style='color: #555555;'>Call `rlang::last_error()` to see a backtrace&lt;/span>&lt;span>
&lt;/span>&lt;/pre>&lt;/div>
&lt;p>The backtraces are automatically segmented between low level and high level contexts:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">last_error&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; &lt;span style='font-weight: bold;'>&amp;lt;error&amp;gt;&lt;/span>&lt;span>
#&amp;gt; message: &lt;/span>&lt;span style='font-style: italic;'>Can't download file!&lt;/span>&lt;span>
#&amp;gt; class: `rlang_error`
#&amp;gt; backtrace:
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ─global::make_report("https://rstats.edu/awesome-data.csv")&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ─global::prepare_data(url)&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='font-weight: bold;'>&amp;lt;error: parent&amp;gt;&lt;/span>&lt;span>
#&amp;gt; message: &lt;/span>&lt;span style='font-style: italic;'>cannot open the connection to 'https://rstats.edu/awesome-data.csv'&lt;/span>&lt;span>
#&amp;gt; class: `rlang_error`
#&amp;gt; backtrace:
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ─global::my_fetch_csv(url)&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ─global::fetch_csv(url)&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ─utils::read.csv(url(url))&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ─utils::read.table(...)&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ─base::open.connection(file, "rt")&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #555555;'>Call `summary(rlang::last_error())` to see the full backtrace&lt;/span>&lt;span>
&lt;/span>&lt;/pre>&lt;/div>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">summary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">last_error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; &lt;span style='font-weight: bold;'>&amp;lt;error&amp;gt;&lt;/span>&lt;span>
#&amp;gt; message: &lt;/span>&lt;span style='font-style: italic;'>Can't download file!&lt;/span>&lt;span>
#&amp;gt; class: `rlang_error`
#&amp;gt; fields: `message`, `trace` and `parent`
#&amp;gt; backtrace:
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'>█&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'>└─global::make_report("https://rstats.edu/awesome-data.csv")&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> └─global::prepare_data(url)&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='font-weight: bold;'>&amp;lt;error: parent&amp;gt;&lt;/span>&lt;span>
#&amp;gt; message: &lt;/span>&lt;span style='font-style: italic;'>cannot open the connection to 'https://rstats.edu/awesome-data.csv'&lt;/span>&lt;span>
#&amp;gt; class: `rlang_error`
#&amp;gt; fields: `message`, `trace`, `parent` and `error`
#&amp;gt; backtrace:
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'>█&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'>└─global::my_fetch_csv(url)&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ├─rlang::with_abort(fetch_csv(url))&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> │ └─base::withCallingHandlers(...)&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> └─global::fetch_csv(url)&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ├─base::suppressWarnings(read.csv(url(url)))&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> │ └─base::withCallingHandlers(expr, warning = function(w) invokeRestart("muffleWarning"))&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> └─utils::read.csv(url(url))&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> └─utils::read.table(...)&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> ├─base::open(file, "rt")&lt;/span>&lt;span>
#&amp;gt; &lt;/span>&lt;span style='color: #BB0000;'> └─base::open.connection(file, "rt")&lt;/span>&lt;span>
&lt;/span>&lt;/pre>&lt;/div>
&lt;p>If you&amp;rsquo;d like to promote all errors to rlang errors at all time, you can try out this experimental option by adding this to your RProfile:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">requireNamespace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rlang&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">quietly&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">quote&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rlang&lt;/span>&lt;span class="o">:::&lt;/span>&lt;span class="nf">add_backtrace&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="environments">Environments
&lt;a href="#environments">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The environment API gains two specialised print methods. &lt;code>env_print()&lt;/code> prints information about the contents and the properties of environments. If you don&amp;rsquo;t specify an environment, it prints the current environment by default, here the global environment:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">env_print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; &lt;span style='font-weight: bold;'>&amp;lt;environment: global&amp;gt;&lt;/span>&lt;span>
#&amp;gt; parent: &amp;lt;environment: package:bindrcpp&amp;gt;
#&amp;gt; bindings:
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>fn: &amp;lt;fn&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>var: &amp;lt;chr&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>x: &amp;lt;list&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>fetch_csv: &amp;lt;fn&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>my_fetch_csv: &amp;lt;fn&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>list3: &amp;lt;fn&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>nm: &amp;lt;chr&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>.Random.seed: &amp;lt;int&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>call: &amp;lt;language&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>f: &amp;lt;fn&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>g: &amp;lt;fn&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>h: &amp;lt;fn&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>make_report: &amp;lt;fn&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>df: &amp;lt;tibble&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>colourise_chunk: &amp;lt;fn&amp;gt;
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>prepare_data: &amp;lt;fn&amp;gt;
&lt;/span>&lt;/pre>&lt;/div>
&lt;p>The global environment doesn&amp;rsquo;t have any fancy features. Let&amp;rsquo;s look at a package environment:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">env_print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">pkg_env&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rlang&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; &lt;span style='font-weight: bold;'>&amp;lt;environment: package:rlang&amp;gt; [L]&lt;/span>&lt;span>
#&amp;gt; parent: &amp;lt;environment: package:stats&amp;gt;
#&amp;gt; bindings:
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>is_dbl_na: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>coerce_class: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>as_quosure: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>as_quosures: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>quo_get_env: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>return_to: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>env_binding_are_lazy: &amp;lt;fn&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>quo_is_call: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>new_call: &amp;lt;fn&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>is_scoped: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>set_names: &amp;lt;fn&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>expr_deparse: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>`f_env&amp;lt;-`: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>as_box_if: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>`%|%`: &amp;lt;fn&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>lang_head: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>ns_env: &amp;lt;fn&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>list_along: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>parse_quo: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; &lt;/span>&lt;span style='color: #555555;font-weight: bold;'>* &lt;/span>&lt;span>lang_tail: &amp;lt;lazy&amp;gt; [L]
#&amp;gt; * ... with 438 more bindings
&lt;/span>&lt;/pre>&lt;/div>
&lt;p>This environment contains all functions exported by rlang. Its header includes the &lt;code>[L]&lt;/code> tag to indicate that the environment is locked: you can&amp;rsquo;t add or remove bindings from it. The same tag appears next to each binding to indicate that the bindings are locked and can&amp;rsquo;t be changed to point to a different object. Finally, note how the type of many bindings is &lt;code>&amp;lt;lazy&amp;gt;&lt;/code>. That&amp;rsquo;s because packages are lazily loaded for performance reasons. Technically, the binding points to a &lt;em>promise&lt;/em> that will eventually evaluate to the actual object, the first time it is accessed.&lt;/p>
&lt;p>The second print method concerns lists of environments as returned by &lt;code>search_envs()&lt;/code> and &lt;code>env_parents()&lt;/code>. While &lt;code>base::search()&lt;/code> returns the names of environments on the search path, &lt;code>search_envs()&lt;/code> returns the corresponding list of environments:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">search_envs&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; [[1]] $ &amp;lt;env: global&amp;gt;
#&amp;gt; [[2]] $ &amp;lt;env: package:bindrcpp&amp;gt;
#&amp;gt; [[3]] $ &amp;lt;env: package:dplyr&amp;gt;
#&amp;gt; [[4]] $ &amp;lt;env: package:rlang&amp;gt;
#&amp;gt; [[5]] $ &amp;lt;env: package:stats&amp;gt;
#&amp;gt; [[6]] $ &amp;lt;env: package:graphics&amp;gt;
#&amp;gt; [[7]] $ &amp;lt;env: package:grDevices&amp;gt;
#&amp;gt; [[8]] $ &amp;lt;env: package:utils&amp;gt;
#&amp;gt; [[9]] $ &amp;lt;env: package:datasets&amp;gt;
#&amp;gt; [[10]] $ &amp;lt;env: package:methods&amp;gt;
#&amp;gt; [[11]] $ &amp;lt;env: Autoloads&amp;gt;
#&amp;gt; [[12]] $ &amp;lt;env: package:base&amp;gt;
&lt;/pre>&lt;/div>
&lt;p>&lt;code>env_parents()&lt;/code> returns all parents of a given environment. For search environments, the last parent of the list is the empty environment:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">envs&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">env_parents&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">pkg_env&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;utils&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">envs&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; [[1]] $ &amp;lt;env: package:datasets&amp;gt;
#&amp;gt; [[2]] $ &amp;lt;env: package:methods&amp;gt;
#&amp;gt; [[3]] $ &amp;lt;env: Autoloads&amp;gt;
#&amp;gt; [[4]] $ &amp;lt;env: package:base&amp;gt;
#&amp;gt; [[5]] $ &amp;lt;env: empty&amp;gt;
&lt;/pre>&lt;/div>
&lt;p>For all other environments, the last parent is either the empty environment or the global environment. Most of the time the global env is part of the ancestry because package namespaces inherit from the search path:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">env_parents&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">ns_env&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rlang&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; [[1]] $ &amp;lt;env: imports:rlang&amp;gt;
#&amp;gt; [[2]] $ &amp;lt;env: namespace:base&amp;gt;
#&amp;gt; [[3]] $ &amp;lt;env: global&amp;gt;
&lt;/pre>&lt;/div>
&lt;p>It is possible to construct environments insulated from the search path. We&amp;rsquo;ll use &lt;code>env()&lt;/code> to create such an environment. Counting from rlang 0.3.0, you can pass a single unnamed environment to &lt;code>env()&lt;/code> to specify a parent. The following creates a child of the base package:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">e&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">env&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">base_env&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">env_parents&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; [[1]] $ &amp;lt;env: package:base&amp;gt;
#&amp;gt; [[2]] $ &amp;lt;env: empty&amp;gt;
&lt;/pre>&lt;/div>
&lt;p>Here is how to create a grandchild of the empty environment:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">e&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">env&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">env&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">empty_env&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;span class="nf">env_parents&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class = "output">&lt;pre class="knitr r">#&amp;gt; [[1]] &amp;lt;env: 0x7fb6ec084238&amp;gt;
#&amp;gt; [[2]] $ &amp;lt;env: empty&amp;gt;
&lt;/pre>&lt;/div>
&lt;p>We hope that these print methods make it easier to explore the structure and contents of R environments.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Thanks to all contributors!&lt;/p>
&lt;p>
&lt;a href="https://github.com/akbertram" target="_blank" rel="noopener">＠akbertram&lt;/a>,
&lt;a href="https://github.com/AndreMikulec" target="_blank" rel="noopener">＠AndreMikulec&lt;/a>,
&lt;a href="https://github.com/andresimi" target="_blank" rel="noopener">＠andresimi&lt;/a>,
&lt;a href="https://github.com/billdenney" target="_blank" rel="noopener">＠billdenney&lt;/a>,
&lt;a href="https://github.com/BillDunlap" target="_blank" rel="noopener">＠BillDunlap&lt;/a>,
&lt;a href="https://github.com/cfhammill" target="_blank" rel="noopener">＠cfhammill&lt;/a>,
&lt;a href="https://github.com/egnha" target="_blank" rel="noopener">＠egnha&lt;/a>,
&lt;a href="https://github.com/grayskripko" target="_blank" rel="noopener">＠grayskripko&lt;/a>,
&lt;a href="https://github.com/hadley" target="_blank" rel="noopener">＠hadley&lt;/a>,
&lt;a href="https://github.com/IndrajeetPatil" target="_blank" rel="noopener">＠IndrajeetPatil&lt;/a>,
&lt;a href="https://github.com/jimhester" target="_blank" rel="noopener">＠jimhester&lt;/a>,
&lt;a href="https://github.com/krlmlr" target="_blank" rel="noopener">＠krlmlr&lt;/a>,
&lt;a href="https://github.com/marinsokol5" target="_blank" rel="noopener">＠marinsokol5&lt;/a>,
&lt;a href="https://github.com/md0u80c9" target="_blank" rel="noopener">＠md0u80c9&lt;/a>,
&lt;a href="https://github.com/mikmart" target="_blank" rel="noopener">＠mikmart&lt;/a>,
&lt;a href="https://github.com/move[bot]" target="_blank" rel="noopener">＠move[bot]&lt;/a>,
&lt;a href="https://github.com/NikNakk" target="_blank" rel="noopener">＠NikNakk&lt;/a>,
&lt;a href="https://github.com/privefl" target="_blank" rel="noopener">＠privefl&lt;/a>,
&lt;a href="https://github.com/romainfrancois" target="_blank" rel="noopener">＠romainfrancois&lt;/a>,
&lt;a href="https://github.com/wibeasley" target="_blank" rel="noopener">＠wibeasley&lt;/a>,
&lt;a href="https://github.com/yutannihilation" target="_blank" rel="noopener">＠yutannihilation&lt;/a>, and
&lt;a href="https://github.com/zslajchrt" target="_blank" rel="noopener">＠zslajchrt&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Or &lt;code>global::&lt;/code> if the function is defined in the global workspace. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>rlang 0.2.0</title><link>https://www.tidyverse.org/blog/2018/03/rlang-0.2.0/</link><pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2018/03/rlang-0.2.0/</guid><description>
&lt;p>We are happy to announce a new version of &lt;a href="http://rlang.tidyverse.org/">rlang&lt;/a> that features many improvements to tidy evaluation:&lt;/p>
&lt;ul>
&lt;li>&lt;p>The quirks in the quasiquotation syntax have been much reduced.&lt;/p>&lt;/li>
&lt;li>&lt;p>Quosures gained a much improved printing method with colour support.&lt;/p>&lt;/li>
&lt;li>&lt;p>The performance of quoting, splicing and quosure evaluation was vastly improved.&lt;/p>&lt;/li>
&lt;li>&lt;p>Many bugs have been fixed.&lt;/p>&lt;/li>
&lt;/ul>
&lt;p>Install the latest version of rlang with:&lt;/p>
&lt;pre class="r">&lt;code>install.packages(&amp;quot;rlang&amp;quot;)&lt;/code>&lt;/pre>
&lt;div id="syntax-adjustments-for-the-operator" class="section level3">
&lt;h3>Syntax adjustments for the !! operator&lt;/h3>
&lt;p>The headline improvement is a much improved syntax for the &lt;code>!!&lt;/code> operator (pronounced bang-bang). In a way bang-bang is a lie, or a &lt;a href="https://adv-r.hadley.nz/quasiquotation.html#the-polite-fiction-of">polite fiction&lt;/a>. It is not a real R operator and only works in tidy evaluation functions. To implement &lt;code>!!&lt;/code>, we simply look at the code and reinterpret two consecutive &lt;code>!&lt;/code> negations as the unquoting operator. The major downside of this approach was that our &lt;code>!!&lt;/code> operator inherited from the operation precedence of &lt;code>!&lt;/code>, which is very low. As a result &lt;code>!!a + b&lt;/code> was interpreted by R as &lt;code>!!(a + b)&lt;/code> rather than &lt;code>(!!a) + b&lt;/code>. To work around this, tidy eval users had to add explicit parentheses, which was often confusing.&lt;/p>
&lt;p>Happily this is no longer necessary. We now reprocess the whole syntax tree to give &lt;code>!!&lt;/code> a more natural operation precedence, i.e. that of unary &lt;code>+&lt;/code> and &lt;code>-&lt;/code>. This means that expressions like &lt;code>!!a &amp;gt; b&lt;/code> now do the expected thing (only &lt;code>a&lt;/code> is unquoted):&lt;/p>
&lt;pre class="r">&lt;code>a &amp;lt;- sym(&amp;quot;foo&amp;quot;)
expr(!!a &amp;gt; b)&lt;/code>&lt;/pre>
&lt;pre class="knitr r">#&amp;gt; foo &amp;gt; b
&lt;/pre>
&lt;p>In addition, we automatically strip one layer when &lt;code>!!&lt;/code> is wrapped in parentheses. This is useful for unquoting function names cleanly:&lt;/p>
&lt;pre class="r">&lt;code>expr((!!a)(bar, baz))&lt;/code>&lt;/pre>
&lt;pre class="knitr r">#&amp;gt; foo(bar, baz)
&lt;/pre>
&lt;pre class="r">&lt;code>
op &amp;lt;- sym(&amp;quot;&amp;gt;&amp;quot;)
expr((!!op)(bar, baz))&lt;/code>&lt;/pre>
&lt;pre class="knitr r">#&amp;gt; bar &amp;gt; baz
&lt;/pre>
&lt;/div>
&lt;div id="a-new-print-method-for-quosures" class="section level3">
&lt;h3>A new print method for quosures&lt;/h3>
&lt;div id="problems-with-base-r-deparsing" class="section level4">
&lt;h4>Problems with base R deparsing&lt;/h4>
&lt;p>When R code is printed at the console (be it a function, an expression, a formula or a quosure), R runs the function &lt;code>deparse()&lt;/code> to transform the code to a printable string. The deparsing mechanism in base R is not optimal for tidy eval:&lt;/p>
&lt;ul>
&lt;li>&lt;p>It adds redundant parentheses between the &lt;code>!&lt;/code> of &lt;code>!!&lt;/code>:&lt;/p>
&lt;pre class="r">&lt;code>quote(!!x)&lt;/code>&lt;/pre>
&lt;pre class="knitr r">#&amp;gt; !(!x)
&lt;/pre>
&lt;p>If you ever encounter these weird &lt;code>!(!x)&lt;/code> statements (for instance by printing the code of a tidy eval function in the console), it’s because the R printer adds the pair of parentheses at printing-time. The good news is that it is merely a printing problem.&lt;/p>&lt;/li>
&lt;li>&lt;p>The way it prints inlined vectors is ambiguous. R expressions can contain actual data structures not just symbolic code. It is especially easy to inline vectors and other objects with quasiquotation:&lt;/p>
&lt;pre class="r">&lt;code>expr(mean(!!c(1, 2, 3)))&lt;/code>&lt;/pre>
&lt;pre class="knitr r">#&amp;gt; mean(c(1, 2, 3))
&lt;/pre>
&lt;p>Note how the output above is indistinguishable from the following output:&lt;/p>
&lt;pre class="r">&lt;code>expr(mean(c(1, 2, 3)))&lt;/code>&lt;/pre>
&lt;pre class="knitr r">#&amp;gt; mean(c(1, 2, 3))
&lt;/pre>
&lt;p>In both cases, the R printer outputs the code that creates the vector, even if the vector is already created as in the first case!&lt;/p>&lt;/li>
&lt;li>&lt;p>Quosures are currently implemented as formulas but that’s an implementation detail. Quosures and formulas behave differently and it is misleading to have them print as formulas:&lt;/p>
&lt;pre class="r">&lt;code>expr(mean(!!quo(c(1, 2, 3))))&lt;/code>&lt;/pre>
&lt;pre class="knitr r">#&amp;gt; mean(~c(1, 2, 3))
&lt;/pre>
&lt;p>Furthermore, it would be nice to have a way to distinguish quosures coming from different contexts.&lt;/p>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div id="deparsing-with-rlang" class="section level4">
&lt;h4>Deparsing with rlang&lt;/h4>
&lt;p>rlang now features &lt;code>expr_print()&lt;/code> powered by &lt;code>expr_deparse()&lt;/code>. These functions are used in the print method of quosures and nicely solve the printing issues:&lt;/p>
&lt;ul>
&lt;li>&lt;p>Inlined vectors are represented with angular brackets and are abbreviated to avoid taking too much space:&lt;/p>
&lt;pre class="r">&lt;code>quo(list(code = 1:10, data = !!(1:10)))&lt;/code>&lt;/pre>
&lt;pre class="knitr r">#&amp;gt; &amp;lt;quosure&amp;gt;
#&amp;gt; expr: ^list(code = 1:10, data = &amp;lt;int: 1L, 2L, 3L, 4L, 5L, ...&amp;gt;)
#&amp;gt; env: global
&lt;/pre>
&lt;p>S3 objects are printed based on the extensible &lt;code>pillar::type_sum()&lt;/code> generic:&lt;/p>
&lt;pre class="r">&lt;code>quo(lm(!!(disp ~ cyl), data = !!mtcars))&lt;/code>&lt;/pre>
&lt;pre class="knitr r">#&amp;gt; &amp;lt;quosure&amp;gt;
#&amp;gt; expr: ^lm(&amp;lt;S3: formula&amp;gt;, data = &amp;lt;data.frame&amp;gt;)
#&amp;gt; env: global
&lt;/pre>&lt;/li>
&lt;li>&lt;p>As you can see in the output above quosures are now displayed with a leading &lt;code>^&lt;/code> instead of a tilde in order to distinguish them from formulas. In addition, they are now colourised according to their environments. Quosures from the global environment are always printed with the default colour. Quosures from local environments are printed with a unique colour. To illustrate this, let’s create two quosures referring to &lt;code>arg&lt;/code>, where &lt;code>arg&lt;/code> represents a different object:&lt;/p>
&lt;pre class="r">&lt;code>make_quo &amp;lt;- function(arg) {
quo(arg)
}
q1 &amp;lt;- make_quo(&amp;quot;foo&amp;quot;)
q2 &amp;lt;- make_quo(&amp;quot;bar&amp;quot;)
q3 &amp;lt;- quo(list(!!q1, !!q2))
q3&lt;/code>&lt;/pre>
&lt;pre class="knitr r">#&amp;gt; &amp;lt;quosure&amp;gt;
#&amp;gt; expr: ^list(&lt;span style="color:#3465a4">^arg&lt;/span>, &lt;span style="color:#4e9a06">^arg&lt;/span>)
#&amp;gt; env: global
&lt;/pre>
&lt;p>&lt;code>q3&lt;/code> contains two nested quosures that both point to objects called &lt;code>arg&lt;/code>. While they have the same names these objects come from different contexts, the contexts that were created each time we called the function &lt;code>make_quo()&lt;/code>. Let’s evaluate &lt;code>q3&lt;/code> to verify this:&lt;/p>
&lt;pre class="r">&lt;code>eval_tidy(q3)&lt;/code>&lt;/pre>
&lt;pre class="knitr r">#&amp;gt; [[1]]
#&amp;gt; [1] "foo"
#&amp;gt;
#&amp;gt; [[2]]
#&amp;gt; [1] "bar"
&lt;/pre>
&lt;p>The colours should help you figure out what is happening when quosures from disparate contexts are unquoted in a larger expression.&lt;/p>&lt;/li>
&lt;/ul>
&lt;p>Note that if you are ever confused by how a quosure prints out (perhaps because of those intervening &lt;code>^&lt;/code> symbols), you can use the new function &lt;code>quo_squash()&lt;/code> to get rid of all the nested quosures and print a naked version:&lt;/p>
&lt;pre class="r">&lt;code>quo_squash(q3)&lt;/code>&lt;/pre>
&lt;pre class="knitr r">#&amp;gt; list(arg, arg)
&lt;/pre>
&lt;p>Finally, raw expressions created by &lt;code>expr()&lt;/code> are still printed with the base R deparser. If you would like to debug tidy eval code and inspect the result of quasiquotation, use the new &lt;code>qq_show()&lt;/code> function to display a raw expression with the new printer:&lt;/p>
&lt;pre class="r">&lt;code>my_wrapper &amp;lt;- function(data, expr) {
expr &amp;lt;- enquo(expr)
qq_show(data %&amp;gt;% mutate(mean(!!expr)))
}
my_wrapper(mtcars, cyl)&lt;/code>&lt;/pre>
&lt;pre class="knitr r">#&amp;gt; data %&amp;gt;% mutate(mean(^cyl))
&lt;/pre>
&lt;/div>
&lt;/div></description></item></channel></rss>