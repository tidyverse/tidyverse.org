<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dplyr-1-0-0 | Tidyverse</title><link>https://www.tidyverse.org/tags/dplyr-1-0-0/</link><atom:link href="https://www.tidyverse.org/tags/dplyr-1-0-0/index.xml" rel="self" type="application/rss+xml"/><description>dplyr-1-0-0</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 01 Jun 2020 00:00:00 +0000</lastBuildDate><item><title>dplyr 1.0.0 available now!</title><link>https://www.tidyverse.org/blog/2020/06/dplyr-1-0-0/</link><pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/06/dplyr-1-0-0/</guid><description>&lt;p>I&amp;rsquo;m very excited to announce the ninth and final blog post in the
&lt;a href="https://www.tidyverse.org/tags/dplyr-1-0-0">dplyr 1.0.0 series&lt;/a>:
&lt;a href="http://dplyr.tidyverse.org/" target="_blank" rel="noopener">dplyr 1.0.0&lt;/a> is now available from CRAN! Install it by running:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>install.packages&lt;/span>(&lt;span class='s'>"dplyr"&lt;/span>)&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Then load it with:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>library&lt;/span>(&lt;span class='k'>&lt;a href='https://dplyr.tidyverse.org/reference'>dplyr&lt;/a>&lt;/span>)&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="new-features">New features
&lt;a href="#new-features">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>dplyr 1.0.0 is chock-a-block with new features; so many, in fact, that we can&amp;rsquo;t fit them all into one post. So if you want to learn more about what&amp;rsquo;s new, we recommend reading our existing series of posts:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>
&lt;a href="https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-is-coming-soon/">Major lifecycle changes&lt;/a>. This post focusses on the idea of the &amp;ldquo;function lifecycle&amp;rdquo; which helps you understand where functions in dplyr are going. Particularly important is the idea of a &amp;ldquo;superseded&amp;rdquo; function. A superseded function is not going away, but we no longer recommend using it in new code.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-summarise/">New &lt;code>summarise()&lt;/code> features&lt;/a>. In
&lt;a href="https://dplyr.tidyverse.org/reference/summarise.html" target="_blank" rel="noopener">&lt;code>summarise()&lt;/code>&lt;/a>, a single summary expression can now create both multiple rows and multiple columns. This significantly increases its power and flexibility.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-select-rename-relocate/">&lt;code>select()&lt;/code>, &lt;code>rename()&lt;/code>, and (new) &lt;code>relocate()&lt;/code>&lt;/a>.
&lt;a href="https://dplyr.tidyverse.org/reference/select.html" target="_blank" rel="noopener">&lt;code>select()&lt;/code>&lt;/a> and
&lt;a href="https://dplyr.tidyverse.org/reference/rename.html" target="_blank" rel="noopener">&lt;code>rename()&lt;/code>&lt;/a> can now select by position, name, function of name, type, and any combination thereof. A new
&lt;a href="https://dplyr.tidyverse.org/reference/relocate.html" target="_blank" rel="noopener">&lt;code>relocate()&lt;/code>&lt;/a> function makes it easy to change the position of columns.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-colwise/">Working &lt;code>across()&lt;/code> columns&lt;/a>. A new
&lt;a href="https://dplyr.tidyverse.org/reference/across.html" target="_blank" rel="noopener">&lt;code>across()&lt;/code>&lt;/a> function makes it much easier to apply the same operation to multiple columns. It supersedes the &lt;code>_if()&lt;/code>, &lt;code>_at()&lt;/code>, and &lt;code>_all()&lt;/code> function variants.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-rowwise/">Working within rows&lt;/a>.
&lt;a href="https://dplyr.tidyverse.org/reference/rowwise.html" target="_blank" rel="noopener">&lt;code>rowwise()&lt;/code>&lt;/a> has been renewed and revamped to make it easier to perform operations row-by-row. This makes it much easier to solve problems that previously required
&lt;a href="https://rdrr.io/r/base/lapply.html" target="_blank" rel="noopener">&lt;code>base::lapply()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>purrr::map()&lt;/code>&lt;/a>, or friends.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-and-vctrs/">The role of the vctrs package&lt;/a>. dplyr now makes heavy use of
&lt;a href="http://vctrs.r-lib.org/" target="_blank" rel="noopener">vctrs&lt;/a> behind the scenes. This brings with it greater consistency and (hopefully!) more useful error messages.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://www.tidyverse.org/blog/2020/05/dplyr-1-0-0-last-minute-additions/">Last minute additions&lt;/a>
&lt;a href="https://dplyr.tidyverse.org/reference/summarise.html" target="_blank" rel="noopener">&lt;code>summarise()&lt;/code>&lt;/a> now allows you to control how its results are grouped, and there&amp;rsquo;s a new family of functions designed for modifying rows.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>You can see the full list of changes in the
&lt;a href="https://github.com/tidyverse/dplyr/releases/tag/v1.0.0" target="_blank" rel="noopener">release notes&lt;/a>.&lt;/p>
&lt;h2 id="new-logo">New logo
&lt;a href="#new-logo">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>dplyr has a new logo thanks to the talented
&lt;a href="https://allisonhorst.github.io" target="_blank" rel="noopener">Allison Horst&lt;/a>!&lt;/p>
&lt;p>&lt;img src="dplyr.png" width="250" alt="New dplyr logo" />Â &lt;/p>
&lt;p>(Stay tuned for details about how to get this sticker on to your laptop. We have some exciting news coming up!)&lt;/p>
&lt;h2 id="a-small-teaser">A small teaser
&lt;a href="#a-small-teaser">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The best way to find out about all the cool new features dplyr has to offer is to read through the blog posts linked to above. But thanks to inspiration from
&lt;a href="https://twitter.com/datalorax_/status/1258208502960422914" target="_blank" rel="noopener">Daniel Anderson&lt;/a> here&amp;rsquo;s one example of fitting two different models by subgroup that shows off a bunch of cool features:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>library&lt;/span>(&lt;span class='k'>&lt;a href='https://dplyr.tidyverse.org/reference'>dplyr&lt;/a>&lt;/span>, warn.conflicts = &lt;span class='m'>FALSE&lt;/span>)
&lt;span class='k'>models&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='k'>tibble&lt;/span>::&lt;span class='nf'>&lt;a href='https://tibble.tidyverse.org/reference/tribble.html'>tribble&lt;/a>&lt;/span>(
&lt;span class='o'>~&lt;/span>&lt;span class='k'>model_name&lt;/span>, &lt;span class='o'>~&lt;/span> &lt;span class='k'>formula&lt;/span>,
&lt;span class='s'>"length-width"&lt;/span>, &lt;span class='k'>Sepal.Length&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='k'>Petal.Width&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='k'>Petal.Length&lt;/span>,
&lt;span class='s'>"interaction"&lt;/span>, &lt;span class='k'>Sepal.Length&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='k'>Petal.Width&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='k'>Petal.Length&lt;/span>
)
&lt;span class='k'>iris&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/nest_by.html'>nest_by&lt;/a>&lt;/span>(&lt;span class='k'>Species&lt;/span>) &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/mutate-joins.html'>left_join&lt;/a>&lt;/span>(&lt;span class='k'>models&lt;/span>, by = &lt;span class='nf'>character&lt;/span>()) &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/rowwise.html'>rowwise&lt;/a>&lt;/span>(&lt;span class='k'>Species&lt;/span>, &lt;span class='k'>model_name&lt;/span>) &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/mutate.html'>mutate&lt;/a>&lt;/span>(model = &lt;span class='nf'>list&lt;/span>(&lt;span class='nf'>lm&lt;/span>(&lt;span class='k'>formula&lt;/span>, data = &lt;span class='k'>data&lt;/span>))) &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/summarise.html'>summarise&lt;/a>&lt;/span>(&lt;span class='k'>broom&lt;/span>::&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/broom/man/reexports.html'>glance&lt;/a>&lt;/span>(&lt;span class='k'>model&lt;/span>))
&lt;span class='c'>#&amp;gt; `summarise()` regrouping output by 'Species', 'model_name' (override with `.groups` argument)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #949494;'># A tibble: 6 x 13&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #949494;'># Groups: Species, model_name [6]&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='font-weight: bold;'>Species&lt;/span>&lt;span> &lt;/span>&lt;span style='font-weight: bold;'>model_name&lt;/span>&lt;span> &lt;/span>&lt;span style='font-weight: bold;'>r.squared&lt;/span>&lt;span> &lt;/span>&lt;span style='font-weight: bold;'>adj.r.squared&lt;/span>&lt;span> &lt;/span>&lt;span style='font-weight: bold;'>sigma&lt;/span>&lt;span> &lt;/span>&lt;span style='font-weight: bold;'>statistic&lt;/span>&lt;span> &lt;/span>&lt;span style='font-weight: bold;'>p.value&lt;/span>&lt;span> &lt;/span>&lt;span style='font-weight: bold;'>df&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #949494;font-style: italic;'>&amp;lt;fct&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #949494;font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #949494;font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #949494;font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #949494;font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #949494;font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #949494;font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;span> &lt;/span>&lt;span style='color: #949494;font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BCBCBC;'>1&lt;/span>&lt;span> setosa length-wiâ¦ 0.112 0.073&lt;/span>&lt;span style='text-decoration: underline;'>9&lt;/span>&lt;span> 0.339 2.96 6.18&lt;/span>&lt;span style='color: #949494;'>e&lt;/span>&lt;span style='color: #BB0000;'>- 2&lt;/span>&lt;span> 3&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BCBCBC;'>2&lt;/span>&lt;span> setosa interactiâ¦ 0.133 0.076&lt;/span>&lt;span style='text-decoration: underline;'>0&lt;/span>&lt;span> 0.339 2.34 8.54&lt;/span>&lt;span style='color: #949494;'>e&lt;/span>&lt;span style='color: #BB0000;'>- 2&lt;/span>&lt;span> 4&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BCBCBC;'>3&lt;/span>&lt;span> versicâ¦ length-wiâ¦ 0.574 0.556 0.344 31.7 1.92&lt;/span>&lt;span style='color: #949494;'>e&lt;/span>&lt;span style='color: #BB0000;'>- 9&lt;/span>&lt;span> 3&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BCBCBC;'>4&lt;/span>&lt;span> versicâ¦ interactiâ¦ 0.577 0.549 0.347 20.9 1.11&lt;/span>&lt;span style='color: #949494;'>e&lt;/span>&lt;span style='color: #BB0000;'>- 8&lt;/span>&lt;span> 4&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BCBCBC;'>5&lt;/span>&lt;span> virginâ¦ length-wiâ¦ 0.747 0.736 0.327 69.3 9.50&lt;/span>&lt;span style='color: #949494;'>e&lt;/span>&lt;span style='color: #BB0000;'>-15&lt;/span>&lt;span> 3&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BCBCBC;'>6&lt;/span>&lt;span> virginâ¦ interactiâ¦ 0.757 0.741 0.323 47.8 3.54&lt;/span>&lt;span style='color: #949494;'>e&lt;/span>&lt;span style='color: #BB0000;'>-14&lt;/span>&lt;span> 4&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #949494;'># â¦ with 5 more variables: &lt;/span>&lt;span style='color: #949494;font-weight: bold;'>logLik&lt;/span>&lt;span style='color: #949494;'> &lt;/span>&lt;span style='color: #949494;font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;span style='color: #949494;'>, &lt;/span>&lt;span style='color: #949494;font-weight: bold;'>AIC&lt;/span>&lt;span style='color: #949494;'> &lt;/span>&lt;span style='color: #949494;font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;span style='color: #949494;'>, &lt;/span>&lt;span style='color: #949494;font-weight: bold;'>BIC&lt;/span>&lt;span style='color: #949494;'> &lt;/span>&lt;span style='color: #949494;font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;span style='color: #949494;'>, &lt;/span>&lt;span style='color: #949494;font-weight: bold;'>deviance&lt;/span>&lt;span style='color: #949494;'> &lt;/span>&lt;span style='color: #949494;font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;span style='color: #949494;'>,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #949494;'># &lt;/span>&lt;span style='color: #949494;font-weight: bold;'>df.residual&lt;/span>&lt;span style='color: #949494;'> &lt;/span>&lt;span style='color: #949494;font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Note the use of:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The new
&lt;a href="https://dplyr.tidyverse.org/reference/nest_by.html" target="_blank" rel="noopener">&lt;code>nest_by()&lt;/code>&lt;/a>, which generates a nested data frame where each row represents one subgroup.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In
&lt;a href="https://dplyr.tidyverse.org/reference/mutate-joins.html" target="_blank" rel="noopener">&lt;code>left_join()&lt;/code>&lt;/a>, &lt;code>by = character()&lt;/code> which now performs a Cartesian product, generating every combination of subgroup and model.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://dplyr.tidyverse.org/reference/rowwise.html" target="_blank" rel="noopener">&lt;code>rowwise()&lt;/code>&lt;/a> and
&lt;a href="https://dplyr.tidyverse.org/reference/mutate.html" target="_blank" rel="noopener">&lt;code>mutate()&lt;/code>&lt;/a> which fit a model to each row.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The newly powerful
&lt;a href="https://dplyr.tidyverse.org/reference/summarise.html" target="_blank" rel="noopener">&lt;code>summarise()&lt;/code>&lt;/a> which summarises each model with the model fit statistics computed by
&lt;a href="https://rdrr.io/pkg/broom/man/reexports.html" target="_blank" rel="noopener">&lt;code>broom::glance()&lt;/code>&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>dplyr 1.0.0 has been one of the biggest projects that we, as a team, have ever tackled. Almost everyone in the tidyverse team has been involved in some capacity. Special thanks go to Romain FranÃ§ois, who in his role as primary developer has been working on this release for over six months, and to Lionel Henry and Davis Vaughn for all their work on the vctrs package. Jim Hester&amp;rsquo;s work on running revdep checks in the cloud also made a big impact on our ability to understand failure modes.&lt;/p>
&lt;p>A big thanks to all 137 members of the dplyr community who helped make this release possible by finding bugs, discussing issues, and writing code:
&lt;a href="https://github.com/AdaemmerP" target="_blank" rel="noopener">@AdaemmerP&lt;/a>,
&lt;a href="https://github.com/adelarue" target="_blank" rel="noopener">@adelarue&lt;/a>,
&lt;a href="https://github.com/ahernnelson" target="_blank" rel="noopener">@ahernnelson&lt;/a>,
&lt;a href="https://github.com/alaataleb111" target="_blank" rel="noopener">@alaataleb111&lt;/a>,
&lt;a href="https://github.com/antoine-sachet" target="_blank" rel="noopener">@antoine-sachet&lt;/a>,
&lt;a href="https://github.com/atusy" target="_blank" rel="noopener">@atusy&lt;/a>,
&lt;a href="https://github.com/Auld-Greg" target="_blank" rel="noopener">@Auld-Greg&lt;/a>,
&lt;a href="https://github.com/b-rodrigues" target="_blank" rel="noopener">@b-rodrigues&lt;/a>,
&lt;a href="https://github.com/batpigandme" target="_blank" rel="noopener">@batpigandme&lt;/a>,
&lt;a href="https://github.com/bedantaguru" target="_blank" rel="noopener">@bedantaguru&lt;/a>,
&lt;a href="https://github.com/benjaminschlegel" target="_blank" rel="noopener">@benjaminschlegel&lt;/a>,
&lt;a href="https://github.com/benjbuch" target="_blank" rel="noopener">@benjbuch&lt;/a>,
&lt;a href="https://github.com/bergsmat" target="_blank" rel="noopener">@bergsmat&lt;/a>,
&lt;a href="https://github.com/billdenney" target="_blank" rel="noopener">@billdenney&lt;/a>,
&lt;a href="https://github.com/brianmsm" target="_blank" rel="noopener">@brianmsm&lt;/a>,
&lt;a href="https://github.com/bwiernik" target="_blank" rel="noopener">@bwiernik&lt;/a>,
&lt;a href="https://github.com/caldwellst" target="_blank" rel="noopener">@caldwellst&lt;/a>,
&lt;a href="https://github.com/cat-zeppelin" target="_blank" rel="noopener">@cat-zeppelin&lt;/a>,
&lt;a href="https://github.com/chillywings" target="_blank" rel="noopener">@chillywings&lt;/a>,
&lt;a href="https://github.com/clauswilke" target="_blank" rel="noopener">@clauswilke&lt;/a>,
&lt;a href="https://github.com/colearendt" target="_blank" rel="noopener">@colearendt&lt;/a>,
&lt;a href="https://github.com/DanChaltiel" target="_blank" rel="noopener">@DanChaltiel&lt;/a>,
&lt;a href="https://github.com/danoreper" target="_blank" rel="noopener">@danoreper&lt;/a>,
&lt;a href="https://github.com/danzafar" target="_blank" rel="noopener">@danzafar&lt;/a>,
&lt;a href="https://github.com/davidbaniadam" target="_blank" rel="noopener">@davidbaniadam&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/dblodgett-usgs" target="_blank" rel="noopener">@dblodgett-usgs&lt;/a>,
&lt;a href="https://github.com/ddsjoberg" target="_blank" rel="noopener">@ddsjoberg&lt;/a>,
&lt;a href="https://github.com/deschen1" target="_blank" rel="noopener">@deschen1&lt;/a>,
&lt;a href="https://github.com/dfrankow" target="_blank" rel="noopener">@dfrankow&lt;/a>,
&lt;a href="https://github.com/DiegoKoz" target="_blank" rel="noopener">@DiegoKoz&lt;/a>,
&lt;a href="https://github.com/dkahle" target="_blank" rel="noopener">@dkahle&lt;/a>,
&lt;a href="https://github.com/DzimitryM" target="_blank" rel="noopener">@DzimitryM&lt;/a>,
&lt;a href="https://github.com/earowang" target="_blank" rel="noopener">@earowang&lt;/a>,
&lt;a href="https://github.com/echasnovski" target="_blank" rel="noopener">@echasnovski&lt;/a>,
&lt;a href="https://github.com/edwindj" target="_blank" rel="noopener">@edwindj&lt;/a>,
&lt;a href="https://github.com/elbersb" target="_blank" rel="noopener">@elbersb&lt;/a>,
&lt;a href="https://github.com/elcega" target="_blank" rel="noopener">@elcega&lt;/a>,
&lt;a href="https://github.com/ericemc3" target="_blank" rel="noopener">@ericemc3&lt;/a>,
&lt;a href="https://github.com/espinielli" target="_blank" rel="noopener">@espinielli&lt;/a>,
&lt;a href="https://github.com/FedericoConcas" target="_blank" rel="noopener">@FedericoConcas&lt;/a>,
&lt;a href="https://github.com/FlukeAndFeather" target="_blank" rel="noopener">@FlukeAndFeather&lt;/a>,
&lt;a href="https://github.com/GegznaV" target="_blank" rel="noopener">@GegznaV&lt;/a>,
&lt;a href="https://github.com/gergness" target="_blank" rel="noopener">@gergness&lt;/a>,
&lt;a href="https://github.com/ggrothendieck" target="_blank" rel="noopener">@ggrothendieck&lt;/a>,
&lt;a href="https://github.com/glennmschultz" target="_blank" rel="noopener">@glennmschultz&lt;/a>,
&lt;a href="https://github.com/gowerc" target="_blank" rel="noopener">@gowerc&lt;/a>,
&lt;a href="https://github.com/greg-minshall" target="_blank" rel="noopener">@greg-minshall&lt;/a>,
&lt;a href="https://github.com/gregorp" target="_blank" rel="noopener">@gregorp&lt;/a>,
&lt;a href="https://github.com/ha0ye" target="_blank" rel="noopener">@ha0ye&lt;/a>,
&lt;a href="https://github.com/hadley" target="_blank" rel="noopener">@hadley&lt;/a>,
&lt;a href="https://github.com/Harrison4192" target="_blank" rel="noopener">@Harrison4192&lt;/a>,
&lt;a href="https://github.com/henry090" target="_blank" rel="noopener">@henry090&lt;/a>,
&lt;a href="https://github.com/hughjonesd" target="_blank" rel="noopener">@hughjonesd&lt;/a>,
&lt;a href="https://github.com/ianmcook" target="_blank" rel="noopener">@ianmcook&lt;/a>,
&lt;a href="https://github.com/ismailmuller" target="_blank" rel="noopener">@ismailmuller&lt;/a>,
&lt;a href="https://github.com/isteves" target="_blank" rel="noopener">@isteves&lt;/a>,
&lt;a href="https://github.com/its-gazza" target="_blank" rel="noopener">@its-gazza&lt;/a>,
&lt;a href="https://github.com/j450h1" target="_blank" rel="noopener">@j450h1&lt;/a>,
&lt;a href="https://github.com/Jagadeeshkb" target="_blank" rel="noopener">@Jagadeeshkb&lt;/a>,
&lt;a href="https://github.com/jarauh" target="_blank" rel="noopener">@jarauh&lt;/a>,
&lt;a href="https://github.com/jason-liu-cs" target="_blank" rel="noopener">@jason-liu-cs&lt;/a>,
&lt;a href="https://github.com/jayqi" target="_blank" rel="noopener">@jayqi&lt;/a>,
&lt;a href="https://github.com/JBGruber" target="_blank" rel="noopener">@JBGruber&lt;/a>,
&lt;a href="https://github.com/jemus42" target="_blank" rel="noopener">@jemus42&lt;/a>,
&lt;a href="https://github.com/jennybc" target="_blank" rel="noopener">@jennybc&lt;/a>,
&lt;a href="https://github.com/jflournoy" target="_blank" rel="noopener">@jflournoy&lt;/a>,
&lt;a href="https://github.com/jhuntergit" target="_blank" rel="noopener">@jhuntergit&lt;/a>,
&lt;a href="https://github.com/JohannesNE" target="_blank" rel="noopener">@JohannesNE&lt;/a>,
&lt;a href="https://github.com/jzadra" target="_blank" rel="noopener">@jzadra&lt;/a>,
&lt;a href="https://github.com/karldw" target="_blank" rel="noopener">@karldw&lt;/a>,
&lt;a href="https://github.com/kassambara" target="_blank" rel="noopener">@kassambara&lt;/a>,
&lt;a href="https://github.com/klin333" target="_blank" rel="noopener">@klin333&lt;/a>,
&lt;a href="https://github.com/knausb" target="_blank" rel="noopener">@knausb&lt;/a>,
&lt;a href="https://github.com/kriemo" target="_blank" rel="noopener">@kriemo&lt;/a>,
&lt;a href="https://github.com/krispiepage" target="_blank" rel="noopener">@krispiepage&lt;/a>,
&lt;a href="https://github.com/krlmlr" target="_blank" rel="noopener">@krlmlr&lt;/a>,
&lt;a href="https://github.com/kvasilopoulos" target="_blank" rel="noopener">@kvasilopoulos&lt;/a>,
&lt;a href="https://github.com/larry77" target="_blank" rel="noopener">@larry77&lt;/a>,
&lt;a href="https://github.com/leonawicz" target="_blank" rel="noopener">@leonawicz&lt;/a>,
&lt;a href="https://github.com/lionel-" target="_blank" rel="noopener">@lionel-&lt;/a>,
&lt;a href="https://github.com/lorenzwalthert" target="_blank" rel="noopener">@lorenzwalthert&lt;/a>,
&lt;a href="https://github.com/LudvigOlsen" target="_blank" rel="noopener">@LudvigOlsen&lt;/a>,
&lt;a href="https://github.com/madlogos" target="_blank" rel="noopener">@madlogos&lt;/a>,
&lt;a href="https://github.com/markdly" target="_blank" rel="noopener">@markdly&lt;/a>,
&lt;a href="https://github.com/markfairbanks" target="_blank" rel="noopener">@markfairbanks&lt;/a>,
&lt;a href="https://github.com/meghapsimatrix" target="_blank" rel="noopener">@meghapsimatrix&lt;/a>,
&lt;a href="https://github.com/meixiaba" target="_blank" rel="noopener">@meixiaba&lt;/a>,
&lt;a href="https://github.com/melissagwolf" target="_blank" rel="noopener">@melissagwolf&lt;/a>,
&lt;a href="https://github.com/mgirlich" target="_blank" rel="noopener">@mgirlich&lt;/a>,
&lt;a href="https://github.com/Michael-Sheppard" target="_blank" rel="noopener">@Michael-Sheppard&lt;/a>,
&lt;a href="https://github.com/mikmart" target="_blank" rel="noopener">@mikmart&lt;/a>,
&lt;a href="https://github.com/mine-cetinkaya-rundel" target="_blank" rel="noopener">@mine-cetinkaya-rundel&lt;/a>,
&lt;a href="https://github.com/mir-cat" target="_blank" rel="noopener">@mir-cat&lt;/a>,
&lt;a href="https://github.com/mjsmith037" target="_blank" rel="noopener">@mjsmith037&lt;/a>,
&lt;a href="https://github.com/mlane3" target="_blank" rel="noopener">@mlane3&lt;/a>,
&lt;a href="https://github.com/msberends" target="_blank" rel="noopener">@msberends&lt;/a>,
&lt;a href="https://github.com/msgoussi" target="_blank" rel="noopener">@msgoussi&lt;/a>,
&lt;a href="https://github.com/nefissakhd" target="_blank" rel="noopener">@nefissakhd&lt;/a>,
&lt;a href="https://github.com/nick-youngblut" target="_blank" rel="noopener">@nick-youngblut&lt;/a>,
&lt;a href="https://github.com/nzbart" target="_blank" rel="noopener">@nzbart&lt;/a>,
&lt;a href="https://github.com/pavel-shliaha" target="_blank" rel="noopener">@pavel-shliaha&lt;/a>,
&lt;a href="https://github.com/pdbailey0" target="_blank" rel="noopener">@pdbailey0&lt;/a>,
&lt;a href="https://github.com/pnacht" target="_blank" rel="noopener">@pnacht&lt;/a>,
&lt;a href="https://github.com/ponnet" target="_blank" rel="noopener">@ponnet&lt;/a>,
&lt;a href="https://github.com/r2evans" target="_blank" rel="noopener">@r2evans&lt;/a>,
&lt;a href="https://github.com/ramnathv" target="_blank" rel="noopener">@ramnathv&lt;/a>,
&lt;a href="https://github.com/randy3k" target="_blank" rel="noopener">@randy3k&lt;/a>,
&lt;a href="https://github.com/richardjtelford" target="_blank" rel="noopener">@richardjtelford&lt;/a>,
&lt;a href="https://github.com/romainfrancois" target="_blank" rel="noopener">@romainfrancois&lt;/a>,
&lt;a href="https://github.com/rorynolan" target="_blank" rel="noopener">@rorynolan&lt;/a>,
&lt;a href="https://github.com/ryanvoyack" target="_blank" rel="noopener">@ryanvoyack&lt;/a>,
&lt;a href="https://github.com/selesnow" target="_blank" rel="noopener">@selesnow&lt;/a>,
&lt;a href="https://github.com/selin1st" target="_blank" rel="noopener">@selin1st&lt;/a>,
&lt;a href="https://github.com/sewouter" target="_blank" rel="noopener">@sewouter&lt;/a>,
&lt;a href="https://github.com/sfirke" target="_blank" rel="noopener">@sfirke&lt;/a>,
&lt;a href="https://github.com/SimonDedman" target="_blank" rel="noopener">@SimonDedman&lt;/a>,
&lt;a href="https://github.com/sjmgarnier" target="_blank" rel="noopener">@sjmgarnier&lt;/a>,
&lt;a href="https://github.com/smingerson" target="_blank" rel="noopener">@smingerson&lt;/a>,
&lt;a href="https://github.com/stefanocoretta" target="_blank" rel="noopener">@stefanocoretta&lt;/a>,
&lt;a href="https://github.com/strengejacke" target="_blank" rel="noopener">@strengejacke&lt;/a>,
&lt;a href="https://github.com/tfkillian" target="_blank" rel="noopener">@tfkillian&lt;/a>,
&lt;a href="https://github.com/tilltnet" target="_blank" rel="noopener">@tilltnet&lt;/a>,
&lt;a href="https://github.com/tonyvibe" target="_blank" rel="noopener">@tonyvibe&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>,
&lt;a href="https://github.com/torockel" target="_blank" rel="noopener">@torockel&lt;/a>,
&lt;a href="https://github.com/trinker" target="_blank" rel="noopener">@trinker&lt;/a>,
&lt;a href="https://github.com/tungmilan" target="_blank" rel="noopener">@tungmilan&lt;/a>,
&lt;a href="https://github.com/tzakharko" target="_blank" rel="noopener">@tzakharko&lt;/a>,
&lt;a href="https://github.com/uasolo" target="_blank" rel="noopener">@uasolo&lt;/a>,
&lt;a href="https://github.com/werkstattcodes" target="_blank" rel="noopener">@werkstattcodes&lt;/a>,
&lt;a href="https://github.com/wlandau" target="_blank" rel="noopener">@wlandau&lt;/a>,
&lt;a href="https://github.com/xiaoa6435" target="_blank" rel="noopener">@xiaoa6435&lt;/a>,
&lt;a href="https://github.com/yiluheihei" target="_blank" rel="noopener">@yiluheihei&lt;/a>,
&lt;a href="https://github.com/yutannihilation" target="_blank" rel="noopener">@yutannihilation&lt;/a>,
&lt;a href="https://github.com/zenggyu" target="_blank" rel="noopener">@zenggyu&lt;/a>, and
&lt;a href="https://github.com/zkamvar" target="_blank" rel="noopener">@zkamvar&lt;/a>.&lt;/p></description></item><item><title>dplyr 1.0.0: last minute additions</title><link>https://www.tidyverse.org/blog/2020/05/dplyr-1-0-0-last-minute-additions/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/05/dplyr-1-0-0-last-minute-additions/</guid><description>&lt;p>Today I wanted to talk about two cool new features that we&amp;rsquo;ve added since I started blogging about dplyr 1.0.0: &lt;code>summarise()&lt;/code> now gives you greater control over how the results are grouped, and a new set of functions make it easier to modify rows.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Update&lt;/strong>: as of June 1, dplyr 1.0.0 is now available on CRAN! Read
&lt;a href="https://www.tidyverse.org/blog/2020/06/dplyr-1-0-0/">all about it&lt;/a> or install it now with &lt;code>install.packages(&amp;quot;dplyr&amp;quot;)&lt;/code>.&lt;/p>
&lt;hr>
&lt;h2 id="summarise-and-grouping">&lt;code>summarise()&lt;/code> and grouping
&lt;a href="#summarise-and-grouping">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>There's a common confusion about the result of &lt;code>summarise()&lt;/code>. How do you think the result of the following code will be grouped?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dplyr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">warn.conflicts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">homeworld_species&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">starwars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">homeworld&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">species&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">n&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You might be surprised to learn that it&amp;rsquo;s grouped by &lt;code>homeworld&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">head&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">homeworld_species&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 3 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; # Groups: homeworld [3]&lt;/span>
&lt;span class="c1">#&amp;gt; homeworld species n&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 Alderaan Human 3&lt;/span>
&lt;span class="c1">#&amp;gt; 2 Aleen Minor Aleena 1&lt;/span>
&lt;span class="c1">#&amp;gt; 3 Bespin Human 1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s because &lt;code>summarise()&lt;/code> always peels off the last group, based on the logic that this group now occupies a single row so there&amp;rsquo;s no point grouping by it. This behaviour made perfect sense to me at the time I implemented it, but it&amp;rsquo;s been a long standing source of confusion among dplyr users (and it doesn&amp;rsquo;t make sense if your summary
&lt;a href="https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-summarise/" target="_blank" rel="noopener">returns multiple rows&lt;/a>).&lt;/p>
&lt;p>Unfortunately, it would be very difficult to change this default now because a lot of code probably relies on it. Instead, we&amp;rsquo;re doing the next best thing: exposing the default behaviour more explicitly and making it easier to change. In dplyr 1.0.0, the code above will display a message telling you how the result has been grouped:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">homeworld_species&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">starwars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">homeworld&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">species&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">n&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` regrouping output by &amp;#39;homeworld&amp;#39; (override with `.groups` argument)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The text hints at how to take control of grouping and eliminate the message: a new &lt;code>.groups&lt;/code> argument allows you to control the grouping of the result. It currently has four possible values:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.groups = &amp;quot;drop_last&amp;quot;&lt;/code> drops the last grouping level (i.e.Â the default behaviour sans message).&lt;/li>
&lt;li>&lt;code>.groups = &amp;quot;drop&amp;quot;&lt;/code> drops all grouping levels and returns a tibble.&lt;/li>
&lt;li>&lt;code>.groups = &amp;quot;keep&amp;quot;&lt;/code> preserves the grouping of the input.&lt;/li>
&lt;li>&lt;code>.groups = &amp;quot;rowwise&amp;quot;&lt;/code> turns each row into
&lt;a href="https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-rowwise/" target="_blank" rel="noopener">its own group&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>If you find the default message annoying, you can suppress by setting a global option:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dplyr.summarise.inform&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>.groups&lt;/code> is very new, so we&amp;rsquo;ve marked it as experimental, meaning that it may change in the future. Please let us know what you think of it to help us make a decision about its future.&lt;/p>
&lt;h2 id="row-mutation">Row mutation
&lt;a href="#row-mutation">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Thanks to
&lt;a href="http://krlmlr.info/" target="_blank" rel="noopener">Kirill MÃ¼ller&lt;/a>, dplyr has a new experimental family of row mutation functions inspired by SQL&amp;rsquo;s &lt;code>UPDATE&lt;/code>, &lt;code>INSERT&lt;/code>, &lt;code>UPSERT&lt;/code>, and &lt;code>DELETE&lt;/code>. Like the join functions, they all work with a pair of data frames:&lt;/p>
&lt;ul>
&lt;li>&lt;code>rows_update(x, y)&lt;/code> updates existing rows in &lt;code>x&lt;/code> with values in &lt;code>y&lt;/code>.&lt;/li>
&lt;li>&lt;code>rows_patch(x, y)&lt;/code> works like &lt;code>rows_update()&lt;/code> but only changes &lt;code>NA&lt;/code> values.&lt;/li>
&lt;li>&lt;code>rows_insert(x, y)&lt;/code> adds new rows to &lt;code>x&lt;/code> from &lt;code>y&lt;/code>.&lt;/li>
&lt;li>&lt;code>rows_upsert(x, y)&lt;/code> updates existing rows in &lt;code>x&lt;/code> and adds new rows from &lt;code>y&lt;/code>.&lt;/li>
&lt;li>&lt;code>rows_delete(x, y)&lt;/code> deletes rows in &lt;code>x&lt;/code> that match rows in &lt;code>y&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>rows_&lt;/code> functions match &lt;code>x&lt;/code> and &lt;code>y&lt;/code> using &lt;strong>keys&lt;/strong>. A key is one or more variables that uniquely identifies each row. All &lt;code>rows_&lt;/code> functions check that the keys of &lt;code>x&lt;/code> and &lt;code>y&lt;/code> are valid (i.e.Â unique) before doing anything.&lt;/p>
&lt;p>Let&amp;rsquo;s see how these work with some toy data:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">letters&lt;/span>&lt;span class="nf">[c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">NA&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">]&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0.5&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">df&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 3 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; a b c&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 a 0.5&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 b 1.5&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 &amp;lt;NA&amp;gt; 2.5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can use &lt;code>rows_insert()&lt;/code> to add new rows:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">new&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;e&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">4.5&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">rows_insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Matching, by = &amp;#34;a&amp;#34;&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 5 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; a b c&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 a 0.5&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 b 1.5&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 &amp;lt;NA&amp;gt; 2.5&lt;/span>
&lt;span class="c1">#&amp;gt; 4 4 d 3.5&lt;/span>
&lt;span class="c1">#&amp;gt; 5 5 e 4.5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that &lt;code>rows_insert()&lt;/code> will fail if we attempt to insert a row that already exists:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">rows_insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;c&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; Matching, by = &amp;#34;a&amp;#34;&lt;/span>
&lt;span class="c1">#&amp;gt; Error: Attempting to insert duplicate rows.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(The error messages are very minimal right now; if people find these functions useful we&amp;rsquo;ll invest more effort in useful errors.)&lt;/p>
&lt;p>If you want to update existing values, use &lt;code>rows_update()&lt;/code>. As you might expect, it&amp;rsquo;ll error if one of the rows to update doesn&amp;rsquo;t exist:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">rows_update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;c&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; Matching, by = &amp;#34;a&amp;#34;&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 3 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; a b c&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 a 0.5&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 b 1.5&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 c 2.5&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">rows_update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;d&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; Matching, by = &amp;#34;a&amp;#34;&lt;/span>
&lt;span class="c1">#&amp;gt; Error: Attempting to update missing rows.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>rows_patch()&lt;/code> is a variant of &lt;code>rows_update()&lt;/code> that will only update values in &lt;code>x&lt;/code> that are &lt;code>NA&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">rows_patch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;B&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; Matching, by = &amp;#34;a&amp;#34;&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 3 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; a b c&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 a 0.5&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 b 1.5&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 B 2.5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to update or insert, you can use &lt;code>rows_upsert()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">rows_upsert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;c&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">rows_upsert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;d&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; Matching, by = &amp;#34;a&amp;#34;&lt;/span>
&lt;span class="c1">#&amp;gt; Matching, by = &amp;#34;a&amp;#34;&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; a b c&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 a 0.5&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 b 1.5&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 c 2.5&lt;/span>
&lt;span class="c1">#&amp;gt; 4 4 d NA&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>These functions are designed particularly with an eye towards mutable backends where you really might want to modify existing datasets in place (e.g.Â data.tables, databases, and googlesheets). That&amp;rsquo;s a dangerous operation so you&amp;rsquo;ll need to explicitly opt-in to modification with &lt;code>in_place = TRUE&lt;/code>. For example, the
&lt;a href="https://krlmlr.github.io/dm/" target="_blank" rel="noopener">dm package&lt;/a> will use these functions to update multiple related tables in the correct order, in memory or on the database. Expect to hear more about this in the future.&lt;/p></description></item><item><title>dplyr 1.0.0 for package developers</title><link>https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-package-dev/</link><pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-package-dev/</guid><description>&lt;p>As you&amp;rsquo;re hopefully aware,
&lt;a href="https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-is-coming-soon/" target="_blank" rel="noopener">dplyr 1.0.0 is coming soon&lt;/a>, and we&amp;rsquo;ve been writing a
&lt;a href="https://www.tidyverse.org/tags/dplyr/" target="_blank" rel="noopener">series of blog posts&lt;/a> about the user-facing changes that you, as a data scientist have to look forward to. Today, I wanted to change tack a little and talk about the changes from the perspective of the package developer.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Update&lt;/strong>: as of June 1, dplyr 1.0.0 is now available on CRAN! Read
&lt;a href="https://www.tidyverse.org/blog/2020/06/dplyr-1-0-0/">all about it&lt;/a> or install it now with &lt;code>install.packages(&amp;quot;dplyr&amp;quot;)&lt;/code>.&lt;/p>
&lt;hr>
&lt;p>But first, an update on the release process: in the process of preparing for this release, we discovered some subtle problems that arise when combining different types of data frames (including
&lt;a href="http://r-datatable.com" target="_blank" rel="noopener">data.table&lt;/a>s and tibbles). It took us a little while to figure out what we (and package developers need to do), so we&amp;rsquo;ve decided to push back the dplyr release: we&amp;rsquo;re now planning on releasing dplyr 1.0.0 to CRAN on May 15. We&amp;rsquo;re sorry that its going to longer than expected, but this gives package authors who use dplyr more time to handle changes.&lt;/p>
&lt;p>In this post, I want to address how dplyr changes might break package code, then discuss some of the major pain points a package developer might experience, and how to get help if you need it.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dplyr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">warn.conflicts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="breaking-changes">Breaking changes
&lt;a href="#breaking-changes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>There are three main ways an update to a package might break your existing code:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>We&amp;rsquo;ve introduced a bug. Obviously, we do our best to make sure this doesn&amp;rsquo;t happen (by using software development best practices like unit testing and code review) but it&amp;rsquo;s impossible to eliminate all bugs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We&amp;rsquo;ve fixed a bug or otherwise made change we think is harmless. Sometimes your code accidentally depends on a behaviour that we think is incorrect and we change it. The change will be an improvement for most people, but unfortunately it
&lt;a href="https://xkcd.com/1172/" target="_blank" rel="noopener">breaks your code&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We&amp;rsquo;ve deliberately made a backward incompatible interface change. We try to make these as rarely as possible, and only to significantly improve usability or consistency. Unless the package or function is experimental, we do our best to make such changes gradually, so that there&amp;rsquo;s a deprecation period before the behaviour goes away altogether.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>dplyr 1.0.0 contains very few backward incompatible changes, but it does make a large number of changes that we believe are mostly harmless or minor improvements. The vast majority of these will not affect data analysis code, but some can affect packages, particularly through their unit tests. To give you a flavour for what I mean here, dplyr now preserves the names of atomic vectors:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="n">.$x&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">str&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">#&amp;gt; Named num 1&lt;/span>
&lt;span class="c1">#&amp;gt; - attr(*, &amp;#34;names&amp;#34;)= chr &amp;#34;a&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(With dplyr 0.8.5, this returns an unnamed vector.)&lt;/p>
&lt;p>We made this change to increase internal consistency, as some verbs already did preserve names, and all verbs preserved the names of list-columns. We expect that this will have minimal impact on data-analysis code, but it does affect some packages because now there are names where there weren&amp;rsquo;t before. If this problem affects your code, typically the best strategy is to use &lt;code>unname()&lt;/code> to strip the names off.&lt;/p>
&lt;h2 id="our-release-process">Our release process
&lt;a href="#our-release-process">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>To make sure all package maintainers know about potential problems, we run &lt;code>R CMD check&lt;/code> on all 1,986 packages that use dplyr. (You can see the results on
&lt;a href="https://github.com/tidyverse/dplyr/tree/master/revdep#revdeps" target="_blank" rel="noopener">github&lt;/a>). If you maintain a package that uses dplyr, and your package has problems, we have already emailed you several times throughout the release process.&lt;/p>
&lt;p>We&amp;rsquo;re also slowly working through the list of packages with problems and preparing pull requests where we can figure out a fix. Unfortunately, we don&amp;rsquo;t have the resources to fix every package, but we&amp;rsquo;re happy to help out if you get stuck (more on that below).&lt;/p>
&lt;h2 id="allequal">&lt;code>all.equal()&lt;/code>
&lt;a href="#allequal">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>One of the subtlest, but furthest reaching changes for package authors is that we removed the &lt;code>all.equal.tbl_df&lt;/code> method. This small change has big consequence because &lt;code>testthat::expect_equal()&lt;/code> calls &lt;code>all.equal()&lt;/code>, which calls &lt;code>all.equal.tbl_df()&lt;/code> when the first argument is a tibble. Unfortunately &lt;code>all.equal.tbl_df&lt;/code> had a couple of major problems:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>It ignores the difference between data frames and tibbles so this code would pass:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">expect_equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">data.frame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>By default, it ignores column and row order so the following tests would pass:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">expect_equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">expect_equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>The first issue was a genuine bug; the second one was something that I must&amp;rsquo;ve thought was a good idea at the time, but looking back at it was clearly a mistake. We&amp;rsquo;ve been aware of this problem for a while, but knew that fixing it would cause a large number of CRAN packages to fail to pass &lt;code>R CMD check&lt;/code>. We decided that the 1.0.0 release was a good time to rip the band-aid off.&lt;/p>
&lt;p>Unfortunately if this change affects your code, you won&amp;rsquo;t get a terribly informative error message, so for now you&amp;rsquo;ll just need to pattern match on the errors below:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testthat&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Class mismatch&lt;/span>
&lt;span class="nf">expect_equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">data.frame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; Error: `actual` (tibble(x = 1)) not equal to `expected` (data.frame(x = 1)).&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; `class(actual)`: &amp;#34;tbl_df&amp;#34; &amp;#34;tbl&amp;#34; &amp;#34;data.frame&amp;#34;&lt;/span>
&lt;span class="c1">#&amp;gt; `class(expected)`: &amp;#34;data.frame&amp;#34;&lt;/span>
&lt;span class="c1"># Row order is different&lt;/span>
&lt;span class="nf">expect_equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; Error: `actual` (tibble(x = 1:2)) not equal to `expected` (tibble(x = 2:1)).&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; `actual$x`: 1 2 &lt;/span>
&lt;span class="c1">#&amp;gt; `expected$x`: 2 1&lt;/span>
&lt;span class="c1"># Column order is different&lt;/span>
&lt;span class="nf">expect_equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; Error: `actual` (tibble(x = 1, y = 2)) not equal to `expected` (tibble(y = 2, x = 1)).&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; `names(actual)`: &amp;#34;x&amp;#34; &amp;#34;y&amp;#34; &lt;/span>
&lt;span class="c1">#&amp;gt; `names(expected)`: &amp;#34;y&amp;#34; &amp;#34;x&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Fixing these failures will typically involve updating the expected value.&lt;/p>
&lt;p>(The problem of uninformative failures prompted me to start work on the
&lt;a href="https://waldo.r-lib.org" target="_blank" rel="noopener">waldo package&lt;/a> that attempts to do better. You can try it out by installing the dev version of testthat, &lt;code>devtools::install_github(&amp;quot;r-lib/testthat&amp;quot;)&lt;/code>, but note that it&amp;rsquo;s still experimental so it&amp;rsquo;s only recommended for the adventurous.)&lt;/p>
&lt;h2 id="increased-strictness-from-vctrs">Increased strictness from vctrs
&lt;a href="#increased-strictness-from-vctrs">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>As we
&lt;a href="https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-and-vctrs/" target="_blank" rel="noopener">discussed recently&lt;/a>, dplyr now uses the
&lt;a href="https://vctrs.r-lib.org" target="_blank" rel="noopener">vctrs package&lt;/a> under the hood. This increased strictness affects a few edge cases. For example, in dplyr 0.8.5, the following code returned &lt;code>tibble(x = character())&lt;/code> (what we&amp;rsquo;d now consider to be a bug):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df1&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">integer&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">df2&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">character&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nf">bind_rows&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">df2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error: Can&amp;#39;t combine `..1$x` &amp;lt;integer&amp;gt; and `..2$x` &amp;lt;character&amp;gt;.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If this affects your package, you&amp;rsquo;ll typically need to think about what the type of each column should be, and then ensure that&amp;rsquo;s the case everywhere in your code.&lt;/p>
&lt;h2 id="need-help">Need help?
&lt;a href="#need-help">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>If you just can&amp;rsquo;t figure out how to fix your package, please let us know! The fastest way to get help is to
&lt;a href="https://github.com/tidyverse/dplyr" target="_blank" rel="noopener">file an issue&lt;/a> containing a
&lt;a href="http://reprex.tidyverse.org/" target="_blank" rel="noopener">reprex&lt;/a> that illustrates the precise problem. But if you&amp;rsquo;re struggling to make a reprex, you can give us a link to your repo, and we&amp;rsquo;ll take a look.&lt;/p></description></item><item><title>dplyr 1.0.0 and vctrs</title><link>https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-and-vctrs/</link><pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-and-vctrs/</guid><description>&lt;p>Today, I wanted to talk a little bit how dplyr 1.0.0 uses the
&lt;a href="http://vctrs.r-lib.org/" target="_blank" rel="noopener">vctrs&lt;/a> package. This post explains why vctrs is so important, why we can&amp;rsquo;t just copy what base R does, how to interpret some of new error messages that you&amp;rsquo;ll see, and some of the major changes since the last version.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Update&lt;/strong>: as of June 1, dplyr 1.0.0 is now available on CRAN! Read
&lt;a href="https://www.tidyverse.org/blog/2020/06/dplyr-1-0-0/">all about it&lt;/a> or install it now with &lt;code>install.packages(&amp;quot;dplyr&amp;quot;)&lt;/code>.&lt;/p>
&lt;hr>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vctrs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dplyr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">warn.conflicts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="combining-vectors">Combining vectors
&lt;a href="#combining-vectors">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The heart of the reason we&amp;rsquo;re using vctrs is the need to combine vectors. You&amp;rsquo;re already familiar with one base R tool for combining vectors, &lt;code>c()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 1 2 3&lt;/span>
&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;c&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;a&amp;#34; &amp;#34;b&amp;#34; &amp;#34;c&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Combining vectors comes up in many places in the tidyverse, e.g.:&lt;/p>
&lt;ul>
&lt;li>&lt;code>dplyr::mutate()&lt;/code> and &lt;code>dplyr::summarise()&lt;/code> have to combine the results from each group.&lt;/li>
&lt;li>&lt;code>dplyr::bind_rows()&lt;/code> has to combine columns from different data frames.&lt;/li>
&lt;li>&lt;code>dplyr::full_join()&lt;/code> has to combine the keys from the &lt;code>x&lt;/code> and &lt;code>y&lt;/code> data frames.&lt;/li>
&lt;li>&lt;code>tidyr::pivot_longer()&lt;/code> has to combine multiple columns into one.&lt;/li>
&lt;/ul>
&lt;p>Our goal is to unify the code that underlies all these various functions so that there&amp;rsquo;s one consistent, principled approach. We&amp;rsquo;ve already made the change in
&lt;a href="https://www.tidyverse.org/blog/2019/09/tidyr-1-0-0/" target="_blank" rel="noopener">tidyr&lt;/a>, and now it&amp;rsquo;s dplyr&amp;rsquo;s turn.&lt;/p>
&lt;h2 id="base-r-behaviour">Base R behaviour
&lt;a href="#base-r-behaviour">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>You might wonder why we can&amp;rsquo;t just copy the behaviour of &lt;code>c()&lt;/code>. Unfortunately &lt;code>c()&lt;/code> has some major downsides:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>It doesn&amp;rsquo;t possess a &lt;code>factor&lt;/code> method so it converts factors to their underlying integer levels.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">factor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">factor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;y&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 1 1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>It&amp;rsquo;s difficult to implement methods when different classes are involved. For example, combining a date (&lt;code>Date&lt;/code>) and a date-time (&lt;code>POSIXct&lt;/code>) yields an incorrect result because the underlying data is combined without first being translated.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">today&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">as.Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;2020-03-24&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">now&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">as.POSIXct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;2020-03-24 10:34&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">today&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;2020-03-24&amp;#34; &amp;#34;4341727-12-11&amp;#34;&lt;/span>
&lt;span class="c1"># (the second value is the 11 Dec 4341727-12-11)&lt;/span>
&lt;span class="nf">class&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">today&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;Date&amp;#34;&lt;/span>
&lt;span class="nf">unclass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">today&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 18345 1585064040&lt;/span>
&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">today&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;2020-03-24 10:34:00 CDT&amp;#34; &amp;#34;1969-12-31 23:05:45 CST&amp;#34;&lt;/span>
&lt;span class="nf">class&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">today&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;POSIXct&amp;#34; &amp;#34;POSIXt&amp;#34;&lt;/span>
&lt;span class="nf">unclass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">today&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 1585064040 18345&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s difficult to change how &lt;code>c()&lt;/code> works because any changes are likely to break some existing code, and base R is committed to backward compatibility. Additionally, &lt;code>c()&lt;/code> isn&amp;rsquo;t the only way that base R combines vectors. &lt;code>rbind()&lt;/code> and &lt;code>unlist()&lt;/code> can also be used to perform a similar job, but return different results. This is not to say that the tidyverse has been any better in the past &amp;mdash; we have used a variety of ad hoc methods, undoubtedly using well more than three different approaches.&lt;/p>
&lt;p>Given that it&amp;rsquo;s hard to fix the problem in base R, we&amp;rsquo;ve come up with our own alternative to &lt;code>c()&lt;/code>: &lt;code>vctrs::vec_c()&lt;/code>. &lt;code>vec_c()&lt;/code>'s behaviour is governed by three main principles:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Symmetry: &lt;code>vec_c(x, y)&lt;/code> should return a type as similar as possible to &lt;code>vec_c(y, x)&lt;/code>. For example, when combining a date and a date-time you always get a date-time.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">vec_c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">today&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;2020-03-24 00:00:00 CDT&amp;#34; &amp;#34;2020-03-24 10:34:00 CDT&amp;#34;&lt;/span>
&lt;span class="nf">vec_c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">today&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;2020-03-24 10:34:00 CDT&amp;#34; &amp;#34;2020-03-24 00:00:00 CDT&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Enrichment: &lt;code>vec_c(x, y)&lt;/code> should return the richer type, where type &lt;code>&amp;lt;x&amp;gt;&lt;/code> is richer than type &lt;code>&amp;lt;y&amp;gt;&lt;/code> if &lt;code>x&lt;/code> can represent all values in &lt;code>y&lt;/code>. For example, this implies that combining an integer and double should return a double, and that combining a date and date-time should return a date-time.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">vec_c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1.5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 1.0 1.5&lt;/span>
&lt;span class="nf">vec_c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">today&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;2020-03-24 00:00:00 CDT&amp;#34; &amp;#34;2020-03-24 10:34:00 CDT&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Consistency: &lt;code>vec_c(x, y)&lt;/code> should error if &lt;code>x&lt;/code> and &lt;code>y&lt;/code> are of fundamentally different types. For example, this implies that combining a string and a number or a factor and a date should error.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">vec_c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error: Can&amp;#39;t combine `..1` &amp;lt;character&amp;gt; and `..2` &amp;lt;double&amp;gt;.&lt;/span>
&lt;span class="nf">vec_c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">factor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">today&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error: Can&amp;#39;t combine `..1` &amp;lt;factor&amp;lt;5a425&amp;gt;&amp;gt; and `..2` &amp;lt;date&amp;gt;.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="errors">Errors
&lt;a href="#errors">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>As a data scientist, you don&amp;rsquo;t really need to know much about the vctrs package, except that it exists and its used internally by dplyr. (As a software engineer, you might want to learn about vctrs because
&lt;a href="https://vctrs.r-lib.org/articles/s3-vector.html" target="_blank" rel="noopener">it makes it easier to create new types of vectors&lt;/a>). But vctrs is responsible for creating a number of error messages in dplyr, so it&amp;rsquo;s worth understanding their basic form.&lt;/p>
&lt;p>In this first example, we attempt to bind two data frames together where the columns have incompatible types: double and character.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df1&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">df2&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">bind_rows&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">df2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error: Can&amp;#39;t combine `..1$b` &amp;lt;double&amp;gt; and `..2$b` &amp;lt;character&amp;gt;.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note the components of the error message:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&amp;ldquo;Can&amp;rsquo;t combine&amp;rdquo; means that vctrs can&amp;rsquo;t combine double and character vectors.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>vctrs error messages always puts the &amp;ldquo;type&amp;rdquo; of the variable in &lt;code>&amp;lt;&amp;gt;&lt;/code>, like &lt;code>&amp;lt;double&amp;gt;&lt;/code>, or &lt;code>&amp;lt;character&amp;gt;&lt;/code>. I&amp;rsquo;m using type informally here (although it does have a precise definition); for many simple cases it&amp;rsquo;s the same as the class.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>bind_rows()&lt;/code> doesn&amp;rsquo;t have named arguments so vctrs uses &lt;code>..1&lt;/code> and &lt;code>..2&lt;/code> to refer to the first and second arguments. You can tell the problem is with the &lt;code>b&lt;/code> column.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>If after reading the error, you do still want to combine the data frames, you&amp;rsquo;ll need to make them compatible by manually transforming one of the columns:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df1&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">df1&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">as.character&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">bind_rows&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">df2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 2 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; a b &lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 1 &lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 a&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where possible, we attempt to give you more information to solve the problem. For example, if your call to &lt;code>summarise()&lt;/code> or &lt;code>mutate()&lt;/code> returns incompatible types, we&amp;rsquo;ll tell you which groups have the problem:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="s">&amp;#34;a&amp;#34;&lt;/span> &lt;span class="n">else&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error: Problem with `mutate()` input `y`.&lt;/span>
&lt;span class="c1">#&amp;gt; x Input `y` must return compatible vectors across groups&lt;/span>
&lt;span class="c1">#&amp;gt; â¹ Input `y` is `if (g == 1) &amp;#34;a&amp;#34; else 1`.&lt;/span>
&lt;span class="c1">#&amp;gt; â¹ Result type for group 1 (g = 1): &amp;lt;character&amp;gt;.&lt;/span>
&lt;span class="c1">#&amp;gt; â¹ Result type for group 2 (g = 2): &amp;lt;double&amp;gt;.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Writing good error messages is hard, so we&amp;rsquo;ve spent a lot of time trying to make them informative. We expect them to continue to improve as we see more examples from live data analysis code.&lt;/p>
&lt;p>If you&amp;rsquo;re not sure where the errors are coming from, learning how to use the traceback (either &lt;code>traceback()&lt;/code> or &lt;code>rlang::last_error()&lt;/code>) will be helpful. I&amp;rsquo;d highly recommend Jenny Bryan&amp;rsquo;s rstudio::conf keynote on debugging:
&lt;a href="https://resources.rstudio.com/rstudio-conf-2020/object-of-type-closure-is-not-subsettable-jenny-bryan" target="_blank" rel="noopener">Object of type &amp;lsquo;closure&amp;rsquo; is not subsettable&lt;/a>.&lt;/p>
&lt;h2 id="key-changes">Key changes
&lt;a href="#key-changes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Using vctrs in dplyr also causes two behaviour changes. We hope that these don&amp;rsquo;t affect much existing code because they both previously generated warnings.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>When combining factors with different level sets, dplyr previously converted to a character vector with a warning. As of 1.0.0, dplyr will create a factor with the union of the individual levels:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">vec_c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">factor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">factor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;y&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; [1] x y&lt;/span>
&lt;span class="c1">#&amp;gt; Levels: x y&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>When combining a factor and a character, dplyr previously warned about creating a character vector. It now silently creates a character vector:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">vec_c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">factor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;y&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;x&amp;#34; &amp;#34;y&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>These changes are motivated more by pragmatism than by theory. Strictly speaking, one should probably consider &lt;code>factor(&amp;quot;red&amp;quot;)&lt;/code> and &lt;code>factor(&amp;quot;male&amp;quot;)&lt;/code> to be incompatible, but this level of strictness causes much pain because character vectors can usually be used interchangeably with factors.&lt;/p>
&lt;p>Note that dplyr continues to be stricter than base R when it comes to character conversions:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;1&amp;#34; &amp;#34;2&amp;#34;&lt;/span>
&lt;span class="nf">vec_c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error: Can&amp;#39;t combine `..1` &amp;lt;double&amp;gt; and `..2` &amp;lt;character&amp;gt;.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, we don&amp;rsquo;t know whether you want a character vector or a numeric vector, so you need to decide by manually converting one of the inputs:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">vec_c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">as.integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; [1] 1 2&lt;/span>
&lt;span class="nf">vec_c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">as.character&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [1] &amp;#34;1&amp;#34; &amp;#34;2&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>dplyr 1.0.0: working within rows</title><link>https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-rowwise/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-rowwise/</guid><description>&lt;p>Today, I wanted to talk a little bit about the renewed &lt;code>rowwise()&lt;/code> function that makes it easy to perform operations &amp;ldquo;row-by-row&amp;rdquo;. I&amp;rsquo;ll show how you can use &lt;code>rowwise()&lt;/code> to compute summaries &amp;ldquo;by row&amp;rdquo;, talk about how &lt;code>rowwise()&lt;/code> is a natural pairing with list-columns, and show a couple of use cases that I think are particularly elegant. You can learn more about all of these topics in
&lt;a href="https://dplyr.tidyverse.org/dev/articles/rowwise.html" target="_blank" rel="noopener">&lt;code>vignette(&amp;quot;rowwise&amp;quot;)&lt;/code>&lt;/a>.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Update&lt;/strong>: as of June 1, dplyr 1.0.0 is now available on CRAN! Read
&lt;a href="https://www.tidyverse.org/blog/2020/06/dplyr-1-0-0/">all about it&lt;/a> or install it now with &lt;code>install.packages(&amp;quot;dplyr&amp;quot;)&lt;/code>.&lt;/p>
&lt;hr>
&lt;h2 id="basic-operation">Basic operation
&lt;a href="#basic-operation">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>&lt;code>rowwise()&lt;/code> works like &lt;code>group_by()&lt;/code> in the sense that it doesn&amp;rsquo;t change what the data looks like; it changes how dplyr verbs operate on the data. Let&amp;rsquo;s see how this works with a simple example. Here I have some imaginary test results for students in a class:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dplyr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">warn.conflicts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">student_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">test1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">13&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">test2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">20&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">23&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">test3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">30&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">33&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">test4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">40&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">43&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">df&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 5&lt;/span>
&lt;span class="c1">#&amp;gt; student_id test1 test2 test3 test4&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 10 20 30 40&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 11 21 31 41&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 12 22 32 42&lt;/span>
&lt;span class="c1">#&amp;gt; 4 4 13 23 33 43&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I&amp;rsquo;d like to be able to compute the mean of the test scores for each student, but &lt;code>mutate()&lt;/code> and &lt;code>mean()&lt;/code> don&amp;rsquo;t do what I want:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">avg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test4&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 6&lt;/span>
&lt;span class="c1">#&amp;gt; student_id test1 test2 test3 test4 avg&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 10 20 30 40 26.5&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 11 21 31 41 26.5&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 12 22 32 42 26.5&lt;/span>
&lt;span class="c1">#&amp;gt; 4 4 13 23 33 43 26.5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The problem is that I&amp;rsquo;m getting a mean over the whole data frame, not for each student. I can resolve this problem of getting a mean for each student by creating a &amp;ldquo;row-wise&amp;rdquo; data frame with &lt;code>rowwise()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">rf&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">rowwise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">student_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>rowwise()&lt;/code> doesn&amp;rsquo;t need any additional arguments unless you have variables that identify the rows, like &lt;code>student_id&lt;/code> here. Much like grouping variables, identifier variables will be automatically preserved when you &lt;code>summarise()&lt;/code> the data.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">rf&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 5&lt;/span>
&lt;span class="c1">#&amp;gt; # Rowwise: student_id&lt;/span>
&lt;span class="c1">#&amp;gt; student_id test1 test2 test3 test4&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 10 20 30 40&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 11 21 31 41&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 12 22 32 42&lt;/span>
&lt;span class="c1">#&amp;gt; 4 4 13 23 33 43&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>rf&lt;/code> &lt;em>looks&lt;/em> very similar to &lt;code>df&lt;/code>, but &lt;em>behaves&lt;/em> very differently:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">rf&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">avg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test4&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 6&lt;/span>
&lt;span class="c1">#&amp;gt; # Rowwise: student_id&lt;/span>
&lt;span class="c1">#&amp;gt; student_id test1 test2 test3 test4 avg&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 10 20 30 40 25&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 11 21 31 41 26&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 12 22 32 42 27&lt;/span>
&lt;span class="c1">#&amp;gt; 4 4 13 23 33 43 28&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>An additional advantage of &lt;code>rowwise()&lt;/code> is that it&amp;rsquo;s paired with
&lt;a href="https://dplyr.tidyverse.org/dev/reference/across.html" target="_blank" rel="noopener">&lt;code>c_across()&lt;/code>&lt;/a>, which works like &lt;code>c()&lt;/code> but uses the same tidyselect syntax as &lt;code>across()&lt;/code>. That makes it easy to operate on multiple variables:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">rf&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">avg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c_across&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">starts_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 6&lt;/span>
&lt;span class="c1">#&amp;gt; # Rowwise: student_id&lt;/span>
&lt;span class="c1">#&amp;gt; student_id test1 test2 test3 test4 avg&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 10 20 30 40 25&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 11 21 31 41 26&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 12 22 32 42 27&lt;/span>
&lt;span class="c1">#&amp;gt; 4 4 13 23 33 43 28&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="other-ways-of-achieving-the-same-result">Other ways of achieving the same result
&lt;a href="#other-ways-of-achieving-the-same-result">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Some summary functions have alternative ways of computing row-wise summaries that take advantage of built-in vectorisation. For example, if you wanted to compute the sum, you could use &lt;code>+&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">test1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">test2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">test3&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">test4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 6&lt;/span>
&lt;span class="c1">#&amp;gt; student_id test1 test2 test3 test4 total&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 10 20 30 40 100&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 11 21 31 41 104&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 12 22 32 42 108&lt;/span>
&lt;span class="c1">#&amp;gt; 4 4 13 23 33 43 112&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And you &lt;em>could&lt;/em> use the same basic idea to compute the mean:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">avg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">test1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">test2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">test3&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">test4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 6&lt;/span>
&lt;span class="c1">#&amp;gt; student_id test1 test2 test3 test4 avg&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 10 20 30 40 25&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 11 21 31 41 26&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 12 22 32 42 27&lt;/span>
&lt;span class="c1">#&amp;gt; 4 4 13 23 33 43 28&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Another family of summary functions have &amp;ldquo;parallel&amp;rdquo; extensions where you can provide multiple variables in the arguments:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">min&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">pmin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">max&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">pmax&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">paste&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sep&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;-&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 8&lt;/span>
&lt;span class="c1">#&amp;gt; student_id test1 test2 test3 test4 min max string &lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 10 20 30 40 10 40 10-20-30-40&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 11 21 31 41 11 41 11-21-31-41&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 12 22 32 42 12 42 12-22-32-42&lt;/span>
&lt;span class="c1">#&amp;gt; 4 4 13 23 33 43 13 43 13-23-33-43&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where these functions exist, they&amp;rsquo;ll usually be faster than &lt;code>rowwise()&lt;/code>. The advantage of &lt;code>rowwise()&lt;/code> is that it works with any function, not just those that are already vectorised.&lt;/p>
&lt;h2 id="list-columns">List-columns
&lt;a href="#list-columns">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>&lt;code>rowwise()&lt;/code> is useful for computing simple summaries, but its real power comes when you use it with list-columns. Because lists can contain anything, you can use list-columns to keep related objects together, regardless of what type of thing they are. List-columns give you a convenient storage mechanism and &lt;code>rowwise()&lt;/code> gives you a convenient computation mechanism.&lt;/p>
&lt;p>Let&amp;rsquo;s make those ideas concrete by creating a data frame with a list-column. A little later, we&amp;rsquo;ll come back to how you might actually get a list-column in a more realistic situation. The following data frame uses list columns to store things that would otherwise be challenging:&lt;/p>
&lt;ul>
&lt;li>&lt;code>x&lt;/code> contains vectors of different lengths.&lt;/li>
&lt;li>&lt;code>y&lt;/code> contains vectors of different types&lt;/li>
&lt;li>&lt;code>z&lt;/code> contains functions, which can&amp;rsquo;t usually live in a data frame.&lt;/li>
&lt;/ul>
&lt;!-- -->
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">6&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">TRUE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mean&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">df&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 3 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; x y z &lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;list&amp;gt; &amp;lt;list&amp;gt; &amp;lt;list&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 &amp;lt;dbl [1]&amp;gt; &amp;lt;lgl [1]&amp;gt; &amp;lt;fn&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; 2 &amp;lt;int [2]&amp;gt; &amp;lt;dbl [1]&amp;gt; &amp;lt;fn&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; 3 &amp;lt;int [3]&amp;gt; &amp;lt;chr [1]&amp;gt; &amp;lt;fn&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you have list-columns in a row-wise data frame, you can easily compute with each element of the list:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">rowwise&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">x_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">y_type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">z_call&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">z&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` ungrouping output (override with `.groups` argument)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 3 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; x_length y_type z_call&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 logical 15 &lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 double 3 &lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 character 1.58&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This makes a row-wise &lt;code>mutate()&lt;/code> or &lt;code>summarise()&lt;/code> a general vectorisation tool, in the same way as the apply family in base R or the map family in purrr do. It&amp;rsquo;s now much simpler to solve a number of problems where we previously recommended learning about &lt;code>map()&lt;/code>, &lt;code>map2()&lt;/code>, &lt;code>pmap()&lt;/code> and friends.&lt;/p>
&lt;h2 id="use-cases">Use cases
&lt;a href="#use-cases">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>To finish up, I wanted to show off a couple of use cases where I think &lt;code>rowwise()&lt;/code> provides a really elegant solution: simulations and modelling.&lt;/p>
&lt;h3 id="simulation">Simulation
&lt;a href="#simulation">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The basic idea of using &lt;code>rowwise()&lt;/code> to perform simulation is to store all your simulation paramters in a data frame:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tribble&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="o">~&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">min&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you can either generate a list-column containing the simulated values with &lt;code>mutate()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">rowwise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">runif&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">min&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 3 x 5&lt;/span>
&lt;span class="c1">#&amp;gt; # Rowwise: id&lt;/span>
&lt;span class="c1">#&amp;gt; id n min max data &lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 3 0 1 &amp;lt;dbl [3]&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 2 10 100 &amp;lt;dbl [2]&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 2 100 1000 &amp;lt;dbl [2]&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or take advantage of
&lt;a href="https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-summarise/" target="_blank" rel="noopener">&lt;code>summarise()&lt;/code>'s new capabilities&lt;/a> and return one element per row:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">rowwise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">runif&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">min&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` regrouping output by &amp;#39;id&amp;#39; (override with `.groups` argument)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 7 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; # Groups: id [3]&lt;/span>
&lt;span class="c1">#&amp;gt; id x&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 0.579&lt;/span>
&lt;span class="c1">#&amp;gt; 2 1 0.269&lt;/span>
&lt;span class="c1">#&amp;gt; 3 1 0.120&lt;/span>
&lt;span class="c1">#&amp;gt; 4 2 29.0 &lt;/span>
&lt;span class="c1">#&amp;gt; 5 2 50.8 &lt;/span>
&lt;span class="c1">#&amp;gt; 6 3 451. &lt;/span>
&lt;span class="c1">#&amp;gt; 7 3 985.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that &lt;code>id&lt;/code> is preserved in the output here because we defined it as an identifier variable in the call to &lt;code>rowwise()&lt;/code>.&lt;/p>
&lt;p>
&lt;a href="https://dplyr.tidyverse.org/dev/articles/rowwise.html#repeated-function-calls-1" target="_blank" rel="noopener">&lt;code>vignette(&amp;quot;rowwise&amp;quot;)&lt;/code>&lt;/a> expands on this idea to show how you can generate parameter grids and vary the random distribution used in each row.&lt;/p>
&lt;h3 id="group-wise-models">Group-wise models
&lt;a href="#group-wise-models">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The new &lt;code>nest_by()&lt;/code> function works similarly to &lt;code>group_by()&lt;/code> but instead of storing the grouping data as metadata, visibly changes the structure. Now we have three rows (one for each group), and we have a list-col, &lt;code>data&lt;/code>, that stores the data for that group. Also note that the output is a &lt;code>rowwise()&lt;/code> object; this is important because it&amp;rsquo;s going to make working with that list of data frames much easier.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">by_cyl&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">mtcars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">nest_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cyl&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">by_cyl&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 3 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; # Rowwise: cyl&lt;/span>
&lt;span class="c1">#&amp;gt; cyl data&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;list&amp;lt;tbl_df[,10]&amp;gt;&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 4 [11 Ã 10]&lt;/span>
&lt;span class="c1">#&amp;gt; 2 6 [7 Ã 10]&lt;/span>
&lt;span class="c1">#&amp;gt; 3 8 [14 Ã 10]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can use &lt;code>mutate()&lt;/code> to fit a model to each data frame:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">by_cyl&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">by_cyl&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">model&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">lm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">wt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="n">by_cyl&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 3 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; # Rowwise: cyl&lt;/span>
&lt;span class="c1">#&amp;gt; cyl data model &lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;list&amp;lt;tbl_df[,10]&amp;gt;&amp;gt; &amp;lt;list&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 4 [11 Ã 10] &amp;lt;lm&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; 2 6 [7 Ã 10] &amp;lt;lm&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; 3 8 [14 Ã 10] &amp;lt;lm&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Note that we need to wrap the output of &lt;code>lm()&lt;/code> into a list; if you forget this, the error message will remind you.)&lt;/p>
&lt;p>And then extract model summaries or coefficients with &lt;code>summarise()&lt;/code> and
&lt;a href="http://broom.tidyverse.org/" target="_blank" rel="noopener">broom&lt;/a> functions:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">by_cyl&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">broom&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">glance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` regrouping output by &amp;#39;cyl&amp;#39; (override with `.groups` argument)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 3 x 12&lt;/span>
&lt;span class="c1">#&amp;gt; # Groups: cyl [3]&lt;/span>
&lt;span class="c1">#&amp;gt; cyl r.squared adj.r.squared sigma statistic p.value df logLik AIC BIC&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 4 0.509 0.454 3.33 9.32 0.0137 2 -27.7 61.5 62.7&lt;/span>
&lt;span class="c1">#&amp;gt; 2 6 0.465 0.357 1.17 4.34 0.0918 2 -9.83 25.7 25.5&lt;/span>
&lt;span class="c1">#&amp;gt; 3 8 0.423 0.375 2.02 8.80 0.0118 2 -28.7 63.3 65.2&lt;/span>
&lt;span class="c1">#&amp;gt; # â¦ with 2 more variables: deviance &amp;lt;dbl&amp;gt;, df.residual &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="n">by_cyl&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">broom&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">tidy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` regrouping output by &amp;#39;cyl&amp;#39; (override with `.groups` argument)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 6 x 6&lt;/span>
&lt;span class="c1">#&amp;gt; # Groups: cyl [3]&lt;/span>
&lt;span class="c1">#&amp;gt; cyl term estimate std.error statistic p.value&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 4 (Intercept) 39.6 4.35 9.10 0.00000777&lt;/span>
&lt;span class="c1">#&amp;gt; 2 4 wt -5.65 1.85 -3.05 0.0137 &lt;/span>
&lt;span class="c1">#&amp;gt; 3 6 (Intercept) 28.4 4.18 6.79 0.00105 &lt;/span>
&lt;span class="c1">#&amp;gt; 4 6 wt -2.78 1.33 -2.08 0.0918 &lt;/span>
&lt;span class="c1">#&amp;gt; 5 8 (Intercept) 23.9 3.01 7.94 0.00000405&lt;/span>
&lt;span class="c1">#&amp;gt; 6 8 wt -2.19 0.739 -2.97 0.0118&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>dplyr 1.0.0: working across columns</title><link>https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-colwise/</link><pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-colwise/</guid><description>&lt;p>Today, I wanted to talk a little bit about the new &lt;code>across()&lt;/code> function that makes it easy to perform the same operation on multiple columns.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Update&lt;/strong>: as of June 1, dplyr 1.0.0 is now available on CRAN! Read
&lt;a href="https://www.tidyverse.org/blog/2020/06/dplyr-1-0-0/">all about it&lt;/a> or install it now with &lt;code>install.packages(&amp;quot;dplyr&amp;quot;)&lt;/code>.&lt;/p>
&lt;hr>
&lt;h2 id="motivation">Motivation
&lt;a href="#motivation">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>It&amp;rsquo;s often useful to perform the same operation on multiple columns, but copying and pasting is both tedious and error prone:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can now rewrite such code using &lt;code>across()&lt;/code>, which lets you apply a transformation to multiple variables selected with the same syntax as
&lt;a href="https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-select-rename-relocate/#select-and-renaming" target="_blank" rel="noopener">&lt;code>select()&lt;/code> and &lt;code>rename()&lt;/code>&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">across&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mean&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1"># or with a function&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">across&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.numeric&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mean&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You might be familiar with &lt;code>summarise_if()&lt;/code> and &lt;code>summarise_at()&lt;/code> which we previously recommended for this sort of operation. Later in the blog post we&amp;rsquo;ll come back to why we now prefer &lt;code>across()&lt;/code>. But for now, let&amp;rsquo;s dive into the basics of &lt;code>across()&lt;/code>.&lt;/p>
&lt;h2 id="basic-usage">Basic usage
&lt;a href="#basic-usage">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>&lt;code>across()&lt;/code> has two primary arguments:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The first argument, &lt;code>.cols&lt;/code>, selects the columns you want to operate on. It uses the tidy select syntax so you can pick columns by position, name, function of name, type, or any combination thereof using Boolean operators.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The second argument, &lt;code>.fns&lt;/code>, is a function or list of functions to apply to each column. You can use also purrr style formulas like &lt;code>~ .x / 2&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Here are a couple of examples of &lt;code>across()&lt;/code> used with &lt;code>summarise()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dplyr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">warn.conflicts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">starwars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">across&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.character&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">n_distinct&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 8&lt;/span>
&lt;span class="c1">#&amp;gt; name hair_color skin_color eye_color sex gender homeworld species&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 87 13 31 15 5 3 49 38&lt;/span>
&lt;span class="n">starwars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">species&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">n&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">across&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gender&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">homeworld&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">n_distinct&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` ungrouping output (override with `.groups` argument)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 9 x 4&lt;/span>
&lt;span class="c1">#&amp;gt; species sex gender homeworld&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 Droid 1 2 3&lt;/span>
&lt;span class="c1">#&amp;gt; 2 Gungan 1 1 1&lt;/span>
&lt;span class="c1">#&amp;gt; 3 Human 2 2 16&lt;/span>
&lt;span class="c1">#&amp;gt; 4 Kaminoan 2 2 1&lt;/span>
&lt;span class="c1">#&amp;gt; 5 Mirialan 1 1 1&lt;/span>
&lt;span class="c1">#&amp;gt; 6 Twi&amp;#39;lek 2 2 1&lt;/span>
&lt;span class="c1">#&amp;gt; 7 Wookiee 1 1 1&lt;/span>
&lt;span class="c1">#&amp;gt; 8 Zabrak 1 1 2&lt;/span>
&lt;span class="c1">#&amp;gt; 9 &amp;lt;NA&amp;gt; 1 1 3&lt;/span>
&lt;span class="n">starwars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">homeworld&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">n&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">across&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.numeric&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mean&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">n&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` ungrouping output (override with `.groups` argument)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 10 x 5&lt;/span>
&lt;span class="c1">#&amp;gt; homeworld height mass birth_year n&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 Alderaan 176. 64 43 3&lt;/span>
&lt;span class="c1">#&amp;gt; 2 Corellia 175 78.5 25 2&lt;/span>
&lt;span class="c1">#&amp;gt; 3 Coruscant 174. 50 91 3&lt;/span>
&lt;span class="c1">#&amp;gt; 4 Kamino 208. 83.1 31.5 3&lt;/span>
&lt;span class="c1">#&amp;gt; 5 Kashyyyk 231 124 200 2&lt;/span>
&lt;span class="c1">#&amp;gt; 6 Mirial 168 53.1 49 2&lt;/span>
&lt;span class="c1">#&amp;gt; 7 Naboo 175. 64.2 55 11&lt;/span>
&lt;span class="c1">#&amp;gt; 8 Ryloth 179 55 48 2&lt;/span>
&lt;span class="c1">#&amp;gt; 9 Tatooine 170. 85.4 54.6 10&lt;/span>
&lt;span class="c1">#&amp;gt; 10 &amp;lt;NA&amp;gt; 139. 82 334. 10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="other-cool-features">Other cool features
&lt;a href="#other-cool-features">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>You&amp;rsquo;ll find a lot more about &lt;code>across()&lt;/code> in
&lt;a href="https://dplyr.tidyverse.org/dev/articles/colwise.html" target="_blank" rel="noopener">&lt;code>vignette(&amp;quot;colwise&amp;quot;)&lt;/code>&lt;/a>. There are three cool features you might be particularly interested in:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>You can use it with
&lt;a href="https://dplyr.tidyverse.org/dev/articles/colwise.html#multiple-functions" target="_blank" rel="noopener">multiple summary functions&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can use it with
&lt;a href="https://dplyr.tidyverse.org/dev/articles/colwise.html#other-verbs" target="_blank" rel="noopener">any dplyr verb&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If needed, you can access the name of the column currently being processed with
&lt;a href="https://dplyr.tidyverse.org/dev/articles/colwise.html#current-column" target="_blank" rel="noopener">&lt;code>cur_column()&lt;/code>&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="why-across">Why &lt;code>across()&lt;/code>?
&lt;a href="#why-across">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>If you&amp;rsquo;ve tackled this problem with an older version of dplyr, you might&amp;rsquo;ve used one of the functions with an &lt;code>_if&lt;/code>, &lt;code>_at&lt;/code>, or &lt;code>_all&lt;/code> suffix. These functions solved a pressing need and are used by many people, but are now superseded. This means that they&amp;rsquo;ll stay around, but will only receive critical bug fixes.&lt;/p>
&lt;p>Why did we decide to move away from these functions in favour of &lt;code>across()&lt;/code>?&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>across()&lt;/code> makes it possible to compute useful summaries that were previously impossible. For example, it&amp;rsquo;s now easy to summarise numeric vectors with one function, factors with another, and still compute the number of rows in each group:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nf">across&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.numeric&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mean&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nf">across&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.factor&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">nlevels&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">n&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>across()&lt;/code> reduces the number of functions that dplyr needs to provide. This makes dplyr easier for you to use (because there are fewer functions to remember) and easier for us to develop (since we only need to implement one function for each new verb, not four).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>With the &lt;code>where()&lt;/code> helper, &lt;code>across()&lt;/code> unifies &lt;code>_if&lt;/code> and &lt;code>_at&lt;/code> semantics, allowing combinations that used to be impossible. For example, you can now transform all numeric columns whose name begins with &amp;ldquo;x&amp;rdquo;: &lt;code>across(where(is.numeric) &amp;amp; starts_with(&amp;quot;x&amp;quot;))&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>across()&lt;/code> doesn&amp;rsquo;t need &lt;code>vars()&lt;/code>. The &lt;code>_at()&lt;/code> functions are the only place in dplyr where you have to use &lt;code>vars()&lt;/code>, which makes them unusual, and hence harder to learn and remember.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Why did it take it long to discover &lt;code>across()&lt;/code>? Surprisingly, the key idea that makes &lt;code>across()&lt;/code> works came out of our low-level work on the
&lt;a href="http://vctrs.r-lib.org/" target="_blank" rel="noopener">vctrs&lt;/a> package, where we learnt that you can have a column of a data frame that is itself a data frame. It&amp;rsquo;s a bummer that we had a few false starts before we discovered &lt;code>across()&lt;/code>, but even with hindsight, I don&amp;rsquo;t see how we could&amp;rsquo;ve skipped the intermediate steps.&lt;/p>
&lt;h2 id="converting-existing-code">Converting existing code
&lt;a href="#converting-existing-code">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>If you want to update your existing code to use &lt;code>across()&lt;/code> instead of the &lt;code>_if&lt;/code>, &lt;code>_at&lt;/code>, or &lt;code>_all()&lt;/code> functions, it&amp;rsquo;s generally straightforward:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Strip the &lt;code>_if()&lt;/code>, &lt;code>_at()&lt;/code> and &lt;code>_all()&lt;/code> suffix off the function.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Call &lt;code>across()&lt;/code>. The first argument will be:&lt;/p>
&lt;ol>
&lt;li>For &lt;code>_if()&lt;/code>, the old second argument.&lt;/li>
&lt;li>For &lt;code>_at()&lt;/code>, the old second argument. If there was a single element in &lt;code>vars()&lt;/code> you can remove &lt;code>vars()&lt;/code>, otherwise replace it with &lt;code>c()&lt;/code>.&lt;/li>
&lt;li>For &lt;code>_all()&lt;/code>, &lt;code>everything()&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>The subsequent arguments can be copied as is.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Here are a few examples of this process:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate_if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.numeric&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mean&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># -&amp;gt;&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">across&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.numeric&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mean&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate_at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">vars&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">starts_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;y&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="n">mean&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># -&amp;gt;&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">across&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">starts_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;y&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="n">mean&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate_all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mean&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># -&amp;gt;&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">across&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">everything&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">mean&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">na.rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you&amp;rsquo;ve used multiple &lt;code>_if&lt;/code>/&lt;code>_at&lt;/code>/&lt;code>_all&lt;/code> functions in a row, you should also consider if it&amp;rsquo;s now possible to collapse them into a single call, using the new features of &lt;code>across()&lt;/code>.&lt;/p>
&lt;p>Again, you don&amp;rsquo;t need to worry about these functions going away in the short-term, but it&amp;rsquo;s good practice to keep your code up-to-date. Note, however, that &lt;code>across()&lt;/code> currently has a little more overhead than the older approaches so it will be a little slower. We have a plan to improve the performance in dplyr 1.1.0.&lt;/p></description></item><item><title>dplyr 1.0.0: select, rename, relocate</title><link>https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-select-rename-relocate/</link><pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-select-rename-relocate/</guid><description>&lt;p>
&lt;a href="https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-is-coming-soon/" target="_blank" rel="noopener">dplyr 1.0.0 is coming soon&lt;/a>, and last week we showed how
&lt;a href="https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-summarise/" target="_blank" rel="noopener">&lt;code>summarise()&lt;/code> is growing&lt;/a>. Today, I wanted to talk a little bit about functions for selecting, renaming, and relocating columns.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Update&lt;/strong>: as of June 1, dplyr 1.0.0 is now available on CRAN! Read
&lt;a href="https://www.tidyverse.org/blog/2020/06/dplyr-1-0-0/">all about it&lt;/a> or install it now with &lt;code>install.packages(&amp;quot;dplyr&amp;quot;)&lt;/code>.&lt;/p>
&lt;hr>
&lt;h3 id="update-notice">&lt;em>Update notice&lt;/em>
&lt;a href="#update-notice">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>We have updated the syntax for selecting with a function. Where you would use &lt;code>data %&amp;gt;% select(is.numeric)&lt;/code> in the early development versions, you must now use &lt;code>data %&amp;gt;% select(where(is.numeric))&lt;/code>. We made this change to avoid puzzling error messages when a variable is unexpectedly missing from the data frame and there is a corresponding function in the environment:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># Attempts to invoke `data()` function&lt;/span>
&lt;span class="nf">data.frame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The rest of this post has been updated accordingly.&lt;/p>
&lt;h2 id="select-and-renaming">Select and renaming
&lt;a href="#select-and-renaming">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>&lt;code>select()&lt;/code> and &lt;code>rename()&lt;/code> are now significantly more flexible thanks to enhancements to the
&lt;a href="https://tidyselect.r-lib.org/" target="_blank" rel="noopener">tidyselect&lt;/a> package. There are now five ways to select variables in &lt;code>select()&lt;/code> and &lt;code>rename()&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>By &lt;strong>position&lt;/strong>: &lt;code>df %&amp;gt;% select(1, 5, 10)&lt;/code> or &lt;code>df %&amp;gt;% select(1:4)&lt;/code>. Selecting by position is not generally recommended, but &lt;code>rename()&lt;/code>ing by position can be very useful, particularly if the variable names are very long, non-syntactic, or duplicated.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>By &lt;strong>name&lt;/strong>: &lt;code>df %&amp;gt;% select(a, e, j)&lt;/code>, &lt;code>df %&amp;gt;% select(c(a, e, j))&lt;/code> or &lt;code>df %&amp;gt;% select(a:d)&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>By &lt;strong>function of name&lt;/strong>: &lt;code>df %&amp;gt;% select(starts_with(&amp;quot;x&amp;quot;))&lt;/code>, or &lt;code>df %&amp;gt;% select(ends_with(&amp;quot;s&amp;quot;))&lt;/code>. You can also use helpers &lt;code>contains()&lt;/code> and &lt;code>matches()&lt;/code> for more flexibly matching.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>By &lt;strong>type&lt;/strong>: &lt;code>df %&amp;gt;% select(where(is.numeric))&lt;/code>, &lt;code>df %&amp;gt;% select(where(is.factor))&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>By &lt;strong>any combination&lt;/strong> of the above using the Boolean operators &lt;code>!&lt;/code>, &lt;code>&amp;amp;&lt;/code>, and &lt;code>|&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>df %&amp;gt;% select(!where(is.factor))&lt;/code>: selects all non-factor variables.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>df %&amp;gt;% select(where(is.numeric) &amp;amp; starts_with(&amp;quot;x&amp;quot;))&lt;/code>: selects all numeric variables that starts with &amp;ldquo;x&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>df %&amp;gt;% select(starts_with(&amp;quot;a&amp;quot;) | ends_with(&amp;quot;z&amp;quot;))&lt;/code>: selects all variables that starts with &amp;ldquo;a&amp;rdquo; or ends with &amp;ldquo;z&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>(We owe a debt of gratitude to
&lt;a href="http://irene.rbind.io/" target="_blank" rel="noopener">Irene Steves&lt;/a>, who put together a
&lt;a href="https://gist.github.com/isteves/afb7ac5a3b185f600d7f130d99142174" target="_blank" rel="noopener">detailed analysis&lt;/a> showing the challenges of the previous approach, and motivating us to do better.)&lt;/p>
&lt;p>Here&amp;rsquo;s a few examples of how you might use these techniques in with some toy data:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dplyr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">warn.conflicts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Rename by position to fix a data frame with duplicated column names&lt;/span>
&lt;span class="n">df1&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">.name_repair&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;minimal&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">df1&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 5 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; a a&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 5&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 4&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 3&lt;/span>
&lt;span class="c1">#&amp;gt; 4 4 2&lt;/span>
&lt;span class="c1">#&amp;gt; 5 5 1&lt;/span>
&lt;span class="n">df1&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">rename&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 5 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; a b&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 5&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 4&lt;/span>
&lt;span class="c1">#&amp;gt; 3 3 3&lt;/span>
&lt;span class="c1">#&amp;gt; 4 4 2&lt;/span>
&lt;span class="c1">#&amp;gt; 5 5 1&lt;/span>
&lt;span class="n">df2&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Keep numeric columns&lt;/span>
&lt;span class="n">df2&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.numeric&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 4&lt;/span>
&lt;span class="c1">#&amp;gt; x1 x3 y2 y4&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 2 3 4&lt;/span>
&lt;span class="c1"># Or all columns that aren&amp;#39;t character&lt;/span>
&lt;span class="n">df2&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nf">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.character&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 4&lt;/span>
&lt;span class="c1">#&amp;gt; x1 x3 y2 y4&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 2 3 4&lt;/span>
&lt;span class="c1"># Or columns that start with x and are numeric&lt;/span>
&lt;span class="n">df2&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">starts_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nf">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.numeric&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; x1 x3&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="programming">Programming
&lt;a href="#programming">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;ve also made &lt;code>select()&lt;/code> and &lt;code>rename()&lt;/code> a little easier to program with when you have a character vector of variable names, thanks to the new &lt;code>any_of()&lt;/code> and &lt;code>all_of()&lt;/code> functions. They both take a character vector of variable names:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">vars&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;x2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;y1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;z&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">df2&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">any_of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vars&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; x1 x2 y1 &lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 a b&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>any_of()&lt;/code> supersedes the poorly named &lt;code>one_of()&lt;/code> function; I have no idea why I called it &lt;code>one_of()&lt;/code> because it&amp;rsquo;s always selected multiple variables!&lt;/p>
&lt;p>They differ only in what happens when variables are not present in the data frame. Where &lt;code>any_of()&lt;/code> silently ignores the missing columns, &lt;code>all_of()&lt;/code> throws an error:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df2&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">all_of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vars&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; Error: Can&amp;#39;t subset columns that don&amp;#39;t exist.&lt;/span>
&lt;span class="c1">#&amp;gt; x Column `z` doesn&amp;#39;t exist.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can learn more about programming with tidy selection in
&lt;a href="https://dplyr.tidyverse.org/dev/reference/dplyr_tidy_select.html" target="_blank" rel="noopener">&lt;code>?dplyr_tidy_select&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="renaming-programatically">Renaming programatically
&lt;a href="#renaming-programatically">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The new &lt;code>rename_with()&lt;/code> makes it easier to rename variables programmatically:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df2&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">rename_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">toupper&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 7&lt;/span>
&lt;span class="c1">#&amp;gt; X1 X2 X3 Y1 Y2 Y3 Y4&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 a 2 b 3 c 4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(This pairs well with functions like
&lt;a href="http://sfirke.github.io/janitor/reference/make_clean_names.html" target="_blank" rel="noopener">&lt;code>janitor::make_clean_names()&lt;/code>&lt;/a>.)&lt;/p>
&lt;p>You can optionally choose which columns to apply the transformation to:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df2&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">rename_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">toupper&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">starts_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 7&lt;/span>
&lt;span class="c1">#&amp;gt; X1 X2 X3 y1 y2 y3 y4&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 a 2 b 3 c 4&lt;/span>
&lt;span class="n">df2&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">rename_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">toupper&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.numeric&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 7&lt;/span>
&lt;span class="c1">#&amp;gt; X1 x2 X3 y1 Y2 y3 Y4&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 a 2 b 3 c 4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>rename_with()&lt;/code> supersedes &lt;code>rename_if()&lt;/code> and &lt;code>rename_at()&lt;/code>; we&amp;rsquo;ll talk more about the other &lt;code>_if()&lt;/code>, &lt;code>_at()&lt;/code>, and &lt;code>_all()&lt;/code> functions in the near future.&lt;/p>
&lt;h2 id="relocate">&lt;code>relocate()&lt;/code>
&lt;a href="#relocate">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>For a long time, people have asked an easy way to change the order of columns in data frame. It&amp;rsquo;s always been possible to perform some transformations with &lt;code>select()&lt;/code>, but it only worked for simple moves, and felt a bit hacky. dplyr now has a specialised function for moving columns around: &lt;code>relocate()&lt;/code>. The most common need is to move variables to the front, so that&amp;rsquo;s the default behaviour:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df3&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">df3&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">relocate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 4&lt;/span>
&lt;span class="c1">#&amp;gt; y z w x&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 a b 0 1&lt;/span>
&lt;span class="n">df3&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">relocate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.character&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 4&lt;/span>
&lt;span class="c1">#&amp;gt; y z w x&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 a b 0 1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(It uses the same syntax as &lt;code>select()&lt;/code> and &lt;code>rename()&lt;/code> so you can use arbitrarily complex expressions to pick which variables you want to move.)&lt;/p>
&lt;p>If you want to move columns to a different position use &lt;code>.before&lt;/code> or &lt;code>.after&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df3&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">relocate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">.after&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 4&lt;/span>
&lt;span class="c1">#&amp;gt; x y w z &lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 a 0 b&lt;/span>
&lt;span class="n">df3&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">relocate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">.before&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 4&lt;/span>
&lt;span class="c1">#&amp;gt; x w y z &lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 0 a b&lt;/span>
&lt;span class="c1"># If you want to move columns to the right hand side use `last_col()`&lt;/span>
&lt;span class="n">df3&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">relocate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">.after&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">last_col&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 1 x 4&lt;/span>
&lt;span class="c1">#&amp;gt; x y z w&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 a b 0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="column-functions">Column functions
&lt;a href="#column-functions">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Together these three functions form a family of functions for working with columns:&lt;/p>
&lt;ul>
&lt;li>&lt;code>select()&lt;/code> changes membership.&lt;/li>
&lt;li>&lt;code>rename()&lt;/code> or &lt;code>rename_with()&lt;/code> to changes names.&lt;/li>
&lt;li>&lt;code>relocate()&lt;/code> to changes position.&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s interesting to think about how these compare to their row-based equivalents: &lt;code>select()&lt;/code> is analogous to &lt;code>filter()&lt;/code>, and &lt;code>relocate()&lt;/code> to &lt;code>arrange()&lt;/code>. There there&amp;rsquo;s no row-wise equivalent to &lt;code>rename()&lt;/code> because in the tidyverse rows don&amp;rsquo;t have names.&lt;/p></description></item><item><title>dplyr 1.0.0: new `summarise()` features</title><link>https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-summarise/</link><pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-summarise/</guid><description>&lt;p>As we&amp;rsquo;ve mentioned,
&lt;a href="https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-is-coming-soon/" target="_blank" rel="noopener">dplyr 1.0.0 is coming soon&lt;/a>. Today, we&amp;rsquo;ve started the official release process by notifying maintainers of packages that have problems with dplyr 1.0.0, and we&amp;rsquo;re planning for a CRAN release six weeks later, on May 1. This post is the first in a series that will introduce you to new features in dplyr 1.0.0. Today, I&amp;rsquo;ll start with some big changes to &lt;code>summarise()&lt;/code> that make it significantly more powerful.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Update&lt;/strong>: as of June 1, dplyr 1.0.0 is now available on CRAN! Read
&lt;a href="https://www.tidyverse.org/blog/2020/06/dplyr-1-0-0/">all about it&lt;/a> or install it now with &lt;code>install.packages(&amp;quot;dplyr&amp;quot;)&lt;/code>.&lt;/p>
&lt;hr>
&lt;h2 id="multiple-rows-and-columns">Multiple rows and columns
&lt;a href="#multiple-rows-and-columns">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Two big changes make &lt;code>summarise()&lt;/code> much more flexible. A single summary expression can now return:&lt;/p>
&lt;ul>
&lt;li>A vector of any length, creating multiple rows.&lt;/li>
&lt;li>A data frame, creating multiple columns.&lt;/li>
&lt;/ul>
&lt;p>To get a sense for what this means, take this toy dataset:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dplyr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">warn.conflicts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">grp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">each&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">rnorm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">-0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">rnorm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1.5&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">rnorm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">rnorm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.5&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">df&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 10 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; grp x y&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 -1.65 -0.304 &lt;/span>
&lt;span class="c1">#&amp;gt; 2 1 0.00532 0.879 &lt;/span>
&lt;span class="c1">#&amp;gt; 3 1 -2.69 2.32 &lt;/span>
&lt;span class="c1">#&amp;gt; 4 1 -0.256 -1.38 &lt;/span>
&lt;span class="c1">#&amp;gt; 5 1 0.372 0.762 &lt;/span>
&lt;span class="c1">#&amp;gt; 6 2 1.72 -0.932 &lt;/span>
&lt;span class="c1">#&amp;gt; 7 2 -2.73 -0.261 &lt;/span>
&lt;span class="c1">#&amp;gt; 8 2 -0.371 -0.0263&lt;/span>
&lt;span class="c1">#&amp;gt; 9 2 -0.366 0.271 &lt;/span>
&lt;span class="c1">#&amp;gt; 10 2 -0.424 -0.457&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can now use summaries that return multiple values:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">grp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` regrouping output by &amp;#39;grp&amp;#39; (override with `.groups` argument)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; # Groups: grp [2]&lt;/span>
&lt;span class="c1">#&amp;gt; grp rng&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 -2.69 &lt;/span>
&lt;span class="c1">#&amp;gt; 2 1 0.372&lt;/span>
&lt;span class="c1">#&amp;gt; 3 2 -2.73 &lt;/span>
&lt;span class="c1">#&amp;gt; 4 2 1.72&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or return multiple columns from a single summary expression:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">grp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">min&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` ungrouping output (override with `.groups` argument)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 2 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; grp min mean&lt;/span>
&lt;span class="c1">#&amp;gt; * &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 -2.69 -0.843&lt;/span>
&lt;span class="c1">#&amp;gt; 2 2 -2.73 -0.434&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(This isn&amp;rsquo;t very useful when used directly, but as you&amp;rsquo;ll see shortly, it&amp;rsquo;s really useful inside of functions.)&lt;/p>
&lt;p>To put this another way, before dplyr 1.0.0, each summary had to be a single value (one row, one column), but now we&amp;rsquo;ve lifted that restriction so each summary can generate a rectangle of arbitrary size. This is a big change to &lt;code>summarise()&lt;/code> but it should have minimal impact on existing code because it &lt;em>broadens&lt;/em> the interface: all existing code will continue to work, and a number of inputs that would have previously errored now work.&lt;/p>
&lt;h2 id="quantiles">Quantiles
&lt;a href="#quantiles">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>To demonstrate this new flexibility in a more useful situation, let&amp;rsquo;s take a look at &lt;code>quantile()&lt;/code>. &lt;code>quantile()&lt;/code> was hard to use previously because it returns multiple values. Now it&amp;rsquo;s straightforward:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">grp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">quantile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.75&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.75&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` regrouping output by &amp;#39;grp&amp;#39; (override with `.groups` argument)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 6 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; # Groups: grp [2]&lt;/span>
&lt;span class="c1">#&amp;gt; grp x q&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 -1.65 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 2 1 -0.256 0.5 &lt;/span>
&lt;span class="c1">#&amp;gt; 3 1 0.00532 0.75&lt;/span>
&lt;span class="c1">#&amp;gt; 4 2 -0.424 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 5 2 -0.371 0.5 &lt;/span>
&lt;span class="c1">#&amp;gt; 6 2 -0.366 0.75&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It would be nice to be able to reduce the duplication in this code so that we don&amp;rsquo;t have to type the quantile values twice. We can now write a simple function because summary expressions can now be data frames or tibbles:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">quibble&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.75&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">quantile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">grp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">quibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.75&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` regrouping output by &amp;#39;grp&amp;#39; (override with `.groups` argument)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 6 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; # Groups: grp [2]&lt;/span>
&lt;span class="c1">#&amp;gt; grp x q&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 -1.65 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 2 1 -0.256 0.5 &lt;/span>
&lt;span class="c1">#&amp;gt; 3 1 0.00532 0.75&lt;/span>
&lt;span class="c1">#&amp;gt; 4 2 -0.424 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 5 2 -0.371 0.5 &lt;/span>
&lt;span class="c1">#&amp;gt; 6 2 -0.366 0.75&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the past, one of the challenges of writing this sort of function was naming the columns. For example, when you call &lt;code>quibble(y)&lt;/code> it&amp;rsquo;d be nice if you could get columns &lt;code>y&lt;/code> and &lt;code>y_q&lt;/code>, rather than &lt;code>x&lt;/code> and &lt;code>x_q&lt;/code>. Now, thanks to the recent combination of
&lt;a href="https://www.tidyverse.org/blog/2020/02/glue-strings-and-tidy-eval/" target="_blank" rel="noopener">glue and tidy evaluation&lt;/a>, that&amp;rsquo;s easy to implement:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">quibble2&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.75&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{{ x }}&amp;#34;&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">quantile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;{{ x }}_q&amp;#34;&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">grp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">quibble2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.75&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` regrouping output by &amp;#39;grp&amp;#39; (override with `.groups` argument)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 6 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; # Groups: grp [2]&lt;/span>
&lt;span class="c1">#&amp;gt; grp y y_q&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 -0.304 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 2 1 0.762 0.5 &lt;/span>
&lt;span class="c1">#&amp;gt; 3 1 0.879 0.75&lt;/span>
&lt;span class="c1">#&amp;gt; 4 2 -0.457 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 5 2 -0.261 0.5 &lt;/span>
&lt;span class="c1">#&amp;gt; 6 2 -0.0263 0.75&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>One note of caution: naming the output columns in a function like this is a surprisingly complex task, we&amp;rsquo;re not yet sure what the best approach is. Expect to hear more about this as we continue to think about and experiment with it.&lt;/p>
&lt;h2 id="data-frame-columns">Data-frame columns
&lt;a href="#data-frame-columns">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;ve been careful not to name the result of &lt;code>quibble()&lt;/code> in the code above. That&amp;rsquo;s because when we leave the name off, the data frame result is automatically &lt;strong>unpacked&lt;/strong> so each column returned by &lt;code>quibble()&lt;/code> becomes a column in the result. What happens if we name the output?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">out&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">grp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">quibble2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.75&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` regrouping output by &amp;#39;grp&amp;#39; (override with `.groups` argument)&lt;/span>
&lt;span class="n">out&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; # Groups: grp [2]&lt;/span>
&lt;span class="c1">#&amp;gt; grp y$y $y_q&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 -0.304 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 2 1 0.879 0.75&lt;/span>
&lt;span class="c1">#&amp;gt; 3 2 -0.457 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 4 2 -0.0263 0.75&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Look carefully at the output - you&amp;rsquo;ll see a &lt;code>$&lt;/code> in the column names. This lets you know that something weird is going on and you have what we call a &lt;strong>df-column&lt;/strong>; a column of a data frame that is itself a data frame!&lt;/p>
&lt;p>You can see the structure a little better with &lt;code>str()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; tibble [4 Ã 2] (S3: grouped_df/tbl_df/tbl/data.frame)&lt;/span>
&lt;span class="c1">#&amp;gt; $ grp: int [1:4] 1 1 2 2&lt;/span>
&lt;span class="c1">#&amp;gt; $ y : tibble [4 Ã 2] (S3: tbl_df/tbl/data.frame)&lt;/span>
&lt;span class="c1">#&amp;gt; ..$ y : Named num [1:4] -0.3037 0.879 -0.457 -0.0263&lt;/span>
&lt;span class="c1">#&amp;gt; .. ..- attr(*, &amp;#34;names&amp;#34;)= chr [1:4] &amp;#34;25%&amp;#34; &amp;#34;75%&amp;#34; &amp;#34;25%&amp;#34; &amp;#34;75%&amp;#34;&lt;/span>
&lt;span class="c1">#&amp;gt; ..$ y_q: num [1:4] 0.25 0.75 0.25 0.75&lt;/span>
&lt;span class="c1">#&amp;gt; - attr(*, &amp;#34;groups&amp;#34;)= tibble [2 Ã 2] (S3: tbl_df/tbl/data.frame)&lt;/span>
&lt;span class="c1">#&amp;gt; ..$ grp : int [1:2] 1 2&lt;/span>
&lt;span class="c1">#&amp;gt; ..$ .rows: list&amp;lt;int&amp;gt; [1:2] &lt;/span>
&lt;span class="c1">#&amp;gt; .. ..$ : int [1:2] 1 2&lt;/span>
&lt;span class="c1">#&amp;gt; .. ..$ : int [1:2] 3 4&lt;/span>
&lt;span class="c1">#&amp;gt; .. ..@ ptype: int(0) &lt;/span>
&lt;span class="c1">#&amp;gt; ..- attr(*, &amp;#34;.drop&amp;#34;)= logi TRUE&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And you can see that &lt;code>y&lt;/code> is indeed a data frame by extracting it:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">out&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">y&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 2&lt;/span>
&lt;span class="c1">#&amp;gt; y y_q&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 -0.304 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 2 0.879 0.75&lt;/span>
&lt;span class="c1">#&amp;gt; 3 -0.457 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 4 -0.0263 0.75&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And of course, you can dig still deeper to get the individual values:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">out&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">y&lt;/span>
&lt;span class="c1">#&amp;gt; 25% 75% 25% 75% &lt;/span>
&lt;span class="c1">#&amp;gt; -0.30369938 0.87898204 -0.45703741 -0.02630095&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>These df-columns are simultaneously esoteric and commonplace. On the one hand they are an oddity of data frames that has existed for a long time, but has been used in very few places. On the other hand, they are very closely related to merged column headers, which, judging by how often they&amp;rsquo;re found in spreadsheets, are an incredibly popular tool. Our hope is that they are mostly kept under the covers in dplyr 1.0.0, but you can still deliberately choose to access them if you&amp;rsquo;re interested.&lt;/p>
&lt;h2 id="non-summaries">Non-summaries
&lt;a href="#non-summaries">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>In combination with
&lt;a href="http://dplyr.tidyverse.org/dev/articles/rowwise.html" target="_blank" rel="noopener">&lt;code>rowwise()&lt;/code>&lt;/a> (more on that in a future blog post), &lt;code>summarise()&lt;/code> is now sufficiently powerful to replace many workflows that previously required a &lt;code>map()&lt;/code> or &lt;code>apply()&lt;/code> function.&lt;/p>
&lt;p>For example, to read all the all the &lt;code>.csv&lt;/code> files in the current directory, you could write:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pattern&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;\\.csv$&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">rowwise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">read_csv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I feel deeply ambivalent about this code: it seems rather forced to claim that &lt;code>read.csv()&lt;/code> computes a summary of a file path, but it&amp;rsquo;s rather elegant pattern for reading in many files into a tibble.&lt;/p>
&lt;h2 id="previous-approaches">Previous approaches
&lt;a href="#previous-approaches">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>There were a couple of previous approach to solving the quantile problem illustrated above. One way was to create a list-column and then unnest it:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">grp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">summarise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">quibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.75&lt;/span>&lt;span class="p">))))&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="n">tidyr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">unnest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; `summarise()` ungrouping output (override with `.groups` argument)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; grp x q&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 -0.304 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 2 1 0.879 0.75&lt;/span>
&lt;span class="c1">#&amp;gt; 3 2 -0.457 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 4 2 -0.0263 0.75&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or to use &lt;code>do()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">group_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">grp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">do&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">quibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">.$y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.75&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 4 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; # Groups: grp [2]&lt;/span>
&lt;span class="c1">#&amp;gt; grp x q&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 1 -0.304 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 2 1 0.879 0.75&lt;/span>
&lt;span class="c1">#&amp;gt; 3 2 -0.457 0.25&lt;/span>
&lt;span class="c1">#&amp;gt; 4 2 -0.0263 0.75&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We prefer the new &lt;code>summarise()&lt;/code> approach because it&amp;rsquo;s concise, doesn&amp;rsquo;t require learning about list-columns and unnesting, and uses a familiar syntax.&lt;/p></description></item><item><title>dplyr 1.0.0 is coming soon</title><link>https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-is-coming-soon/</link><pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-is-coming-soon/</guid><description>&lt;p>We&amp;rsquo;re very excited to announce the impending arrival of dplyr 1.0.0. We haven&amp;rsquo;t started the official release process yet (where we officially inform maintainers), but that is likely to start in the next week or two, and then dplyr 1.0.0 is likely to be submitted to CRAN 4-6 weeks after that.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Update&lt;/strong>: as of June 1, dplyr 1.0.0 is now available on CRAN! Read
&lt;a href="https://www.tidyverse.org/blog/2020/06/dplyr-1-0-0/">all about it&lt;/a> or install it now with &lt;code>install.packages(&amp;quot;dplyr&amp;quot;)&lt;/code>.&lt;/p>
&lt;hr>
&lt;p>The goal of this blog post is let you know that dplyr 1.0.0 is coming, discuss some of the big changes, and to encourage early adopters to try it out and help us find problems that we&amp;rsquo;ve missed. This is the first of a series of blog posts that will lead up to the final release, so stay tuned for more info.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dplyr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="new-features">New features
&lt;a href="#new-features">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>dplyr 1.0.0 has a &lt;em>lot&lt;/em> of new features which we&amp;rsquo;ll discuss in more detail in future posts. For now, here&amp;rsquo;s a rough overview to get you started:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Much better support for row-wise operations:
&lt;a href="https://dplyr.tidyverse.org/dev/articles/rowwise.html" target="_blank" rel="noopener">&lt;code>vignette(&amp;quot;rowwise&amp;quot;)&lt;/code>&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A new, simpler, approach to col-wise operations:
&lt;a href="https://dplyr.tidyverse.org/dev/articles/colwise.html" target="_blank" rel="noopener">&lt;code>vignette(&amp;quot;colwise&amp;quot;)&lt;/code>&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>summarise()&lt;/code> can now easily create multiple colums and/or multiple rows from a single summary:
&lt;a href="https://dplyr.tidyverse.org/dev/reference/summarise.html" target="_blank" rel="noopener">&lt;code>?summarise&lt;/code>&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>select()&lt;/code> can select columns based on their type, and has a new syntax that better matches how you describe selections in English:
&lt;a href="https://dplyr.tidyverse.org/dev/reference/select.html" target="_blank" rel="noopener">&lt;code>?select&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A new &lt;code>relocate()&lt;/code> verb makes it easier change the position of columns:
&lt;a href="https://dplyr.tidyverse.org/dev/reference/relocate.html" target="_blank" rel="noopener">&lt;code>?relocate&lt;/code>&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Thanks to new rlang and dplyr features, and new a vocabulary, it&amp;rsquo;s considerably easier to program with dplyr:
&lt;a href="https://dplyr.tidyverse.org/dev/articles/programming.html" target="_blank" rel="noopener">&lt;code>vignette(&amp;quot;programming&amp;quot;)&lt;/code>&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="dplyr-internals">dplyr internals
&lt;a href="#dplyr-internals">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Accompanying these user visible changes is much work behind the scenes. Most notably dplyr now has a completely new implementation based on the
&lt;a href="http://vctrs.r-lib.org/" target="_blank" rel="noopener">vctrs package&lt;/a> rather than custom C++ code. vctrs is a low-level package for principled and high-performance manipulation of R vectors. It&amp;rsquo;s not something that you will use directly, but it&amp;rsquo;s becoming an increasingly important part of the foundations of the tidyverse.&lt;/p>
&lt;p>Using vctrs in dplyr has a number advantages:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>It allows much more of dplyr to be implemented in R, which enables faster prototyping, which is why this version comes with the first new major verbs since dplyr 0.3.0!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It makes dplyr more consistent with the rest of the tidyverse, particularly
&lt;a href="https://www.tidyverse.org/blog/2019/09/tidyr-1-0-0/" target="_blank" rel="noopener">tidyr 1.0.0&lt;/a>, which is also implemented on top of vctrs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We benefit from a standardised approach to handling custom (S3) vector types. This mostly a long-term benefit, but it makes dplyr substantially easier to extend from the outside, and I expect it will facilitate a much richer ecosystem of packages surrounding dplyr, in the same way that
&lt;a href="https://blog.rstudio.com/2015/12/21/ggplot2-2-0-0/" target="_blank" rel="noopener">ggplot2 2.0.0&lt;/a> enabled ggplot2 extension packages to flourish.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It allows us to drop the expensive BH and Rcpp dependencies, and to generally reduce the amount of C++ needed. This makes compilation much faster and makes it easier to build dplyr in low memory environments.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Of course, this change also comes with some downsides:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The standard coercion rules implemented in vctrs are a little different from existing dplyr rules, and some existing code will return different results. The biggest changes are how factors and character vectors are handled (we now produce fewer warnings and more factors), but there will be other changes, particularly in edge cases where (for example) you might be trying to combine a date and factor. We worked hard on informative error messages, but this is going to cause some pain.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We have basically reimplemented every single dplyr function from first principles. While we have been careful and do have an extensive set of tests to call upon, it is likely that some new bugs have will have slipped in. One goal of this blog post is to encourage the adventurous to try out dplyr today and report bugs so those who wait until the CRAN release won&amp;rsquo;t see them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There may be some performance decreases. We&amp;rsquo;ve put in quite a lot of time to ensure most performance changes are positive or only slightly negative, but we may have missed some cases. Please let us know if you notice dplyr code that is substantially slower in this version.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Overall, we believe that the upsides to using vctrs outweigh the downsides, particularly in the long term as we use vctrs to power more and more of the tidyverse. There will be pain, but we hope to keep it as small as possible by ripping the band aid off quickly. After this release, dplyr will be a 1.0.0, which means that you should expect very few breaking changes in the future. We&amp;rsquo;ll continue to add new functions and arguments but will be much more conservative about modifying or removing features.&lt;/p>
&lt;p>If the potential for changes makes you nervous, now is a good time to learn about
&lt;a href="https://rstudio.github.io/renv/" target="_blank" rel="noopener">renv&lt;/a>. renv allows to create isolated, reproducible, projects so that you can experiment with new package versions while feeling secure that your existing projects will continue to work as they always have.&lt;/p>
&lt;h2 id="lifecycle">Lifecycle
&lt;a href="#lifecycle">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>To make the transition to dplyr 1.0.0 easier we have invested a lot of time in clarifying where functions (and some arguments) fall in their lifecycle. Our goal is to better inform you of our thinking about functions. You won&amp;rsquo;t always agree with our decisions, but you shouldn&amp;rsquo;t be surprised!&lt;/p>
&lt;p>There are three stages in the lifecycle that are particularly important to know about in dplyr 1.0.0:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Deprecated&lt;/strong> functions (&lt;img src="lifecycle-deprecated.svg" alt="deprecated badge">) are on their way out and you&amp;rsquo;ll should replace them with their modern alternatives in the near future.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Superseded&lt;/strong> functions (&lt;img src="lifecycle-superseded.svg" alt="superseded badge">) aren&amp;rsquo;t going away, but we no longer recommend using them because we think we&amp;rsquo;ve discovered better alternatives. There&amp;rsquo;s no rush, but we suggest that you learn about their replacements and phase out your use of the superseded functions over the next year or two.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Experimental&lt;/strong> features (&lt;img src="lifecycle-experimental.svg" alt="experimental badge">) are those features that we&amp;rsquo;re cautiously optmistic about, but want to get more feedback on before we fully commit to them. Please try them out and let us know what you think!&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The following sections describe each stage in more detail, illustrated with the most important functions in that stage in dplyr 1.0.0&lt;/p>
&lt;h3 id="deprecated-functions">Deprecated functions
&lt;a href="#deprecated-functions">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Deprecation is the most visible of the lifecycle stages because you&amp;rsquo;re forced to immediately confront it when you use a deprecated function:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">mtcars2&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">add_rownames&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Warning: `add_rownames()` is deprecated as of dplyr 1.0.0.&lt;/span>
&lt;span class="c1">#&amp;gt; Please use `tibble::rownames_to_column()` instead.&lt;/span>
&lt;span class="c1">#&amp;gt; This warning is displayed once every 8 hours.&lt;/span>
&lt;span class="c1">#&amp;gt; Call `lifecycle::last_warnings()` to see where this warning was generated.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This warning is generated by the
&lt;a href="http://lifecycle.r-lib.org/" target="_blank" rel="noopener">lifecycle&lt;/a> package, and by default will appear once every 8 hours. The goal is to gently and regularly remind you to upgrade, but not get too much in your face. You can control this warning with the &lt;code>lifecycle_verbosity&lt;/code> option:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>options(lifecycle_verbosity = &amp;quot;warning&amp;quot;)&lt;/code> always warns. This is particularly useful if you want to make a warning reproducible so you can eliminate it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>options(lifecycle_verbosity = &amp;quot;error&amp;quot;)&lt;/code> turns use of deprecated functions into an error. This forces you to rapidly deal with any deprecated functions, but may cause problems if the deprecated function is called by another package.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>options(lifecycle_verbosity = &amp;quot;quiet&amp;quot;)&lt;/code> silences deprecation warnings. We don&amp;rsquo;t generally recommended this, but it&amp;rsquo;s a short-term fix if you&amp;rsquo;re finding the warnings too annoying.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Deprecated functions are also labelled in the documentation, and we have rewritten the examples to show how you can to convert your old code to more modern syntax.&lt;/p>
&lt;p>dplyr 1.0.0 deprecates quite a few functions, but most of them are either rarely used (judging from GitHub searches) or have been informally deprecated for some time:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>In &lt;code>group_by()&lt;/code> you now need to use &lt;code>.add&lt;/code> instead of &lt;code>add&lt;/code>; using &lt;code>add&lt;/code> was a mistake that violates our
&lt;a href="https://design.tidyverse.org/dots-prefix.html" target="_blank" rel="noopener">design principles&lt;/a> and makes it impossible to create a new grouping variable called &lt;code>add&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>as.tbl()&lt;/code> and &lt;code>tbl_df()&lt;/code>; replace with &lt;code>as_tibble()&lt;/code> and &lt;code>tibble()&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>bench_tbls()&lt;/code>, &lt;code>compare_tbls()&lt;/code>, and friends; they were provided as a convenience for developers but they never received much love and hence aren&amp;rsquo;t very useful.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>combine()&lt;/code> was rarely used and has unclear semantics. If needed you can replace with &lt;code>vctrs::vec_c()&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>src_mysql()&lt;/code>, &lt;code>src_postgresql()&lt;/code>, &lt;code>src_sqlite()&lt;/code>: please use dbplyr instead.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>You can see the complete list in
&lt;a href="https://github.com/tidyverse/dplyr/blob/master/NEWS.md#deprecated" target="_blank" rel="noopener">NEWS.md&lt;/a>&lt;/p>
&lt;h3 id="superseded-functions">Superseded functions
&lt;a href="#superseded-functions">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Superseded functions is a weaker form of deprecation: we believe that better approaches exist, but we know that the function is used by many people and it&amp;rsquo;s going to take some time to move away from it. Superseded functions will not receive new features and will only receive critical bug fixes. They are not going away any time soon; for dplyr, that means we won&amp;rsquo;t even think about removing at least 2 years. When we do eventually decide to remove them, we will deprecate first and we promise to provide plenty of warning.&lt;/p>
&lt;p>(Previously we called this stage &amp;ldquo;retired&amp;rdquo; but that caused confusion because many people interpreted it as meaning that the function was going away, when the intent is to convey the opposite.)&lt;/p>
&lt;p>You can tell if a function is superseded by reading the documentation. You&amp;rsquo;ll see a prominent &amp;ldquo;superseded&amp;rdquo; badge, accompanied by an explanation of why the function was superseded. The examples show how to translate your old code to the new syntax. In the future, will provide tools to programmatically identify your use of superseded functions so you could (e.g.) have a policy of not using superseded functions in production code.&lt;/p>
&lt;p>There are two important function families that have been superseded in dplyr 1.0.0:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>All &lt;code>_if()&lt;/code>, &lt;code>_at()&lt;/code> and &lt;code>_all()&lt;/code> function variants (e.g.Â &lt;code>mutate_if()&lt;/code>, &lt;code>summarise_at()&lt;/code>, &lt;code>filter_all()&lt;/code>) have been superseded in favour of new a &lt;code>across()&lt;/code> function that can be used inside of any
&lt;a href="https://dplyr.tidyverse.org/dev/reference/dplyr_data_masking.html" target="_blank" rel="noopener">data masking&lt;/a> verb. Learn more about &lt;code>across()&lt;/code> in
&lt;a href="https://dplyr.tidyverse.org/dev/articles/colwise.html" target="_blank" rel="noopener">&lt;code>vignette(&amp;quot;colwise&amp;quot;)&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>top_n()&lt;/code>, &lt;code>sample_n()&lt;/code>, and &lt;code>sample_frac()&lt;/code> have been superseded in favour of a new family of slice helpers: &lt;code>slice_min()&lt;/code>, &lt;code>slice_max()&lt;/code>, &lt;code>slice_head()&lt;/code>, &lt;code>slice_tail()&lt;/code>, &lt;code>slice_random()&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="experimental-features">Experimental features
&lt;a href="#experimental-features">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Experimental features have been explored and discussed amongst dplyr developers and we&amp;rsquo;re still not 100% sure if they&amp;rsquo;re a good idea or not, or we&amp;rsquo;re not sure exactly how the underlying idea is best expressed in code. We want to expose them to more people while maintaining the option to change (possibly radically!) or even remove them. Experimental features will work best if you try them out and let us know what you think. There are two types of feedback that are particularly useful. Please tell us when an experimental feature:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Allows you to solve a problem in better (e.g.Â faster, less code, more elegantly, &amp;hellip;) than your previous approach.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Is confusing because it works differently to an existing function (particularly a function in the tidyverse).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Informal feedback is fine; feel free to
&lt;a href="http://twitter.com/hadleywickham/status/1235611849179136001" target="_blank" rel="noopener">ping me on twitter&lt;/a>,
&lt;a href="mailto:hadley@rstudio.com">email me&lt;/a>, or
&lt;a href="https://github.com/tidyverse/dplyr/issues/new" target="_blank" rel="noopener">open an issue&lt;/a>.&lt;/p>
&lt;p>In dplyr 1.0.0 there are three new experimental arguments to
&lt;a href="https://dplyr.tidyverse.org/dev/reference/mutate.html#arguments" target="_blank" rel="noopener">&lt;code>mutate()&lt;/code>&lt;/a>, &lt;code>.keep&lt;/code>, &lt;code>.before&lt;/code>, and &lt;code>.after&lt;/code> that give you more control where new columns are located, and precisely which columns should be retained in the output. Please let us know what you think!&lt;/p>
&lt;h2 id="try-it-out">Try it out
&lt;a href="#try-it-out">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>If you&amp;rsquo;re adventurous, you can try it out today. While it&amp;rsquo;s not perfect, it should be very similar to previous versions in most cases. And where it doesn&amp;rsquo;t work you can help us by filing an issue so we can figure out what&amp;rsquo;s gone wrong.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">remotes&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">install_github&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tidyverse/dplyr&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To restore to released version:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;dplyr&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>