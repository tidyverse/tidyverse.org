<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>webassembly | Tidyverse</title><link>https://www.tidyverse.org/tags/webassembly/</link><atom:link href="https://www.tidyverse.org/tags/webassembly/index.xml" rel="self" type="application/rss+xml"/><description>webassembly</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 14 Oct 2024 00:00:00 +0000</lastBuildDate><item><title>WebAssembly roundup part 2: Shinylive 0.8.0</title><link>https://www.tidyverse.org/blog/2024/10/shinylive-0-8-0/</link><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2024/10/shinylive-0-8-0/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>One of the most popular uses of webR in a wider project is
&lt;a href="https://shinylive.io/r/examples" target="_blank" rel="noopener">Shinylive&lt;/a>, a system for deploying Shiny for R or Python apps that run completely in a web browser, without the need for a dedicated Shiny server. Shinylive works by running both the server and client components in the viewer&amp;rsquo;s browser, and the support for running R Shiny apps in this way is provided by webR.&lt;/p>
&lt;p>Since Shinylive works with both R and Python Shiny apps, the project is released as multiple independent but interconnecting software. The core
&lt;a href="https://github.com/posit-dev/shinylive" target="_blank" rel="noopener">Shinylive&lt;/a> assets, the
&lt;a href="https://github.com/posit-dev/r-shinylive" target="_blank" rel="noopener">R shinylive&lt;/a> package, the
&lt;a href="https://github.com/posit-dev/py-shinylive" target="_blank" rel="noopener">Python Shinylive&lt;/a> package, and the
&lt;a href="https://github.com/quarto-ext/shinylive/" target="_blank" rel="noopener">Shinylive Quarto extension&lt;/a>. This post will describe some the latest changes in the context of running the R Shinylive package and Quarto extension.&lt;/p>
&lt;h2 id="shinylive-assets">Shinylive assets
&lt;a href="#shinylive-assets">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The latest release of the Shinylive assets upgrades the version of webR included to 0.4.2, bringing in the improved packaging and loading performance of R binaries discussed in
&lt;a href="../webr-0-4-2/">part 1 of this series&lt;/a>. Shinylive now defaults to downloading R packages in the improved &lt;code>.tgz&lt;/code> archive format served by the
&lt;a href="repo.r-wasm.org">webR default repository&lt;/a> and
&lt;a href="https://r-universe.dev/" target="_blank" rel="noopener">R-Universe&lt;/a>, resulting in a more efficient R package installation and faster start up process.&lt;/p>
&lt;p>These changes are already making a tangible difference to applications. In a recent meeting of the
&lt;a href="https://rconsortium.github.io/submissions-wg/" target="_blank" rel="noopener">R Consortium Submissions Working Group&lt;/a>, it was reported that for a complex Shinylive app the overall load time decreased from over a minute to just 15 seconds! &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>The working group is championing improved practices for R-based submissions of clinical trial data to regulatory bodies for review. With their great work and our steady improvements to Shinylive over time, the group now report that they have reached a new milestone in
&lt;a href="https://r-consortium.org/posts/using-r-to-submit-research-to-the-fda-pilot-4-successfully-submitted/" target="_blank" rel="noopener">successfully submitting a pilot R Shiny app&lt;/a>, featuring a WebAssembly component with Shinylive, to the FDA for review.&lt;/p>
&lt;p>&lt;a href="images/pilot-2.png"> &lt;img src="images/pilot-2.png" alt="Screenshots showing the R Consortium Submissions Working Group Pilot 2 Shinylive app."/> &lt;/a>&lt;/p>
&lt;h2 id="r-shinylive-package">R shinylive package
&lt;a href="#r-shinylive-package">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>
&lt;h3 id="reproducible-data-science-with-binary-bundles">Reproducible data science with binary bundles
&lt;a href="#reproducible-data-science-with-binary-bundles">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>A benefit of WebAssembly is that the same binary instructions can be executed on a whole range of machine architectures, from high performance desktop workstations to low-power devices such as mobile phones or tablets. WebAssembly provides a common environment ensuring that each device can reproduce the exact same results, both now and potentially for many years into the future.&lt;/p>
&lt;p>However, those with experience of building software and documents with long-term reproducibility in mind will know that not only must the exact version of your own software be available, but also packages and system dependencies too. Accurate versioning matters; newer editions of R packages are always being released with modified functionality or features deprecated and perhaps even removed.&lt;/p>
&lt;p>Previously Shinylive downloaded R packages at runtime from the webR default repository. However, that repository follows CRAN and upgrades packages to the latest version reasonably often. So, to help provide long-lived reproducibility, the latest version of Shinylive now not only deploys your application source but also downloads and bundles as many R package binaries as possible in the exported app.&lt;/p>
&lt;p>By including WebAssembly R package binaries, a self-contained bundle is created that will never change over time, even as new R package versions are released. Once deployed to a static web service such as GitHub Pages or Netlify you can be confident that your results will be exactly the same now or in many years time &amp;ndash; at least as long as browsers continue to support the WebAssembly standard!&lt;/p>
&lt;p>With this, it is now also possible to load a complex R Shinylive app from a local web server without any external internet connection. This isn&amp;rsquo;t likely to be that useful for most users, but there are some highly regulated industries and restricted network environments where it becomes a key feature.&lt;/p>
&lt;h3 id="bundling-webassembly-binaries">Bundling WebAssembly binaries
&lt;a href="#bundling-webassembly-binaries">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>By default, R packages installed from CRAN,
&lt;a href="https://r-universe.dev/" target="_blank" rel="noopener">R-Universe&lt;/a>, or
&lt;a href="https://bioconductor.org" target="_blank" rel="noopener">Bioconductor&lt;/a> will be downloaded and distributed with your Shinylive application. For CRAN packages, the packages are sourced from the webR default repository. For R-Universe or Bioconductor packages, they are sourced from the WebAssembly binaries provided by R-Universe.&lt;/p>
&lt;p>Here&amp;rsquo;s an example of what this looks like for a sample Shiny app depending on the dplyr package. Shinylive assets and R package binaries are downloaded and bundled at export time, and the status of each is shown in the output.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">shinylive&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">export&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;app&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;site&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ Exporting Shiny app from: app&lt;/span>
&lt;span class="c1">#&amp;gt; → Destination: site&lt;/span>
&lt;span class="c1">#&amp;gt; [======================================================================] 100%&lt;/span>
&lt;span class="c1">#&amp;gt; ✔ Copying base Shinylive files [289ms]&lt;/span>
&lt;span class="c1">#&amp;gt; ✔ Loading metadata database ... done&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Finding R package dependencies ... Done!&lt;/span>
&lt;span class="c1">#&amp;gt; [=======&amp;gt;--------------------------------------------------------------] 11%&lt;/span>
&lt;span class="c1">#&amp;gt; trying URL &amp;#39;http://repo.r-wasm.org/bin/emscripten/contrib/4.4/dplyr_1.1.4.tgz&amp;#39;&lt;/span>
&lt;span class="c1">#&amp;gt; Content type &amp;#39;application/x-tar&amp;#39; length 1063948 bytes (1.0 MB)&lt;/span>
&lt;span class="c1">#&amp;gt; ==================================================&lt;/span>
&lt;span class="c1">#&amp;gt; downloaded 1.0 MB&lt;/span>
&lt;span class="c1">#&amp;gt; [...]&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; ✔ Downloading WebAssembly R package binaries to site/shinylive/webr/packages [3.2s]&lt;/span>
&lt;span class="c1">#&amp;gt; ✔ Writing app metadata to site/shinylive/webr/packages/metadata.rds [14ms]&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ Wrote site/shinylive/webr/packages/metadata.rds (694 bytes)&lt;/span>
&lt;span class="c1">#&amp;gt; ✔ Writing site/app.json [17ms]&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ Wrote site/app.json (1.64K bytes)&lt;/span>
&lt;span class="c1">#&amp;gt; ✔ Shinylive app export complete.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ Run the following in an R session to serve the app:&lt;/span>
&lt;span class="c1">#&amp;gt; `httpuv::runStaticServer(&amp;#34;site&amp;#34;)`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The shinylive R package will query the currently installed versions of packages on your machine and attempt to download and bundle the same version for WebAssembly. Binaries are considered acceptable if the major and minor version numbers match, and a warning is issued otherwise. This check ensures the resulting behaviour of the exported Shinylive app is as close as possible to the behaviour when running the app in the usual way.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">shinylive&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">export&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;app&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;site&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; [...]&lt;/span>
&lt;span class="c1">#&amp;gt; Warning message:&lt;/span>
&lt;span class="c1">#&amp;gt; Package version mismatch for dplyr, ensure the versions below are compatible.&lt;/span>
&lt;span class="c1">#&amp;gt; ! Installed version: 1.0.9, WebAssembly version: 1.1.4.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ Install a package version matching the WebAssembly version to silence this error. &lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="bundling-custom-r-packages">Bundling custom R packages
&lt;a href="#bundling-custom-r-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Using your own custom R packages with webR or Shinylive is also possible, but requires a little extra work. R packages, particularly those that include compiled code, must be processed specially for WebAssembly. This requires an environment with a WebAssembly compiler toolchain such as Emscripten and some set up to organise the cross-compiling of packages using R.&lt;/p>
&lt;p>The easiest way to get up and running is to
&lt;a href="https://ropensci.org/blog/2021/06/22/setup-runiverse/" target="_blank" rel="noopener">create a personal R-Universe repository&lt;/a> for your packages. The system will automatically build R package binaries for multiple targets, including WebAssembly, and Shinylive will download these resulting binaries when exporting your app.&lt;/p>
&lt;p>It&amp;rsquo;s also possible to automatically cross-compile and deploy WebAssembly R package binaries using GitHub Actions. The
&lt;a href="https://github.com/r-wasm/actions" target="_blank" rel="noopener">r-wasm/actions&lt;/a> repository provides reusable workflows for GitHub Actions, one of which can be used to automatically build WebAssembly R package when a GitHub release is created, attaching the resulting binary to the release. If an R package has been installed directly from GitHub, using a tool such as
&lt;a href="https://pak.r-lib.org" target="_blank" rel="noopener">pak&lt;/a>, Shinylive will look for binaries attached to a GitHub release for bundling.&lt;/p>
&lt;p>Finally, building an R package for WebAssembly can be done manually using the
&lt;a href="https://r-wasm.github.io/rwasm/" target="_blank" rel="noopener">rwasm&lt;/a> package. This is a little more involved, using a combination of the
&lt;a href="https://github.com/emscripten-core/emsdk" target="_blank" rel="noopener">Emscripten SDK&lt;/a> and the
&lt;a href="https://github.com/r-wasm/webr/pkgs/container/webr" target="_blank" rel="noopener">webR Docker container&lt;/a> to organise cross-compiling packages with R and manage custom CRAN-like repositories. Shinylive will also bundle WebAssembly binaries for R packages installed from such a custom repository.&lt;/p>
&lt;h2 id="shinylive-quarto-extension">Shinylive Quarto Extension
&lt;a href="#shinylive-quarto-extension">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Shinylive applications may be embedded in a Quarto document using the Shinylive Quarto extension. With the extension active, a Shinylive app can be added by directly including its source code in the document markdown. Under the hood, the extension works by calling out to the export functionality provided by the Shinylive R and Python packages, and so improvements to the exporting process also applies to Shiny apps included in Quarto projects.&lt;/p>
&lt;pre>&lt;code>Lorem ipsum dolor sit amet, consectetur adipiscing elit.
```{shinylive-r}
#| standalone: true
library(shiny)
ui &amp;lt;- [...]
server &amp;lt;- [...]
shinyApp(ui = ui, server = server)
```
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
fugiat nulla pariatur.
&lt;/code>&lt;/pre>
&lt;h3 id="embedding-data-files-in-subdirectories">Embedding data files in subdirectories
&lt;a href="#embedding-data-files-in-subdirectories">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>When a Shiny app has been deployed with Shinylive it does not have direct access to the filesystem on the client device. This is enforced by WebAssembly and the browser for security reasons. As such, additional data must either by downloaded or pre-loaded to a virtual filesystem before the app starts.&lt;/p>
&lt;p>There are a few ways to do this with a Shinylive app, but when working in a Quarto document things are more constrained. One supported way is to define the content of additional data files inline.&lt;/p>
&lt;pre>&lt;code>```{shinylive-r}
#| standalone: true
ui &amp;lt;- [...]
server &amp;lt;- [...]
shinyApp(ui = ui, server = server)
## file: data/example.csv
foo,bar,baz
1,2,3
2,4,6
3,6,9
5,10,15
8,16,24
```
&lt;/code>&lt;/pre>
&lt;p>The system has been improved to support adding content to subdirectories, along with the ability to define binary content that has been base64 encoded. Combining this with Garrick Aden-Buie&amp;rsquo;s
&lt;a href="https://github.com/gadenbuie/quarto-base64" target="_blank" rel="noopener">quarto-base64&lt;/a> extension is a great way to easily include arbitrary data in your Quarto embedded Shinylive apps.&lt;/p>
&lt;h3 id="quarto-project-wide-shared-assets">Quarto project-wide shared assets
&lt;a href="#quarto-project-wide-shared-assets">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The latest version of the R shinylive package now checks if the export process is currently running as part of a Quarto render. If so, it uses the &lt;code>QUARTO_PROJECT_DIR&lt;/code> environment variable as a hint for where to deploy Shinylive assets and bundled WebAssembly R binaries.&lt;/p>
&lt;p>With this change it&amp;rsquo;s possible to include multiple Shinylive applications in different documents, sharing their WebAssembly assets across the entire project. This avoids an undesirable situation where the exact same set of fundamental R packages are downloaded and deployed many times to different paths in a Quarto website.&lt;/p>
&lt;h2 id="using-the-latest-shinylive-asssets">Using the latest Shinylive asssets
&lt;a href="#using-the-latest-shinylive-asssets">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The Shinylive 0.8.0 assets have been
&lt;a href="https://github.com/posit-dev/shinylive/releases/tag/v0.8.0" target="_blank" rel="noopener">released on GitHub&lt;/a>. They will automatically be downloaded and used once the latest version of the shinylive R package makes it to CRAN and the package has been updated on your machine.&lt;/p>
&lt;p>If you&amp;rsquo;d like to get a head start on the latest R shinylive features, you can install the current development version of shinylive directly from GitHub:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>pak&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://pak.r-lib.org/reference/pak.html'>pak&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"posit-dev/r-shinylive"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Or, if you prefer, you can stick with the current release version of the shinylive R package and orchestrate it to use the latest version of the assets by setting the environment variable:&lt;/p>
&lt;pre>&lt;code>SHINYLIVE_ASSETS_VERSION=0.8.0
&lt;/code>&lt;/pre>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>
&lt;a href="https://github.com/chaehni" target="_blank" rel="noopener">@chaehni&lt;/a>,
&lt;a href="https://github.com/cpsievert" target="_blank" rel="noopener">@cpsievert&lt;/a>,
&lt;a href="https://github.com/darrida" target="_blank" rel="noopener">@darrida&lt;/a>,
&lt;a href="https://github.com/erikhall6373" target="_blank" rel="noopener">@erikhall6373&lt;/a>,
&lt;a href="https://github.com/gadenbuie" target="_blank" rel="noopener">@gadenbuie&lt;/a>,
&lt;a href="https://github.com/gschivley" target="_blank" rel="noopener">@gschivley&lt;/a>,
&lt;a href="https://github.com/helgasoft" target="_blank" rel="noopener">@helgasoft&lt;/a>,
&lt;a href="https://github.com/jeroen" target="_blank" rel="noopener">@jeroen&lt;/a>,
&lt;a href="https://github.com/JoaoGarcezAurelio" target="_blank" rel="noopener">@JoaoGarcezAurelio&lt;/a>,
&lt;a href="https://github.com/jvcasillas" target="_blank" rel="noopener">@jvcasillas&lt;/a>,
&lt;a href="https://github.com/kv9898" target="_blank" rel="noopener">@kv9898&lt;/a>,
&lt;a href="https://github.com/next-game-solutions" target="_blank" rel="noopener">@next-game-solutions&lt;/a>,
&lt;a href="https://github.com/Luke-Symes-Tsy" target="_blank" rel="noopener">@Luke-Symes-Tsy&lt;/a>,
&lt;a href="https://github.com/maek-ies" target="_blank" rel="noopener">@maek-ies&lt;/a>,
&lt;a href="https://github.com/pawelru" target="_blank" rel="noopener">@pawelru&lt;/a>,
&lt;a href="https://github.com/quincountychsmn" target="_blank" rel="noopener">@quincountychsmn&lt;/a>,
&lt;a href="https://github.com/rmcminds" target="_blank" rel="noopener">@rmcminds&lt;/a>,
&lt;a href="https://github.com/rbcavanaugh" target="_blank" rel="noopener">@rbcavanaugh&lt;/a>,
&lt;a href="https://github.com/schloerke" target="_blank" rel="noopener">@schloerke&lt;/a>,
&lt;a href="https://github.com/StefKirsch" target="_blank" rel="noopener">@StefKirsch&lt;/a>,
&lt;a href="https://github.com/virtualinertia" target="_blank" rel="noopener">@virtualinertia&lt;/a>, and
&lt;a href="https://github.com/wch" target="_blank" rel="noopener">@wch&lt;/a>.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://rconsortium.github.io/submissions-wg/minutes/2024-08-02/#webassembly">https://rconsortium.github.io/submissions-wg/minutes/2024-08-02/#webassembly&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>webR 0.3.1</title><link>https://www.tidyverse.org/blog/2024/04/webr-0-3-1/</link><pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2024/04/webr-0-3-1/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
* [x] Update all 0.3.0-rc0 references to 0.3.1
-->
&lt;!-- Initialise webR in the page -->
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css">
&lt;style>
.CodeMirror pre {
background-color: unset !important;
}
.btn-webr {
background-color: #EEEEEE;
border-bottom-left-radius: 0;
border-bottom-right-radius: 0;
}
&lt;/style>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js">&lt;/script>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/r/r.js">&lt;/script>
&lt;script type="module">
import { WebR } from 'https://webr.r-wasm.org/v0.4.2/webr.mjs';
globalThis.webR = new WebR();
await globalThis.webR.init();
await webR.FS.mkdir('/persist');
await webR.FS.mount('IDBFS', {}, '/persist');
await webR.FS.syncfs(true);
await webR.evalRVoid("webr::shim_install()");
await webR.evalRVoid("webr::global_prompt_install()", { withHandlers: false });
globalThis.webRCodeShelter = await new globalThis.webR.Shelter();
document.querySelectorAll(".btn-webr").forEach((btn) => {
btn.innerText = 'Run code';
btn.disabled = false;
});
&lt;/script>
&lt;!-- Add webr engine for knit -->
&lt;div class="highlight">
&lt;/div>
&lt;!-- Custom styles for output -->
&lt;div class="highlight">
&lt;style type="text/css">
.output > pre, .output code {
background-color: #ffffff !important;
margin-top: -17px;
border-top-left-radius: 0px;
border-top-right-radius: 0px;
}
.error > pre, .error code {
background-color: #fcebeb !important;
color: #410E0E !important;
}
&lt;/style>
&lt;/div>
&lt;p>We&amp;rsquo;re delighted to announce the release of
&lt;a href="https://docs.r-wasm.org/webr/latest/" target="_blank" rel="noopener">webR&lt;/a> 0.3.1. This release brings bug fixes, infrastructure upgrades, and exciting improvements to webR&amp;rsquo;s API for creating R objects and evaluating R code from JavaScript. These new features make integrating webR with existing JavaScript frameworks such as
&lt;a href="https://observablehq.com" target="_blank" rel="noopener">Observable&lt;/a> a breeze.&lt;/p>
&lt;p>You can install the latest release from
&lt;a href="https://www.npmjs.com/package/webr" target="_blank" rel="noopener">npm&lt;/a> with the command:&lt;/p>
&lt;pre>&lt;code>npm i webr@0.3.1
&lt;/code>&lt;/pre>
&lt;p>or if you&amp;rsquo;re using JavaScript modules to import webR directly from CDN:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">WebR&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;https://webr.r-wasm.org/v0.3.1/webr.mjs&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A summary of changes is described below, with the full
&lt;a href="https://github.com/r-wasm/webr/releases" target="_blank" rel="noopener">release notes&lt;/a> on GitHub.&lt;/p>
&lt;h2 id="evaluating-r-code-from-javascript">Evaluating R code from JavaScript
&lt;a href="#evaluating-r-code-from-javascript">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The underlying interpreter powering webR is built from the same source code as R itself, with patches applied so that it can run in the WebAssembly environment. With this release, we have rebased our patches on the latest stable version of R&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. By keeping our source in sync, improvements and bug fixes made by the R Core Team also benefit any project making use of webR.&lt;/p>
&lt;p>WebR&amp;rsquo;s core functionality is to evaluate R code from a JavaScript environment. As such, it is imperative that this works well, even with large and complex scripts. The
&lt;a href="https://webr.r-wasm.org/v0.3.1/" target="_blank" rel="noopener">webR app&lt;/a> has been updated to better handle large R scripts, and scripts longer than 4096 characters should no longer cause strange issues in the R console.&lt;/p>
&lt;h3 id="loading-webassembly-packages">Loading WebAssembly packages
&lt;a href="#loading-webassembly-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The package management functions provided by webR have been expanded and improved. We set up webR with shims (interceptors) for
&lt;a href="https://rdrr.io/r/utils/install.packages.html" target="_blank" rel="noopener">&lt;code>install.packages()&lt;/code>&lt;/a>,
&lt;a href="https://rdrr.io/r/base/library.html" target="_blank" rel="noopener">&lt;code>library()&lt;/code>&lt;/a>, and
&lt;a href="https://rdrr.io/r/base/library.html" target="_blank" rel="noopener">&lt;code>require()&lt;/code>&lt;/a> so that installing or loading R packages automatically downloads WebAssembly binaries from the
&lt;a href="https://repo.r-wasm.org" target="_blank" rel="noopener">webR package repository&lt;/a>. Also, it is no longer required to run the
&lt;a href="https://rdrr.io/r/base/library.html" target="_blank" rel="noopener">&lt;code>library()&lt;/code>&lt;/a> command a second time to subsequently load the package.&lt;/p>
&lt;p>In this interactive example, webR is configured to automatically install WebAssembly packages. Click &amp;ldquo;Run code&amp;rdquo; to download the packages listed in the R script.&lt;/p>
&lt;div class="highlight">
&lt;button class="btn btn-default btn-webr" disabled type="button" id="webr-run-button-1">Loading webR...&lt;/button>
&lt;div id="webr-editor-1">&lt;/div>
&lt;div id="webr-code-output-1">&lt;pre style="visibility: hidden">&lt;/pre>&lt;/div>
&lt;script type="module">
const runButton = document.getElementById('webr-run-button-1');
const outputDiv = document.getElementById('webr-code-output-1');
const editorDiv = document.getElementById('webr-editor-1');
const editor = CodeMirror((elt) => {
elt.style.border = '1px solid #eee';
elt.style.height = 'auto';
editorDiv.append(elt);
},{
value: `# Explicitly install wasm packages\ninstall.packages("cli")\n\n# Automatically install wasm packages\nlibrary(vctrs)\nrequire(jsonlite)\n\n# Confirm the packages installed successfully\nrownames(installed.packages())`,
lineNumbers: true,
mode: 'r',
theme: 'light default',
viewportMargin: Infinity,
});
runButton.onclick = async () => {
runButton.disabled = true;
let canvas = undefined;
await webR.init();
await webR.evalRVoid('webr::canvas(width=504, height=311.472)');
await webR.FS.syncfs(false);
const result = await webRCodeShelter.captureR(editor.getValue(), {
withAutoprint: true,
captureStreams: true,
captureConditions: false,
captureGraphics: false,
env: {},
});
try {
await webR.evalRVoid("dev.off()");
const out = result.output.filter(
evt => evt.type == 'stdout' || evt.type == 'stderr'
).map((evt) => evt.data).join('\n');
outputDiv.innerHTML = '';
const pre = document.createElement("pre");
if (/\S/.test(out)) {
const code = document.createElement("code");
code.innerText = out;
pre.appendChild(code);
} else {
pre.style.visibility = 'hidden';
}
outputDiv.appendChild(pre);
const msgs = await webR.flush();
msgs.forEach(msg => {
if (msg.type === 'canvas'){
if (msg.data.event === 'canvasImage') {
canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
} else if (msg.data.event === 'canvasNewPage') {
canvas = document.createElement('canvas');
canvas.setAttribute('width', 2 * 504);
canvas.setAttribute('height', 2 * 311.472);
canvas.style.width="700px";
canvas.style.display="block";
canvas.style.margin="auto";
const p = document.createElement("p");
p.appendChild(canvas);
outputDiv.appendChild(p);
}
}
});
} finally {
webRCodeShelter.purge();
runButton.disabled = false;
}
}
&lt;/script>
&lt;/div>
&lt;p>See the
&lt;a href="https://docs.r-wasm.org/webr/latest/packages.html" target="_blank" rel="noopener">documentation&lt;/a> for more details on how to control this behaviour in your own webR-powered applications, including optionally showing an interactive download menu to the user.&lt;/p>
&lt;h3 id="error-handling-and-reporting">Error handling and reporting
&lt;a href="#error-handling-and-reporting">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Improvements have been made to how webR raises R conditions as JavaScript exceptions. Exceptions now include the offending source R call in the error message text, better matching what is shown in a traditional R console.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sin(&amp;#39;abc&amp;#39;)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="output error">
&lt;pre>&lt;code>Uncaught Error: Error in sin(&amp;quot;abc&amp;quot;): non-numeric argument to mathematical function
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Conditions raised when invoking function objects are now also re-thrown as JavaScript exceptions, rather than a generic &lt;code>UnwindProtectException&lt;/code> error. Compare the error messages shown below from the previous and latest versions of webR to see the useful context added by this change.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// webR 0.2.2
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">do_calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`function (n) { rnorm(n) }`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">do_calc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="output error">
&lt;pre>&lt;code>Uncaught (in promise) UnwindProtectException: A non-local transfer of control occured during evaluation
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// webR 0.3.1
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">do_calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`function (n) { rnorm(n) }`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">do_calc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="output error">
&lt;pre>&lt;code>Uncaught (in promise) Error: Error in rnorm(n): invalid arguments
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Some base R features can be problematic when running R under WebAssembly. For example, in the constrained WebAssembly sandbox the base R function
&lt;a href="https://rdrr.io/r/base/system.html" target="_blank" rel="noopener">&lt;code>system()&lt;/code>&lt;/a> does not work. The latest release of webR now handles these cases more consistently, raising R
&lt;a href="https://rdrr.io/r/base/stop.html" target="_blank" rel="noopener">&lt;code>stop()&lt;/code>&lt;/a> conditions rather than incorrectly returning an empty result.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># webR 0.3.1&lt;/span>
&lt;span class="nf">system&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="output error">
&lt;pre>&lt;code>Error in webr_hook_system(command) :
The &amp;quot;system()&amp;quot; function is unsupported under Emscripten.
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="capturing-html-canvas-graphics-output">Capturing HTML canvas graphics output
&lt;a href="#capturing-html-canvas-graphics-output">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The
&lt;a href="https://docs.r-wasm.org/webr/latest/evaluating.html#evaluating-r-code-and-capturing-output-with-capturer" target="_blank" rel="noopener">&lt;code>captureR()&lt;/code>&lt;/a> function is designed to capture output generated when evaluating R code. In addition to capturing standard text output, details about errors and other R conditions are also captured. With this release, plots drawn using webR&amp;rsquo;s HTML canvas graphics device,
&lt;a href="https://rdrr.io/pkg/webr/man/canvas.html" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a>, are also captured and returned by default.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// Evaluate R code, capturing all output
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">capture&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">globalShelter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">captureR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`
&lt;/span>&lt;span class="sb"> x &amp;lt;- rnorm(10000)
&lt;/span>&lt;span class="sb"> print(x[1])
&lt;/span>&lt;span class="sb"> hist(x)
&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">capture&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="output">
&lt;pre>&lt;code>{
result: Proxy(Object),
output: [
{ type: 'stdout', data: '[1] 0.7612882' },
],
images: [ ImageBitmap ],
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Captured plots are returned as an array of
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap" target="_blank" rel="noopener">&lt;code>ImageBitmap&lt;/code>&lt;/a> JavaScript objects in the &lt;code>images&lt;/code> property. This interface represents a bitmap image in a way that can be efficiently drawn to a HTML
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas" target="_blank" rel="noopener">&lt;code>&amp;lt;canvas&amp;gt;&lt;/code>&lt;/a> element.&lt;/p>
&lt;p>This change makes plotting consistent with other forms of R output and simplifies the process when working with multiple independent R code blocks and output images. See the webR documentation on
&lt;a href="https://docs.r-wasm.org/webr/latest/evaluating.html#evaluating-r-code-and-capturing-output-with-capturer" target="_blank" rel="noopener">evaluating R code&lt;/a> for further details, and this
&lt;a href="https://observablehq.com/d/ec99bb89a4c646ab" target="_blank" rel="noopener">Observable notebook&lt;/a> for an example of capturing R plots from JavaScript.&lt;/p>
&lt;h3 id="graphics-device-bug-fixes">Graphics device bug fixes
&lt;a href="#graphics-device-bug-fixes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>In addition to adding the ability to capture graphics output, the
&lt;a href="https://rdrr.io/pkg/webr/man/canvas.html" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a> graphics device has also had various bug fixes made to better implement R base graphics. The easiest way to demonstrate is probably by example:&lt;/p>
&lt;div class="highlight">
&lt;button class="btn btn-default btn-webr" disabled type="button" id="webr-run-button-2">Loading webR...&lt;/button>
&lt;div id="webr-editor-2">&lt;/div>
&lt;div id="webr-code-output-2">&lt;pre style="visibility: hidden">&lt;/pre>&lt;/div>
&lt;script type="module">
const runButton = document.getElementById('webr-run-button-2');
const outputDiv = document.getElementById('webr-code-output-2');
const editorDiv = document.getElementById('webr-editor-2');
const editor = CodeMirror((elt) => {
elt.style.border = '1px solid #eee';
elt.style.height = 'auto';
editorDiv.append(elt);
},{
value: `# The lty and lwd graphical properties now work correctly\nplot(1:10, type = "l", lty = 2, lwd = 3)\npoints(1:10, cex = 3, lwd = 2)`,
lineNumbers: true,
mode: 'r',
theme: 'light default',
viewportMargin: Infinity,
});
runButton.onclick = async () => {
runButton.disabled = true;
let canvas = undefined;
await webR.init();
await webR.evalRVoid('webr::canvas(width=504, height=311.472)');
await webR.FS.syncfs(false);
const result = await webRCodeShelter.captureR(editor.getValue(), {
withAutoprint: true,
captureStreams: true,
captureConditions: false,
captureGraphics: false,
env: {},
});
try {
await webR.evalRVoid("dev.off()");
const out = result.output.filter(
evt => evt.type == 'stdout' || evt.type == 'stderr'
).map((evt) => evt.data).join('\n');
outputDiv.innerHTML = '';
const pre = document.createElement("pre");
if (/\S/.test(out)) {
const code = document.createElement("code");
code.innerText = out;
pre.appendChild(code);
} else {
pre.style.visibility = 'hidden';
}
outputDiv.appendChild(pre);
const msgs = await webR.flush();
msgs.forEach(msg => {
if (msg.type === 'canvas'){
if (msg.data.event === 'canvasImage') {
canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
} else if (msg.data.event === 'canvasNewPage') {
canvas = document.createElement('canvas');
canvas.setAttribute('width', 2 * 504);
canvas.setAttribute('height', 2 * 311.472);
canvas.style.width="700px";
canvas.style.display="block";
canvas.style.margin="auto";
const p = document.createElement("p");
p.appendChild(canvas);
outputDiv.appendChild(p);
}
}
});
} finally {
webRCodeShelter.purge();
runButton.disabled = false;
}
}
&lt;/script>
&lt;/div>
&lt;div class="highlight">
&lt;button class="btn btn-default btn-webr" disabled type="button" id="webr-run-button-3">Loading webR...&lt;/button>
&lt;div id="webr-editor-3">&lt;/div>
&lt;div id="webr-code-output-3">&lt;pre style="visibility: hidden">&lt;/pre>&lt;/div>
&lt;script type="module">
const runButton = document.getElementById('webr-run-button-3');
const outputDiv = document.getElementById('webr-code-output-3');
const editorDiv = document.getElementById('webr-editor-3');
const editor = CodeMirror((elt) => {
elt.style.border = '1px solid #eee';
elt.style.height = 'auto';
editorDiv.append(elt);
},{
value: `# The cex graphical property is now taken into account\n# when calculating font sizes\nplot(1, main = "This is a large title", cex.main = 3)`,
lineNumbers: true,
mode: 'r',
theme: 'light default',
viewportMargin: Infinity,
});
runButton.onclick = async () => {
runButton.disabled = true;
let canvas = undefined;
await webR.init();
await webR.evalRVoid('webr::canvas(width=504, height=311.472)');
await webR.FS.syncfs(false);
const result = await webRCodeShelter.captureR(editor.getValue(), {
withAutoprint: true,
captureStreams: true,
captureConditions: false,
captureGraphics: false,
env: {},
});
try {
await webR.evalRVoid("dev.off()");
const out = result.output.filter(
evt => evt.type == 'stdout' || evt.type == 'stderr'
).map((evt) => evt.data).join('\n');
outputDiv.innerHTML = '';
const pre = document.createElement("pre");
if (/\S/.test(out)) {
const code = document.createElement("code");
code.innerText = out;
pre.appendChild(code);
} else {
pre.style.visibility = 'hidden';
}
outputDiv.appendChild(pre);
const msgs = await webR.flush();
msgs.forEach(msg => {
if (msg.type === 'canvas'){
if (msg.data.event === 'canvasImage') {
canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
} else if (msg.data.event === 'canvasNewPage') {
canvas = document.createElement('canvas');
canvas.setAttribute('width', 2 * 504);
canvas.setAttribute('height', 2 * 311.472);
canvas.style.width="700px";
canvas.style.display="block";
canvas.style.margin="auto";
const p = document.createElement("p");
p.appendChild(canvas);
outputDiv.appendChild(p);
}
}
});
} finally {
webRCodeShelter.purge();
runButton.disabled = false;
}
}
&lt;/script>
&lt;/div>
&lt;div class="highlight">
&lt;button class="btn btn-default btn-webr" disabled type="button" id="webr-run-button-4">Loading webR...&lt;/button>
&lt;div id="webr-editor-4">&lt;/div>
&lt;div id="webr-code-output-4">&lt;pre style="visibility: hidden">&lt;/pre>&lt;/div>
&lt;script type="module">
const runButton = document.getElementById('webr-run-button-4');
const outputDiv = document.getElementById('webr-code-output-4');
const editorDiv = document.getElementById('webr-editor-4');
const editor = CodeMirror((elt) => {
elt.style.border = '1px solid #eee';
elt.style.height = 'auto';
editorDiv.append(elt);
},{
value: `# Rasters with negative width or height are now correctly\n# drawn mirrored and flipped.\ninstall.packages("jpeg")\nlogo = jpeg::readJPEG(system.file(package = "jpeg", "img", "Rlogo.jpg"))\nplot(NULL, xlab = "", ylab = "", xlim = c(0, 1), ylim = c(0, 1))\n\nrasterImage(logo, xleft = 0.2, xright = 0.5, ybottom = 0.5, ytop = 1)\nrasterImage(logo, xleft = 0.8, xright = 0.5, ybottom = 0.5, ytop = 1)\nrasterImage(logo, xleft = 0.2, xright = 0.5, ybottom = 0.5, ytop = 0)\nrasterImage(logo, xleft = 0.8, xright = 0.5, ybottom = 0.5, ytop = 0)`,
lineNumbers: true,
mode: 'r',
theme: 'light default',
viewportMargin: Infinity,
});
runButton.onclick = async () => {
runButton.disabled = true;
let canvas = undefined;
await webR.init();
await webR.evalRVoid('webr::canvas(width=504, height=311.472)');
await webR.FS.syncfs(false);
const result = await webRCodeShelter.captureR(editor.getValue(), {
withAutoprint: true,
captureStreams: true,
captureConditions: false,
captureGraphics: false,
env: {},
});
try {
await webR.evalRVoid("dev.off()");
const out = result.output.filter(
evt => evt.type == 'stdout' || evt.type == 'stderr'
).map((evt) => evt.data).join('\n');
outputDiv.innerHTML = '';
const pre = document.createElement("pre");
if (/\S/.test(out)) {
const code = document.createElement("code");
code.innerText = out;
pre.appendChild(code);
} else {
pre.style.visibility = 'hidden';
}
outputDiv.appendChild(pre);
const msgs = await webR.flush();
msgs.forEach(msg => {
if (msg.type === 'canvas'){
if (msg.data.event === 'canvasImage') {
canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
} else if (msg.data.event === 'canvasNewPage') {
canvas = document.createElement('canvas');
canvas.setAttribute('width', 2 * 504);
canvas.setAttribute('height', 2 * 311.472);
canvas.style.width="700px";
canvas.style.display="block";
canvas.style.margin="auto";
const p = document.createElement("p");
p.appendChild(canvas);
outputDiv.appendChild(p);
}
}
});
} finally {
webRCodeShelter.purge();
runButton.disabled = false;
}
}
&lt;/script>
&lt;/div>
&lt;h2 id="the-r-object-interface">The R object interface
&lt;a href="#the-r-object-interface">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The R object interface provided by webR has been expanded to support the conversion of more types of JavaScript objects into R objects. Such conversions are automatically applied when interacting with the R environment from JavaScript.&lt;/p>
&lt;h3 id="raw-vectors">Raw vectors
&lt;a href="#raw-vectors">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>JavaScript objects of type &lt;code>TypedArray&lt;/code>, &lt;code>ArrayBuffer&lt;/code>, and &lt;code>ArrayBufferView&lt;/code> (e.g. 
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noopener">&lt;code>Uint8Array&lt;/code>&lt;/a>) may now be used to construct R objects. By default, objects of this type are converted to R raw atomic vectors. This simplifies the transfer of binary data to R.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Uint8Array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="c1">// Print data&amp;#39;s R object class and an example byte
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`
&lt;/span>&lt;span class="sb"> class(data)
&lt;/span>&lt;span class="sb"> data[2]
&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">withAutoprint&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">env&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="output">
&lt;pre>&lt;code>[1] &amp;quot;raw&amp;quot;
[1] 0c
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="r-dataframe">R &lt;code>data.frame&lt;/code>
&lt;a href="#r-dataframe">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>JavaScript objects of shape &lt;code>{ x: [...], y: [...] }&lt;/code>, with data in a &amp;ldquo;long&amp;rdquo; column-based form, can now be used to construct R objects. In previous versions of webR, this object shape was reserved for future use. However, with this release webR now constructs an R &lt;code>data.frame&lt;/code> by taking the source object&amp;rsquo;s properties as column vectors. The resulting &lt;code>data.frame&lt;/code> can then be manipulated from R in the usual way:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">column_x&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;baz&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">column_y&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`
&lt;/span>&lt;span class="sb"> class(data)
&lt;/span>&lt;span class="sb"> colnames(data)
&lt;/span>&lt;span class="sb"> data[2:3,]
&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">withAutoprint&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">env&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="output">
&lt;pre>&lt;code>[1] &amp;quot;data.frame&amp;quot;
[1] &amp;quot;column_x&amp;quot; &amp;quot;column_y&amp;quot;
column_x column_y
2 bar 3
3 baz 7
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Similarly, an R &lt;code>data.frame&lt;/code> can be converted back into a JavaScript object of this form:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">cars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`mtcars`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">cars&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toObject&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="output">
&lt;pre>&lt;code>{
am: [1, 1, 1, ..., 1],
carb: [4, 4, 1, ..., 2],
cyl: [6, 6, 4, ..., 4]
...,
wt: [2.62, 2.875, 2.32, ..., 2.78],
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="d3-wide-format">D3 &amp;ldquo;wide&amp;rdquo; format
&lt;a href="#d3-wide-format">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>In JavaScript, particularly when using frameworks built upon
&lt;a href="https://d3js.org" target="_blank" rel="noopener">D3&lt;/a>, it is typical to work with data in a &amp;ldquo;wide&amp;rdquo; form: an array of objects per row, each including all the column names and values. With this release, webR can also convert JavaScript objects in this form into an R &lt;code>data.frame&lt;/code>.&lt;/p>
&lt;p>The following example loads the same data as shown in the previous example but expressed in the &amp;ldquo;wide&amp;rdquo; form.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nx">column_x&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">column_y&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nx">column_x&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">column_y&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nx">column_x&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;baz&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">column_y&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">];&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`
&lt;/span>&lt;span class="sb"> class(data)
&lt;/span>&lt;span class="sb"> colnames(data)
&lt;/span>&lt;span class="sb"> data[2:3,]
&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">withAutoprint&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">env&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="output">
&lt;pre>&lt;code>[1] &amp;quot;data.frame&amp;quot;
[1] &amp;quot;column_x&amp;quot; &amp;quot;column_y&amp;quot;
column_x column_y
2 bar 3
3 baz 7
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>An R &lt;code>data.frame&lt;/code> can also be converted into a D3 compatible JavaScript object:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">cars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`mtcars`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">cars&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toD3&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="output">
&lt;pre>&lt;code>[
{ mpg: 21, cyl: 6, disp: 160, ... },
{ mpg: 21, cyl: 6, disp: 160, ... },
{ mpg: 22.8, cyl: 4, disp: 108, ...},
...
{ mpg: 21.4, cyl: 4, disp: 121, ...},
]
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="webassembly-toolchain-upgrades">WebAssembly toolchain upgrades
&lt;a href="#webassembly-toolchain-upgrades">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We have updated our WebAssembly build system, upgrading the
&lt;a href="https://emscripten.org" target="_blank" rel="noopener">Emscripten&lt;/a> C/C++ compiler to version 3.1.47 and the
&lt;a href="https://flang.llvm.org/docs/" target="_blank" rel="noopener">LLVM Flang&lt;/a> Fortran compiler to be based on LLVM 18.1.1. As part of the work, webR now supports building under Nix using
&lt;a href="https://nixos.wiki/wiki/Flakes" target="_blank" rel="noopener">flakes&lt;/a>, suggested and largely implemented by
&lt;a href="https://github.com/wch" target="_blank" rel="noopener">@wch&lt;/a>.&lt;/p>
&lt;p>With this, source-code level reproducible builds of the webR WebAssembly binaries can be made, strengthening the argument for webR as a potential future platform for reproducible data science.&lt;/p>
&lt;h3 id="llvm-flang">LLVM Flang
&lt;a href="#llvm-flang">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>To compile Fortran sources in the R source code&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> for webR, we require a Fortran compiler that supports outputting WebAssembly objects. This is a surprisingly tricky business, and our current solution is to maintain a patched version of LLVM&amp;rsquo;s &lt;code>flang-new&lt;/code> compiler frontend.&lt;/p>
&lt;p>In recent months, the patches we must make to LLVM Flang have become smaller and easier to manage as the LLVM team continues to improve the Flang frontend. While too long for this post, for those interested in exactly what changes we make to enable WebAssembly output, I have written a deep-dive blog post,
&lt;a href="https://gws.phd/posts/fortran_wasm/" target="_blank" rel="noopener">Fortran on WebAssembly&lt;/a>.&lt;/p>
&lt;h2 id="additional-system-libraries-and-rust-support">Additional system libraries and Rust support
&lt;a href="#additional-system-libraries-and-rust-support">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Thanks to some great work by
&lt;a href="https://github.com/jeroen" target="_blank" rel="noopener">@jeroen&lt;/a> and
&lt;a href="https://github.com/yutannihilation" target="_blank" rel="noopener">@yutannihilation&lt;/a>, this release of webR includes some additional WebAssembly system libraries and software in the webR Docker container. This includes numerical libraries such as
&lt;a href="https://www.gnu.org/software/gsl/" target="_blank" rel="noopener">GSL&lt;/a> and
&lt;a href="https://gmplib.org" target="_blank" rel="noopener">GMP&lt;/a>, image manipulation tools such as
&lt;a href="https://imagemagick.org/" target="_blank" rel="noopener">ImageMagick&lt;/a>, and a Rust compiler configured to build WebAssembly R packages containing Rust source code.&lt;/p>
&lt;p>A demonstration R package containing Rust code, compatible with webR, can be found at &lt;a href="https://github.com/yutannihilation/savvy-webr-test/">https://github.com/yutannihilation/savvy-webr-test/&lt;/a>.&lt;/p>
&lt;p>An example Shiny app making use of the WebAssembly compiled ImageMagick library is shown below, with the source code at &lt;a href="https://github.com/jeroen/shinymagick">https://github.com/jeroen/shinymagick&lt;/a>.&lt;/p>
&lt;iframe style="border: 1px solid black;" width="100%" height="550px" src="https://georgestagg.github.io/shinymagick/">
&lt;/iframe>
&lt;h2 id="webassembly-r-package-binaries">WebAssembly R package binaries
&lt;a href="#webassembly-r-package-binaries">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>With the introduction of additional system libraries and changes to the WebAssembly toolchain, the default webR package repository has also been refreshed. The repository tends to follow CRAN package releases, though is updated less frequently. &lt;strong>19452&lt;/strong> WebAssembly R packages have been recompiled from source for this release, with &lt;strong>12969&lt;/strong> packages, about 63% of CRAN, fully available&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> for use in webR.&lt;/p>
&lt;p>As my usual caveat goes, we have not been able to test all the available packages. Feel free to try your favourite package in the
&lt;a href="https://webr.r-wasm.org/v0.3.1/" target="_blank" rel="noopener">webR app&lt;/a> and let us know in a
&lt;a href="https://github.com/r-wasm/webr/issues" target="_blank" rel="noopener">GitHub issue&lt;/a> if there is a problem.&lt;/p>
&lt;p>The
&lt;a href="https://repo.r-wasm.org" target="_blank" rel="noopener">package repository index&lt;/a> contains further information and a searchable list of WebAssembly R packages. In addition,
&lt;a href="https://r-universe.dev" target="_blank" rel="noopener">R-Universe&lt;/a> also builds webR-compatible binaries and so can be used as an alternative repository for access to even more R packages.&lt;/p>
&lt;h3 id="building-custom-webassembly-r-packages">Building custom WebAssembly R packages
&lt;a href="#building-custom-webassembly-r-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>If you&amp;rsquo;d like to build your own R packages for webR, the
&lt;a href="https://r-wasm.github.io/rwasm/" target="_blank" rel="noopener">rwasm&lt;/a> package provides functions to help compile R packages for WebAssembly, manage repositories, and prepare webR-compatible filesystem images.&lt;/p>
&lt;p>We&amp;rsquo;ve also started building
&lt;a href="https://github.com/r-wasm/actions/" target="_blank" rel="noopener">reusable workflows for GitHub Actions&lt;/a>. If you have an R package with source code hosted on GitHub, an action can be added to your repository such that a WebAssembly version of your package will be built automatically by a GitHub runner on package release.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Thank you, as always, to the users and developers contributing to webR in the form of discussion in issues, bug reports, and pull requests.&lt;/p>
&lt;p>
&lt;a href="https://github.com/adrianolszewski" target="_blank" rel="noopener">@adrianolszewski&lt;/a>,
&lt;a href="https://github.com/christianp" target="_blank" rel="noopener">@christianp&lt;/a>,
&lt;a href="https://github.com/coatless" target="_blank" rel="noopener">@coatless&lt;/a>,
&lt;a href="https://github.com/ColinFay" target="_blank" rel="noopener">@ColinFay&lt;/a>,
&lt;a href="https://github.com/drgomulka" target="_blank" rel="noopener">@drgomulka&lt;/a>,
&lt;a href="https://github.com/erex" target="_blank" rel="noopener">@erex&lt;/a>,
&lt;a href="https://github.com/gitdemont" target="_blank" rel="noopener">@gitdemont&lt;/a>,
&lt;a href="https://github.com/gorkang" target="_blank" rel="noopener">@gorkang&lt;/a>,
&lt;a href="https://github.com/isbool" target="_blank" rel="noopener">@isbool&lt;/a>,
&lt;a href="https://github.com/JeremyPasco" target="_blank" rel="noopener">@JeremyPasco&lt;/a>,
&lt;a href="https://github.com/jeroen" target="_blank" rel="noopener">@jeroen&lt;/a>,
&lt;a href="https://github.com/JosiahParry" target="_blank" rel="noopener">@JosiahParry&lt;/a>,
&lt;a href="https://github.com/Luke-Symes-Tsy" target="_blank" rel="noopener">@Luke-Symes-Tsy&lt;/a>,
&lt;a href="https://github.com/maek-ies" target="_blank" rel="noopener">@maek-ies&lt;/a>,
&lt;a href="https://github.com/MaybeJustJames" target="_blank" rel="noopener">@MaybeJustJames&lt;/a>,
&lt;a href="https://github.com/ravinder387" target="_blank" rel="noopener">@ravinder387&lt;/a>,
&lt;a href="https://github.com/StaffanBetner" target="_blank" rel="noopener">@StaffanBetner&lt;/a>,
&lt;a href="https://github.com/SugarRayLua" target="_blank" rel="noopener">@SugarRayLua&lt;/a>,
&lt;a href="https://github.com/takahser" target="_blank" rel="noopener">@takahser&lt;/a>,
&lt;a href="https://github.com/tim-newans" target="_blank" rel="noopener">@tim-newans&lt;/a>,
&lt;a href="https://github.com/timelyportfolio" target="_blank" rel="noopener">@timelyportfolio&lt;/a>,
&lt;a href="https://github.com/tstubbs-evolution" target="_blank" rel="noopener">@tstubbs-evolution&lt;/a>,
&lt;a href="https://github.com/yhm-amber" target="_blank" rel="noopener">@yhm-amber&lt;/a>,
&lt;a href="https://github.com/yii-iiy" target="_blank" rel="noopener">@yii-iiy&lt;/a>,
&lt;a href="https://github.com/yutannihilation" target="_blank" rel="noopener">@yutannihilation&lt;/a>, and
&lt;a href="https://github.com/zhangwenda0518" target="_blank" rel="noopener">@zhangwenda0518&lt;/a>.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>The latest stable release at the time of writing:
&lt;a href="https://cran.rstudio.com/doc/manuals/r-release/NEWS.html" target="_blank" rel="noopener">R 4.3.3 &amp;mdash; &amp;ldquo;Angel Food Cake&amp;rdquo;&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>There are also many R packages containing Fortran source code. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Here &amp;ldquo;available&amp;rdquo; means that both a binary build of an R package and all of its dependencies can be downloaded from the repository. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>webR 0.2.0 has been released</title><link>https://www.tidyverse.org/blog/2023/08/webr-0-2-0/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2023/08/webr-0-2-0/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
* [x] Release webR 0.2.0
* [] Update all links from /0.2.0-rc.1 to /0.2.0
* [x] Update webr-repo packages
* [x] Update webr-repo dashboard
-->
&lt;!-- Initialise webR in the page -->
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css">
&lt;style>
.CodeMirror pre {
background-color: unset !important;
}
.btn-webr {
background-color: #EEEEEE;
border-bottom-left-radius: 0;
border-bottom-right-radius: 0;
}
&lt;/style>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js">&lt;/script>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/r/r.js">&lt;/script>
&lt;script type="module">
import { WebR } from 'https://webr.r-wasm.org/v0.4.2/webr.mjs';
globalThis.webR = new WebR();
await globalThis.webR.init();
await webR.FS.mkdir('/persist');
await webR.FS.mount('IDBFS', {}, '/persist');
await webR.FS.syncfs(true);
await webR.evalRVoid("webr::shim_install()");
await webR.evalRVoid("webr::global_prompt_install()", { withHandlers: false });
globalThis.webRCodeShelter = await new globalThis.webR.Shelter();
document.querySelectorAll(".btn-webr").forEach((btn) => {
btn.innerText = 'Run code';
btn.disabled = false;
});
&lt;/script>
&lt;!-- Add webr engine for knit -->
&lt;div class="highlight">
&lt;/div>
&lt;p>We&amp;rsquo;re absolutely thrilled to announce the release of
&lt;a href="https://docs.r-wasm.org/webr/v0.2.0/" target="_blank" rel="noopener">webR&lt;/a> 0.2.0! This release gathers together many updates and improvements to webR over the last few months, including improvements to the HTML canvas graphics device, support for Cairo-based bitmap graphics, accessibility and internationalisation improvements, additional Wasm R package support (including Shiny), a new webR REPL app, and various updates to the webR developer API.&lt;/p>
&lt;p>This blog post will take a deep dive through the major breaking changes and new features available in webR 0.2.0. I also plan to record and release a series of companion videos discussing the new release, so keep an eye out if you&amp;rsquo;re someone who prefers watching and listening over reading long-form articles. I&amp;rsquo;ll update this post with all the links once they&amp;rsquo;re available.&lt;/p>
&lt;h2 id="webassembly-and-webr">WebAssembly and webR
&lt;a href="#webassembly-and-webr">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>My previous
&lt;a href="https://www.tidyverse.org/blog/2023/03/webr-0-1-0/" target="_blank" rel="noopener">webR release blog post&lt;/a> goes into detail about what WebAssembly is, why people are excited about it, and how it relates to the R community and ecosystem in general through webR. I would recommend it as a good place to start, if the project is new to you&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>A short explanation is that WebAssembly (also known as Wasm) allows software that&amp;rsquo;s normally compiled for a specific computer system to instead run anywhere, including in web browsers. Wasm is the technology that powers
&lt;a href="https://pyodide.org" target="_blank" rel="noopener">Pyodide&lt;/a> (used by
&lt;a href="https://shiny.rstudio.com/py/docs/shinylive.html" target="_blank" rel="noopener">Shinylive for Python&lt;/a>) and webR brings this technology to the R world. Using webR it is possible to run R code directly in a web browser&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, without the need for the traditional supporting R server to execute the code.&lt;/p>
&lt;p>Running R code directly in a browser opens the door for many new and exciting uses for R on the web. Applications that I&amp;rsquo;m personally excited in seeing developed are,&lt;/p>
&lt;ul>
&lt;li>Live and interactive R code and graphics in documents &amp;amp; presentations,&lt;/li>
&lt;li>Tactile educational content for R, with examples that can be remixed on-the-fly by learners,&lt;/li>
&lt;li>Reproducible statistics through containerisation and notebook-style literate programming.&lt;/li>
&lt;/ul>
&lt;p>Even in these early days, some of this is already being provided by development of downstream projects such as James Balamuta&amp;rsquo;s
&lt;a href="https://github.com/coatless/quarto-webr" target="_blank" rel="noopener">quarto-webr&lt;/a> extension, allowing Quarto users to easily embed interactive R code blocks in their documents.&lt;/p>
&lt;h3 id="interactive-code-blocks">Interactive code blocks
&lt;a href="#interactive-code-blocks">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>One of my favourite demonstrations of what webR can do is interactive code blocks for R code. After a short loading period while the webR binary is downloaded, a &lt;strong>Run code&lt;/strong> button will be enabled below. Using examples like this, R code can be immediately edited and executed &amp;ndash; feel free to experiment! Click the &amp;ldquo;Run code&amp;rdquo; button to see the resulting box plot, change the colour from &lt;code>mediumseagreen&lt;/code> to &lt;code>red&lt;/code> and run the code again.&lt;/p>
&lt;div class="highlight">
&lt;button class="btn btn-default btn-webr" disabled type="button" id="webr-run-button-1">Loading webR...&lt;/button>
&lt;div id="webr-editor-1">&lt;/div>
&lt;div id="webr-code-output-1">&lt;pre style="visibility: hidden">&lt;/pre>&lt;/div>
&lt;script type="module">
const runButton = document.getElementById('webr-run-button-1');
const outputDiv = document.getElementById('webr-code-output-1');
const editorDiv = document.getElementById('webr-editor-1');
const editor = CodeMirror((elt) => {
elt.style.border = '1px solid #eee';
elt.style.height = 'auto';
editorDiv.append(elt);
},{
value: `colnames(mtcars)\n\nboxplot(\n mpg ~ cyl, data = mtcars,\n col = "mediumseagreen",\n xlab = "Number of Cylinders",\n ylab = "Miles/(US) gallon",\n main = "Motor Trend Car Road Tests",\n sub = "Source: 1974 Motor Trend US magazine"\n)`,
lineNumbers: true,
mode: 'r',
theme: 'light default',
viewportMargin: Infinity,
});
runButton.onclick = async () => {
runButton.disabled = true;
let canvas = undefined;
await webR.init();
await webR.evalRVoid('webr::canvas(width=504, height=311.472)');
await webR.FS.syncfs(false);
const result = await webRCodeShelter.captureR(editor.getValue(), {
withAutoprint: true,
captureStreams: true,
captureConditions: false,
captureGraphics: false,
env: {},
});
try {
await webR.evalRVoid("dev.off()");
const out = result.output.filter(
evt => evt.type == 'stdout' || evt.type == 'stderr'
).map((evt) => evt.data).join('\n');
outputDiv.innerHTML = '';
const pre = document.createElement("pre");
if (/\S/.test(out)) {
const code = document.createElement("code");
code.innerText = out;
pre.appendChild(code);
} else {
pre.style.visibility = 'hidden';
}
outputDiv.appendChild(pre);
const msgs = await webR.flush();
msgs.forEach(msg => {
if (msg.type === 'canvas'){
if (msg.data.event === 'canvasImage') {
canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
} else if (msg.data.event === 'canvasNewPage') {
canvas = document.createElement('canvas');
canvas.setAttribute('width', 2 * 504);
canvas.setAttribute('height', 2 * 311.472);
canvas.style.width="700px";
canvas.style.display="block";
canvas.style.margin="auto";
const p = document.createElement("p");
p.appendChild(canvas);
outputDiv.appendChild(p);
}
}
});
} finally {
webRCodeShelter.purge();
runButton.disabled = false;
}
}
&lt;/script>
&lt;/div>
&lt;p>It&amp;rsquo;s easy to see the potential teaching benefit examples like this could bring to educational content or R package documentation.&lt;/p>
&lt;h2 id="the-webr-repl-app">The webR REPL app
&lt;a href="#the-webr-repl-app">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>WebR can be loaded into a web page to be used as a part of a wider web application, and ships with a demo application that does just that. The webR REPL app&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> provides a simple R environment directly in your web browser. The app can be accessed at &lt;a href="https://webr.r-wasm.org/v0.2.0/">https://webr.r-wasm.org/v0.2.0/&lt;/a> and includes sections for R console input/output, code editing, file management, and graphics device output.&lt;/p>
&lt;p>With the webR REPL app, a casual user could get up and running with R in seconds, without having to install any software on their machine. It is entirely feasible that they could perform the basics of data science entirely within their web browser!&lt;/p>
&lt;p>Other than interactive code blocks, like in the example earlier, the webR REPL app is perhaps the first thing that users new to webR will interact with. For this reason, we have spent some time working to improve the technical implementation and user experience of using the app. The app has been completely rewritten in the React web framework, replacing the older jQuery library. This allows for better component code organisation and more rapid development of features and updates.&lt;/p>
&lt;p>&lt;a href="repl.png">&lt;img alt="A screenshot the webR REPL app. The code to generate a ggplot, along with its output, is shown in the app." width="95%" src="repl.png">&lt;/a>&lt;/p>
&lt;h3 id="code-editor">Code editor
&lt;a href="#code-editor">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The app now comes with a tabbed code editor, allowing for easier editing and execution of R code. The editor integrates with the webR virtual filesystem (VFS), meaning that multiple R scripts can be opened, edited, and saved and they will be available to the running Wasm R process.&lt;/p>
&lt;p>The editor pane is built upon the excellent
&lt;a href="https://codemirror.net" target="_blank" rel="noopener">CodeMirror&lt;/a> text editor, which provides most of the component&amp;rsquo;s functionality. CodeMirror provides built-in support for syntax highlighting of R code, which is enabled by default when R source files are displayed.&lt;/p>
&lt;p>The editor is integrated with the currently running R process and automatic code suggestions are shown as you type, provided by R&amp;rsquo;s
&lt;a href="https://stat.ethz.ch/R-manual/R-devel/library/utils/html/rcompgen.html" target="_blank" rel="noopener">built in completion generator&lt;/a>. The suggestions are context sensitive and are aware of package and function names, valid arguments, and even objects that exist in the global environment.&lt;/p>
&lt;p>&lt;a href="completion.png">&lt;img alt="A screenshot of the editor component showing code completion results. One of the suggestions is a data set available in the global environment." width="70%" src="completion.png">&lt;/a>&lt;/p>
&lt;p>The running Wasm R process is also configured at initialisation to use the editor component as its display
&lt;a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/file.show.html" target="_blank" rel="noopener">pager mechanism&lt;/a>. With this configuration in place running commands such as
&lt;a href="https://rdrr.io/r/stats/Normal.html" target="_blank" rel="noopener">&lt;code>?rnorm&lt;/code>&lt;/a> in the app automatically opens a new read-only tab in the editor displaying R&amp;rsquo;s built-in documentation.&lt;/p>
&lt;p>&lt;a href="documentation.png">&lt;img alt="A screenshot of the editor component showing built-in R documentation" width="80%" src="documentation.png">&lt;/a>&lt;/p>
&lt;h3 id="plotting-pane">Plotting pane
&lt;a href="#plotting-pane">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The plotting pane has been updated to take advantage of improvements in webR&amp;rsquo;s HTML canvas graphics device, set as the default device as part of initialisation. In particular, multiple plots are now supported and older plots can be directly accessed using the previous and next buttons in the plotting toolbar. You can try this out with R&amp;rsquo;s built in graphics demo, by running &lt;code>demo(graphics)&lt;/code> and/or &lt;code>demo(persp)&lt;/code>.&lt;/p>
&lt;p>&lt;a href="plotting.png">&lt;img alt="A screenshot of the plot pane showing a built-in R graphics demo" width="75%" src="plotting.png">&lt;/a>&lt;/p>
&lt;h3 id="files-pane">Files pane
&lt;a href="#files-pane">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The files pane has been completely redesigned, removing its dependency on jQuery and instead making use of the
&lt;a href="https://www.npmjs.com/package/react-accessible-treeview" target="_blank" rel="noopener">react-accessible-treeview&lt;/a> package. As well as a technical improvement, this change means that interacting with the webR filesystem should be more usable to those with web accessibility requirements. We feel it&amp;rsquo;s important that, where possible, everybody is able to use our software.&lt;/p>
&lt;p>&lt;a href="files.png">&lt;img alt="A screenshot of the files pane showing the path /home/web_user/plot_random_numbers.R" width="90%" src="files.png">&lt;/a>&lt;/p>
&lt;p>Additional buttons have also been added to this pane, allowing users to easily manipulate the virtual file system visible to the running Wasm R process. New files and directories can be created or deleted, and text-based files can be directly opened and modified in the editor pane, removing the need to download, edit and then re-upload files.&lt;/p>
&lt;h3 id="console-pane">Console pane
&lt;a href="#console-pane">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The R console component shown in the lower left portion of the app is powered by the wonderful
&lt;a href="https://xtermjs.org" target="_blank" rel="noopener">xterm.js&lt;/a> software, which provides a high performance terminal emulator on the web. R output looks at its best when running in this kind of environment, so that
&lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code" target="_blank" rel="noopener">ANSI escape codes&lt;/a> can be used to provide a much smoother console experience incorporating cursor placement, box drawing characters, bold text, terminal colours, and more.&lt;/p>
&lt;p>&lt;a href="term.png">&lt;img alt="An example of ANSI escape sequences in R console output while loading the tidyverse package." width="90%" src="term.png">&lt;/a>&lt;/p>
&lt;p>An optional accessibility mode is provided by xterm.js so that terminal output is readable by screen reader software, such as
&lt;a href="https://support.apple.com/en-gb/guide/voiceover/welcome/mac" target="_blank" rel="noopener">macOS&amp;rsquo;s VoiceOver&lt;/a>. The webR REPL app now enables this mode by default to improve the accessibility of terminal output.&lt;/p>
&lt;h2 id="html-canvas-graphics-device">HTML Canvas graphics device
&lt;a href="#html-canvas-graphics-device">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The webR support package provides a custom
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a> graphics device that renders output using the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API" target="_blank" rel="noopener">Web Canvas API&lt;/a>. When the graphics device is used, drawing commands from R are translated into Canvas API calls. The browser renders the graphics and the resulting image data is drawn to a HTML &lt;code>&amp;lt;canvas&amp;gt;&lt;/code> element on the page.&lt;/p>
&lt;p>With the release of webR 0.2.0, we have improved the performance and added new features to the HTML canvas graphics device.&lt;/p>
&lt;h3 id="performance-improvements-with-offscreencanvas">Performance improvements with &lt;code>OffscreenCanvas&lt;/code>
&lt;a href="#performance-improvements-with-offscreencanvas">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Using the Canvas API to draw graphics in a browser is elegant, but presents a problem. R is running via WebAssembly in a JavaScript
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener">Web Worker&lt;/a> thread, but the &lt;code>&amp;lt;canvas&amp;gt;&lt;/code> element the plot image data is written to is on the main thread, part of the web page
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener">DOM&lt;/a>. And, unfortunately, JavaScript Web Worker threads have no direct access to the DOM.&lt;/p>
&lt;p>Previous releases of webR solve this problem in a rather naive way, it simply sends the Canvas API calls to the main thread to be executed there. This leads to a few issues,&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Canvas API calls are serialised as text to be sent to the main thread. Sufficiently complex plot text must therefore be quoted and escaped.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Each API call is sent in a separate message. For a complex plot this can be thousands of messages to dispatch and handle.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The messaging is one-way, results of useful methods like
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText" target="_blank" rel="noopener">&lt;code>measureText()&lt;/code>&lt;/a> cannot easily be retrieved.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Parsing and executing the API call on the main thread means using JavaScript&amp;rsquo;s
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval" target="_blank" rel="noopener">&lt;code>eval()&lt;/code>&lt;/a> or
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener">&lt;code>Function()&lt;/code>&lt;/a>, leading to poor performance. These functions should also be avoided when possible in any case, for security reasons.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Solid engineering efforts could be made to improve the situation, e.g. through batching API calls and better encoding, but there is a better way: the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas" target="_blank" rel="noopener">&lt;code>OffscreenCanvas&lt;/code>&lt;/a> interface. &lt;code>OffscreenCanvas&lt;/code> is designed to solve this exact problem of rendering graphics off-screen, such as in a worker thread. With &lt;code>OffscreenCanvas&lt;/code> the Canvas API calls can all be executed on the worker thread, and only a single message containing the completed image data transferred to the main thread when rendering is complete. It is an efficient and technically satisfying solution, except that when webR 0.1.1 was released &lt;code>OffscreenCanvas&lt;/code> wasn&amp;rsquo;t supported by the Safari web browser.&lt;/p>
&lt;p>Today, on the other hand, &lt;code>OffscreenCanvas&lt;/code> is
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas#browser_compatibility" target="_blank" rel="noopener">supported&lt;/a> in all major desktop and mobile browsers. Safari has supported it since version 16.4, and so with webR 0.2.0 we have rewritten the
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a> graphics device to take full advantage of the &lt;code>OffscreenCanvas&lt;/code> interface. This has led to a significant performance improvement, particularly when creating plots containing many points. The two videos below show the same plot rendered in webR 0.1.1 and 0.2.0, the difference is not just visible, but an order of magnitude faster.&lt;/p>
&lt;video controls loop width="100%" src="plot.mp4" style="border: 2px solid #CCC;">
&lt;source src="plot.mp4">
&lt;/video>
&lt;div style="text-align: center; font-weight: bold;">
&lt;p>A performance comparison plotting 300000 points in webR 0.1.1 and 0.2.0.&lt;/p>
&lt;/div>
&lt;p>A potential downside is that users of less up-to-date browsers without &lt;code>OffscreenCanvas&lt;/code> support won&amp;rsquo;t be able to use the
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a> graphics device. Such users should instead make use of our additional updates to webR to support the traditional Cairo-based bitmap devices. The
&lt;a href="#built-in-bitmap-graphics-devices">built-in graphics devices section&lt;/a> discusses that in more detail.&lt;/p>
&lt;h3 id="modern-text-rendering-and-internationalisation">Modern text rendering and internationalisation
&lt;a href="#modern-text-rendering-and-internationalisation">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>With webR 0.1.1, the canvas graphics device had only minimal support for rendering text. The typeface was fixed, the font metrics were estimated with a heuristic, and Unicode characters outside the Basic Latin block often failed to render. It worked most of the time, but it was far from ideal. This area of software engineering is
&lt;a href="https://faultlore.com/blah/text-hates-you/" target="_blank" rel="noopener">suprisingly difficult&lt;/a> to get right, and even native installations of R can have
&lt;a href="https://www.tidyverse.org/blog/2021/02/modern-text-features/" target="_blank" rel="noopener">serious text rendering issues&lt;/a>.&lt;/p>
&lt;p>In comparison, web browser support for text rendering is excellent. Now that we use the &lt;code>OffscreenCanvas&lt;/code> interface, we too can take advantage of the years of work behind browser&amp;rsquo;s support for text on the web. The example below demonstrates several of the modern text rendering features now supported by
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="highlight">
&lt;button class="btn btn-default btn-webr" disabled type="button" id="webr-run-button-2">Loading webR...&lt;/button>
&lt;div id="webr-editor-2">&lt;/div>
&lt;div id="webr-code-output-2">&lt;pre style="visibility: hidden">&lt;/pre>&lt;/div>
&lt;script type="module">
const runButton = document.getElementById('webr-run-button-2');
const outputDiv = document.getElementById('webr-code-output-2');
const editorDiv = document.getElementById('webr-editor-2');
const editor = CodeMirror((elt) => {
elt.style.border = '1px solid #eee';
elt.style.height = 'auto';
editorDiv.append(elt);
},{
value: `plot(\n rnorm(1000), rnorm(1000),\n col = rgb(0, 0, 0, 0.5),\n xlim = c(-5, 5), ylim = c(-5, 5),\n main = "This is the title 🚀",\n xlab = "This is the x label",\n ylab = "This is the y label",\n family = "Futura"\n)\ntext(-3.5, 4, "This is English", family = "monospace")\ntext(-3.5, -4, "هذا مكتوب باللغة العربية")\ntext(3.5, 4, "これは日本語です")\ntext(3.5, -4, "זה כתוב בעברית")`,
lineNumbers: true,
mode: 'r',
theme: 'light default',
viewportMargin: Infinity,
});
runButton.onclick = async () => {
runButton.disabled = true;
let canvas = undefined;
await webR.init();
await webR.evalRVoid('webr::canvas(width=504, height=311.472)');
await webR.FS.syncfs(false);
const result = await webRCodeShelter.captureR(editor.getValue(), {
withAutoprint: true,
captureStreams: true,
captureConditions: false,
captureGraphics: false,
env: {},
});
try {
await webR.evalRVoid("dev.off()");
const out = result.output.filter(
evt => evt.type == 'stdout' || evt.type == 'stderr'
).map((evt) => evt.data).join('\n');
outputDiv.innerHTML = '';
const pre = document.createElement("pre");
if (/\S/.test(out)) {
const code = document.createElement("code");
code.innerText = out;
pre.appendChild(code);
} else {
pre.style.visibility = 'hidden';
}
outputDiv.appendChild(pre);
const msgs = await webR.flush();
msgs.forEach(msg => {
if (msg.type === 'canvas'){
if (msg.data.event === 'canvasImage') {
canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
} else if (msg.data.event === 'canvasNewPage') {
canvas = document.createElement('canvas');
canvas.setAttribute('width', 2 * 504);
canvas.setAttribute('height', 2 * 311.472);
canvas.style.width="700px";
canvas.style.display="block";
canvas.style.margin="auto";
const p = document.createElement("p");
p.appendChild(canvas);
outputDiv.appendChild(p);
}
}
});
} finally {
webRCodeShelter.purge();
runButton.disabled = false;
}
}
&lt;/script>
&lt;/div>
&lt;p>Any system font available to the web browser can now be used&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>. As well as a nice-to-have, this also provides improved accessibility. For example, there are fonts designed specifically for use by readers with dyslexia and other similar reading barriers&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> that could be used for drawing text in plots.&lt;/p>
&lt;p>Font metrics are now exact, using
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText" target="_blank" rel="noopener">&lt;code>measureText()&lt;/code>&lt;/a>, rather than estimating the width and height of Latin glyphs using heuristics. This gives more accurate positioning of rendered text and improves the general quality of resulting plots.&lt;/p>
&lt;p>Support for Unicode, font glyph fallback, complex ligatures, and right-to-left (RTL) text have all been improved. This vastly improves results when rendering text for international users, particularly for non-Latin RTL scripts such as the Arabic and Hebrew text in the example above.&lt;/p>
&lt;p>Also, colour emoji can now be added to plots. 😃&lt;/p>
&lt;h3 id="paths-and-winding-rules">Paths and winding rules
&lt;a href="#paths-and-winding-rules">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Additional support for the drawing and filling of paths and polygons, including with different
&lt;a href="https://oreillymedia.github.io/Using_SVG/extras/ch06-fill-rule.html" target="_blank" rel="noopener">winding rules&lt;/a>, has been added to the webR canvas graphics device. An area where this new functionality makes a world of difference is plotting spatial features and maps. Previously broken R code for plotting maps with the &lt;code>ggplot2&lt;/code> and &lt;code>sf&lt;/code> packages now works well with webR 0.2.0.&lt;/p>
&lt;p>&lt;a href="paths.png">&lt;img alt="A screenshot of R plotting code testing paths with winding settings and map plotting. Output on the left for webR 0.1.1 is broken. Output on the right for webR 0.2.0 works correctly" width="95%" src="paths.png">&lt;/a>&lt;/p>
&lt;h3 id="output-messages-from-the-canvas-graphics-device">Output messages from the canvas graphics device
&lt;a href="#output-messages-from-the-canvas-graphics-device">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>As a result of the changes to the HTML canvas graphics device, the structure of output messages communicated to the main thread has been redesigned. This is a breaking change and existing webR applications will need to be updated to listen for the new output messaging format.&lt;/p>
&lt;p>
&lt;a href="https://docs.r-wasm.org/webr/latest/plotting.html" target="_blank" rel="noopener">A Plotting section&lt;/a> has been added to the webR documentation describing how plotting works with the
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a> device, and how to handle the output messages in your own web applications.&lt;/p>
&lt;p>A &lt;code>'canvas'&lt;/code> type output message with an &lt;code>event&lt;/code> property of &lt;code>'canvasNewPage'&lt;/code> indicates the start of a new plot,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="p">{&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;canvas&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;canvasNewPage&amp;#39;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>An output message with an &lt;code>event&lt;/code> property of &lt;code>'canvasImage'&lt;/code> indicates that there is some graphics data ready to be drawn,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="p">{&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;canvas&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;canvasImage&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">image&lt;/span>: &lt;span class="kt">ImageBitmap&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>image&lt;/code> property in the message data contains a JavaScript
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap" target="_blank" rel="noopener">&lt;code>ImageBitmap&lt;/code>&lt;/a> object. This can be drawn to a HTML &lt;code>&amp;lt;canvas&amp;gt;&lt;/code> element using the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage" target="_blank" rel="noopener">&lt;code>drawImage()&lt;/code>&lt;/a> method.&lt;/p>
&lt;h2 id="built-in-bitmap-graphics-devices">Built-in bitmap graphics devices
&lt;a href="#built-in-bitmap-graphics-devices">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Not all environments where webR could be running support plotting to a HTML &lt;code>&amp;lt;canvas&amp;gt;&lt;/code> element. Older browsers may not support the required &lt;code>OffscreenCanvas&lt;/code> interface, webR might be running server-side in Node.js, or webR might be running more traditional R code or packages that are unaware of the
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a> graphics device.&lt;/p>
&lt;p>For supporting these use cases, with webR 0.2.0 the built-in bitmap graphics devices are now able to be used, writing their output to the webR VFS. This includes the
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>png()&lt;/code>&lt;/a>,
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>bmp()&lt;/code>&lt;/a>,
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>jpeg()&lt;/code>&lt;/a>,
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>tiff()&lt;/code>&lt;/a> devices, and potentially others implemented using the Cairo graphics library.&lt;/p>
&lt;p>In the example below, webR is loaded into a JavaScript environment and plotting is done using the built-in
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>png()&lt;/code>&lt;/a> graphics device. The resulting image is written to the virtual filesystem and its contents can then be obtained using webR&amp;rsquo;s
&lt;a href="https://docs.r-wasm.org/webr/latest/api/js/classes/WebR.WebR.html#fs" target="_blank" rel="noopener">&lt;code>FS&lt;/code>&lt;/a> interface, designed to be similar to
&lt;a href="https://emscripten.org/docs/api_reference/Filesystem-API.html" target="_blank" rel="noopener">Emscripten&amp;rsquo;s filesystem API&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">WebR&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;webr&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">webR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">WebR&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalRVoid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`
&lt;/span>&lt;span class="sb"> png(&amp;#39;/tmp/Rplot.png&amp;#39;, width = 800, height = 800, res = 144)
&lt;/span>&lt;span class="sb"> hist(rnorm(1000))
&lt;/span>&lt;span class="sb"> dev.off()
&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">plotImageData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/tmp/Rplot.png&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The image data is contained in the &lt;code>plotImageData&lt;/code> variable as a JavaScript
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noopener">&lt;code>UInt8Array&lt;/code>&lt;/a>. Once obtained from the VFS, the image can be served to the end user as a
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">&lt;code>Blob&lt;/code>&lt;/a> file download, displayed on a web page, or if running webR server-side returned over the network.&lt;/p>
&lt;h3 id="text-rendering-and-font-support">Text rendering and font support
&lt;a href="#text-rendering-and-font-support">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>As with the
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a> improvements described in the previous section, we feel it is important that the built in R graphics devices provides a high level of support for text rendering in webR. Here, however, the approach is different. The built-in graphics devices renders image data entirely within the WebAssembly environment, so we can no longer rely on the web browser for high quality text!&lt;/p>
&lt;p>The built-in graphics devices are powered by the Cairo graphics library, which can now optionally be compiled for Wasm as part of the webR build process. In addition, when enabled various other libraries are compiled for Wasm to improve the quality of text rendering in Cairo,&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://pango.gnome.org" target="_blank" rel="noopener">pango&lt;/a>&lt;/li>
&lt;li>
&lt;a href="http://fribidi.org" target="_blank" rel="noopener">fribidi&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://harfbuzz.github.io" target="_blank" rel="noopener">harfbuzz&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://freetype.org" target="_blank" rel="noopener">freetype&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://www.freedesktop.org/wiki/Software/fontconfig/" target="_blank" rel="noopener">fontconfig&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Public releases of webR distributed via GitHub and CDN will be built with these libraries all enabled and included.&lt;/p>
&lt;h4 id="font-files-on-the-vfs">Font files on the VFS
&lt;a href="#font-files-on-the-vfs">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h4>&lt;p>When plotting with the built-in bitmap graphics devices, fonts must be accessible to the Cairo library through the webR VFS. A minimal selection of
&lt;a href="https://fonts.google.com/noto" target="_blank" rel="noopener">Google&amp;rsquo;s Noto fonts&lt;/a> are bundled with webR when Cairo graphics is enabled.&lt;/p>
&lt;p>The fontconfig library is also configured to search the VFS directory &lt;code>/home/web_user/fonts&lt;/code> for additional fonts. Users who wish to use custom fonts, or alternative writing systems, may do so by uploading font files to this directory. In the case of international scripts or non-Latin Unicode such as emoji, fontconfig will automatically use font fallback to select reasonable fonts containing the required glyphs.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">png&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">800&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">180&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">plot&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nf">rnorm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">rnorm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">col&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rgb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.5&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">xlim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">-5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">ylim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">-5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">main&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;This is the title 🚀&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">xlab&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;This is the x label&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ylab&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;This is the y label&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nf">text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">-3.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;This is English&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">-3.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">-4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;هذا مكتوب باللغة العربية&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;これは日本語です&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">-4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;זה כתוב בעברית&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">dev.off&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is essentially the same example as in the previous section, demonstrating a selection of advanced font functionality. In this example we are rendering a PNG file using the built-in
&lt;a href="https://rdrr.io/r/grDevices/png.html" target="_blank" rel="noopener">&lt;code>png()&lt;/code>&lt;/a> graphics device. We can see that by uploading appropriate fonts to the VFS, the same set of advanced text rendering features that are provided by the browser can also be used with R&amp;rsquo;s built-in bitmap graphics devices.&lt;/p>
&lt;p>&lt;a href="textplot.png">&lt;img alt="A screenshot showing the output of the above plotting code is shown on the left. The additional fonts uploaded to the VFS are listed on the right." width="100%" src="textplot.png">&lt;/a>&lt;/p>
&lt;h2 id="lazy-virtual-filesystem">Lazy virtual filesystem
&lt;a href="#lazy-virtual-filesystem">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>All of the additional features I&amp;rsquo;ve written about so far come with a price: increased Wasm binary and data download size. Consider the fonts in the previous section - each font file bundled with webR is going to increase the total size of the default webR filesystem by around 500KB.&lt;/p>
&lt;p>This is a high price to pay in time and bandwidth when not every user is going to need every feature. A similar principle also applies to other files included with R by default. It&amp;rsquo;s nice that all the default R documentation, examples, and datasets are available on the VFS, but we don&amp;rsquo;t necessarily need those files downloaded every time to every client machine.&lt;/p>
&lt;p>With webR 0.2.0 a &amp;ldquo;lazy&amp;rdquo; virtual filesystem mechanism, powered by
&lt;a href="https://emscripten.org/docs/porting/files/Synchronous-Virtual-XHR-Backed-File-System-Usage.html" target="_blank" rel="noopener">a feature of Emscripten&amp;rsquo;s FS API&lt;/a>, is introduced. With this, only the files required to launch R and use the default packages are downloaded at initialisation time. Additional files provided on the VFS are still available for use, but they are only downloaded from the remote server when they are requested in some way by the running Wasm R process.&lt;/p>
&lt;p>With the introduction of the lazy virtual filesystem, along with other efficiency improvements, the initial download size for webR is now much smaller, a great improvement.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Component&lt;/th>
&lt;th>0.1.1&lt;/th>
&lt;th>0.2.0&lt;/th>
&lt;th>(% of previous)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>R.bin.data&lt;/code>&lt;/td>
&lt;td>25.3MB&lt;/td>
&lt;td>5.2MB&lt;/td>
&lt;td>20.6%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R.bin.wasm&lt;/code>&lt;/td>
&lt;td>12.8MB&lt;/td>
&lt;td>1.7MB&lt;/td>
&lt;td>7.5%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Total for the webR REPL app&lt;/strong>&lt;/td>
&lt;td>40.2MB&lt;/td>
&lt;td>9.5MB&lt;/td>
&lt;td>23.6%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="r-packages">R packages
&lt;a href="#r-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Since initial release, webR has supported loading R packages by first installing them to the Emscripten VFS using the helper function
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#install-one-or-more-packages-from-a-webr-binary-package-repo" target="_blank" rel="noopener">&lt;code>webr::install()&lt;/code>&lt;/a> or by manually placing R packages in the VFS at &lt;code>/usr/lib/R/library&lt;/code>. We find that pure R packages usually work well, but R packages with underlying C (or Fortran, or otherwise&amp;hellip;) code must be compiled from source for Wasm.&lt;/p>
&lt;p>We host a public CRAN-like R package repository containing packages built for Wasm in this way, so that there exists a subset of useful and supported R packages that can be used with webR. The public repository is hosted at &lt;a href="https://repo.r-wasm.org">https://repo.r-wasm.org&lt;/a> and this repo URL is used by default when running
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#install-one-or-more-packages-from-a-webr-binary-package-repo" target="_blank" rel="noopener">&lt;code>webr::install()&lt;/code>&lt;/a> to install a Wasm R package.&lt;/p>
&lt;p>It remains the case that building custom R packages for Wasm is not well documented, but we do hope to improve the situation over time as our package build infrastructure develops and matures. In the future, we plan to provide a Wasm R package build system as a set of Docker containers, so that users are able to build their own packages for webR using a container environment.&lt;/p>
&lt;h3 id="webassembly-system-libraries-for-r-packages">WebAssembly system libraries for R packages
&lt;a href="#webassembly-system-libraries-for-r-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Many R packages require linking with system libraries to build and run. When building such R packages for WebAssembly, not only does the package code require compiling for Wasm, but also any system libraries that code depends on.&lt;/p>
&lt;p>To expand support for R packages, webR 0.2.0 ships with
&lt;a href="https://github.com/r-wasm/webr/tree/main/libs/recipes" target="_blank" rel="noopener">additional recipes&lt;/a> to build system libraries from source for Wasm. The libraries consist of a selection of utility, database, graphics, text rendering, geometry, and geospatial support packages, with specific libraries chosen for their possibility to be compiled for Wasm as well as the number of R packages relying on them. I expect that the number of system libraries supported will continue to grow over time as we attempt to build more R packages for Wasm.&lt;/p>
&lt;p>As of webR 0.1.1, &lt;strong>219&lt;/strong> packages were available to install through our public Wasm R package repo. With the release of webR 0.2.0 and its additional system libraries, the number of available packages is now &lt;strong>10324&lt;/strong> (approximately 51% of CRAN packages). Though, it should be noted that these packages have not been tested in detail. Here, &amp;ldquo;available&amp;rdquo; just means that the Emscripten compiler successfully built the R package for Wasm, along with its prerequisite packages.&lt;/p>
&lt;h3 id="public-wasm-r-packages-dashboard">Public Wasm R packages dashboard
&lt;a href="#public-wasm-r-packages-dashboard">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>While available R packages can be listed using
&lt;a href="https://rdrr.io/r/utils/available.packages.html" target="_blank" rel="noopener">&lt;code>available.packages()&lt;/code>&lt;/a> with our CRAN-like Wasm R package repo, it&amp;rsquo;s not the smoothest experience for users simply wanting to check if a given package is available. A dashboard has been added to the
&lt;a href="https://repo.r-wasm.org" target="_blank" rel="noopener">repo index page&lt;/a> which lists the available packages compiled for Wasm in an interactive table. The table also lists package dependencies, noting which prerequisite packages, if any, are still missing.&lt;/p>
&lt;p>&lt;a href="repo.png">&lt;img alt="A screenshot of the webR binary R package repository index page. A table of available R packages is shown, along with their prerequisites" width="95%" src="repo.png">&lt;/a>&lt;/p>
&lt;p>It might be interesting to note that this dashboard itself is running under webR, through a fully client-side Shiny app.&lt;/p>
&lt;h2 id="running-httpuv--shiny-under-webr">Running httpuv &amp;amp; Shiny under webR
&lt;a href="#running-httpuv--shiny-under-webr">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Using features new to webR 0.2.0, a
&lt;a href="https://github.com/r-wasm/httpuv" target="_blank" rel="noopener">httpuv webR package shim&lt;/a> has been created that provides the functionality usually provided by the
&lt;a href="https://cran.r-project.org/web/packages/httpuv/index.html" target="_blank" rel="noopener">httpuv&lt;/a> R package. The package enables R to handle HTTP and WebSocket traffic, and is a prerequisite for the R Shiny package.&lt;/p>
&lt;p>The shim works by taking advantage of the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener">JavaScript Service Worker API&lt;/a>. Normally Service Workers are used to implement fast offline caching of web content, but they can also be used as a general network proxy. The httpuv shim makes use of a Service Worker to intercept network traffic from a running Shiny web client, and forward that traffic to be handled by an instance of webR.&lt;/p>
&lt;p>From the Shiny server&amp;rsquo;s point of view, it is communicating with the usual httpuv package using its R API. From the point of view of the Shiny web client, it is talking to a Shiny server over the network. Between the two, the JavaScript Service Worker and webR work together to act as a network proxy and handle the traffic entirely within the client&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>&lt;a href="httpuv.png">&lt;img alt="A block diagram showing how the httpuv shim, webR worker thread, and Shiny work together. See the preceding diagram for an explanation of how the blocks interact" width="90%" src="httpuv.png">&lt;/a>&lt;/p>
&lt;p>The httpuv shim package is still in the experimental stage, but it is currently available for testing and is included in our public webR package repository.&lt;/p>
&lt;h3 id="an-example-shiny-app">An example shiny app
&lt;a href="#an-example-shiny-app">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>&lt;a href="shiny.png">&lt;img alt="A screenshot of the webR Shiny demo. The shiny app is shown in the top section of the screenshot, an input slider and an output histogram plot. The lower section shows the normally server-side Shiny package console output when tracing is enabled." width="90%" src="shiny.png">&lt;/a>&lt;/p>
&lt;p>An example Shiny app, making use of the httpuv shim and running fully client-side, is available at &lt;a href="https://shiny-standalone-webr-demo.netlify.app">https://shiny-standalone-webr-demo.netlify.app&lt;/a>.&lt;/p>
&lt;p>Once the app has loaded in your browser, it&amp;rsquo;s possible to confirm that the app is running entirely client-side by observing the Shiny server trace output at the bottom of the screen. You should even be able to disconnect completely from the internet and continue to use the app offline.&lt;/p>
&lt;p>The source code for the demo, which includes some information describing how to set up a webR Shiny server in this way, can be found at &lt;a href="https://github.com/georgestagg/shiny-standalone-webr-demo">georgestagg/shiny-standalone-webr-demo&lt;/a>. Note that this repository is targeted towards advanced web developers with prior experience of development with JavaScript Web Workers. It is intended as a demonstration of the technology, rather than a tutorial.&lt;/p>
&lt;p>A coming-soon version of Shinylive for R will provide a much better user experience for getting fully client-side R Shiny apps up and running, without requiring advanced knowledge of JavaScript&amp;rsquo;s Worker API. I believe Shinylive with webR integration will pave the way for providing a user-friendly method to build and deploy containerised R Shiny apps, running on WebAssembly.&lt;/p>
&lt;h2 id="changes-to-the-webr-developer-api">Changes to the webR developer API
&lt;a href="#changes-to-the-webr-developer-api">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>It&amp;rsquo;s possible for webR to be used in isolation, but it&amp;rsquo;s likely that developers will want to interface webR with other JavaScript frameworks and tools. The dynamism and interconnectivity of the web is one of its great strengths, and we&amp;rsquo;d like the same to be true of webR. This section describes changes to webR&amp;rsquo;s developer API, used to interact with the running R session from the JavaScript environment.&lt;/p>
&lt;h3 id="performance-improvements-with-messagepack-protocol">Performance improvements with MessagePack protocol
&lt;a href="#performance-improvements-with-messagepack-protocol">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>When working to integrate webR into a wider application, at some point we will need to move data into the running R process, and later return results back to JavaScript. It&amp;rsquo;s possible to move data into R by evaluating R code directly, but the webR library also provides
&lt;a href="https://docs.r-wasm.org/webr/latest/convert-js-to-r.html" target="_blank" rel="noopener">other ways to transfer raw data to R&lt;/a>.&lt;/p>
&lt;p>Consider the example below. Data is transferred from JavaScript into the running R process by binding &lt;code>jsData&lt;/code> to an R variable in the global environment using
&lt;a href="https://docs.r-wasm.org/webr/latest/convert-js-to-r.html#binding-objects-to-an-r-environment" target="_blank" rel="noopener">&lt;code>webR.objs.globalEnv.bind()&lt;/code>&lt;/a>. Next, some computation on the data is done, represented as evaluating the &lt;code>do_analysis()&lt;/code> R function. Finally the result is returned back to JavaScript, first as a reference to an R object and then transferring the result data back to the JavaScript environment using
&lt;a href="https://docs.r-wasm.org/webr/latest/convert-r-to-js.html#serialising-r-objects" target="_blank" rel="noopener">&lt;code>toJs()&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">jsData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[...&lt;/span> &lt;span class="nx">some&lt;/span> &lt;span class="nx">large&lt;/span> &lt;span class="nx">JavaScript&lt;/span> &lt;span class="nx">dataset&lt;/span> &lt;span class="p">...];&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">objs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">globalEnv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">jsData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;do_analysis(data)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">ret&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toJs&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s easy to see how this workflow could be useful as part of a wider application, enabling a complex data manipulation or a statistical modelling in R that would otherwise be awkward to perform directly in JavaScript.&lt;/p>
&lt;p>Behind the scenes, we&amp;rsquo;ve done work to ensure that data is transferred efficiently to and from the R environment, and in webR 0.2.0 the
&lt;a href="https://msgpack.org/index.html" target="_blank" rel="noopener">MessagePack&lt;/a> protocol is now used as the main way that data is serialised and transferred, replacing JSON encoding.&lt;/p>
&lt;p>This change provides a significant performance improvement.
&lt;a href="https://github.com/r-wasm/webr/pull/204" target="_blank" rel="noopener">Initial testing&lt;/a> shows an order of magnitude speed boost when transferring large sets of data from the JavaScript environment into R. Thanks to
&lt;a href="https://github.com/r-wasm/webr/issues/203" target="_blank" rel="noopener">@jeroen&lt;/a> for prompting me to look into it!&lt;/p>
&lt;h3 id="the-typing-of-r-object-references">The typing of R object references
&lt;a href="#the-typing-of-r-object-references">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>When working with webR in TypeScript it is important to keep track of R object types. All references to R objects are instances of the
&lt;a href="https://docs.r-wasm.org/webr/latest/objects.html" target="_blank" rel="noopener">&lt;code>RObject&lt;/code>&lt;/a> class, and various subclasses implement specific features for each fundamental R data type.&lt;/p>
&lt;p>In this example, an
&lt;a href="https://docs.r-wasm.org/webr/latest/api/js/classes/RWorker.RDouble.html" target="_blank" rel="noopener">&lt;code>RDouble&lt;/code>&lt;/a> object is returned at runtime, but &lt;code>webR.evalR()&lt;/code> is typed to return a generic &lt;code>RObject&lt;/code>. Notice that the
&lt;a href="https://docs.r-wasm.org/webr/latest/api/js/classes/RWorker.RDouble.html#tonumber" target="_blank" rel="noopener">&lt;code>.toNumber()&lt;/code>&lt;/a> method exists on &lt;code>RDouble&lt;/code>, but not on the &lt;code>RObject&lt;/code> superclass. So while this example runs with no problem once compiled to JavaScript, it gives an error under TypeScript!&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1.23456&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toJs&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toNumber&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// An error under TypeScript!
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>One solution is to use the
&lt;a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions" target="_blank" rel="noopener">&lt;code>as&lt;/code>&lt;/a> keyword to assert a specific type of &lt;code>RObject&lt;/code> subclass. Alternatively, webR also provides
&lt;a href="https://docs.r-wasm.org/webr/latest/evaluating.html#returning-javascript-values-when-evaluating-r-code" target="_blank" rel="noopener">variants of the &lt;code>evalR()&lt;/code> function&lt;/a> that return and convert results to a specific type of JavaScript object.&lt;/p>
&lt;p>In many cases these methods will work well, &lt;em>but they require you to know for sure what type of R object has been returned&lt;/em>. Additional support has been added in webR 0.2.0 to better handle typing when it is not entirely clear what type of &lt;code>RObject&lt;/code> you have.&lt;/p>
&lt;h4 id="type-predicate-functions">Type predicate functions
&lt;a href="#type-predicate-functions">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h4>&lt;p>TypeScript supports a kind of return type known as a
&lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates" target="_blank" rel="noopener">type predicate&lt;/a>. These return types can be used to create user-defined type guards, functions that take an object argument and return a boolean indicating if the object is of a compatible type. With this, TypeScript is able to automatically
&lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html" target="_blank" rel="noopener">narrow&lt;/a> types based on the return value from the type predicate function.&lt;/p>
&lt;p>WebR 0.2.0 ships with a selection of
&lt;a href="https://docs.r-wasm.org/webr/latest/objects.html#type-predicate-functions" target="_blank" rel="noopener">type predicate functions for each fundamental R data type&lt;/a> supported by webR. In the following example, the TypeScript error described above is dealt with by using the function
&lt;a href="https://docs.r-wasm.org/webr/latest/api/js/modules/RMain.html#isrdouble" target="_blank" rel="noopener">&lt;code>isRDouble()&lt;/code>&lt;/a>. Inside the branch, TypeScript narrows the object type to an &lt;code>RDouble&lt;/code>, resolving the issue.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">isRDouble&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;webr&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1.23456&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isRDouble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// In this branch, TypeScript narrows the type of `obj` to an `RDouble`
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toNumber&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Do something with `num` ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">destroy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="handling-errors-with-webrerror">Handling errors with &lt;code>WebRError&lt;/code>
&lt;a href="#handling-errors-with-webrerror">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>When executing R code with webR&amp;rsquo;s &lt;code>evalR()&lt;/code> family of functions, by default any error condition from R is converted into a JavaScript
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noopener">&lt;code>Error&lt;/code>&lt;/a> and thrown. This feature can be very useful, because it allows developers to catch issues while executing R code in the native JavaScript environment.&lt;/p>
&lt;p>However, consider the following example,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;some_R_code()&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">doSomethingWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Handle some error that occured
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If an error is thrown, how can we tell if the error came from R or from some issue inside the JavaScript function? Nested &lt;code>try&lt;/code>/&lt;code>catch&lt;/code> could be used, but this becomes unwieldy quickly. Parsing the error message text is another option, though not so elegant.&lt;/p>
&lt;p>With webR 0.2.0 any errors that occur in R code executed using &lt;code>evalR()&lt;/code>, or any internal webR issues, are thrown as instances of
&lt;a href="https://docs.r-wasm.org/webr/latest/api/js/classes/WebR.WebRError.html" target="_blank" rel="noopener">&lt;code>WebRError&lt;/code>&lt;/a>. With this change, the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noopener">&lt;code>instanceof&lt;/code>&lt;/a> keyword can be used to differentiate between errors occurring in R, and errors in JavaScript code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">WebRError&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;webR&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;some_R_code()&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">doSomethingWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nx">WebRError&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;An error occured executing R code&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;An error occured in JavaScript&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="nx">e&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="safely-handling-webr-termination">Safely handling webR termination
&lt;a href="#safely-handling-webr-termination">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Consider the following &lt;code>async&lt;/code> loop, a useful pattern to continuously handle webR output messages,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">run() {&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(;;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">read&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;stdout&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;stderr&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">warn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unhandled output type: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">.`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here &lt;code>await webR.read()&lt;/code> waits asynchronously for output messages from webR&amp;rsquo;s communication channel. For example, a running R process might print results between long computational delays. Such occasional printed output might be received as messages with a &lt;code>type&lt;/code> property of &lt;code>'stdout'&lt;/code>.&lt;/p>
&lt;p>After a message is received, it is handled in a &lt;code>switch&lt;/code> statement and then the loop continues around to wait for another output message. This works well while webR is running, but what happens when terminated with
&lt;a href="https://docs.r-wasm.org/webr/latest/api/js/classes/WebR.WebR.html#close" target="_blank" rel="noopener">&lt;code>webR.close()&lt;/code>&lt;/a>? The R worker thread is stopped and destroyed, but the loop continues to wait for a message that will never come.&lt;/p>
&lt;p>With webR 0.2.0 a new type of message is issued when webR is terminated using &lt;code>webR.close()&lt;/code>. After the webR worker thread has been destroyed, a message is emitted on the usual output channel with a &lt;code>type&lt;/code> property of &lt;code>'closed'&lt;/code>, with no associated &lt;code>data&lt;/code> property. The implication is that once this message has been emitted, that particular instance of webR has terminated and the the async loop is no longer needed.&lt;/p>
&lt;p>With this change, exiting the loop once webR has terminated could be as simple as adding an extra &lt;code>case&lt;/code> statement,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">run() {&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(;;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">read&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;stdout&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;stderr&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;closed&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">warn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unhandled output type: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">.`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="installation-and-next-steps">Installation and next steps
&lt;a href="#installation-and-next-steps">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Developers can integrate webR in their own JavaScript or TypeScript projects by installing the
&lt;a href="https://www.npmjs.com/package/webr" target="_blank" rel="noopener">webR npm package&lt;/a>, or by directly importing webR from CDN. Issues and PRs are accepted and welcome on the main
&lt;a href="https://github.com/r-wasm/webr" target="_blank" rel="noopener">r-wasm/webr&lt;/a> GitHub repository.&lt;/p>
&lt;h3 id="npm">npm
&lt;a href="#npm">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>With this release, the webR npm package name has been updated, simplified from the original &lt;code>@r-wasm/webr&lt;/code> package name to simply &lt;code>webr&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm i webr
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The original namespaced package &lt;code>@r-wasm/webr&lt;/code> will be deprecated, and from v0.2.0 onwards npm will display a message pointing to the new package name.&lt;/p>
&lt;h3 id="cdn-url">CDN URL
&lt;a href="#cdn-url">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Alternatively, webR can be imported directly as a module from CDN.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">WebR&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;https://webr.r-wasm.org/v0.2.0/webr.mjs&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="binary-release-packages">Binary release packages
&lt;a href="#binary-release-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Finally, binary webR packages can be downloaded from GitHub on the releases page of the
&lt;a href="https://github.com/r-wasm/webr" target="_blank" rel="noopener">r-wasm/webr&lt;/a> repo.&lt;/p>
&lt;h3 id="documentation">Documentation
&lt;a href="#documentation">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The next step of integrating webR into your own software should be to visit the documentation pages, provided at &lt;a href="https://docs.r-wasm.org/webr/v0.2.0/">https://docs.r-wasm.org/webr/v0.2.0/&lt;/a>. My previous
&lt;a href="https://www.tidyverse.org/blog/2023/03/webr-0-1-0/" target="_blank" rel="noopener">webR release blog post&lt;/a> also briefly explains how to get started, though the docs go into much more detail.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A big thank you to all of webR&amp;rsquo;s early adopters, experimenting with the system and providing feedback in the form of GitHub Issues and PRs.&lt;/p>
&lt;p>
&lt;a href="https://github.com/Anurodhyadav" target="_blank" rel="noopener">@Anurodhyadav&lt;/a>,
&lt;a href="https://github.com/arkraieski" target="_blank" rel="noopener">@arkraieski&lt;/a>,
&lt;a href="https://github.com/averissimo" target="_blank" rel="noopener">@averissimo&lt;/a>,
&lt;a href="https://github.com/awconway" target="_blank" rel="noopener">@awconway&lt;/a>,
&lt;a href="https://github.com/bahadzie" target="_blank" rel="noopener">@bahadzie&lt;/a>,
&lt;a href="https://github.com/ceciliacsilva" target="_blank" rel="noopener">@ceciliacsilva&lt;/a>,
&lt;a href="https://github.com/DanielEWeeks" target="_blank" rel="noopener">@DanielEWeeks&lt;/a>,
&lt;a href="https://github.com/eteitelbaum" target="_blank" rel="noopener">@eteitelbaum&lt;/a>,
&lt;a href="https://github.com/fortunewalla" target="_blank" rel="noopener">@fortunewalla&lt;/a>,
&lt;a href="https://github.com/gedw99" target="_blank" rel="noopener">@gedw99&lt;/a>,
&lt;a href="https://github.com/gwd-at" target="_blank" rel="noopener">@gwd-at&lt;/a>,
&lt;a href="https://github.com/hatemhosny" target="_blank" rel="noopener">@hatemhosny&lt;/a>,
&lt;a href="https://github.com/hrbrmstr" target="_blank" rel="noopener">@hrbrmstr&lt;/a>,
&lt;a href="https://github.com/ivelasq" target="_blank" rel="noopener">@ivelasq&lt;/a>,
&lt;a href="https://github.com/JeremyPasco" target="_blank" rel="noopener">@JeremyPasco&lt;/a>,
&lt;a href="https://github.com/jeroen" target="_blank" rel="noopener">@jeroen&lt;/a>,
&lt;a href="https://github.com/jooyoungseo" target="_blank" rel="noopener">@jooyoungseo&lt;/a>,
&lt;a href="https://github.com/jpjais" target="_blank" rel="noopener">@jpjais&lt;/a>,
&lt;a href="https://github.com/kforner" target="_blank" rel="noopener">@kforner&lt;/a>,
&lt;a href="https://github.com/lauritowal" target="_blank" rel="noopener">@lauritowal&lt;/a>,
&lt;a href="https://github.com/lionel-" target="_blank" rel="noopener">@lionel-&lt;/a>,
&lt;a href="https://github.com/matthiasbirkich" target="_blank" rel="noopener">@matthiasbirkich&lt;/a>,
&lt;a href="https://github.com/neocarto" target="_blank" rel="noopener">@neocarto&lt;/a>,
&lt;a href="https://github.com/noamross" target="_blank" rel="noopener">@noamross&lt;/a>,
&lt;a href="https://github.com/Polkas" target="_blank" rel="noopener">@Polkas&lt;/a>,
&lt;a href="https://github.com/qiushiyan" target="_blank" rel="noopener">@qiushiyan&lt;/a>,
&lt;a href="https://github.com/ries9112" target="_blank" rel="noopener">@ries9112&lt;/a>,
&lt;a href="https://github.com/SugarRayLua" target="_blank" rel="noopener">@SugarRayLua&lt;/a>,
&lt;a href="https://github.com/timelyportfolio" target="_blank" rel="noopener">@timelyportfolio&lt;/a>,
&lt;a href="https://github.com/WebReflection" target="_blank" rel="noopener">@WebReflection&lt;/a>, and
&lt;a href="https://github.com/WillemSleegers" target="_blank" rel="noopener">@WillemSleegers&lt;/a>.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>In addition,
&lt;a href="https://blog.djnavarro.net/posts/2023-04-09_webr/" target="_blank" rel="noopener">Danielle Navarro&amp;rsquo;s webR blog post&lt;/a> is very good and Bob Rudis&amp;rsquo;s
&lt;a href="https://rud.is/webr-experiments/" target="_blank" rel="noopener">webR experiments&lt;/a> are well worth exploring, along with his recent
&lt;a href="https://youtu.be/inpwcTUmBDY" target="_blank" rel="noopener">NY R conference talk&lt;/a>. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Also other JavaScript/Wasm environments, such as Node.js. For example,
&lt;a href="https://ropensci.org/r-universe/" target="_blank" rel="noopener">ROpenSci&amp;rsquo;s r-universe&lt;/a> package platform provides download links for datasets contained in R packages, in a variety of formats,
&lt;a href="https://fosstodon.org/@jeroenooms/110299179903212170" target="_blank" rel="noopener">powered by running webR server-side in Node.js&lt;/a>. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>REPL stands for &amp;ldquo;Read, Eval, Print, Loop&amp;rdquo;, and is another name for the R console that you&amp;rsquo;re probably familiar with. The application is named the &amp;ldquo;webR REPL app&amp;rdquo; because the original version simply provided the user with a fullscreen R console in their web browser. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>This also includes the world of CSS web fonts, but it is a little tricky.
&lt;a href="https://stackoverflow.com/a/53808942" target="_blank" rel="noopener">Extra work&lt;/a> must be done so that the font is available to the Web Worker. Probably this can be handled better in a future release of
&lt;a href="https://docs.r-wasm.org/webr/latest/api/r.html#graphics-device-for-drawing-to-a-html-canvas-element" target="_blank" rel="noopener">&lt;code>webr::canvas()&lt;/code>&lt;/a>. &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>
&lt;a href="https://www.dyslexiefont.com" target="_blank" rel="noopener">Dyslexie&lt;/a>,
&lt;a href="https://opendyslexic.org" target="_blank" rel="noopener">Open Dyslexic&lt;/a>. Results of research in this area is mixed, but even if these fonts don&amp;rsquo;t improve the speed of text comprehension, some users may simply prefer or feel more comfortable with them. &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>
&lt;a href="https://shiny.posit.co/py/docs/shinylive.html" target="_blank" rel="noopener">Shinylive for Python&lt;/a> also uses a JavaScript Service Worker scheme to serve fully client-side apps. &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>webR 0.1.0 has been released</title><link>https://www.tidyverse.org/blog/2023/03/webr-0-1-0/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2023/03/webr-0-1-0/</guid><description>&lt;!--
TODO:
* [X] Look over / edit the post's title in the yaml
* [X] Edit (or delete) the description; note this appears in the Twitter card
* [X] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [X] Find photo &amp; update yaml metadata
* [X] Create `thumbnail-sq.jpg`; height and width should be equal
* [X] Create `thumbnail-wd.jpg`; width should be >5x height
* [X] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
* [x] Update temporary URLS to r-wasm.org
* [x] Check for evalR API changes
* [ ] Change r-wasm/jupyterlite-webr-kernel GitHub repo public
* [x] Update r-wasm/webR repo for AWS and r-wasm.org URLs
* [ ] Push npm update for r-wasm/webr package
* [x] Update static service worker URLs
* [x] Update webR shortcode URLs
* [x] Update post date
-->
&lt;!-- Initialise webR in the page -->
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css">
&lt;style>
.CodeMirror pre {
background-color: unset !important;
}
.btn-webr {
background-color: #EEEEEE;
border-bottom-left-radius: 0;
border-bottom-right-radius: 0;
}
&lt;/style>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js">&lt;/script>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/r/r.js">&lt;/script>
&lt;script type="module">
import { WebR } from 'https://webr.r-wasm.org/v0.4.2/webr.mjs';
globalThis.webR = new WebR();
await globalThis.webR.init();
await webR.FS.mkdir('/persist');
await webR.FS.mount('IDBFS', {}, '/persist');
await webR.FS.syncfs(true);
await webR.evalRVoid("webr::shim_install()");
await webR.evalRVoid("webr::global_prompt_install()", { withHandlers: false });
globalThis.webRCodeShelter = await new globalThis.webR.Shelter();
document.querySelectorAll(".btn-webr").forEach((btn) => {
btn.innerText = 'Run code';
btn.disabled = false;
});
&lt;/script>
&lt;!-- Add webr engine for knit -->
&lt;div class="highlight">
&lt;/div>
&lt;!-- Blog post main content -->
&lt;p>We&amp;rsquo;re super excited to announce the release of webR v0.1.0! This is the first release of webR intended for general use by the web development and R communities and is the result of almost a year of hard work by the webR developers.&lt;/p>
&lt;p>This post will introduce webR, demonstrate some of the possibilities that running R in a web browser brings, and give a quick overview of how to include webR in your own TypeScript or JavaScript web applications.&lt;/p>
&lt;h2 id="introduction">Introduction
&lt;a href="#introduction">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>WebR is a version of the open-source R interpreter compiled for WebAssembly, along with a supporting TypeScript library for interacting with the console and R objects from a JavaScript environment.&lt;/p>
&lt;p>By compiling R to WebAssembly a user can visit a website and run R code directly within the web browser, without R installed on their device or a supporting computational R server. All that is required is a normal web server, including the type of cloud hosting service provided by Github Pages or Netlify.&lt;/p>
&lt;h2 id="how-it-works">How it works
&lt;a href="#how-it-works">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>WebR&amp;rsquo;s core is based around compiling the open-source R interpreter for
&lt;a href="https://webassembly.org" target="_blank" rel="noopener">WebAssembly&lt;/a>, using the
&lt;a href="https://emscripten.org" target="_blank" rel="noopener">Emscripten&lt;/a> compiler suite along with
&lt;a href="https://flang.llvm.org/docs/" target="_blank" rel="noopener">LLVM Flang&lt;/a> to work with R&amp;rsquo;s pre-existing C and Fortran based source code.&lt;/p>
&lt;p>WebAssembly (often abbreviated as Wasm) is a standard defining a virtual stack machine along with a corresponding &lt;em>bytecode&lt;/em>. Efficient Wasm engines have already been implemented in most modern web browsers, which allows for the deployment of high performance Wasm applications on the web.&lt;/p>
&lt;p>While it&amp;rsquo;s certainly possible for an interested programmer to write Wasm bytecode by hand, it is not a requirement to do so. Similar to how code and data is compiled into &lt;em>machine code&lt;/em> for a certain computer processor, code and data can be compiled into the Wasm bytecode by compiler software that supports the Wasm standard.&lt;/p>
&lt;p>However, unlike with traditional machine code, the Wasm virtual machine (VM) is consistent across multiple different types of environment, architecture, and device &amp;ndash; in theory the same bytecode binary can run anywhere without having to be recompiled for that environment. In this way the Wasm VM is similar to Java&amp;rsquo;s JVM. However, in comparison to the JVM, Wasm has been designed and built from the ground up for use on the modern web, requiring strict sandboxing and security controls.&lt;/p>
&lt;p>Future use for WebAssembly has also been identified in server-side web development, containerisation, cloud computing, and more. With these applications, Wasm has been suggested as a universal binary format of the future. Multiple implementations of the Wasm VM already exist designed to run &lt;em>outside&lt;/em> a web browser, through proposed Wasm standards such as
&lt;a href="https://wasi.dev" target="_blank" rel="noopener">WASI&lt;/a>.&lt;/p>
&lt;h2 id="whats-possible">What&amp;rsquo;s possible?
&lt;a href="#whats-possible">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Undoubtedly, webR opens a world of possibilities for the interactive use of R and data science on the web.&lt;/p>
&lt;h3 id="an-online-r-console">An online R console
&lt;a href="#an-online-r-console">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>A web-based interactive R console is included in the webR source repository as a demonstration of integrating webR into a wider web application. A publicly accessible instance of the webR console can be found at &lt;a href="https://webr.r-wasm.org/latest/">https://webr.r-wasm.org/latest/&lt;/a>.&lt;/p>
&lt;p>&lt;a href="webr-repl.png" target="_blank">&lt;img src="webr-repl.png" alt="A screenshot showing the demo webR console creating a plot">&lt;/a>&lt;/p>
&lt;p>With the webR online console a new user can get up and running with R in seconds. The webR console is also functional on many modern mobile devices, where traditional versions of R are not always available for installation at all&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>It&amp;rsquo;s possible to perform data analysis on reasonably large datasets by uploading data to a Virtual File System (VFS). The webR console provides an interface to view and interact with the VFS (&lt;strong>Files&lt;/strong> tab, top right). Once a data file has been uploaded to the VFS it can be read by R like any standard file.&lt;/p>
&lt;p>&lt;a href="webr-repl2.png" target="_blank">&lt;img src="webr-repl2.png" alt="A screenshot showing the demo webR console loading a data file">&lt;/a>&lt;/p>
&lt;p>Note that uploading and downloading files to the VFS in this way does not actually involve transferring any data over the network. However, webR has been built so that it is possible to load data into webR over the network by using R&amp;rsquo;s built in functions that can download from URL, such as
&lt;a href="https://rdrr.io/r/utils/read.table.html" target="_blank" rel="noopener">&lt;code>read.csv()&lt;/code>&lt;/a>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>&lt;a href="webr-repl3.png" target="_blank">&lt;img src="webr-repl3.png" alt="A screenshot showing the demo webR console loading a data file from URL">&lt;/a>&lt;/p>
&lt;p>Plotting is also supported (&lt;strong>Plotting&lt;/strong> tab, top right), meaning a user can produce beautiful plot output with the webR console, closing the loop of reading data, performing analysis, and producing output. It is entirely feasible that a casual user could perform the basics of data science entirely within their web browser using webR.&lt;/p>
&lt;h3 id="an-educational-tool">An educational tool
&lt;a href="#an-educational-tool">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Consider the following code block containing some simple R code. After a short loading period while the webR binary and supporting files are downloaded, a &lt;strong>Run code&lt;/strong> button is enabled on the code block, with the code itself able to be edited and remixed on the fly. Feel free to try this out now!&lt;/p>
&lt;div class="highlight">
&lt;button class="btn btn-default btn-webr" disabled type="button" id="webr-run-button-1">Loading webR...&lt;/button>
&lt;div id="webr-editor-1">&lt;/div>
&lt;div id="webr-code-output-1">&lt;pre style="visibility: hidden">&lt;/pre>&lt;/div>
&lt;script type="module">
const runButton = document.getElementById('webr-run-button-1');
const outputDiv = document.getElementById('webr-code-output-1');
const editorDiv = document.getElementById('webr-editor-1');
const editor = CodeMirror((elt) => {
elt.style.border = '1px solid #eee';
elt.style.height = 'auto';
editorDiv.append(elt);
},{
value: `fit &lt;- lm(mpg ~ am, data=mtcars)\nsummary(fit)`,
lineNumbers: true,
mode: 'r',
theme: 'light default',
viewportMargin: Infinity,
});
runButton.onclick = async () => {
runButton.disabled = true;
let canvas = undefined;
await webR.init();
await webR.evalRVoid('webr::canvas(width=504, height=311.472)');
await webR.FS.syncfs(false);
const result = await webRCodeShelter.captureR(editor.getValue(), {
withAutoprint: true,
captureStreams: true,
captureConditions: false,
captureGraphics: false,
env: {},
});
try {
await webR.evalRVoid("dev.off()");
const out = result.output.filter(
evt => evt.type == 'stdout' || evt.type == 'stderr'
).map((evt) => evt.data).join('\n');
outputDiv.innerHTML = '';
const pre = document.createElement("pre");
if (/\S/.test(out)) {
const code = document.createElement("code");
code.innerText = out;
pre.appendChild(code);
} else {
pre.style.visibility = 'hidden';
}
outputDiv.appendChild(pre);
const msgs = await webR.flush();
msgs.forEach(msg => {
if (msg.type === 'canvas'){
if (msg.data.event === 'canvasImage') {
canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
} else if (msg.data.event === 'canvasNewPage') {
canvas = document.createElement('canvas');
canvas.setAttribute('width', 2 * 504);
canvas.setAttribute('height', 2 * 311.472);
canvas.style.width="700px";
canvas.style.display="block";
canvas.style.margin="auto";
const p = document.createElement("p");
p.appendChild(canvas);
outputDiv.appendChild(p);
}
}
});
} finally {
webRCodeShelter.purge();
runButton.disabled = false;
}
}
&lt;/script>
&lt;/div>
&lt;p>After executing the R code once, try changing the &lt;code>am&lt;/code> variable in the model to &lt;code>gear&lt;/code> and then clicking &lt;strong>Run code&lt;/strong> again. You should immediately see how changing the model affects the components of the resulting fit. There is a real R session running and powering this code block &amp;ndash; try replacing the entire code with something new!&lt;/p>
&lt;p>The following interactive code block produces an R plot that is directly embedded into the page. As with the previous example, the plot can be recreated or remixed multiple times by the reader simply by clicking the &lt;strong>Run Code&lt;/strong> button.&lt;/p>
&lt;div class="highlight">
&lt;button class="btn btn-default btn-webr" disabled type="button" id="webr-run-button-2">Loading webR...&lt;/button>
&lt;div id="webr-editor-2">&lt;/div>
&lt;div id="webr-code-output-2">&lt;pre style="visibility: hidden">&lt;/pre>&lt;/div>
&lt;script type="module">
const runButton = document.getElementById('webr-run-button-2');
const outputDiv = document.getElementById('webr-code-output-2');
const editorDiv = document.getElementById('webr-editor-2');
const editor = CodeMirror((elt) => {
elt.style.border = '1px solid #eee';
elt.style.height = 'auto';
editorDiv.append(elt);
},{
value: `data &lt;- rnorm(1000, 10, 1)\nhist(data, c = rainbow(12))`,
lineNumbers: true,
mode: 'r',
theme: 'light default',
viewportMargin: Infinity,
});
runButton.onclick = async () => {
runButton.disabled = true;
let canvas = undefined;
await webR.init();
await webR.evalRVoid('webr::canvas(width=504, height=311.472)');
await webR.FS.syncfs(false);
const result = await webRCodeShelter.captureR(editor.getValue(), {
withAutoprint: true,
captureStreams: true,
captureConditions: false,
captureGraphics: false,
env: {},
});
try {
await webR.evalRVoid("dev.off()");
const out = result.output.filter(
evt => evt.type == 'stdout' || evt.type == 'stderr'
).map((evt) => evt.data).join('\n');
outputDiv.innerHTML = '';
const pre = document.createElement("pre");
if (/\S/.test(out)) {
const code = document.createElement("code");
code.innerText = out;
pre.appendChild(code);
} else {
pre.style.visibility = 'hidden';
}
outputDiv.appendChild(pre);
const msgs = await webR.flush();
msgs.forEach(msg => {
if (msg.type === 'canvas'){
if (msg.data.event === 'canvasImage') {
canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
} else if (msg.data.event === 'canvasNewPage') {
canvas = document.createElement('canvas');
canvas.setAttribute('width', 2 * 504);
canvas.setAttribute('height', 2 * 311.472);
canvas.style.width="700px";
canvas.style.display="block";
canvas.style.margin="auto";
const p = document.createElement("p");
p.appendChild(canvas);
outputDiv.appendChild(p);
}
}
});
} finally {
webRCodeShelter.purge();
runButton.disabled = false;
}
}
&lt;/script>
&lt;/div>
&lt;p>In my experience this way of interacting and experimenting with R code without the mental overhead of context switching from a web browser to an R console, or copying and pasting lines of example code, feels extremely fresh and exciting. An exciting potential application for webR is providing high-quality educational web content in exactly this kind of format.&lt;/p>
&lt;h3 id="reproducible-reports">Reproducible reports
&lt;a href="#reproducible-reports">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>A core principle of good science is that results should be repeatable and reproducible by others. Unfortunately the misuse of data analysis, leading to unreliable results,
&lt;a href="https://en.wikipedia.org/wiki/Misuse_of_statistics" target="_blank" rel="noopener">is a known issue&lt;/a>.&lt;/p>
&lt;p>The idea of a reproducible report is to bring the philosophy of repeatability to the delivery format itself. Reproducible reports weave together explanatory prose, data science, source code, output and figures; all in a single place with a consistent execution environment. With this, a user reading the report has everything they need to reproduce and confirm results for themselves.&lt;/p>
&lt;p>While Jupyter notebooks were not the first implementation of executable documents&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, their popularity has grown over the last decade or so as a way to support high quality reproducible reports. Jupyter has been named
&lt;a href="https://www.nature.com/articles/d41586-018-07196-1" target="_blank" rel="noopener">&lt;em>&amp;ldquo;The data scientists&amp;rsquo; computational notebook of choice&amp;rdquo;&lt;/em>&lt;/a> and almost 10 million Jupyter notebooks were publicly accessible on GitHub as of Oct 2020&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>While a Jupyter notebook usually requires a Python and Jupyter installation to fully reproduce results, recent work by the
&lt;a href="https://jupyterlite.readthedocs.io/en/latest/" target="_blank" rel="noopener">JupyterLite&lt;/a> team uses Wasm to bring Jupyter to the web browser. JupyterLite can be used with
&lt;a href="https://pyodide.org/en/stable/" target="_blank" rel="noopener">Pyodide&lt;/a> to run Python based notebooks directly in the browser.&lt;/p>
&lt;p>WebR aims to provide that same experience for Jupyter notebooks based on R. As part of the initial release of webR, we are also releasing a
&lt;a href="https://github.com/r-wasm/jupyterlite-webr-kernel" target="_blank" rel="noopener">webR kernel for JupyterLite&lt;/a>, allowing users to write and execute reproducible Jupyter notebooks for R directly in the web browser.&lt;/p>
&lt;p>A JupyterLite instance with the webR kernel available can be found at &lt;a href="https://jupyter.r-wasm.org/">https://jupyter.r-wasm.org/&lt;/a>, along with a sample R Jupyter notebook demonstrating a reproducible report.&lt;/p>
&lt;p>&lt;a href="jupyter.png" target="_blank">&lt;img src="jupyter.png" alt="A screenshot showing the webR JupyterLite kernel">&lt;/a>&lt;/p>
&lt;p>The JupyterLite kernel for R is still in the early stages of development and
&lt;a href="https://github.com/r-wasm/jupyterlite-webr-kernel#limitations" target="_blank" rel="noopener">includes some limitations&lt;/a>, but the core infrastructure is in place with the release of webR.&lt;/p>
&lt;h3 id="r-packages">R packages
&lt;a href="#r-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>R has a rich history of user-created extensions through the use of R packages. Most packages are a combination of R and C or C++ code, and so many packages must be compiled from source for the system they are running on. Unfortunately, it is not possible to install packages in this way in webR. Such an installation process would require an entire C/C++ to WebAssembly compiler toolchain running in the web page!&lt;/p>
&lt;p>For the moment, downloading pre-compiled Wasm binaries is the only supported way to install packages in webR. A pre-installed &lt;code>webr&lt;/code> support package provides a helper function &lt;code>webr::install()&lt;/code> which can be used to install packages from a CRAN-like repository. As part of the webR release we have provided a small repository of binary R packages compiled for Wasm, publicly hosted with URL &lt;code>https://repo.r-wasm.org/&lt;/code>.&lt;/p>
&lt;h2 id="using-webr-in-your-own-projects">Using webR in your own projects
&lt;a href="#using-webr-in-your-own-projects">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>WebR aims to be as quick and easy to use as possible for those familiar with JavaScript web development. While a short introduction to using webR follows in this blog post, we think the best way to get up and running is by reading the Getting Started section of the
&lt;a href="https://docs.r-wasm.org/webr/latest/" target="_blank" rel="noopener">webR documentation&lt;/a>. The documentation goes into further detail about how to download webR, technical requirements for serving web pages that use webR, and provides more detailed examples.&lt;/p>
&lt;h3 id="downloading-and-using-webr-from-npm">Downloading and using webR from npm
&lt;a href="#downloading-and-using-webr-from-npm">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>For a project with dependencies managed by npm, the
&lt;a href="https://www.npmjs.com/package/@r-wasm/webr" target="_blank" rel="noopener">webR JavaScript package&lt;/a> can be installed by using the command,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm i @r-wasm/webr
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once available, webR can be imported into a project and a new instance of webR initialised with,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">WebR&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@r-wasm/webr&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">webR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">WebR&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once a new instance of the &lt;code>WebR()&lt;/code> class has been created, webR will begin to download WebAssembly binaries from the public CDN, and R will be started.&lt;/p>
&lt;h3 id="downloading-webr-release-packages">Downloading webR release packages
&lt;a href="#downloading-webr-release-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Full release packages for webR can also be downloaded from the webR
&lt;a href="https://github.com/r-wasm/webR/releases" target="_blank" rel="noopener">GitHub Releases&lt;/a> page. The full release packages include the webR JavaScript loader, along with WebAssembly binaries for R and its supporting libraries.&lt;/p>
&lt;p>Hosting a full release package on a web server makes it possible to use webR entirely on your own infrastructure, rather than relying on downloading Wasm binaries from the public CDN.&lt;/p>
&lt;h3 id="an-example-of-executing-r-code">An example of executing R code
&lt;a href="#an-example-of-executing-r-code">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Once R is ready, the JavaScript promise returned by &lt;code>webR.init()&lt;/code> will resolve. At this point R code can be evaluated and results converted into JavaScript objects,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">let&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">webR&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evalR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;rnorm(10,5,1)&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toArray&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above example the &lt;code>result&lt;/code> object can be thought of as a reference to a specific R object, and is converted into a standard JavaScript array using the &lt;code>toArray()&lt;/code> function.&lt;/p>
&lt;p>Further examples and details of how to interact with the R console and work with R objects can be found in the
&lt;a href="https://docs.r-wasm.org/webr/latest/examples.html" target="_blank" rel="noopener">webR documentation&lt;/a>.&lt;/p>
&lt;h2 id="the-future-of-webr">The future of webR
&lt;a href="#the-future-of-webr">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Going forward we plan to expand and improve webR, including compiling more R packages for the webR public package repository. It is our hope that we can provide the same web-based computational infrastructure for R that
&lt;a href="https://pyodide.org/en/stable/" target="_blank" rel="noopener">Pyodide&lt;/a> has provided for the Python ecosystem.&lt;/p>
&lt;p>While WebAssembly engines are in theory able to provide near-native performance, when it comes to the requirements for advanced data science or the deployment of sophisticated machine learning models, the benefits of running tools such as the RStudio IDE natively or a high-performance cloud deployment will likely always outperform the relatively restricted WebAssembly virtual machine. Despite this, webR can provide a smooth, interactive and immediate introduction to the world of working with data in R. Users who have not had the chance to use R in the past due to the barriers raised by the installation of new software to their workstation, or registration for a cloud-based service, might yet still be convinced to introduce R to their workflow though an introduction with interactive examples or short reports powered by webR.&lt;/p>
&lt;p>The opportunity for enhancing educational content also continues beyond introductory materials. Many R packages are documented online, using automated tools such as
&lt;a href="https://pkgdown.r-lib.org" target="_blank" rel="noopener">pkgdown&lt;/a> to produce a dedicated website for the package. Alongside an introductory description, package websites usually also include usage details in the form of example code, reference documentation, and vignette articles. However, if a potential user would like to try the package for themselves, often the only way is by installing the package onto their own machine. Immediately interactive examples, powered by webR, are an interesting future possibility that would reduce this kind of barrier to entry.&lt;/p>
&lt;p>Fairly recently, the Shiny team announced
&lt;a href="https://shiny.rstudio.com/py/" target="_blank" rel="noopener">Shiny for Python&lt;/a>, a feature rich reactive web application framework targeting Python. Of particular note, the team used WebAssembly and Pyodide as a way to run a
&lt;a href="https://shiny.rstudio.com/py/docs/shinylive.html" target="_blank" rel="noopener">Shinylive&lt;/a> server directly in the user&amp;rsquo;s web browser. One of the most exciting possible applications for webR is a similar architecture targeting the traditional R version of Shiny. Is it possible for a &lt;em>Shinylive for R&lt;/em> to be powered by webR? We certainly hope so.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A massive thank you to all early webR users for their willingness to experiment and their feedback in the form of GitHub issues and pull requests,&lt;/p>
&lt;p>
&lt;a href="https://github.com/Anurodhyadav" target="_blank" rel="noopener">@Anurodhyadav&lt;/a>,
&lt;a href="https://github.com/barryrowlingson" target="_blank" rel="noopener">@barryrowlingson&lt;/a>,
&lt;a href="https://github.com/christianp" target="_blank" rel="noopener">@christianp&lt;/a>,
&lt;a href="https://github.com/ekianjo" target="_blank" rel="noopener">@ekianjo&lt;/a>,
&lt;a href="https://github.com/georgestagg" target="_blank" rel="noopener">@georgestagg&lt;/a>,
&lt;a href="https://github.com/HTUser-1" target="_blank" rel="noopener">@HTUser-1&lt;/a>,
&lt;a href="https://github.com/jason-variadiclabs" target="_blank" rel="noopener">@jason-variadiclabs&lt;/a>,
&lt;a href="https://github.com/jjesusfilho" target="_blank" rel="noopener">@jjesusfilho&lt;/a>,
&lt;a href="https://github.com/kdpsingh" target="_blank" rel="noopener">@kdpsingh&lt;/a>,
&lt;a href="https://github.com/lionel-" target="_blank" rel="noopener">@lionel-&lt;/a>,
&lt;a href="https://github.com/psychemedia" target="_blank" rel="noopener">@psychemedia&lt;/a>,
&lt;a href="https://github.com/Sjesc" target="_blank" rel="noopener">@Sjesc&lt;/a>,
&lt;a href="https://github.com/SugarRayLua" target="_blank" rel="noopener">@SugarRayLua&lt;/a>
&lt;a href="https://github.com/unclecode" target="_blank" rel="noopener">@unclecode&lt;/a>, and
&lt;a href="https://github.com/wch" target="_blank" rel="noopener">@wch&lt;/a>.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>I am aware of at least one early adopter using webR as a way to access R on their Apple iPad. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Note that there are some security measures in place when fetching data that are applied to all web applications. Downloading datasets from URL requires that the web server providing the data supports and allows
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noopener">Cross Origin Resource Sharing (CORS)&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Knuth originally introduced the precursor
&lt;a href="https://en.wikipedia.org/wiki/Literate_programming" target="_blank" rel="noopener">Literate Programming&lt;/a> paradigm in 1984, and more recently tools such as Sweave, knitr and RMarkdown enable embedding R and computational results directly into a report. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Admittedly, only a small proportion using an R kernel.
&lt;a href="https://blog.jetbrains.com/datalore/2020/12/17/we-downloaded-10-000-000-jupyter-notebooks-from-github-this-is-what-we-learned/" target="_blank" rel="noopener">The overwhelming majority use Python, R comes second, and Julia third.&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>