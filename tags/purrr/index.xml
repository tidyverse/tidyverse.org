<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>purrr | Tidyverse</title><link>https://www.tidyverse.org/tags/purrr/</link><atom:link href="https://www.tidyverse.org/tags/purrr/index.xml" rel="self" type="application/rss+xml"/><description>purrr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 10 Jul 2025 00:00:00 +0000</lastBuildDate><item><title>Parallel processing in purrr 1.1.0</title><link>https://www.tidyverse.org/blog/2025/07/purrr-1-1-0-parallel/</link><pubDate>Thu, 10 Jul 2025 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2025/07/purrr-1-1-0-parallel/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>We&amp;rsquo;re thrilled to announce the release of
&lt;a href="https://purrr.tidyverse.org" target="_blank" rel="noopener">purrr&lt;/a> 1.1.0, bringing a game-changing feature to this cornerstone of the tidyverse: &lt;strong>parallel processing&lt;/strong>.&lt;/p>
&lt;p>For the first time in purrr&amp;rsquo;s history, you can now scale your &lt;code>map()&lt;/code> operations across multiple cores and even distributed systems, all while maintaining the elegant, functional programming style you know and love.&lt;/p>
&lt;p>This milestone represents more than just a performance boost&amp;mdash;it&amp;rsquo;s a fundamental shift that makes purrr suitable for production-scale data processing tasks without sacrificing the clarity and composability that make it such a joy to use.&lt;/p>
&lt;p>Get started by installing purrr 1.1.0 today:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;purrr&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The parallel processing functionality requires the mirai and carrier packages. You will be prompted to install them when you first call &lt;code>in_parallel()&lt;/code>.&lt;/p>
&lt;p>Ready to supercharge your functional programming workflows? Parallel purrr is here, and it&amp;rsquo;s remarkably simple to use.&lt;/p>
&lt;h2 id="the-power-of-in_parallel">The power of &lt;code>in_parallel()&lt;/code>
&lt;a href="#the-power-of-in_parallel">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The magic happens through a shiny new function: &lt;code>in_parallel()&lt;/code>. This purrr adverb wraps your functions to signal that they should run in parallel, powered by the venerable
&lt;a href="https://mirai.r-lib.org/" target="_blank" rel="noopener">mirai&lt;/a> package.&lt;/p>
&lt;p>Here&amp;rsquo;s how simple it is to transform your sequential operations:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">purrr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mirai&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Set up parallel processing (6 background processes)&lt;/span>
&lt;span class="nf">daemons&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Sequential version&lt;/span>
&lt;span class="n">mtcars&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nf">map_dbl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; mpg cyl disp hp drat wt qsec vs am gear carb &lt;/span>
&lt;span class="c1">#&amp;gt; 20.09 6.19 230.72 146.69 3.60 3.22 17.85 0.44 0.41 3.69 2.81&lt;/span>
&lt;span class="c1"># Parallel version - just wrap your function with in_parallel()&lt;/span>
&lt;span class="n">mtcars&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nf">map_dbl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">in_parallel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="c1">#&amp;gt; mpg cyl disp hp drat wt qsec vs am gear carb &lt;/span>
&lt;span class="c1">#&amp;gt; 20.09 6.19 230.72 146.69 3.60 3.22 17.85 0.44 0.41 3.69 2.81&lt;/span>
&lt;span class="c1"># Don&amp;#39;t forget to clean up when done&lt;/span>
&lt;span class="nf">daemons&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The results are identical, but the second version distributes the work across multiple CPU cores. For computationally intensive tasks, the performance gains can be dramatic.&lt;/p>
&lt;p>The beauty of using an adverb is that &lt;code>in_parallel()&lt;/code> works not just with &lt;code>map()&lt;/code>, but across the entire purrr ecosystem:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">daemons&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Works with all map variants&lt;/span>
&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">4&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nf">map_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">in_parallel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">x^2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">4&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nf">map_chr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">in_parallel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">paste&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Number&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="c1"># Works with map2 and pmap&lt;/span>
&lt;span class="nf">map2_dbl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">in_parallel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">9&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">pmap_dbl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">in_parallel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;span class="c1"># Even works with walk for side effects&lt;/span>
&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nf">walk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">in_parallel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">cat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Processing&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;\n&amp;#34;&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="nf">daemons&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you use &lt;code>in_parallel()&lt;/code> but don&amp;rsquo;t set &lt;code>daemons()&lt;/code>, then the map will just proceed sequentially, so you don&amp;rsquo;t need to worry about having two separate code paths for parallel vs non-parallel execution.&lt;/p>
&lt;h2 id="real-world-example-parallel-model-fitting">Real-world example: parallel model fitting
&lt;a href="#real-world-example-parallel-model-fitting">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Let&amp;rsquo;s look at a more realistic scenario where parallel processing truly shines&amp;mdash;fitting multiple models:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">purrr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mirai&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Set up 4 parallel processes&lt;/span>
&lt;span class="nf">daemons&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Define a slow model fitting function&lt;/span>
&lt;span class="n">slow_lm&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">formula&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">Sys.sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0.1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Simulate computational complexity&lt;/span>
&lt;span class="nf">lm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">formula&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1"># Fit models to different subsets of data in parallel&lt;/span>
&lt;span class="n">models&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">mtcars&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtcars&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">cyl&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">in_parallel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">slow_lm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">wt&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">hp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">df&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">slow_lm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">slow_lm&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1"># Extract R-squared values&lt;/span>
&lt;span class="n">models&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">summary&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">map_dbl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;r.squared&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; 4 6 8 &lt;/span>
&lt;span class="c1">#&amp;gt; 0.6807065 0.5889239 0.4970692&lt;/span>
&lt;span class="nf">daemons&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice how we pass the &lt;code>slow_lm&lt;/code> function as an argument to &lt;code>in_parallel()&lt;/code>&amp;mdash;this ensures our custom function is available in the parallel processes.&lt;/p>
&lt;h2 id="production-ready-with-mirai">Production-ready with mirai
&lt;a href="#production-ready-with-mirai">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The choice of
&lt;a href="https://mirai.r-lib.org" target="_blank" rel="noopener">mirai&lt;/a> as the parallel backend wasn&amp;rsquo;t arbitrary.
&lt;a href="https://mirai.r-lib.org" target="_blank" rel="noopener">mirai&lt;/a> is a production-grade async evaluation framework that brings several key advantages:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Minimal overhead&lt;/strong>: Built on modern networking and concurrency principles&lt;/li>
&lt;li>&lt;strong>Reliable scheduling&lt;/strong>: Leveraging fast inter-process communications locally&lt;/li>
&lt;li>&lt;strong>Scalable architecture&lt;/strong>: From multi-process to distributed computing on HPC clusters&lt;/li>
&lt;li>&lt;strong>Security&lt;/strong>: Offers zero-configuration TLS over TCP for additional assurance&lt;/li>
&lt;/ul>
&lt;p>This means your parallel purrr code isn&amp;rsquo;t just fast&amp;mdash;it&amp;rsquo;s production-ready.&lt;/p>
&lt;p>Compared to the
&lt;a href="https://furrr.futureverse.org" target="_blank" rel="noopener">furrr&lt;/a> package:&lt;/p>
&lt;ul>
&lt;li>Much lower overhead means you can get a performance boost even for relatively fast functions&lt;/li>
&lt;li>More linear scaling means you get the same benefits whether you&amp;rsquo;re running on 2 or 200 cores&lt;/li>
&lt;/ul>
&lt;p>We&amp;rsquo;ve learned a lot from our work on furrr, and from
&lt;a href="https://github.com/henrikbengtsson" target="_blank" rel="noopener">Henrik Bengtsson&lt;/a>&amp;lsquo;s excellent work on the
&lt;a href="https://github.com/futureverse" target="_blank" rel="noopener">futureverse&lt;/a> ecosystem. purrr doesn&amp;rsquo;t use future as the underlying engine for parallelism because we&amp;rsquo;ve made some design decisions that differ at a fundamental level, but Henrik&amp;rsquo;s entire ecosystem deserves credit for pushing the boundaries of parallelism in R farther than many thought possible.&lt;/p>
&lt;h2 id="creating-self-contained-functions">Creating self-contained functions
&lt;a href="#creating-self-contained-functions">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>One of the key concepts when using &lt;code>in_parallel()&lt;/code> is creating self-contained functions. Since your function gets serialized and sent to parallel processes, it needs to be completely standalone:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># ❌ This won&amp;#39;t work - external dependencies not declared&lt;/span>
&lt;span class="n">my_data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">in_parallel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">my_data&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="c1"># ✅ This works - dependencies explicitly provided&lt;/span>
&lt;span class="n">my_data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">in_parallel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">my_data&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">my_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">my_data&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1"># ✅ Package functions need explicit namespacing&lt;/span>
&lt;span class="nf">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">in_parallel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">vctrs&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">vec_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">integer&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="c1"># ✅ Or load packages within the function&lt;/span>
&lt;span class="nf">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">in_parallel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vctrs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">vec_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">integer&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This explicit dependency management might seem verbose, but it ensures your parallel code is reliable and predictable&amp;mdash;crucial for production environments.&lt;/p>
&lt;p>It also removes the danger of accidentally shipping large objects to parallel processes&amp;mdash;often a source of performance degradation.&lt;/p>
&lt;h2 id="when-to-use-parallel-processing">When to use parallel processing
&lt;a href="#when-to-use-parallel-processing">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Not every &lt;code>map()&lt;/code> operation benefits from parallelization. The overhead of setting up parallel tasks and communicating between processes can outweigh the benefits for simple operations. As a rule of thumb, consider parallel processing when:&lt;/p>
&lt;ul>
&lt;li>Each iteration takes at least 100 microseconds to 1 millisecond&lt;/li>
&lt;li>You&amp;rsquo;re performing CPU-intensive computations&lt;/li>
&lt;li>You&amp;rsquo;re working with I/O-bound operations that can benefit from concurrency&lt;/li>
&lt;li>The data being passed between processes isn&amp;rsquo;t excessively large&lt;/li>
&lt;/ul>
&lt;p>For quick operations like simple arithmetic, sequential processing will often be faster.&lt;/p>
&lt;p>If you&amp;rsquo;re a package developer, use &lt;code>in_parallel()&lt;/code> where you see fit, but please be mindful not to call &lt;code>daemons()&lt;/code> within your package code. How to set mirai daemons should be always be for the end user to decide.&lt;/p>
&lt;h2 id="distributed-computing-made-simple">Distributed computing made simple
&lt;a href="#distributed-computing-made-simple">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Want to scale beyond your local machine? mirai&amp;rsquo;s networking capabilities make distributed computing surprisingly straightforward:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mirai&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Set up remote daemons on a Slurm HPC cluster&lt;/span>
&lt;span class="nf">daemons&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">host_url&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="n">remote&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">cluster_config&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;sbatch&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Your purrr code remains exactly the same!&lt;/span>
&lt;span class="n">results&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">big_dataset&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">big_dataset&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span>
&lt;span class="nf">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">in_parallel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">complex_analysis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">complex_analysis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">complex_analysis&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">daemons&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The same &lt;code>in_parallel()&lt;/code> syntax that works locally scales seamlessly to distributed systems.&lt;/p>
&lt;p>Please refer to the mirai documentation on
&lt;a href="https://mirai.r-lib.org/articles/mirai.html#remote-daemons" target="_blank" rel="noopener">remote daemons&lt;/a> and
&lt;a href="https://mirai.r-lib.org/articles/mirai.html#launching-remote-daemons" target="_blank" rel="noopener">launching remote daemons&lt;/a> for more details. This
&lt;a href="https://shikokuchuo.net/posts/27-mirai-240/" target="_blank" rel="noopener">mirai blog post&lt;/a> will also be useful if you&amp;rsquo;re working with High-Performance Computing (HPC) clusters.&lt;/p>
&lt;h2 id="looking-forward">Looking forward
&lt;a href="#looking-forward">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The addition of parallel processing to purrr 1.1.0 represents a significant evolution in the package&amp;rsquo;s capabilities. It maintains purrr&amp;rsquo;s core philosophy of functional programming while opening doors to high-performance computing scenarios that were previously challenging to achieve with such clean, readable code.&lt;/p>
&lt;p>This feature is currently marked as experimental as we gather feedback from the community, but the underlying mirai infrastructure is production-proven and battle-tested. We encourage you to try it out and let us know about your experiences.&lt;/p>
&lt;p>Whether you&amp;rsquo;re processing large datasets, fitting complex models, or running simulations, purrr 1.1.0&amp;rsquo;s parallel processing capabilities can help you scale your R workflows without sacrificing code clarity or reliability.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A big thanks to all those who posted issues and contributed PRs since our last release!
&lt;a href="https://github.com/ar-puuk" target="_blank" rel="noopener">@ar-puuk&lt;/a>,
&lt;a href="https://github.com/DanChaltiel" target="_blank" rel="noopener">@DanChaltiel&lt;/a>,
&lt;a href="https://github.com/davidrsch" target="_blank" rel="noopener">@davidrsch&lt;/a>,
&lt;a href="https://github.com/ErdaradunGaztea" target="_blank" rel="noopener">@ErdaradunGaztea&lt;/a>,
&lt;a href="https://github.com/h-a-graham" target="_blank" rel="noopener">@h-a-graham&lt;/a>,
&lt;a href="https://github.com/hadley" target="_blank" rel="noopener">@hadley&lt;/a>,
&lt;a href="https://github.com/HenningLorenzen-ext-bayer" target="_blank" rel="noopener">@HenningLorenzen-ext-bayer&lt;/a>,
&lt;a href="https://github.com/krivit" target="_blank" rel="noopener">@krivit&lt;/a>,
&lt;a href="https://github.com/MarceloRTonon" target="_blank" rel="noopener">@MarceloRTonon&lt;/a>,
&lt;a href="https://github.com/MarkPaulin" target="_blank" rel="noopener">@MarkPaulin&lt;/a>,
&lt;a href="https://github.com/salim-b" target="_blank" rel="noopener">@salim-b&lt;/a>,
&lt;a href="https://github.com/ScientiaFelis" target="_blank" rel="noopener">@ScientiaFelis&lt;/a>,
&lt;a href="https://github.com/shikokuchuo" target="_blank" rel="noopener">@shikokuchuo&lt;/a>, and
&lt;a href="https://github.com/sierrajohnson" target="_blank" rel="noopener">@sierrajohnson&lt;/a>.&lt;/p></description></item><item><title>`purrr::walk()` this way</title><link>https://www.tidyverse.org/blog/2023/05/purrr-walk-this-way/</link><pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2023/05/purrr-walk-this-way/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [ ] Add intro sentence, e.g. the standard tagline for the package
* [ ] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;h2 id="meet-the-map-family">Meet the &lt;code>map()&lt;/code> family
&lt;a href="#meet-the-map-family">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>purrr&amp;rsquo;s
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map()&lt;/code>&lt;/a> family of functions are tools for &lt;strong>iteration&lt;/strong>, performing the same action on multiple inputs. If you&amp;rsquo;re new to purrr, the
&lt;a href="https://r4ds.had.co.nz/iteration.html#iteration" target="_blank" rel="noopener">Iteration chapter&lt;/a> of R for Data Science is a good place to get started.&lt;/p>
&lt;p>One of the benefits of using
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map()&lt;/code>&lt;/a> is that the function has variants (e.g. 
&lt;a href="https://purrr.tidyverse.org/reference/map2.html" target="_blank" rel="noopener">&lt;code>map2()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/pmap.html" target="_blank" rel="noopener">&lt;code>pmap()&lt;/code>&lt;/a>, etc.) all of which work the same way. To borrow from Jennifer Thompson&amp;rsquo;s excellent
&lt;a href="https://github.com/jenniferthompson/RLadiesIntroToPurrr" target="_blank" rel="noopener">Intro to purrr&lt;/a>,the arguments can be broken into two groups: what we&amp;rsquo;re iterating over, and what we&amp;rsquo;re doing each time. The adapted figure below shows what this looks like for
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/map2.html" target="_blank" rel="noopener">&lt;code>map2()&lt;/code>&lt;/a>, and
&lt;a href="https://purrr.tidyverse.org/reference/pmap.html" target="_blank" rel="noopener">&lt;code>pmap()&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="highlight">
&lt;div class="figure" style="text-align: center">
&lt;p>&lt;img src="purrr-map-args.png" alt="Highlighted titles read: what we're iterating over, and what we're doing each time. For map(.x = , .f = ) .x is what we're iterating over and .f is what we're doing each time. For map2(.x = , .y = , .f = ) .x and .y are what we're iterating over and .f is what we're doing each time. For pmap(.l = list(), .f = ) .l is what we're iterating over and .f is what we're doing each time." width="700px" />&lt;/p>
&lt;p class="caption">
Grouped map function arguments, adapted from Intro to purrr by Jennifer Thompson
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>In addition to handling different input arguments, the map family of functions has variants that create different outputs. The following table from the
&lt;a href="https://adv-r.hadley.nz/functionals.html#map-variants" target="_blank" rel="noopener">Map-variants section of Advanced R&lt;/a> shows how the orthogonal inputs and outputs can be used to organise the variants into a matrix:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>List&lt;/th>
&lt;th>Atomic&lt;/th>
&lt;th>Same type&lt;/th>
&lt;th>Nothing&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>One argument&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map()&lt;/code>&lt;/a>&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_lgl()&lt;/code>&lt;/a>, &amp;hellip;&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/modify.html" target="_blank" rel="noopener">&lt;code>modify()&lt;/code>&lt;/a>&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>walk()&lt;/code>&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Two arguments&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/map2.html" target="_blank" rel="noopener">&lt;code>map2()&lt;/code>&lt;/a>&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/map2.html" target="_blank" rel="noopener">&lt;code>map2_lgl()&lt;/code>&lt;/a>, &amp;hellip;&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/modify.html" target="_blank" rel="noopener">&lt;code>modify2()&lt;/code>&lt;/a>&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/map2.html" target="_blank" rel="noopener">&lt;code>walk2()&lt;/code>&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>One argument + index&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/imap.html" target="_blank" rel="noopener">&lt;code>imap()&lt;/code>&lt;/a>&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/imap.html" target="_blank" rel="noopener">&lt;code>imap_lgl()&lt;/code>&lt;/a>, &amp;hellip;&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/modify.html" target="_blank" rel="noopener">&lt;code>imodify()&lt;/code>&lt;/a>&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/imap.html" target="_blank" rel="noopener">&lt;code>iwalk()&lt;/code>&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N arguments&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/pmap.html" target="_blank" rel="noopener">&lt;code>pmap()&lt;/code>&lt;/a>&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/pmap.html" target="_blank" rel="noopener">&lt;code>pmap_lgl()&lt;/code>&lt;/a>, &amp;hellip;&lt;/td>
&lt;td>&amp;mdash;&lt;/td>
&lt;td>
&lt;a href="https://purrr.tidyverse.org/reference/pmap.html" target="_blank" rel="noopener">&lt;code>pwalk()&lt;/code>&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="whats-up-with-walk">What&amp;rsquo;s up with &lt;code>walk()&lt;/code>?
&lt;a href="#whats-up-with-walk">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Based on the table above, you might think that
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>walk()&lt;/code>&lt;/a> isn&amp;rsquo;t very useful. Indeed,
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>walk()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/map2.html" target="_blank" rel="noopener">&lt;code>walk2()&lt;/code>&lt;/a>, and
&lt;a href="https://purrr.tidyverse.org/reference/pmap.html" target="_blank" rel="noopener">&lt;code>pwalk()&lt;/code>&lt;/a> all invisibly return &lt;code>.x&lt;/code>. However, they come in handy when you want to call a function for its &lt;em>&lt;strong>side effects&lt;/strong>&lt;/em> rather than its return value.&lt;/p>
&lt;p>Here, we&amp;rsquo;ll go through two common use cases: saving multiple CSVs, and multiple plots. We&amp;rsquo;ll also make use of the
&lt;a href="https://fs.r-lib.org/" target="_blank" rel="noopener">fs&lt;/a> package, a cross-platform interface to file system operations, to inspect our outputs.&lt;/p>
&lt;p>If you want to try this out but don&amp;rsquo;t want to save files locally, there&amp;rsquo;s a
&lt;a href="https://posit.cloud/content/5983147" target="_blank" rel="noopener">companion project on &lt;strong>Posit Cloud&lt;/strong>&lt;/a> where you can follow along.&lt;/p>
&lt;div class="highlight">
&lt;a class="test-drive-link" href="https://posit.cloud/content/5983147" target="_blank">
&lt;button class="test-drive-btn">&lt;i class="fa fa-cloud" aria-hidden="true">&lt;/i> Test Drive on Posit Cloud&lt;/button>
&lt;/a>
&lt;/div>
&lt;h2 id="writing-and-deleting-multiple-csvs">Writing (and deleting) multiple CSVs
&lt;a href="#writing-and-deleting-multiple-csvs">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>To get started, we&amp;rsquo;ll need some data. Let&amp;rsquo;s use the
&lt;a href="https://googlesheets4.tidyverse.org/reference/gs4_examples.html" target="_blank" rel="noopener">gapminder&lt;/a> example Sheet built into
&lt;a href="https://googlesheets4.tidyverse.org/" target="_blank" rel="noopener">googlesheets4&lt;/a>. Because there are multiple worksheets (one for each continent), we&amp;rsquo;ll use
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map()&lt;/code>&lt;/a> to apply
&lt;a href="https://googlesheets4.tidyverse.org/reference/range_read.html" target="_blank" rel="noopener">&lt;code>read_sheet()&lt;/code>&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> to each one, and get back a list of data frames.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://tidyverse.tidyverse.org'>tidyverse&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://googlesheets4.tidyverse.org'>googlesheets4&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
&lt;/div>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>ss&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://googlesheets4.tidyverse.org/reference/gs4_examples.html'>gs4_example&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"gapminder"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='c'># get sheet id&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>sheets&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://googlesheets4.tidyverse.org/reference/sheet_properties.html'>sheet_names&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>ss&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='c'># get the names of individual sheets&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>gap_dfs&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>sheets&lt;/span>, .f &lt;span class='o'>=&lt;/span> \&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nf'>&lt;a href='https://googlesheets4.tidyverse.org/reference/range_read.html'>read_sheet&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>ss&lt;/span>, sheet &lt;span class='o'>=&lt;/span> &lt;span class='nv'>x&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> Reading from &lt;span style='color: #00BBBB;'>gapminder&lt;/span>.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> Range '&lt;span style='color: #BBBB00;'>'Africa'&lt;/span>'.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> Reading from &lt;span style='color: #00BBBB;'>gapminder&lt;/span>.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> Range '&lt;span style='color: #BBBB00;'>'Americas'&lt;/span>'.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> Reading from &lt;span style='color: #00BBBB;'>gapminder&lt;/span>.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> Range '&lt;span style='color: #BBBB00;'>'Asia'&lt;/span>'.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> Reading from &lt;span style='color: #00BBBB;'>gapminder&lt;/span>.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> Range '&lt;span style='color: #BBBB00;'>'Europe'&lt;/span>'.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> Reading from &lt;span style='color: #00BBBB;'>gapminder&lt;/span>.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> Range '&lt;span style='color: #BBBB00;'>'Oceania'&lt;/span>'.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Note that the backslash syntax for anonymous functions (e.g. &lt;code>\(x) x + 1&lt;/code>) was introduced in base R version 4.1.0 as a shorthand for &lt;code>function(x) x + 1&lt;/code>. If you&amp;rsquo;re using an earlier version of R, you can use purrr&amp;rsquo;s shorthand: a formula (e.g. &lt;code>~ .x + 1&lt;/code>).&lt;/p>
&lt;p>Typically, you&amp;rsquo;d want to combine these data frames into one to make it easier to work with your data. To do so, we&amp;rsquo;ll use
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_rbind()&lt;/code>&lt;/a> on &lt;code>gap_dfs&lt;/code>. I&amp;rsquo;ve kept the intermediary object, since we&amp;rsquo;ll use it in a moment with
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>walk()&lt;/code>&lt;/a>, but could have just as easily piped the output directly. The combination of
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>purrr::map()&lt;/code>&lt;/a> and
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_rbind()&lt;/code>&lt;/a> is a handy one that you can learn more about in the
&lt;a href="https://r4ds.hadley.nz/iteration.html?#purrrmap-and-list_rbind" target="_blank" rel="noopener">R for Data Science&lt;/a>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>gap_combined&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>gap_dfs&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_c.html'>list_rbind&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Now let&amp;rsquo;s say that, for whatever reason, you&amp;rsquo;d like to save the data from these sheets as individual CSVs. This is where
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>walk()&lt;/code>&lt;/a> comes into play&amp;mdash;writing out the file with
&lt;a href="https://readr.tidyverse.org/reference/write_delim.html" target="_blank" rel="noopener">&lt;code>write_csv()&lt;/code>&lt;/a> is a &amp;ldquo;side effect.&amp;rdquo; We&amp;rsquo;ll use
&lt;a href="https://fs.r-lib.org/reference/create.html" target="_blank" rel="noopener">&lt;code>fs::dir_create()&lt;/code>&lt;/a> to create a data folder to put our files into&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, and build a vector of paths/file names. Since we have two arguments, the list of data frames, and the paths, we&amp;rsquo;ll use
&lt;a href="https://purrr.tidyverse.org/reference/map2.html" target="_blank" rel="noopener">&lt;code>walk2()&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>fs&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://fs.r-lib.org/reference/create.html'>dir_create&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"data"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>paths&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://stringr.tidyverse.org/reference/str_glue.html'>str_glue&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"data/gapminder_&amp;#123;tolower(sheets)&amp;#125;.csv"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map2.html'>walk2&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='nv'>gap_dfs&lt;/span>, &lt;/span>
&lt;span> &lt;span class='nv'>paths&lt;/span>,&lt;/span>
&lt;span> \&lt;span class='o'>(&lt;/span>&lt;span class='nv'>df&lt;/span>, &lt;span class='nv'>name&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nf'>&lt;a href='https://readr.tidyverse.org/reference/write_delim.html'>write_csv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>df&lt;/span>, &lt;span class='nv'>name&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>To see what we&amp;rsquo;ve done, we can use
&lt;a href="https://fs.r-lib.org/reference/dir_tree.html" target="_blank" rel="noopener">&lt;code>fs::dir_tree()&lt;/code>&lt;/a> to see the contents of the directory as a tree, or
&lt;a href="https://fs.r-lib.org/reference/dir_ls.html" target="_blank" rel="noopener">&lt;code>fs::dir_ls()&lt;/code>&lt;/a> to return the paths as a vector. These functions also take &lt;code>glob&lt;/code> and &lt;code>regexp&lt;/code> arguments, allowing you to filter paths by file type with globbing patterns (e.g. &lt;code>*.csv&lt;/code>) or using a regular expression passed on to
&lt;a href="https://rdrr.io/r/base/grep.html" target="_blank" rel="noopener">&lt;code>grep()&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>fs&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://fs.r-lib.org/reference/dir_tree.html'>dir_tree&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"data"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #0000BB; font-weight: bold;'>data&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ├── gapminder_africa.csv&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ├── gapminder_americas.csv&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ├── gapminder_asia.csv&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ├── gapminder_europe.csv&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; └── gapminder_oceania.csv&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nf'>fs&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://fs.r-lib.org/reference/dir_ls.html'>dir_ls&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"data"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; data/gapminder_africa.csv data/gapminder_americas.csv &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; data/gapminder_asia.csv data/gapminder_europe.csv &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; data/gapminder_oceania.csv&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>If you&amp;rsquo;re having regrets, or want to return your example project to its previous state, it&amp;rsquo;s just as easy to
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>walk()&lt;/code>&lt;/a>
&lt;a href="https://fs.r-lib.org/reference/delete.html" target="_blank" rel="noopener">&lt;code>fs::file_delete()&lt;/code>&lt;/a> along those same paths.&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>walk&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>paths&lt;/span>, \&lt;span class='o'>(&lt;/span>&lt;span class='nv'>paths&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nf'>fs&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://fs.r-lib.org/reference/delete.html'>file_delete&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>paths&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="saving-multiple-plots">Saving multiple plots
&lt;a href="#saving-multiple-plots">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Now, let&amp;rsquo;s say you want to create and save a bunch of plots. We&amp;rsquo;ll use a modified version of the
&lt;a href="https://r4ds.hadley.nz/functions.html#combining-with-other-tidyverse" target="_blank" rel="noopener">&lt;code>conditional_bars()&lt;/code>&lt;/a>&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> function from the R for Data Science chapter on writing
&lt;a href="https://r4ds.hadley.nz/functions.html" target="_blank" rel="noopener">functions&lt;/a>, and the built-in
&lt;a href="https://ggplot2.tidyverse.org/reference/diamonds.html" target="_blank" rel="noopener">diamonds&lt;/a> dataset.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='c'># modified conditional bars function from R4DS&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>conditional_bars&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='kr'>function&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>df&lt;/span>, &lt;span class='nv'>condition&lt;/span>, &lt;span class='nv'>var&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nv'>df&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/filter.html'>filter&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>&amp;#123;&lt;/span>&lt;span class='o'>&amp;#123;&lt;/span> &lt;span class='nv'>condition&lt;/span> &lt;span class='o'>&amp;#125;&lt;/span>&lt;span class='o'>&amp;#125;&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>&lt;span class='o'>&amp;#123;&lt;/span> &lt;span class='nv'>var&lt;/span> &lt;span class='o'>&amp;#125;&lt;/span>&lt;span class='o'>&amp;#125;&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_bar.html'>geom_bar&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/labs.html'>ggtitle&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>rlang&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://rlang.r-lib.org/reference/englue.html'>englue&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Count of diamonds by &amp;#123;&amp;#123;var&amp;#125;&amp;#125; where &amp;#123;&amp;#123;condition&amp;#125;&amp;#125;"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>&amp;#125;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>It&amp;rsquo;s easy enough to run this for one condition, for example for the diamonds with &lt;code>cut == &amp;quot;Good&amp;quot;&lt;/code>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>diamonds&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>conditional_bars&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>cut&lt;/span> &lt;span class='o'>==&lt;/span> &lt;span class='s'>"Good"&lt;/span>, &lt;span class='nv'>clarity&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/goodclarity-1.png" alt="Bar chart showing count of diamonds by clarity in the diamonds dataset where the cut == Good." width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>But what if we want to make and save a plot for each cut? Again, it&amp;rsquo;s
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map()&lt;/code>&lt;/a> and
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>walk()&lt;/code>&lt;/a> to the rescue.&lt;/p>
&lt;p>Because we&amp;rsquo;re using the same data (&lt;code>diamonds&lt;/code>) and conditioning on the same variable (&lt;code>cut&lt;/code>), we&amp;rsquo;ll only need to
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map()&lt;/code>&lt;/a> across the levels of &lt;code>cut&lt;/code>, and can hard code the rest into the anonymous function.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='c'># get the levels&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>cuts&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/levels.html'>levels&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>diamonds&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>cut&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='c'># make the plots&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>plots&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='nv'>cuts&lt;/span>,&lt;/span>
&lt;span> \&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nf'>conditional_bars&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> df &lt;span class='o'>=&lt;/span> &lt;span class='nv'>diamonds&lt;/span>,&lt;/span>
&lt;span> &lt;span class='nv'>cut&lt;/span> &lt;span class='o'>==&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>&lt;span class='o'>&amp;#123;&lt;/span> &lt;span class='nv'>x&lt;/span> &lt;span class='o'>&amp;#125;&lt;/span>&lt;span class='o'>&amp;#125;&lt;/span>,&lt;/span>
&lt;span> &lt;span class='nv'>clarity&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The plots are now saved in a list&amp;mdash;a fine format for storing ggplots. As we did when saving our CSVs, we&amp;rsquo;ll use fs to create a directory to store them in, and make a vector of paths for file names.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='c'># make the folder to put them it (if exists, &amp;#123;fs&amp;#125; does nothing)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nf'>fs&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://fs.r-lib.org/reference/create.html'>dir_create&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"plots"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'># make the file names&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>plot_paths&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://stringr.tidyverse.org/reference/str_glue.html'>str_glue&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"plots/&amp;#123;tolower(cuts)&amp;#125;_clarity.png"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Now we can use the paths and plots with
&lt;a href="https://purrr.tidyverse.org/reference/map2.html" target="_blank" rel="noopener">&lt;code>walk2()&lt;/code>&lt;/a> to pass them as arguments to
&lt;a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">&lt;code>ggsave()&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map2.html'>walk2&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='nv'>plot_paths&lt;/span>,&lt;/span>
&lt;span> &lt;span class='nv'>plots&lt;/span>,&lt;/span>
&lt;span> \&lt;span class='o'>(&lt;/span>&lt;span class='nv'>path&lt;/span>, &lt;span class='nv'>plot&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggsave.html'>ggsave&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>path&lt;/span>, &lt;span class='nv'>plot&lt;/span>, width &lt;span class='o'>=&lt;/span> &lt;span class='m'>6&lt;/span>, height &lt;span class='o'>=&lt;/span> &lt;span class='m'>6&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Again, we can use fs to see what we&amp;rsquo;ve done:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>fs&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://fs.r-lib.org/reference/dir_tree.html'>dir_tree&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"plots"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #0000BB; font-weight: bold;'>plots&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ├── &lt;span style='color: #BB00BB; font-weight: bold;'>fair_clarity.png&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ├── &lt;span style='color: #BB00BB; font-weight: bold;'>good_clarity.png&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ├── &lt;span style='color: #BB00BB; font-weight: bold;'>ideal_clarity.png&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ├── &lt;span style='color: #BB00BB; font-weight: bold;'>premium_clarity.png&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; └── &lt;span style='color: #BB00BB; font-weight: bold;'>very good_clarity.png&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>And, clean up after ourselves if we didn&amp;rsquo;t &lt;em>really&lt;/em> want those plots after all.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>walk&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>plot_paths&lt;/span>, \&lt;span class='o'>(&lt;/span>&lt;span class='nv'>paths&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nf'>fs&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://fs.r-lib.org/reference/delete.html'>file_delete&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>paths&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="fin">Fin
&lt;a href="#fin">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Hopefully this gave you a taste for some of what
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>walk()&lt;/code>&lt;/a> can do. To learn more, see
&lt;a href="https://r4ds.hadley.nz/iteration.html#saving-multiple-outputs" target="_blank" rel="noopener">Saving multiple outputs&lt;/a> in the Iteration chapter of R for Data Science.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>See
&lt;a href="https://googlesheets4.tidyverse.org/articles/googlesheets4.html" target="_blank" rel="noopener">Getting started with googlesheets4&lt;/a> to learn more about the basics of reading and writing sheets. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>If the directory already exists, it will be left unchanged. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>There&amp;rsquo;s also a function in fs called
&lt;a href="https://fs.r-lib.org/reference/dir_ls.html" target="_blank" rel="noopener">&lt;code>dir_walk()&lt;/code>&lt;/a>, which you can feel free to explore on your own. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>I&amp;rsquo;ve added a title that reflects the variable name and condition with
&lt;a href="https://rlang.r-lib.org/reference/englue.html" target="_blank" rel="noopener">&lt;code>rlang::englue()&lt;/code>&lt;/a>, which you can learn more about in the
&lt;a href="https://r4ds.hadley.nz/functions.html#labeling" target="_blank" rel="noopener">Labeling&lt;/a> section of the same R4DS chapter. &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>purrr 1.0.0</title><link>https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/</link><pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>We&amp;rsquo;re happy to announce the release of
&lt;a href="http://purrr.tidyverse.org/" target="_blank" rel="noopener">purrr&lt;/a> 1.0.0! purrr enhances R&amp;rsquo;s functional programming toolkit by providing a complete and consistent set of tools for working with functions and vectors. In the words of ChatGPT:&lt;/p>
&lt;blockquote>
&lt;p>With purrr, you can easily &amp;ldquo;kitten&amp;rdquo; your functions together to perform complex operations, &amp;ldquo;paws&amp;rdquo; for a moment to debug and troubleshoot your code, while &amp;ldquo;feline&amp;rdquo; good about the elegant and readable code that you write. Whether you&amp;rsquo;re a &amp;ldquo;cat&amp;rdquo;-egorical beginner or a seasoned functional programming &amp;ldquo;purr&amp;rdquo;-fessional, purrr has something to offer. So why not &amp;ldquo;pounce&amp;rdquo; on the opportunity to try it out and see how it can &amp;ldquo;meow&amp;rdquo;-velously improve your R coding experience?&lt;/p>
&lt;/blockquote>
&lt;p>You can install it from CRAN with:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/install.packages.html'>install.packages&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"purrr"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>purrr is 7 years old and it&amp;rsquo;s finally made it to 1.0.0! This is a big release, adding some long-needed functionality (like progress bars!) as well as really refining the core purpose of purrr. In this post, we&amp;rsquo;ll start with an overview of the breaking changes, then briefly review some documentation changes. Then we&amp;rsquo;ll get to the good stuff: improvements to the &lt;code>map&lt;/code> family, new
&lt;a href="https://purrr.tidyverse.org/reference/keep_at.html" target="_blank" rel="noopener">&lt;code>keep_at()&lt;/code>&lt;/a> and
&lt;a href="https://purrr.tidyverse.org/reference/keep_at.html" target="_blank" rel="noopener">&lt;code>discard_at()&lt;/code>&lt;/a> functions, and improvements to flattening and simplification. You can see a full list of changes in the
&lt;a href="https://github.com/tidyverse/purrr/releases/tag/v1.0.0" target="_blank" rel="noopener">release notes&lt;/a>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://purrr.tidyverse.org/'>purrr&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="breaking-changes">Breaking changes
&lt;a href="#breaking-changes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;ve used the 1.0.0 release as an opportunity to really refine the core purpose of purrr: facilitating functional programming in R. We&amp;rsquo;ve been more aggressive with deprecations and breaking changes than usual, because a 1.0.0 release signals that purrr is now
&lt;a href="https://lifecycle.r-lib.org/articles/stages.html#stable" target="_blank" rel="noopener">stable&lt;/a>, making it our last opportunity for major changes.&lt;/p>
&lt;p>These changes will break some existing code, but we&amp;rsquo;ve done our best to make it affect as little code as possible. Out of the ~1400 CRAN packages that user purrr, only ~40 were negatively affected, and I
&lt;a href="https://github.com/tidyverse/purrr/issues/969" target="_blank" rel="noopener">made pull requests&lt;/a> to fix them all. Making these fixes helped give me confidence that, though we&amp;rsquo;re deprecating quite a few functions and changing a few special cases, it shouldn&amp;rsquo;t affect too much code in the wild.&lt;/p>
&lt;p>There are four important changes that you should be aware of:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://purrr.tidyverse.org/reference/pluck.html" target="_blank" rel="noopener">&lt;code>pluck()&lt;/code>&lt;/a> behaves differently when extracting 0-length vectors.&lt;/li>
&lt;li>The
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map()&lt;/code>&lt;/a> family uses the tidyverse rules for coercion and recycling.&lt;/li>
&lt;li>All functions that modify lists handle &lt;code>NULL&lt;/code> consistently.&lt;/li>
&lt;li>We&amp;rsquo;ve deprecated functions that aren&amp;rsquo;t related to the core purpose of purrr.&lt;/li>
&lt;/ul>
&lt;h3 id="pluck-and-zero-length-vectors">&lt;code>pluck()&lt;/code> and zero-length vectors
&lt;a href="#pluck-and-zero-length-vectors">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Previously,
&lt;a href="https://purrr.tidyverse.org/reference/pluck.html" target="_blank" rel="noopener">&lt;code>pluck()&lt;/code>&lt;/a> replaced 0-length vectors with the value of &lt;code>default&lt;/code>. Now &lt;code>default&lt;/code> is only used for &lt;code>NULL&lt;/code>s and absent elements:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>a &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/character.html'>character&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>, b &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NULL&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/pluck.html'>pluck&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"y"&lt;/span>, &lt;span class='s'>"a"&lt;/span>, .default &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NA&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; character(0)&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/pluck.html'>pluck&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"y"&lt;/span>, &lt;span class='s'>"b"&lt;/span>, .default &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NA&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] NA&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/pluck.html'>pluck&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"y"&lt;/span>, &lt;span class='s'>"c"&lt;/span>, .default &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NA&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] NA&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This also influences the map family because using an integer vector, character vector, or list instead of a function automatically calls
&lt;a href="https://purrr.tidyverse.org/reference/pluck.html" target="_blank" rel="noopener">&lt;code>pluck()&lt;/code>&lt;/a>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='kc'>NULL&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/character.html'>character&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, .default &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 4&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 0&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 0&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : chr(0)&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>We made this change because it makes purrr more consistent with the rest of the tidyverse and it looks like it was a bug in the original implementation of the function.&lt;/p>
&lt;h3 id="tidyverse-consistency">Tidyverse consistency
&lt;a href="#tidyverse-consistency">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>We&amp;rsquo;ve tweaked the map family of functions to be more consistent with general tidyverse coercion and recycling rules, as implemented by the
&lt;a href="https://vctrs.r-lib.org" target="_blank" rel="noopener">vctrs&lt;/a> package.
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_lgl()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_int()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_int()&lt;/code>&lt;/a>, and
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_dbl()&lt;/code>&lt;/a> now follow the same
&lt;a href="https://vctrs.r-lib.org/articles/type-size.html#coercing-to-common-type" target="_blank" rel="noopener">coercion rules&lt;/a> as vctrs. In particular:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>map_chr(TRUE, identity)&lt;/code>, &lt;code>map_chr(0L, identity)&lt;/code>, and &lt;code>map_chr(1.5, identity)&lt;/code> have been deprecated because we believe that converting a logical/integer/double to a character vector is potentially dangerous and should require an explicit coercion.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='c'># previously you could write&lt;/span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_chr&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>4&lt;/span>, \&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nv'>x&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Warning: Automatic coercion from double to character was deprecated in purrr 1.0.0.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> Please use an explicit call to `as.character()` within `map_chr()` instead.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; [1] "2.000000" "3.000000" "4.000000" "5.000000"&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='c'># now you need something like this:&lt;/span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_chr&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>4&lt;/span>, \&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/character.html'>as.character&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] "2" "3" "4" "5"&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_int()&lt;/code>&lt;/a> requires that the numeric results be close to integers, rather than silently truncating to integers. Compare these two examples:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_int&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span>, \&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nv'>x&lt;/span> &lt;span class='o'>/&lt;/span> &lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'> in `map_int()`:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> In index: 1.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='font-weight: bold;'>Caused by error:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> Can't coerce from a double vector to an integer vector.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_int&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span>, \&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nv'>x&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 2 4 6&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;p>
&lt;a href="https://purrr.tidyverse.org/reference/map2.html" target="_blank" rel="noopener">&lt;code>map2()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/modify.html" target="_blank" rel="noopener">&lt;code>modify2()&lt;/code>&lt;/a>, and
&lt;a href="https://purrr.tidyverse.org/reference/pmap.html" target="_blank" rel="noopener">&lt;code>pmap()&lt;/code>&lt;/a> use tidyverse recycling rules, which mean that vectors of length 1 are recycled to any size but all other vectors must have the same length. This has two major changes:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Previously, the presence of a zero-length input generated a zero-length output. Now it&amp;rsquo;s recycled using the same rules:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map2.html'>map2&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>2&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/character.html'>character&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>paste&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'> in `map2()`:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> Can't recycle `.x` (size 2) to match `.y` (size 0).&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='c'># Works because length-1 vector gets recycled to length-0&lt;/span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map2.html'>map2&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/character.html'>character&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>paste&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; list()&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>And now must explicitly recycle vectors that aren&amp;rsquo;t length 1:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map2.html'>map2_int&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>4&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>10&lt;/span>, &lt;span class='m'>20&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>`+`&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'> in `map2_int()`:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> Can't recycle `.x` (size 4) to match `.y` (size 2).&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map2.html'>map2_int&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>4&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/rep.html'>rep&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>10&lt;/span>, &lt;span class='m'>20&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>`+`&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 11 22 13 24&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;h3 id="assigning-null">Assigning &lt;code>NULL&lt;/code>
&lt;a href="#assigning-null">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>purrr has a number of functions that modify a list: &lt;code>pluck&amp;lt;-()&lt;/code>,
&lt;a href="https://purrr.tidyverse.org/reference/modify_in.html" target="_blank" rel="noopener">&lt;code>assign_in()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/modify.html" target="_blank" rel="noopener">&lt;code>modify()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/modify.html" target="_blank" rel="noopener">&lt;code>modify2()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/modify.html" target="_blank" rel="noopener">&lt;code>modify_if()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/modify.html" target="_blank" rel="noopener">&lt;code>modify_at()&lt;/code>&lt;/a>, and
&lt;a href="https://purrr.tidyverse.org/reference/list_assign.html" target="_blank" rel="noopener">&lt;code>list_modify()&lt;/code>&lt;/a>. Previously, these functions had inconsistent behaviour when you attempted to modify an element with &lt;code>NULL&lt;/code>: some functions would delete that element, and some would set it to &lt;code>NULL&lt;/code>. That inconsistency arose because base R handles &lt;code>NULL&lt;/code> in different ways depending on whether or not use you &lt;code>$&lt;/code>/&lt;code>[[&lt;/code> or &lt;code>[&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>x1&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>x2&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>x3&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>a &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>, b &lt;span class='o'>=&lt;/span> &lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>x1&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>a&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='kc'>NULL&lt;/span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ b: num 2&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>x2&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='s'>"a"&lt;/span>&lt;span class='o'>]&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='kc'>NULL&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x2&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ a: NULL&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ b: num 2&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Now functions that edit a list will create an element containing &lt;code>NULL&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>x3&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_assign.html'>list_modify&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>a &lt;span class='o'>=&lt;/span> &lt;span class='kc'>NULL&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ a: NULL&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ b: num 2&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>x3&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/modify.html'>modify_at&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"b"&lt;/span>, \&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='kc'>NULL&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ a: num 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ b: NULL&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>If you want to delete the element, you can use the special
&lt;a href="https://rlang.r-lib.org/reference/zap.html" target="_blank" rel="noopener">&lt;code>zap()&lt;/code>&lt;/a> sentinel:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>x3&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_assign.html'>list_modify&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>a &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rlang.r-lib.org/reference/zap.html'>zap&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ b: num 2&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>
&lt;a href="https://rlang.r-lib.org/reference/zap.html" target="_blank" rel="noopener">&lt;code>zap()&lt;/code>&lt;/a> does not work in &lt;code>modify*()&lt;/code> because those functions are designed to always return the same top-level structure as the input.&lt;/p>
&lt;h3 id="core-purpose-refinements">Core purpose refinements
&lt;a href="#core-purpose-refinements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>We have &lt;strong>deprecated&lt;/strong> a number of functions to keep purrr focused on its core purpose: facilitating functional programming in R. Deprecation means that the functions will continue to work, but you&amp;rsquo;ll be warned once every 8 hours if you use them. In several years time, we&amp;rsquo;ll release an update which causes the warnings to occur on every time you use them, and a few years after that they&amp;rsquo;ll be transformed to throwing errors.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>
&lt;a href="https://purrr.tidyverse.org/reference/cross.html" target="_blank" rel="noopener">&lt;code>cross()&lt;/code>&lt;/a> and all its variants have been deprecated because they&amp;rsquo;re slow and buggy, and a better approach already exists in
&lt;a href="https://tidyr.tidyverse.org/reference/expand_grid.html" target="_blank" rel="noopener">&lt;code>tidyr::expand_grid()&lt;/code>&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://purrr.tidyverse.org/reference/update_list.html" target="_blank" rel="noopener">&lt;code>update_list()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/rerun.html" target="_blank" rel="noopener">&lt;code>rerun()&lt;/code>&lt;/a>, and the use of tidyselect with
&lt;a href="https://purrr.tidyverse.org/reference/map_if.html" target="_blank" rel="noopener">&lt;code>map_at()&lt;/code>&lt;/a> and friends have been deprecated because we no longer believe that non-standard evaluation is a good fit for purrr.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>lift_*&lt;/code> family of functions has been superseded because they promote a style of function manipulation that is not commonly used in R.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://purrr.tidyverse.org/reference/prepend.html" target="_blank" rel="noopener">&lt;code>prepend()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/rdunif.html" target="_blank" rel="noopener">&lt;code>rdunif()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/rbernoulli.html" target="_blank" rel="noopener">&lt;code>rbernoulli()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/when.html" target="_blank" rel="noopener">&lt;code>when()&lt;/code>&lt;/a>, and
&lt;a href="https://purrr.tidyverse.org/reference/along.html" target="_blank" rel="noopener">&lt;code>list_along()&lt;/code>&lt;/a> have been deprecated because they&amp;rsquo;re not directly related to functional programming.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>splice()&lt;/code> has been deprecated because we no longer believe that automatic splicing makes for good UI and there are other ways to achieve the same result.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Consult the documentation for the alternatives that we now recommend.&lt;/p>
&lt;p>Deprecating these functions makes purrr easier to maintain because it reduces the surface area for bugs and issues, and it makes purrr easier to learn because there&amp;rsquo;s a clearer common thread that ties together all functions.&lt;/p>
&lt;h2 id="documentation">Documentation
&lt;a href="#documentation">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>As you&amp;rsquo;ve seen in the code above, we are moving from magrittr&amp;rsquo;s pipe (&lt;code>%&amp;gt;%&lt;/code>) to the base pipe (&lt;code>|&amp;gt;&lt;/code>) and from formula syntax (&lt;code>~ .x + 1&lt;/code>) to R&amp;rsquo;s new anonymous function short hand (&lt;code>\(x) x + 1&lt;/code>). We believe that it&amp;rsquo;s better to use these new base tools because they work everywhere: the base pipe doesn&amp;rsquo;t require that you load magrittr and the new function shorthand works everywhere, not just in purrr functions. Additionally, being able to specify the argument name for the anonymous function can often lead to clearer code.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='c'># Previously we wrote&lt;/span>&lt;/span>
&lt;span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>10&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>~&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/Normal.html'>rnorm&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>10&lt;/span>, &lt;span class='nv'>.x&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_dbl&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mean&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 0.5586355 1.8213041 2.8764412 4.1521664 5.1160393 6.1271905&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [7] 6.9109806 8.2808301 9.2373940 10.6269104&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='c'># Now we recommend&lt;/span>&lt;/span>
&lt;span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>10&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>\&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mu&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/Normal.html'>rnorm&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>10&lt;/span>, &lt;span class='nv'>mu&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_dbl&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mean&lt;/span>&lt;span class='o'>)&lt;/span> &lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 0.4638639 2.0966712 3.4441928 3.7806185 5.3373228 6.1854820&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [7] 6.5873300 8.3116138 9.4824697 10.4590034&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>We also recommend using an anonymous function instead of passing additional arguments to map. This avoids a certain class of moderately esoteric argument matching woes and, we believe, is generally easier to read.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>mu&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='m'>10&lt;/span>, &lt;span class='m'>100&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='c'># Previously we wrote&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>mu&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_dbl&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>rnorm&lt;/span>, n &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 0.5706199 11.3604613 99.9291426&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='c'># Now we recommend&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>mu&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_dbl&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>\&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mu&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/Normal.html'>rnorm&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, mean &lt;span class='o'>=&lt;/span> &lt;span class='nv'>mu&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 0.7278463 7.5533200 100.0654866&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Due to the
&lt;a href="https://www.tidyverse.org/blog/2019/04/r-version-support/" target="_blank" rel="noopener">tidyverse R dependency policy&lt;/a>, purrr works in R 3.5, 3.6, 4.0, 4.1, and 4.2, but the base pipe and anonymous function syntax are only available in R 4.0 and later. So the examples are automatically disabled on R 3.5 and 3.6 to allow purrr to continue to pass &lt;code>R CMD check&lt;/code>.&lt;/p>
&lt;h2 id="mapping">Mapping
&lt;a href="#mapping">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>With that out of the way, we can now talk about the exciting new features in purrr 1.0.0. We&amp;rsquo;ll start with the map family of functions which have three big new features:&lt;/p>
&lt;ul>
&lt;li>Progress bars.&lt;/li>
&lt;li>Better errors.&lt;/li>
&lt;li>A new family member:
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_vec()&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>These are described in the following sections.&lt;/p>
&lt;h3 id="progress-bars">Progress bars
&lt;a href="#progress-bars">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The map family can now produce a progress bar. This is very useful for long running jobs:&lt;/p>
&lt;div class="highlight">
&lt;p>&lt;img src="figs//progress.svg" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>(For interactive use, the progress bar uses some simple heuristics so that it doesn&amp;rsquo;t show up for very simple jobs.)&lt;/p>
&lt;p>In most cases, we expect that &lt;code>.progress = TRUE&lt;/code> is enough, but if you&amp;rsquo;re wrapping
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map()&lt;/code>&lt;/a> in another function, you might want to set &lt;code>.progress&lt;/code> to a string that identifies the progress bar:&lt;/p>
&lt;div class="highlight">
&lt;p>&lt;img src="figs//named-progress.svg" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;h3 id="better-errors">Better errors
&lt;a href="#better-errors">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>If there&amp;rsquo;s an error in the function you&amp;rsquo;re mapping,
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map()&lt;/code>&lt;/a> and friends now tell you which element caused the problem:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/sample.html'>sample&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>500&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>\&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='kr'>if&lt;/span> &lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>==&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/stop.html'>stop&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Error!"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='kr'>else&lt;/span> &lt;span class='m'>10&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'> in `map()`:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> In index: 51.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='font-weight: bold;'>Caused by error in `.f()`:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> Error!&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>We hope that this makes your debugging life just a little bit easier! (Don&amp;rsquo;t forget about
&lt;a href="https://purrr.tidyverse.org/reference/safely.html" target="_blank" rel="noopener">&lt;code>safely()&lt;/code>&lt;/a> and
&lt;a href="https://purrr.tidyverse.org/reference/possibly.html" target="_blank" rel="noopener">&lt;code>possibly()&lt;/code>&lt;/a> if you expect failures and want to either ignore or capture them.)&lt;/p>
&lt;p>We have also generally reviewed the error messages throughout purrr in order to make them more actionable. If you hit a confusing error message, please let us know!&lt;/p>
&lt;h3 id="new-map_vec">New &lt;code>map_vec()&lt;/code>
&lt;a href="#new-map_vec">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>We&amp;rsquo;ve added
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_vec()&lt;/code>&lt;/a> (along with
&lt;a href="https://purrr.tidyverse.org/reference/map2.html" target="_blank" rel="noopener">&lt;code>map2_vec()&lt;/code>&lt;/a>, and
&lt;a href="https://purrr.tidyverse.org/reference/pmap.html" target="_blank" rel="noopener">&lt;code>pmap_vec()&lt;/code>&lt;/a>) to handle more types of vectors.
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_vec()&lt;/code>&lt;/a> extends
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_lgl()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_int()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_dbl()&lt;/code>&lt;/a>, and
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_chr()&lt;/code>&lt;/a> to arbitrary types of vectors, like dates, factors, and date-times:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_vec&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>\&lt;span class='o'>(&lt;/span>&lt;span class='nv'>i&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/factor.html'>factor&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>letters&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='nv'>i&lt;/span>&lt;span class='o'>]&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] a b c&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Levels: a b c&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_vec&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>\&lt;span class='o'>(&lt;/span>&lt;span class='nv'>i&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/factor.html'>factor&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>letters&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='nv'>i&lt;/span>&lt;span class='o'>]&lt;/span>, levels &lt;span class='o'>=&lt;/span> &lt;span class='nv'>letters&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='m'>4&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>]&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] a b c&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Levels: d c b a&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_vec&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>\&lt;span class='o'>(&lt;/span>&lt;span class='nv'>i&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/as.Date.html'>as.Date&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/ISOdatetime.html'>ISOdate&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>i&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='m'>2022&lt;/span>, &lt;span class='m'>10&lt;/span>, &lt;span class='m'>5&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] "2023-10-05" "2024-10-05" "2025-10-05"&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_vec&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>\&lt;span class='o'>(&lt;/span>&lt;span class='nv'>i&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/ISOdatetime.html'>ISOdate&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>i&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='m'>2022&lt;/span>, &lt;span class='m'>10&lt;/span>, &lt;span class='m'>5&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] "2023-10-05 12:00:00 GMT" "2024-10-05 12:00:00 GMT"&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [3] "2025-10-05 12:00:00 GMT"&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_vec()&lt;/code>&lt;/a> exists somewhat in the middle of base R&amp;rsquo;s
&lt;a href="https://rdrr.io/r/base/lapply.html" target="_blank" rel="noopener">&lt;code>sapply()&lt;/code>&lt;/a> and
&lt;a href="https://rdrr.io/r/base/lapply.html" target="_blank" rel="noopener">&lt;code>vapply()&lt;/code>&lt;/a>. Unlike
&lt;a href="https://rdrr.io/r/base/lapply.html" target="_blank" rel="noopener">&lt;code>sapply()&lt;/code>&lt;/a> it will always return a simpler vector, erroring if there&amp;rsquo;s no common type:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"a"&lt;/span>, &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_vec&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>identity&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'> in `map_vec()`:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> Can't combine `&amp;lt;list&amp;gt;[[1]]` &amp;lt;character&amp;gt; and `&amp;lt;list&amp;gt;[[2]]` &amp;lt;double&amp;gt;.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>If you want to require a certain type of output, supply &lt;code>.ptype&lt;/code>, making
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_vec()&lt;/code>&lt;/a> behave more like
&lt;a href="https://rdrr.io/r/base/lapply.html" target="_blank" rel="noopener">&lt;code>vapply()&lt;/code>&lt;/a>. &lt;code>ptype&lt;/code> is short for prototype, and should be a vector that exemplifies the type of output you expect.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"a"&lt;/span>, &lt;span class='s'>"b"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;/span>
&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_vec&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>identity&lt;/span>, .ptype &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/character.html'>character&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] "a" "b"&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='c'># will error if the result can't be automatically coerced&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'># to the specified ptype&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map_vec&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>identity&lt;/span>, .ptype &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/integer.html'>integer&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'> in `map_vec()`:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> Can't convert `&amp;lt;list&amp;gt;[[1]]` &amp;lt;character&amp;gt; to &amp;lt;integer&amp;gt;.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>We don&amp;rsquo;t expect you to know or memorise the
&lt;a href="https://vctrs.r-lib.org/reference/faq-compatibility-types.html" target="_blank" rel="noopener">rules that vctrs uses for coercion&lt;/a>; our hope is that they&amp;rsquo;ll become second nature as we steadily ensure that every tidyverse function follows the same rules.&lt;/p>
&lt;h2 id="keep_at-and-discard_at">&lt;code>keep_at()&lt;/code> and &lt;code>discard_at()&lt;/code>
&lt;a href="#keep_at-and-discard_at">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>purrr has gained a new pair of functions,
&lt;a href="https://purrr.tidyverse.org/reference/keep_at.html" target="_blank" rel="noopener">&lt;code>keep_at()&lt;/code>&lt;/a> and
&lt;a href="https://purrr.tidyverse.org/reference/keep_at.html" target="_blank" rel="noopener">&lt;code>discard_at()&lt;/code>&lt;/a>, that work like
&lt;a href="https://purrr.tidyverse.org/reference/keep.html" target="_blank" rel="noopener">&lt;code>keep()&lt;/code>&lt;/a> and
&lt;a href="https://purrr.tidyverse.org/reference/keep.html" target="_blank" rel="noopener">&lt;code>discard()&lt;/code>&lt;/a> but operate on names rather than values:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>a &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>, b &lt;span class='o'>=&lt;/span> &lt;span class='m'>2&lt;/span>, c &lt;span class='o'>=&lt;/span> &lt;span class='m'>3&lt;/span>, D &lt;span class='o'>=&lt;/span> &lt;span class='m'>4&lt;/span>, E &lt;span class='o'>=&lt;/span> &lt;span class='m'>5&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/keep_at.html'>keep_at&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"a"&lt;/span>, &lt;span class='s'>"b"&lt;/span>, &lt;span class='s'>"c"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 3&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ a: num 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ b: num 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ c: num 3&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/keep_at.html'>discard_at&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"a"&lt;/span>, &lt;span class='s'>"b"&lt;/span>, &lt;span class='s'>"c"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ D: num 4&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ E: num 5&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Alternatively, you can supply a function that is called with the names of the elements and should return a logical vector describing which elements to keep/discard:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>is_lower_case&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='kr'>function&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nv'>x&lt;/span> &lt;span class='o'>==&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/chartr.html'>tolower&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/keep_at.html'>keep_at&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>is_lower_case&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $a&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $b&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $c&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 3&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>You can now also pass such a function to all other &lt;code>_at()&lt;/code> functions:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/modify.html'>modify_at&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>is_lower_case&lt;/span>, \&lt;span class='o'>(&lt;/span>&lt;span class='nv'>x&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='nv'>x&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='m'>100&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 5&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ a: num 100&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ b: num 200&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ c: num 300&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ D: num 4&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ E: num 5&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="flattening-and-simplification">Flattening and simplification
&lt;a href="#flattening-and-simplification">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Last, but not least, we&amp;rsquo;ve reworked the family of functions that flatten and simplify lists. These caused us a lot of confusion internally because folks (and different packages) used the same words to mean different things. Now there are three main functions that share a common prefix that makes it clear that they all operate on lists:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://purrr.tidyverse.org/reference/list_flatten.html" target="_blank" rel="noopener">&lt;code>list_flatten()&lt;/code>&lt;/a> removes a single level of hierarchy from a list; the output is always a list.&lt;/li>
&lt;li>
&lt;a href="https://purrr.tidyverse.org/reference/list_simplify.html" target="_blank" rel="noopener">&lt;code>list_simplify()&lt;/code>&lt;/a> reduces a list to a homogeneous vector; the output is always the same length as the input.&lt;/li>
&lt;li>
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_c()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_cbind()&lt;/code>&lt;/a>, and
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_rbind()&lt;/code>&lt;/a> concatenate the elements of a list to produce a vector or data frame. There are no constraints on the output.&lt;/li>
&lt;/ul>
&lt;p>These functions have lead us to &lt;strong>supersede&lt;/strong> a number of functions. This means that they are not going away but we no longer recommend them, and they will receive only critical bug fixes.&lt;/p>
&lt;ul>
&lt;li>&lt;code>flatten()&lt;/code> has been superseded by
&lt;a href="https://purrr.tidyverse.org/reference/list_flatten.html" target="_blank" rel="noopener">&lt;code>list_flatten()&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;code>flatten_lgl()&lt;/code>, &lt;code>flatten_int()&lt;/code>, &lt;code>flatten_dbl()&lt;/code>, and &lt;code>flatten_chr()&lt;/code> have been superseded by
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_c()&lt;/code>&lt;/a>.&lt;/li>
&lt;li>
&lt;a href="https://purrr.tidyverse.org/reference/flatten.html" target="_blank" rel="noopener">&lt;code>flatten_dfr()&lt;/code>&lt;/a> and
&lt;a href="https://purrr.tidyverse.org/reference/flatten.html" target="_blank" rel="noopener">&lt;code>flatten_dfc()&lt;/code>&lt;/a> have been superseded by
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_rbind()&lt;/code>&lt;/a> and
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_cbind()&lt;/code>&lt;/a> respectively.
&lt;a href="https://purrr.tidyverse.org/reference/flatten.html" target="_blank" rel="noopener">&lt;code>flatten_dfr()&lt;/code>&lt;/a> had some particularly puzzling edge cases when the inputs would be flattened into columns.&lt;/li>
&lt;li>
&lt;a href="https://purrr.tidyverse.org/reference/map_dfr.html" target="_blank" rel="noopener">&lt;code>map_dfc()&lt;/code>&lt;/a> and
&lt;a href="https://purrr.tidyverse.org/reference/map_dfr.html" target="_blank" rel="noopener">&lt;code>map_dfr()&lt;/code>&lt;/a> (and their &lt;code>map2&lt;/code> and &lt;code>pmap&lt;/code> variants) have been superseded in favour of using the appropriate map function along with
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_rbind()&lt;/code>&lt;/a> or
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_cbind()&lt;/code>&lt;/a>.&lt;/li>
&lt;li>
&lt;a href="https://purrr.tidyverse.org/reference/as_vector.html" target="_blank" rel="noopener">&lt;code>simplify()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/as_vector.html" target="_blank" rel="noopener">&lt;code>simplify_all()&lt;/code>&lt;/a>, and
&lt;a href="https://purrr.tidyverse.org/reference/as_vector.html" target="_blank" rel="noopener">&lt;code>as_vector()&lt;/code>&lt;/a> have been superseded in favour of
&lt;a href="https://purrr.tidyverse.org/reference/list_simplify.html" target="_blank" rel="noopener">&lt;code>list_simplify()&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="flattening">Flattening
&lt;a href="#flattening">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>
&lt;a href="https://purrr.tidyverse.org/reference/list_flatten.html" target="_blank" rel="noopener">&lt;code>list_flatten()&lt;/code>&lt;/a> removes one layer of hierarchy from a list. In other words, if any of the children of the list are themselves lists, the contents of those lists are inlined into the parent:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>2&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>3&lt;/span>, &lt;span class='m'>4&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='m'>5&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ :List of 3&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ..$ : num 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ..$ :List of 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; .. ..$ : num 3&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; .. ..$ : num 4&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ..$ : num 5&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_flatten.html'>list_flatten&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 4&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ :List of 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ..$ : num 3&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ..$ : num 4&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 5&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_flatten.html'>list_flatten&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_flatten.html'>list_flatten&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 5&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 3&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 4&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 5&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>
&lt;a href="https://purrr.tidyverse.org/reference/list_flatten.html" target="_blank" rel="noopener">&lt;code>list_flatten()&lt;/code>&lt;/a> always returns a list; once a list is as flat as it can get (i.e. none of its children contain lists), it leaves the input unchanged.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>x&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_flatten.html'>list_flatten&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_flatten.html'>list_flatten&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_flatten.html'>list_flatten&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 5&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 3&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 4&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ : num 5&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="simplification">Simplification
&lt;a href="#simplification">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>
&lt;a href="https://purrr.tidyverse.org/reference/list_simplify.html" target="_blank" rel="noopener">&lt;code>list_simplify()&lt;/code>&lt;/a> maintains the length of the input, but produces a simpler type:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='m'>2&lt;/span>, &lt;span class='m'>3&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_simplify.html'>list_simplify&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 1 2 3&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"a"&lt;/span>, &lt;span class='s'>"b"&lt;/span>, &lt;span class='s'>"c"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_simplify.html'>list_simplify&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] "a" "b" "c"&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Because the length must stay the same, it will only succeed if every element has length 1:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_simplify.html'>list_simplify&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='m'>2&lt;/span>, &lt;span class='m'>3&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>4&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'> in `list_simplify()`:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> `x[[3]]` must have size 1, not size 2.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_simplify.html'>list_simplify&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='m'>2&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/integer.html'>integer&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'> in `list_simplify()`:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> `x[[3]]` must have size 1, not size 0.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Because the result must be a simpler vector, all the components must be compatible:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_simplify.html'>list_simplify&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='m'>2&lt;/span>, &lt;span class='s'>"a"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'> in `list_simplify()`:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> Can't combine `&amp;lt;list&amp;gt;[[1]]` &amp;lt;double&amp;gt; and `&amp;lt;list&amp;gt;[[3]]` &amp;lt;character&amp;gt;.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>If you need to simplify if it&amp;rsquo;s possible, but otherwise leave the input unchanged, use &lt;code>strict = FALSE&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_simplify.html'>list_simplify&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='m'>2&lt;/span>, &lt;span class='s'>"a"&lt;/span>&lt;span class='o'>)&lt;/span>, strict &lt;span class='o'>=&lt;/span> &lt;span class='kc'>FALSE&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [[1]]&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [[2]]&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [[3]]&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] "a"&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>If you want to be specific about the type you want,
&lt;a href="https://purrr.tidyverse.org/reference/list_simplify.html" target="_blank" rel="noopener">&lt;code>list_simplify()&lt;/code>&lt;/a> can take the same prototype argument as
&lt;a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">&lt;code>map_vec()&lt;/code>&lt;/a>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='m'>2&lt;/span>, &lt;span class='m'>3&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_simplify.html'>list_simplify&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>ptype &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/integer.html'>integer&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 1 2 3&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='m'>2&lt;/span>, &lt;span class='m'>3&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_simplify.html'>list_simplify&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>ptype &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/factor.html'>factor&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'> in `list_simplify()`:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> Can't convert `&amp;lt;list&amp;gt;[[1]]` &amp;lt;double&amp;gt; to &amp;lt;factor&amp;lt;&amp;gt;&amp;gt;.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="concatenation">Concatenation
&lt;a href="#concatenation">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_c()&lt;/code>&lt;/a>,
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_cbind()&lt;/code>&lt;/a>, and
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_rbind()&lt;/code>&lt;/a> concatenate all elements together in a similar way to using &lt;code>do.call(c)&lt;/code> or &lt;code>do.call(rbind)&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> . Unlike
&lt;a href="https://purrr.tidyverse.org/reference/list_simplify.html" target="_blank" rel="noopener">&lt;code>list_simplify()&lt;/code>&lt;/a>, this allows the elements to be different lengths:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='m'>2&lt;/span>, &lt;span class='m'>3&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_c.html'>list_c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 1 2 3&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>, &lt;span class='m'>2&lt;/span>, &lt;span class='m'>3&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>4&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/integer.html'>integer&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_c.html'>list_c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 1 2 3 4&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The downside of this flexibility is that these functions break the connection between the input and the output. This reveals that
&lt;a href="https://purrr.tidyverse.org/reference/map_dfr.html" target="_blank" rel="noopener">&lt;code>map_dfr()&lt;/code>&lt;/a> and
&lt;a href="https://purrr.tidyverse.org/reference/map_dfr.html" target="_blank" rel="noopener">&lt;code>map_dfc()&lt;/code>&lt;/a> don&amp;rsquo;t really belong to the map family because they don&amp;rsquo;t maintain a 1-to-1 mapping between input and output: there&amp;rsquo;s reliable no way to associate a row in the output with an element in an input.&lt;/p>
&lt;p>For this reason,
&lt;a href="https://purrr.tidyverse.org/reference/map_dfr.html" target="_blank" rel="noopener">&lt;code>map_dfr()&lt;/code>&lt;/a> and
&lt;a href="https://purrr.tidyverse.org/reference/map_dfr.html" target="_blank" rel="noopener">&lt;code>map_dfc()&lt;/code>&lt;/a> (and the &lt;code>map2&lt;/code> and &lt;code>pmap&lt;/code>) variants are superseded and we recommend switching to an explicit call to
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_rbind()&lt;/code>&lt;/a> or
&lt;a href="https://purrr.tidyverse.org/reference/list_c.html" target="_blank" rel="noopener">&lt;code>list_cbind()&lt;/code>&lt;/a> instead:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>paths&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map_dfr.html'>map_dfr&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>read_csv&lt;/span>, .id &lt;span class='o'>=&lt;/span> &lt;span class='s'>"path"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'># now&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>paths&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/map.html'>map&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>read_csv&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_c.html'>list_rbind&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>names_to &lt;span class='o'>=&lt;/span> &lt;span class='s'>"path"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This new behaviour also affects to
&lt;a href="https://purrr.tidyverse.org/reference/accumulate.html" target="_blank" rel="noopener">&lt;code>accumulate()&lt;/code>&lt;/a> and
&lt;a href="https://purrr.tidyverse.org/reference/accumulate.html" target="_blank" rel="noopener">&lt;code>accumulate2()&lt;/code>&lt;/a>, which previously had an idiosyncratic approach to simplification.&lt;/p>
&lt;h3 id="list_assign">&lt;code>list_assign()&lt;/code>
&lt;a href="#list_assign">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>There&amp;rsquo;s one other new function that isn&amp;rsquo;t directly related to flattening and friends, but shares the &lt;code>list_&lt;/code> prefix:
&lt;a href="https://purrr.tidyverse.org/reference/list_assign.html" target="_blank" rel="noopener">&lt;code>list_assign()&lt;/code>&lt;/a>.
&lt;a href="https://purrr.tidyverse.org/reference/list_assign.html" target="_blank" rel="noopener">&lt;code>list_assign()&lt;/code>&lt;/a> is similar to
&lt;a href="https://purrr.tidyverse.org/reference/list_assign.html" target="_blank" rel="noopener">&lt;code>list_modify()&lt;/code>&lt;/a> but it doesn&amp;rsquo;t work recursively. This is a mildly confusing feature of
&lt;a href="https://purrr.tidyverse.org/reference/list_assign.html" target="_blank" rel="noopener">&lt;code>list_modify()&lt;/code>&lt;/a> that it&amp;rsquo;s easy to miss in the documentation.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>a &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_assign.html'>list_modify&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>b &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ x: num 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ y:List of 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ..$ a: num 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ..$ b: num 1&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>
&lt;a href="https://purrr.tidyverse.org/reference/list_assign.html" target="_blank" rel="noopener">&lt;code>list_assign()&lt;/code>&lt;/a> doesn&amp;rsquo;t recurse into sublists making it a bit easier to reason about:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>a &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://purrr.tidyverse.org/reference/list_assign.html'>list_assign&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/list.html'>list&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>b &lt;span class='o'>=&lt;/span> &lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; List of 2&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ x: num 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ y:List of 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ..$ b: num 2&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A massive thanks to all 162 contributors who have helped make purrr 1.0.0 happen!
&lt;a href="https://github.com/adamroyjones" target="_blank" rel="noopener">@adamroyjones&lt;/a>,
&lt;a href="https://github.com/afoltzm" target="_blank" rel="noopener">@afoltzm&lt;/a>,
&lt;a href="https://github.com/agilebean" target="_blank" rel="noopener">@agilebean&lt;/a>,
&lt;a href="https://github.com/ahjames11" target="_blank" rel="noopener">@ahjames11&lt;/a>,
&lt;a href="https://github.com/AHoerner" target="_blank" rel="noopener">@AHoerner&lt;/a>,
&lt;a href="https://github.com/alberto-dellera" target="_blank" rel="noopener">@alberto-dellera&lt;/a>,
&lt;a href="https://github.com/alex-gable" target="_blank" rel="noopener">@alex-gable&lt;/a>,
&lt;a href="https://github.com/AliciaSchep" target="_blank" rel="noopener">@AliciaSchep&lt;/a>,
&lt;a href="https://github.com/ArtemSokolov" target="_blank" rel="noopener">@ArtemSokolov&lt;/a>,
&lt;a href="https://github.com/AshesITR" target="_blank" rel="noopener">@AshesITR&lt;/a>,
&lt;a href="https://github.com/asmlgkj" target="_blank" rel="noopener">@asmlgkj&lt;/a>,
&lt;a href="https://github.com/aubryvetepi" target="_blank" rel="noopener">@aubryvetepi&lt;/a>,
&lt;a href="https://github.com/balwierz" target="_blank" rel="noopener">@balwierz&lt;/a>,
&lt;a href="https://github.com/bastianilso" target="_blank" rel="noopener">@bastianilso&lt;/a>,
&lt;a href="https://github.com/batpigandme" target="_blank" rel="noopener">@batpigandme&lt;/a>,
&lt;a href="https://github.com/bebersb" target="_blank" rel="noopener">@bebersb&lt;/a>,
&lt;a href="https://github.com/behrman" target="_blank" rel="noopener">@behrman&lt;/a>,
&lt;a href="https://github.com/benjaminschwetz" target="_blank" rel="noopener">@benjaminschwetz&lt;/a>,
&lt;a href="https://github.com/billdenney" target="_blank" rel="noopener">@billdenney&lt;/a>,
&lt;a href="https://github.com/Breza" target="_blank" rel="noopener">@Breza&lt;/a>,
&lt;a href="https://github.com/brunj7" target="_blank" rel="noopener">@brunj7&lt;/a>,
&lt;a href="https://github.com/BrunoGrandePhD" target="_blank" rel="noopener">@BrunoGrandePhD&lt;/a>,
&lt;a href="https://github.com/CGMossa" target="_blank" rel="noopener">@CGMossa&lt;/a>,
&lt;a href="https://github.com/cgoo4" target="_blank" rel="noopener">@cgoo4&lt;/a>,
&lt;a href="https://github.com/chsafouane" target="_blank" rel="noopener">@chsafouane&lt;/a>,
&lt;a href="https://github.com/chumbleycode" target="_blank" rel="noopener">@chumbleycode&lt;/a>,
&lt;a href="https://github.com/ColinFay" target="_blank" rel="noopener">@ColinFay&lt;/a>,
&lt;a href="https://github.com/CorradoLanera" target="_blank" rel="noopener">@CorradoLanera&lt;/a>,
&lt;a href="https://github.com/CPRyan" target="_blank" rel="noopener">@CPRyan&lt;/a>,
&lt;a href="https://github.com/czeildi" target="_blank" rel="noopener">@czeildi&lt;/a>,
&lt;a href="https://github.com/dan-reznik" target="_blank" rel="noopener">@dan-reznik&lt;/a>,
&lt;a href="https://github.com/DanChaltiel" target="_blank" rel="noopener">@DanChaltiel&lt;/a>,
&lt;a href="https://github.com/datawookie" target="_blank" rel="noopener">@datawookie&lt;/a>,
&lt;a href="https://github.com/dave-lovell" target="_blank" rel="noopener">@dave-lovell&lt;/a>,
&lt;a href="https://github.com/davidsjoberg" target="_blank" rel="noopener">@davidsjoberg&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/deann88" target="_blank" rel="noopener">@deann88&lt;/a>,
&lt;a href="https://github.com/dfalbel" target="_blank" rel="noopener">@dfalbel&lt;/a>,
&lt;a href="https://github.com/dhslone" target="_blank" rel="noopener">@dhslone&lt;/a>,
&lt;a href="https://github.com/dlependorf" target="_blank" rel="noopener">@dlependorf&lt;/a>,
&lt;a href="https://github.com/dllazarov" target="_blank" rel="noopener">@dllazarov&lt;/a>,
&lt;a href="https://github.com/dpprdan" target="_blank" rel="noopener">@dpprdan&lt;/a>,
&lt;a href="https://github.com/dracodoc" target="_blank" rel="noopener">@dracodoc&lt;/a>,
&lt;a href="https://github.com/echasnovski" target="_blank" rel="noopener">@echasnovski&lt;/a>,
&lt;a href="https://github.com/edo91" target="_blank" rel="noopener">@edo91&lt;/a>,
&lt;a href="https://github.com/edoardo-oliveri-sdg" target="_blank" rel="noopener">@edoardo-oliveri-sdg&lt;/a>,
&lt;a href="https://github.com/erictleung" target="_blank" rel="noopener">@erictleung&lt;/a>,
&lt;a href="https://github.com/eyayaw" target="_blank" rel="noopener">@eyayaw&lt;/a>,
&lt;a href="https://github.com/felixhell2004" target="_blank" rel="noopener">@felixhell2004&lt;/a>,
&lt;a href="https://github.com/florianm" target="_blank" rel="noopener">@florianm&lt;/a>,
&lt;a href="https://github.com/florisvdh" target="_blank" rel="noopener">@florisvdh&lt;/a>,
&lt;a href="https://github.com/flying-sheep" target="_blank" rel="noopener">@flying-sheep&lt;/a>,
&lt;a href="https://github.com/fpinter" target="_blank" rel="noopener">@fpinter&lt;/a>,
&lt;a href="https://github.com/frankzhang21" target="_blank" rel="noopener">@frankzhang21&lt;/a>,
&lt;a href="https://github.com/gaborcsardi" target="_blank" rel="noopener">@gaborcsardi&lt;/a>,
&lt;a href="https://github.com/GarrettMooney" target="_blank" rel="noopener">@GarrettMooney&lt;/a>,
&lt;a href="https://github.com/gdurif" target="_blank" rel="noopener">@gdurif&lt;/a>,
&lt;a href="https://github.com/ge-li" target="_blank" rel="noopener">@ge-li&lt;/a>,
&lt;a href="https://github.com/ggrothendieck" target="_blank" rel="noopener">@ggrothendieck&lt;/a>,
&lt;a href="https://github.com/grayskripko" target="_blank" rel="noopener">@grayskripko&lt;/a>,
&lt;a href="https://github.com/gregleleu" target="_blank" rel="noopener">@gregleleu&lt;/a>,
&lt;a href="https://github.com/gregorp" target="_blank" rel="noopener">@gregorp&lt;/a>,
&lt;a href="https://github.com/hadley" target="_blank" rel="noopener">@hadley&lt;/a>,
&lt;a href="https://github.com/hendrikvanb" target="_blank" rel="noopener">@hendrikvanb&lt;/a>,
&lt;a href="https://github.com/holgerbrandl" target="_blank" rel="noopener">@holgerbrandl&lt;/a>,
&lt;a href="https://github.com/hriebl" target="_blank" rel="noopener">@hriebl&lt;/a>,
&lt;a href="https://github.com/hsloot" target="_blank" rel="noopener">@hsloot&lt;/a>,
&lt;a href="https://github.com/huftis" target="_blank" rel="noopener">@huftis&lt;/a>,
&lt;a href="https://github.com/iago-pssjd" target="_blank" rel="noopener">@iago-pssjd&lt;/a>,
&lt;a href="https://github.com/iamnicogomez" target="_blank" rel="noopener">@iamnicogomez&lt;/a>,
&lt;a href="https://github.com/IndrajeetPatil" target="_blank" rel="noopener">@IndrajeetPatil&lt;/a>,
&lt;a href="https://github.com/irudnyts" target="_blank" rel="noopener">@irudnyts&lt;/a>,
&lt;a href="https://github.com/izahn" target="_blank" rel="noopener">@izahn&lt;/a>,
&lt;a href="https://github.com/jameslairdsmith" target="_blank" rel="noopener">@jameslairdsmith&lt;/a>,
&lt;a href="https://github.com/jedwards24" target="_blank" rel="noopener">@jedwards24&lt;/a>,
&lt;a href="https://github.com/jemus42" target="_blank" rel="noopener">@jemus42&lt;/a>,
&lt;a href="https://github.com/jennybc" target="_blank" rel="noopener">@jennybc&lt;/a>,
&lt;a href="https://github.com/jhrcook" target="_blank" rel="noopener">@jhrcook&lt;/a>,
&lt;a href="https://github.com/jimhester" target="_blank" rel="noopener">@jimhester&lt;/a>,
&lt;a href="https://github.com/jimjam-slam" target="_blank" rel="noopener">@jimjam-slam&lt;/a>,
&lt;a href="https://github.com/jnolis" target="_blank" rel="noopener">@jnolis&lt;/a>,
&lt;a href="https://github.com/joelgombin" target="_blank" rel="noopener">@joelgombin&lt;/a>,
&lt;a href="https://github.com/jonathan-g" target="_blank" rel="noopener">@jonathan-g&lt;/a>,
&lt;a href="https://github.com/jpmarindiaz" target="_blank" rel="noopener">@jpmarindiaz&lt;/a>,
&lt;a href="https://github.com/jxu" target="_blank" rel="noopener">@jxu&lt;/a>,
&lt;a href="https://github.com/jzadra" target="_blank" rel="noopener">@jzadra&lt;/a>,
&lt;a href="https://github.com/karchjd" target="_blank" rel="noopener">@karchjd&lt;/a>,
&lt;a href="https://github.com/karjamatti" target="_blank" rel="noopener">@karjamatti&lt;/a>,
&lt;a href="https://github.com/kbzsl" target="_blank" rel="noopener">@kbzsl&lt;/a>,
&lt;a href="https://github.com/krlmlr" target="_blank" rel="noopener">@krlmlr&lt;/a>,
&lt;a href="https://github.com/lahvak" target="_blank" rel="noopener">@lahvak&lt;/a>,
&lt;a href="https://github.com/lambdamoses" target="_blank" rel="noopener">@lambdamoses&lt;/a>,
&lt;a href="https://github.com/lasuk" target="_blank" rel="noopener">@lasuk&lt;/a>,
&lt;a href="https://github.com/lionel-" target="_blank" rel="noopener">@lionel-&lt;/a>,
&lt;a href="https://github.com/lorenzwalthert" target="_blank" rel="noopener">@lorenzwalthert&lt;/a>,
&lt;a href="https://github.com/LukasWallrich" target="_blank" rel="noopener">@LukasWallrich&lt;/a>,
&lt;a href="https://github.com/LukaszDerylo" target="_blank" rel="noopener">@LukaszDerylo&lt;/a>,
&lt;a href="https://github.com/malcolmbarrett" target="_blank" rel="noopener">@malcolmbarrett&lt;/a>,
&lt;a href="https://github.com/MarceloRTonon" target="_blank" rel="noopener">@MarceloRTonon&lt;/a>,
&lt;a href="https://github.com/mattwarkentin" target="_blank" rel="noopener">@mattwarkentin&lt;/a>,
&lt;a href="https://github.com/maxheld83" target="_blank" rel="noopener">@maxheld83&lt;/a>,
&lt;a href="https://github.com/Maximilian-Stefan-Ernst" target="_blank" rel="noopener">@Maximilian-Stefan-Ernst&lt;/a>,
&lt;a href="https://github.com/mccroweyclinton-EPA" target="_blank" rel="noopener">@mccroweyclinton-EPA&lt;/a>,
&lt;a href="https://github.com/medewitt" target="_blank" rel="noopener">@medewitt&lt;/a>,
&lt;a href="https://github.com/meowcat" target="_blank" rel="noopener">@meowcat&lt;/a>,
&lt;a href="https://github.com/mgirlich" target="_blank" rel="noopener">@mgirlich&lt;/a>,
&lt;a href="https://github.com/mine-cetinkaya-rundel" target="_blank" rel="noopener">@mine-cetinkaya-rundel&lt;/a>,
&lt;a href="https://github.com/mitchelloharawild" target="_blank" rel="noopener">@mitchelloharawild&lt;/a>,
&lt;a href="https://github.com/mkoohafkan" target="_blank" rel="noopener">@mkoohafkan&lt;/a>,
&lt;a href="https://github.com/mlane3" target="_blank" rel="noopener">@mlane3&lt;/a>,
&lt;a href="https://github.com/mmuurr" target="_blank" rel="noopener">@mmuurr&lt;/a>,
&lt;a href="https://github.com/moodymudskipper" target="_blank" rel="noopener">@moodymudskipper&lt;/a>,
&lt;a href="https://github.com/mpettis" target="_blank" rel="noopener">@mpettis&lt;/a>,
&lt;a href="https://github.com/nealrichardson" target="_blank" rel="noopener">@nealrichardson&lt;/a>,
&lt;a href="https://github.com/Nelson-Gon" target="_blank" rel="noopener">@Nelson-Gon&lt;/a>,
&lt;a href="https://github.com/neuwirthe" target="_blank" rel="noopener">@neuwirthe&lt;/a>,
&lt;a href="https://github.com/njtierney" target="_blank" rel="noopener">@njtierney&lt;/a>,
&lt;a href="https://github.com/oduilln" target="_blank" rel="noopener">@oduilln&lt;/a>,
&lt;a href="https://github.com/papageorgiou" target="_blank" rel="noopener">@papageorgiou&lt;/a>,
&lt;a href="https://github.com/pat-s" target="_blank" rel="noopener">@pat-s&lt;/a>,
&lt;a href="https://github.com/paulponcet" target="_blank" rel="noopener">@paulponcet&lt;/a>,
&lt;a href="https://github.com/petyaracz" target="_blank" rel="noopener">@petyaracz&lt;/a>,
&lt;a href="https://github.com/phargarten2" target="_blank" rel="noopener">@phargarten2&lt;/a>,
&lt;a href="https://github.com/philiporlando" target="_blank" rel="noopener">@philiporlando&lt;/a>,
&lt;a href="https://github.com/q-w-a" target="_blank" rel="noopener">@q-w-a&lt;/a>,
&lt;a href="https://github.com/QuLogic" target="_blank" rel="noopener">@QuLogic&lt;/a>,
&lt;a href="https://github.com/ramiromagno" target="_blank" rel="noopener">@ramiromagno&lt;/a>,
&lt;a href="https://github.com/rcorty" target="_blank" rel="noopener">@rcorty&lt;/a>,
&lt;a href="https://github.com/reisner" target="_blank" rel="noopener">@reisner&lt;/a>,
&lt;a href="https://github.com/Rekyt" target="_blank" rel="noopener">@Rekyt&lt;/a>,
&lt;a href="https://github.com/roboes" target="_blank" rel="noopener">@roboes&lt;/a>,
&lt;a href="https://github.com/romainfrancois" target="_blank" rel="noopener">@romainfrancois&lt;/a>,
&lt;a href="https://github.com/rorynolan" target="_blank" rel="noopener">@rorynolan&lt;/a>,
&lt;a href="https://github.com/salim-b" target="_blank" rel="noopener">@salim-b&lt;/a>,
&lt;a href="https://github.com/sar8421" target="_blank" rel="noopener">@sar8421&lt;/a>,
&lt;a href="https://github.com/ScoobyQ" target="_blank" rel="noopener">@ScoobyQ&lt;/a>,
&lt;a href="https://github.com/sda030" target="_blank" rel="noopener">@sda030&lt;/a>,
&lt;a href="https://github.com/sgschreiber" target="_blank" rel="noopener">@sgschreiber&lt;/a>,
&lt;a href="https://github.com/sheffe" target="_blank" rel="noopener">@sheffe&lt;/a>,
&lt;a href="https://github.com/Shians" target="_blank" rel="noopener">@Shians&lt;/a>,
&lt;a href="https://github.com/ShixiangWang" target="_blank" rel="noopener">@ShixiangWang&lt;/a>,
&lt;a href="https://github.com/shosaco" target="_blank" rel="noopener">@shosaco&lt;/a>,
&lt;a href="https://github.com/siavash-babaei" target="_blank" rel="noopener">@siavash-babaei&lt;/a>,
&lt;a href="https://github.com/stephenashton-dhsc" target="_blank" rel="noopener">@stephenashton-dhsc&lt;/a>,
&lt;a href="https://github.com/stschiff" target="_blank" rel="noopener">@stschiff&lt;/a>,
&lt;a href="https://github.com/surdina" target="_blank" rel="noopener">@surdina&lt;/a>,
&lt;a href="https://github.com/tdawry" target="_blank" rel="noopener">@tdawry&lt;/a>,
&lt;a href="https://github.com/thebioengineer" target="_blank" rel="noopener">@thebioengineer&lt;/a>,
&lt;a href="https://github.com/TimTaylor" target="_blank" rel="noopener">@TimTaylor&lt;/a>,
&lt;a href="https://github.com/TimTeaFan" target="_blank" rel="noopener">@TimTeaFan&lt;/a>,
&lt;a href="https://github.com/tomjemmett" target="_blank" rel="noopener">@tomjemmett&lt;/a>,
&lt;a href="https://github.com/torbjorn" target="_blank" rel="noopener">@torbjorn&lt;/a>,
&lt;a href="https://github.com/tvatter" target="_blank" rel="noopener">@tvatter&lt;/a>,
&lt;a href="https://github.com/TylerGrantSmith" target="_blank" rel="noopener">@TylerGrantSmith&lt;/a>,
&lt;a href="https://github.com/vorpalvorpal" target="_blank" rel="noopener">@vorpalvorpal&lt;/a>,
&lt;a href="https://github.com/vspinu" target="_blank" rel="noopener">@vspinu&lt;/a>,
&lt;a href="https://github.com/wch" target="_blank" rel="noopener">@wch&lt;/a>,
&lt;a href="https://github.com/werkstattcodes" target="_blank" rel="noopener">@werkstattcodes&lt;/a>,
&lt;a href="https://github.com/williamlai2" target="_blank" rel="noopener">@williamlai2&lt;/a>,
&lt;a href="https://github.com/yogat3ch" target="_blank" rel="noopener">@yogat3ch&lt;/a>,
&lt;a href="https://github.com/yutannihilation" target="_blank" rel="noopener">@yutannihilation&lt;/a>, and
&lt;a href="https://github.com/zeehio" target="_blank" rel="noopener">@zeehio&lt;/a>.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>But if they used the tidyverse coercion rules. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>purrr 0.3.0</title><link>https://www.tidyverse.org/blog/2019/02/purrr-0-3-0/</link><pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2019/02/purrr-0-3-0/</guid><description>
&lt;p>We’re excited to announce the release of &lt;a href="https://purrr.tidyverse.org">purrr&lt;/a> 0.3.0! purrr enhances R’s functional programming toolkit by providing a complete and consistent set of tools for working with functions and vectors.&lt;/p>
&lt;pre class="r">&lt;code># Install the latest version with:
install.packages(&amp;quot;purrr&amp;quot;)
# Start working with purrr:
library(purrr)&lt;/code>&lt;/pre>
&lt;p>In this release, &lt;code>pluck()&lt;/code> gets a few new variants:&lt;/p>
&lt;ul>
&lt;li>&lt;p>&lt;code>pluck&amp;lt;-&lt;/code>, &lt;code>assign_in()&lt;/code> and &lt;code>modify_in()&lt;/code> allow deep modifications of nested structures.&lt;/p>&lt;/li>
&lt;li>&lt;p>&lt;code>chuck()&lt;/code> is a stricter variant of &lt;code>pluck()&lt;/code> that consistently fails instead of returning &lt;code>NULL&lt;/code> when the structure does not have the expected shape.&lt;/p>&lt;/li>
&lt;/ul>
&lt;p>A new set of tools helps limiting the rate at which a function is called:&lt;/p>
&lt;ul>
&lt;li>&lt;p>&lt;code>slowly()&lt;/code> forces a function to sleep between each invokation.&lt;/p>&lt;/li>
&lt;li>&lt;p>&lt;code>insistently()&lt;/code> automatically invokes a function again on error until it succeeds, and sleeps between invokations.&lt;/p>&lt;/li>
&lt;li>&lt;p>The &lt;code>rate_delay()&lt;/code> and &lt;code>rate_backoff()&lt;/code> helpers control the invokation rate of &lt;code>slowly()&lt;/code> and &lt;code>insistently()&lt;/code>.&lt;/p>&lt;/li>
&lt;/ul>
&lt;p>The reduce and map functions gain a few improvements:&lt;/p>
&lt;ul>
&lt;li>&lt;p>&lt;code>map_if()&lt;/code> accepts an optional function with the &lt;code>.else&lt;/code> parameter. This function is applied on elements for which the predicate is &lt;code>FALSE&lt;/code>.&lt;/p>&lt;/li>
&lt;li>&lt;p>&lt;code>map_at()&lt;/code> now accepts &lt;code>vars()&lt;/code> selections. This lets you use selection helpers like &lt;code>dplyr::starts_with()&lt;/code> to determine the elements of a list which should be mapped.&lt;/p>&lt;/li>
&lt;li>&lt;p>&lt;code>reduce()&lt;/code> now supports early termination of a computation. Just return a value wrapped in a &lt;code>done()&lt;/code> to signal to &lt;code>reduce()&lt;/code> that you’re done.&lt;/p>&lt;/li>
&lt;/ul>
&lt;p>Besides these new functions and tools, purrr 0.3.0 is mostly a polishing release. We have improved the consistency of behaviour:&lt;/p>
&lt;ul>
&lt;li>&lt;p>&lt;code>modify()&lt;/code> is now a wrapper around &lt;code>[[&amp;lt;-&lt;/code> instead of &lt;code>[&amp;lt;-&lt;/code>. This makes it compatible with a larger variety of S3 vector classes.&lt;/p>&lt;/li>
&lt;li>&lt;p>Predicate functions (such that you would pass to &lt;code>map_if()&lt;/code>) now must return a single &lt;code>TRUE&lt;/code> or &lt;code>FALSE&lt;/code>. Missing values and integers are no longer valid predicate outputs.&lt;/p>&lt;/li>
&lt;/ul>
&lt;p>Finally, we improved the consistency of the interface:&lt;/p>
&lt;ul>
&lt;li>&lt;p>The direction of iteration/application is now consistently specified with a &lt;code>.dir&lt;/code> argument.&lt;/p>&lt;/li>
&lt;li>&lt;p>Many missing functions were added to fill the gaps: &lt;code>accumulate2()&lt;/code>, &lt;code>imodify()&lt;/code>, &lt;code>map_depth()&lt;/code>, …&lt;/p>&lt;/li>
&lt;li>&lt;p>&lt;code>partial()&lt;/code> has a much improved and more flexible interface.&lt;/p>&lt;/li>
&lt;/ul>
&lt;p>Find a detailed account of the changes in the &lt;a href="https://github.com/tidyverse/purrr/blob/master/NEWS.md#purrr-030">NEWS&lt;/a> file.&lt;/p>
&lt;div id="new-pluck-variants" class="section level2">
&lt;h2>New pluck variants&lt;/h2>
&lt;p>&lt;code>pluck()&lt;/code> implements a generalised form of &lt;code>[[&lt;/code> that allow you to index deeply and flexibly into data structures. For instance, &lt;code>pluck(x, &amp;quot;foo&amp;quot;, 2)&lt;/code> is equivalent to &lt;code>x[[&amp;quot;foo&amp;quot;]][[2]]&lt;/code>. You can also supply a default value in case the element does not exist. For instance, &lt;code>pluck(x, &amp;quot;foo&amp;quot;, 2, .default = NA)&lt;/code> is equivalent to &lt;code>x[[&amp;quot;foo&amp;quot;]][[2]]&lt;/code>, returning an &lt;code>NA&lt;/code> if that element doesn’t exist. purrr 0.3.0 introduces variants of &lt;code>pluck()&lt;/code> to make it easier to work with deep data structures.&lt;/p>
&lt;div id="pluck-assignment" class="section level3">
&lt;h3>Pluck assignment&lt;/h3>
&lt;p>This release introduces the new functions &lt;code>pluck&amp;lt;-&lt;/code>, &lt;code>assign_in()&lt;/code> and &lt;code>modify_in()&lt;/code> as assignment variants of &lt;code>pluck()&lt;/code>. To illustrate deep assignment, let’s create a nested data structure:&lt;/p>
&lt;pre class="r">&lt;code>x &amp;lt;- list(foo = list(1, 2), bar = list(3, 4))
str(x)
#&amp;gt; List of 2
#&amp;gt; $ foo:List of 2
#&amp;gt; ..$ : num 1
#&amp;gt; ..$ : num 2
#&amp;gt; $ bar:List of 2
#&amp;gt; ..$ : num 3
#&amp;gt; ..$ : num 4&lt;/code>&lt;/pre>
&lt;p>This sort of repeated structure is the kind of data where &lt;code>pluck()&lt;/code> shines:&lt;/p>
&lt;pre class="r">&lt;code>pluck(x, &amp;quot;foo&amp;quot;, 2)
#&amp;gt; [1] 2
pluck(x, &amp;quot;bar&amp;quot;, 1)
#&amp;gt; [1] 3&lt;/code>&lt;/pre>
&lt;p>You can now use the same syntax to modify the data:&lt;/p>
&lt;pre class="r">&lt;code>pluck(x, &amp;quot;foo&amp;quot;, 2) &amp;lt;- 100
str(x)
#&amp;gt; List of 2
#&amp;gt; $ foo:List of 2
#&amp;gt; ..$ : num 1
#&amp;gt; ..$ : num 100
#&amp;gt; $ bar:List of 2
#&amp;gt; ..$ : num 3
#&amp;gt; ..$ : num 4&lt;/code>&lt;/pre>
&lt;p>&lt;code>pluck&amp;lt;-&lt;/code> also has a functional form that does not modify objects in your environment, but instead returns a modified copy:&lt;/p>
&lt;pre class="r">&lt;code>out &amp;lt;- assign_in(x, list(&amp;quot;foo&amp;quot;, 2), 2000)
# The object is still the same as before
str(x)
#&amp;gt; List of 2
#&amp;gt; $ foo:List of 2
#&amp;gt; ..$ : num 1
#&amp;gt; ..$ : num 100
#&amp;gt; $ bar:List of 2
#&amp;gt; ..$ : num 3
#&amp;gt; ..$ : num 4
# The modified data is in `out`
str(out)
#&amp;gt; List of 2
#&amp;gt; $ foo:List of 2
#&amp;gt; ..$ : num 1
#&amp;gt; ..$ : num 2000
#&amp;gt; $ bar:List of 2
#&amp;gt; ..$ : num 3
#&amp;gt; ..$ : num 4&lt;/code>&lt;/pre>
&lt;p>Finally, &lt;code>modify_in()&lt;/code> is a variant of &lt;code>modify()&lt;/code> that only changes the pluck location with the result of applying a function:&lt;/p>
&lt;pre class="r">&lt;code>out &amp;lt;- modify_in(x, list(&amp;quot;foo&amp;quot;, 2), as.character)
str(out)
#&amp;gt; List of 2
#&amp;gt; $ foo:List of 2
#&amp;gt; ..$ : num 1
#&amp;gt; ..$ : chr &amp;quot;100&amp;quot;
#&amp;gt; $ bar:List of 2
#&amp;gt; ..$ : num 3
#&amp;gt; ..$ : num 4&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="stricter-pluck" class="section level3">
&lt;h3>Stricter pluck()&lt;/h3>
&lt;p>Thanks to Daniel Barnett (&lt;span class="citation">@daniel-barnett&lt;/span> on Github), &lt;code>pluck()&lt;/code> now has a stricter cousin &lt;code>chuck()&lt;/code>. Whereas &lt;code>pluck()&lt;/code> is very permissive regarding non-existing locations and returns &lt;code>NULL&lt;/code> in these cases, and &lt;code>[[&lt;/code> inconsistently returns &lt;code>NULL&lt;/code>, &lt;code>NA&lt;/code>, or throws an error, &lt;code>chuck()&lt;/code> fails consistently with informative messages (i.e., it “chucks” an error message):&lt;/p>
&lt;pre class="r">&lt;code>pluck(list(1), &amp;quot;foo&amp;quot;)
#&amp;gt; NULL
chuck(list(1), &amp;quot;foo&amp;quot;)
#&amp;gt; Error: Index 1 is attempting to pluck from an unnamed vector using a string name&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div id="rates" class="section level2">
&lt;h2>Rates&lt;/h2>
&lt;p>Thanks to Richie Cotton (&lt;span class="citation">@richierocks&lt;/span>) and Ian Lyttle (&lt;span class="citation">@ijlyttle&lt;/span>), purrr gains a function operator to make a function call itself repeatedly when an error occurs.&lt;/p>
&lt;pre class="r">&lt;code>counter &amp;lt;- 0
f &amp;lt;- function(...) {
if (counter &amp;lt; 2) {
counter &amp;lt;&amp;lt;- counter + 1
stop(&amp;quot;tilt!&amp;quot;)
}
&amp;quot;result&amp;quot;
}
f()
#&amp;gt; Error in f(): tilt!&lt;/code>&lt;/pre>
&lt;p>If the function is wrapped with &lt;code>insistently()&lt;/code>, it will try a few times before giving up:&lt;/p>
&lt;pre class="r">&lt;code># Reset counter
counter &amp;lt;- 0
f2 &amp;lt;- insistently(f)
f2()
#&amp;gt; [1] &amp;quot;result&amp;quot;&lt;/code>&lt;/pre>
&lt;p>Another rate limiting function is &lt;code>slowly()&lt;/code>. While &lt;code>insistently()&lt;/code> loops by itself, &lt;code>slowly()&lt;/code> is designed to be used in your own loops, for instance in a map iteration:&lt;/p>
&lt;pre class="r">&lt;code>f &amp;lt;- function(...) print(Sys.time())
walk(1:3, f)
#&amp;gt; [1] &amp;quot;2019-02-06 16:22:28 CET&amp;quot;
#&amp;gt; [1] &amp;quot;2019-02-06 16:22:28 CET&amp;quot;
#&amp;gt; [1] &amp;quot;2019-02-06 16:22:28 CET&amp;quot;
walk(1:3, slowly(f))
#&amp;gt; [1] &amp;quot;2019-02-06 16:22:28 CET&amp;quot;
#&amp;gt; [1] &amp;quot;2019-02-06 16:22:29 CET&amp;quot;
#&amp;gt; [1] &amp;quot;2019-02-06 16:22:30 CET&amp;quot;&lt;/code>&lt;/pre>
&lt;p>&lt;code>slowly()&lt;/code> uses a constant rate by default while &lt;code>insistently()&lt;/code> uses a backoff rate. The rate limiting can be configured with optional jitter via &lt;code>rate_backoff()&lt;/code> and &lt;code>rate_delay()&lt;/code>, which implement exponential backoff rate and constant rate respectively.&lt;/p>
&lt;pre class="r">&lt;code>walk(1:3, slowly(f, rate_backoff(2, max_times = Inf)))
#&amp;gt; [1] &amp;quot;2019-02-06 16:22:30 CET&amp;quot;
#&amp;gt; [1] &amp;quot;2019-02-06 16:22:32 CET&amp;quot;
#&amp;gt; [1] &amp;quot;2019-02-06 16:22:34 CET&amp;quot;&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="map-and-reduce-improvements" class="section level2">
&lt;h2>Map and reduce improvements&lt;/h2>
&lt;div id="map_if-or-else" class="section level3">
&lt;h3>&lt;code>map_if()&lt;/code>… or else?&lt;/h3>
&lt;p>If you like using &lt;code>map_if()&lt;/code>, perhaps you’ll find the new &lt;code>.else&lt;/code> argument useful. &lt;code>.else&lt;/code> is a function applied to elements for which the predicate is &lt;code>FALSE&lt;/code>:&lt;/p>
&lt;pre class="r">&lt;code>map_if(iris, is.numeric, mean, .else = nlevels)
#&amp;gt; $Sepal.Length
#&amp;gt; [1] 5.843333
#&amp;gt;
#&amp;gt; $Sepal.Width
#&amp;gt; [1] 3.057333
#&amp;gt;
#&amp;gt; $Petal.Length
#&amp;gt; [1] 3.758
#&amp;gt;
#&amp;gt; $Petal.Width
#&amp;gt; [1] 1.199333
#&amp;gt;
#&amp;gt; $Species
#&amp;gt; [1] 3&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="new-map_at-features" class="section level3">
&lt;h3>New &lt;code>map_at()&lt;/code> features&lt;/h3>
&lt;p>Colin Fay (&lt;span class="citation">@ColinFay&lt;/span>) has added support for tidyselect expressions to &lt;code>map_at()&lt;/code> and other &lt;code>_at&lt;/code> mappers. This brings the interface of these functions closer to scoped functions from the dplyr package, such as &lt;code>dplyr::mutate_at()&lt;/code>. Note that &lt;code>vars()&lt;/code> is currently not reexported from purrr, so you need to use &lt;code>dplyr::vars()&lt;/code> or &lt;code>ggplot2::vars()&lt;/code> for the time being.&lt;/p>
&lt;pre class="r">&lt;code>suppressMessages(library(&amp;quot;dplyr&amp;quot;))
x &amp;lt;- list(
foo = 1:5,
bar = 6:10,
baz = 11:15
)
map_at(x, vars(starts_with(&amp;quot;b&amp;quot;)), mean)
#&amp;gt; $foo
#&amp;gt; [1] 1 2 3 4 5
#&amp;gt;
#&amp;gt; $bar
#&amp;gt; [1] 8
#&amp;gt;
#&amp;gt; $baz
#&amp;gt; [1] 13&lt;/code>&lt;/pre>
&lt;p>&lt;code>map_at()&lt;/code> now also supports negative selections:&lt;/p>
&lt;pre class="r">&lt;code>map_at(x, -2, `*`, 1000)
#&amp;gt; $foo
#&amp;gt; [1] 1000 2000 3000 4000 5000
#&amp;gt;
#&amp;gt; $bar
#&amp;gt; [1] 6 7 8 9 10
#&amp;gt;
#&amp;gt; $baz
#&amp;gt; [1] 11000 12000 13000 14000 15000&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="early-termination-of-reduction" class="section level3">
&lt;h3>Early termination of reduction&lt;/h3>
&lt;p>&lt;code>reduce()&lt;/code> is an operation that combines the elements of a vector into a single value by calling a binary function repeatedly with the result so far and the next input of a vector. &lt;code>reduce()&lt;/code> and its variant &lt;code>accumulate()&lt;/code> now support early termination of the reduction. To halt the computation, just return the last value wrapped in a &lt;code>done()&lt;/code> box:&lt;/p>
&lt;pre class="r">&lt;code># This computes the total sum of the input vector
reduce(1:100, ~ .x + .y)
#&amp;gt; [1] 5050
# This stops as soon as the sum is greater than 50
reduce(1:100, ~ if (.x &amp;gt; 50) done(.x) else .x + .y)
#&amp;gt; [1] 55&lt;/code>&lt;/pre>
&lt;p>This feature takes inspiration from the &lt;a href="https://clojuredocs.org/clojure.core/reduced">Clojure&lt;/a> language.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="consistency" class="section level2">
&lt;h2>Consistency&lt;/h2>
&lt;p>In this polishing release, a lot of effort went towards consistency of behaviour and of the interface.&lt;/p>
&lt;div id="behaviour" class="section level3">
&lt;h3>Behaviour&lt;/h3>
&lt;div id="better-support-for-s3-vectors" class="section level4">
&lt;h4>Better support for S3 vectors&lt;/h4>
&lt;p>We are working hard on improving support for S3 vectors in the tidyverse. As of this release, &lt;code>modify()&lt;/code> is now a wrapper around &lt;code>[[&amp;lt;-&lt;/code> instead of &lt;code>[&amp;lt;-&lt;/code>. This should make it directly compatible with a larger set of vector classes. Thanks to the work of Mikko Marttila (&lt;span class="citation">@mikmart&lt;/span>), &lt;code>pmap()&lt;/code> and &lt;code>pwalk()&lt;/code> also do a better job of preserving S3 classes. Finally, &lt;code>pluck()&lt;/code> now properly calls the &lt;code>[[&lt;/code> methods of S3 objects.&lt;/p>
&lt;p>In the next version of purrr, we plan to use the in-development vctrs package to provide more principled and predictable vector operations. This should help us preserve the class and properties of S3 vectors like factors, dates, or your custom classes.&lt;/p>
&lt;/div>
&lt;div id="stricter-predicate-checking" class="section level4">
&lt;h4>Stricter predicate checking&lt;/h4>
&lt;p>purrr now checks the results of your predicate functions, which must now consistently return &lt;code>TRUE&lt;/code> or &lt;code>FALSE&lt;/code>. We no longer offer support for &lt;code>NA&lt;/code> or for boolish numeric values (R normally interprets 0 as &lt;code>FALSE&lt;/code> and all other values as &lt;code>TRUE&lt;/code>). The purpose of this change is to detect errors earlier with a more relevant error message.&lt;/p>
&lt;pre class="r">&lt;code>keep(c(1, NA, 3), ~ . %% 2 == 0)
#&amp;gt; Error: Predicate functions must return a single `TRUE` or `FALSE`, not a missing value&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div id="interface" class="section level3">
&lt;h3>Interface&lt;/h3>
&lt;div id="direction-of-application" class="section level4">
&lt;h4>Direction of application&lt;/h4>
&lt;p>The direction of application is now specified the same way across purrr functions. &lt;code>reduce()&lt;/code>, &lt;code>compose()&lt;/code> and &lt;code>detect()&lt;/code> now have a &lt;code>.dir&lt;/code> parameter that can take the value &lt;code>&amp;quot;forward&amp;quot;&lt;/code> or &lt;code>&amp;quot;backward&amp;quot;&lt;/code>. This terminology should be less ambiguous than “left” and “right”:&lt;/p>
&lt;pre class="r">&lt;code>reduce(1:4, `-`, .dir = &amp;quot;backward&amp;quot;)
compose(foo, bar, .dir = &amp;quot;forward&amp;quot;)
detect(1:5, ~ . %% 2 == 0, .dir = &amp;quot;backward&amp;quot;)&lt;/code>&lt;/pre>
&lt;p>Note that the backward version of &lt;code>reduce()&lt;/code> (called right-reduce in the literature) applies the reduced function in a slightly different way than &lt;code>reduce_right()&lt;/code>. The new algorithm is more consistent with how this operation is usually defined in other languages.&lt;/p>
&lt;p>Following the introduction of the &lt;code>.dir&lt;/code> parameters, the &lt;code>_right&lt;/code> variants such as &lt;code>reduce_right()&lt;/code> have been soft-deprecated, as well as the &lt;code>.right&lt;/code> parameter of &lt;code>detect()&lt;/code> and &lt;code>detect_index()&lt;/code>.&lt;/p>
&lt;/div>
&lt;div id="partial" class="section level4">
&lt;h4>partial()&lt;/h4>
&lt;p>&lt;code>partial()&lt;/code> has been rewritten to be a simple wrapper around &lt;code>call_modify()&lt;/code> and &lt;code>eval_tidy()&lt;/code> from the rlang package. Consequently, the &lt;code>.env&lt;/code>, &lt;code>.lazy&lt;/code> and &lt;code>.first&lt;/code> arguments are soft-deprecated and replaced by a flexible syntax.&lt;/p>
&lt;p>To control the timing of evaluation, unquote the partialised arguments that should be evaluated only once when the function is created. The non-unquoted arguments are evaluated at each invokation of the function:&lt;/p>
&lt;pre class="r">&lt;code>my_list &amp;lt;- partial(list, lazy = rnorm(3), eager = !!rnorm(3))
my_list()
#&amp;gt; $lazy
#&amp;gt; [1] 0.2945451 0.3897943 -1.2080762
#&amp;gt;
#&amp;gt; $eager
#&amp;gt; [1] -0.1842525 -1.3713305 -0.5991677
my_list()
#&amp;gt; $lazy
#&amp;gt; [1] -0.3636760 -1.6266727 -0.2564784
#&amp;gt;
#&amp;gt; $eager
#&amp;gt; [1] -0.1842525 -1.3713305 -0.5991677&lt;/code>&lt;/pre>
&lt;p>You can also control the position of the future arguments by passing an empty &lt;code>... =&lt;/code> parameter. This syntax is powered by &lt;code>rlang::call_modify()&lt;/code> and allows you to add or move dots in a quoted function call. In the case of &lt;code>partial()&lt;/code>, the dots represent the future arguments. We use this syntax in the following snippet to position the future arguments right between two partialised arguments:&lt;/p>
&lt;pre class="r">&lt;code>my_list &amp;lt;- partial(list, 1, ... = , 2)
my_list()
#&amp;gt; [[1]]
#&amp;gt; [1] 1
#&amp;gt;
#&amp;gt; [[2]]
#&amp;gt; [1] 2
my_list(&amp;quot;foo&amp;quot;)
#&amp;gt; [[1]]
#&amp;gt; [1] 1
#&amp;gt;
#&amp;gt; [[2]]
#&amp;gt; [1] &amp;quot;foo&amp;quot;
#&amp;gt;
#&amp;gt; [[3]]
#&amp;gt; [1] 2&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="exec-replaces-invoke" class="section level4">
&lt;h4>&lt;code>exec()&lt;/code> replaces &lt;code>invoke()&lt;/code>&lt;/h4>
&lt;p>We are retiring &lt;code>invoke()&lt;/code> and &lt;code>invoke_map()&lt;/code> in favour of &lt;code>exec()&lt;/code>. Retirement means that we’ll keep these functions indefinitely in the package, but we won’t add features or recommend using them.&lt;/p>
&lt;p>We are now favouring &lt;code>exec()&lt;/code>, which uses the tidy dots syntax for passing lists of arguments:&lt;/p>
&lt;pre class="r">&lt;code># Before:
invoke(mean, list(na.rm = TRUE), x = 1:10)
#&amp;gt; [1] 5.5
# After
exec(mean, 1:10, !!!list(na.rm = TRUE))
#&amp;gt; [1] 5.5&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="filling-the-missing-parts" class="section level4">
&lt;h4>Filling the missing parts&lt;/h4>
&lt;ul>
&lt;li>&lt;p>purrr 0.3.0 introduces &lt;code>accumulate2()&lt;/code>, &lt;code>modify2()&lt;/code> and &lt;code>imodify()&lt;/code> variants.&lt;/p>&lt;/li>
&lt;li>&lt;p>By popular request, &lt;code>at_depth()&lt;/code> is back as &lt;code>map_depth()&lt;/code>. Unlike &lt;code>modify_depth()&lt;/code> which preserves the class structure of the input tree, this variant only returns trees made of lists of lists (up to the given depth), coercing vectors if needed.&lt;/p>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="thanks" class="section level2">
&lt;h2>Thanks!&lt;/h2>
&lt;p>Thanks to all the contributors for this release!&lt;/p>
&lt;p>&lt;a href="https://github.com/ArtemSokolov">＠ArtemSokolov&lt;/a>, &lt;a href="https://github.com/batpigandme">＠batpigandme&lt;/a>, &lt;a href="https://github.com/bbrewington">＠bbrewington&lt;/a>, &lt;a href="https://github.com/billdenney">＠billdenney&lt;/a>, &lt;a href="https://github.com/cderv">＠cderv&lt;/a>, &lt;a href="https://github.com/cfhammill">＠cfhammill&lt;/a>, &lt;a href="https://github.com/ColinFay">＠ColinFay&lt;/a>, &lt;a href="https://github.com/dan-reznik">＠dan-reznik&lt;/a>, &lt;a href="https://github.com/daniel-barnett">＠daniel-barnett&lt;/a>, &lt;a href="https://github.com/danilinares">＠danilinares&lt;/a>, &lt;a href="https://github.com/drtjc">＠drtjc&lt;/a>, &lt;a href="https://github.com/egnha">＠egnha&lt;/a>, &lt;a href="https://github.com/Eluvias">＠Eluvias&lt;/a>, &lt;a href="https://github.com/flying-sheep">＠flying-sheep&lt;/a>, &lt;a href="https://github.com/gergness">＠gergness&lt;/a>, &lt;a href="https://github.com/gvwilson">＠gvwilson&lt;/a>, &lt;a href="https://github.com/hadley">＠hadley&lt;/a>, &lt;a href="https://github.com/hammer">＠hammer&lt;/a>, &lt;a href="https://github.com/ijlyttle">＠ijlyttle&lt;/a>, &lt;a href="https://github.com/ilarischeinin">＠ilarischeinin&lt;/a>, &lt;a href="https://github.com/IndrajeetPatil">＠IndrajeetPatil&lt;/a>, &lt;a href="https://github.com/ISPritchin">＠ISPritchin&lt;/a>, &lt;a href="https://github.com/jameslairdsmith">＠jameslairdsmith&lt;/a>, &lt;a href="https://github.com/jameslamb">＠jameslamb&lt;/a>, &lt;a href="https://github.com/jrnold">＠jrnold&lt;/a>, &lt;a href="https://github.com/kcf-jackson">＠kcf-jackson&lt;/a>, &lt;a href="https://github.com/leungi">＠leungi&lt;/a>, &lt;a href="https://github.com/lionel-">＠lionel-&lt;/a>, &lt;a href="https://github.com/loladze">＠loladze&lt;/a>, &lt;a href="https://github.com/maxheld83">＠maxheld83&lt;/a>, &lt;a href="https://github.com/mikmart">＠mikmart&lt;/a>, &lt;a href="https://github.com/MilesMcBain">＠MilesMcBain&lt;/a>, &lt;a href="https://github.com/moodymudskipper">＠moodymudskipper&lt;/a>, &lt;a href="https://github.com/mrstlee">＠mrstlee&lt;/a>, &lt;a href="https://github.com/namelessjon">＠namelessjon&lt;/a>, &lt;a href="https://github.com/r-cheologist">＠r-cheologist&lt;/a>, &lt;a href="https://github.com/randomgambit">＠randomgambit&lt;/a>, &lt;a href="https://github.com/rmflight">＠rmflight&lt;/a>, &lt;a href="https://github.com/roumail">＠roumail&lt;/a>, &lt;a href="https://github.com/Ryo-N7">＠Ryo-N7&lt;/a>, &lt;a href="https://github.com/serina-robinson">＠serina-robinson&lt;/a>, &lt;a href="https://github.com/skaltman">＠skaltman&lt;/a>, &lt;a href="https://github.com/suraggupta">＠suraggupta&lt;/a>, &lt;a href="https://github.com/thays42">＠thays42&lt;/a>, &lt;a href="https://github.com/tyluRp">＠tyluRp&lt;/a>, &lt;a href="https://github.com/tzakharko">＠tzakharko&lt;/a>, &lt;a href="https://github.com/VincentGuyader">＠VincentGuyader&lt;/a>, &lt;a href="https://github.com/wlandau">＠wlandau&lt;/a>, &lt;a href="https://github.com/wmayner">＠wmayner&lt;/a>, &lt;a href="https://github.com/yanxianl">＠yanxianl&lt;/a>, &lt;a href="https://github.com/yutannihilation">＠yutannihilation&lt;/a>, and &lt;a href="https://github.com/yysh12">＠yysh12&lt;/a>&lt;/p>
&lt;/div></description></item><item><title>purrr 0.2.3</title><link>https://www.tidyverse.org/blog/2017/08/purrr-0.2.3/</link><pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2017/08/purrr-0.2.3/</guid><description>
&lt;p>We are pleased to announce that purrr 0.2.3 is now on CRAN! Despite the small increment in the version number (our mistake, it should have been 0.3.0), this is a rather major release that includes many new features and bug fixes.&lt;/p>
&lt;p>Install the latest version of purrr with:&lt;/p>
&lt;pre class="r">&lt;code>install.packages(&amp;quot;purrr&amp;quot;)&lt;/code>&lt;/pre>
&lt;p>You can read about the complete set of changes at &lt;a href="https://github.com/tidyverse/purrr/releases/tag/v0.2.3" class="uri">https://github.com/tidyverse/purrr/releases/tag/v0.2.3&lt;/a>. In this blog post, I will present the highlights of this version which are a family of generic mappers, a new &lt;code>pluck()&lt;/code> function for accessing deep elements in a readable way, and a few nifty features and improvements.&lt;/p>
&lt;div id="generic-mapping" class="section level3">
&lt;h3>Generic mapping&lt;/h3>
&lt;p>The new &lt;code>modify&lt;/code> family of functions introduces genericity to mapping. This means it is now easier to map functions over vector-like S3 objects. The reason is twofold:&lt;/p>
&lt;ul>
&lt;li>&lt;p>&lt;code>map()&lt;/code> and friends apply functions on the elements of the underlying data structure but that is not always appropriate. An object sometimes contains metadata. A user of such a class probably wants to map over the &lt;em>elements&lt;/em> of the data of interest rather than over the metadata fields.&lt;/p>&lt;/li>
&lt;li>&lt;p>&lt;code>map()&lt;/code> is type-stable and always returns a list. If you’re mapping over an object, chances are you want a similar object back.&lt;/p>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>modify()&lt;/code> and its variants solve both these problems via S3 dispatch. For instance, let’s try a conditional map over a data frame. Since &lt;code>map_if()&lt;/code> is type-stable, it returns a list and we lose the data frame information:&lt;/p>
&lt;pre class="r">&lt;code>iris %&amp;gt;% map_if(is.factor, as.character) %&amp;gt;% str()
#&amp;gt; List of 5
#&amp;gt; $ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
#&amp;gt; $ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
#&amp;gt; $ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
#&amp;gt; $ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
#&amp;gt; $ Species : chr [1:150] &amp;quot;setosa&amp;quot; &amp;quot;setosa&amp;quot; &amp;quot;setosa&amp;quot; &amp;quot;setosa&amp;quot; ...&lt;/code>&lt;/pre>
&lt;p>On the other hand, &lt;code>modify_if()&lt;/code> is generic and returns a data frame:&lt;/p>
&lt;pre class="r">&lt;code>iris %&amp;gt;% modify_if(is.factor, as.character) %&amp;gt;% str()
#&amp;gt; &amp;#39;data.frame&amp;#39;: 150 obs. of 5 variables:
#&amp;gt; $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
#&amp;gt; $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
#&amp;gt; $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
#&amp;gt; $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
#&amp;gt; $ Species : chr &amp;quot;setosa&amp;quot; &amp;quot;setosa&amp;quot; &amp;quot;setosa&amp;quot; &amp;quot;setosa&amp;quot; ...&lt;/code>&lt;/pre>
&lt;p>The flip side of genericity is that the vectors returned by the mapped function should obey the constraints of the container type. For instance, data frames require vectors of equal size and it wouldn’t be appropriate to use &lt;code>modify()&lt;/code> on a function that returns vectors of variable sizes. In this case you should use &lt;code>map()&lt;/code>:&lt;/p>
&lt;pre class="r">&lt;code>map(mtcars, unique) %&amp;gt;% str()
#&amp;gt; List of 11
#&amp;gt; $ mpg : num [1:25] 21 22.8 21.4 18.7 18.1 14.3 24.4 19.2 17.8 16.4 ...
#&amp;gt; $ cyl : num [1:3] 6 4 8
#&amp;gt; $ disp: num [1:27] 160 108 258 360 225 ...
#&amp;gt; $ hp : num [1:22] 110 93 175 105 245 62 95 123 180 205 ...
#&amp;gt; $ drat: num [1:22] 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.07 2.93 ...
#&amp;gt; $ wt : num [1:29] 2.62 2.88 2.32 3.21 3.44 ...
#&amp;gt; $ qsec: num [1:30] 16.5 17 18.6 19.4 20.2 ...
#&amp;gt; $ vs : num [1:2] 0 1
#&amp;gt; $ am : num [1:2] 1 0
#&amp;gt; $ gear: num [1:3] 4 3 5
#&amp;gt; $ carb: num [1:6] 4 1 2 3 6 8&lt;/code>&lt;/pre>
&lt;p>As a developer there are two ways to make your class compatible with &lt;code>modify()&lt;/code> . The easiest is to implement a method for the subset-assign operator &lt;code>[&amp;lt;-&lt;/code> which should be sufficient in most cases. Alternatively you can implement methods for the &lt;code>modify&lt;/code> functions themselves as they are all generics.&lt;/p>
&lt;/div>
&lt;div id="pluck-for-deep-subsetting" class="section level3">
&lt;h3>pluck() for deep subsetting&lt;/h3>
&lt;p>The plucking mechanism used for indexing into data structures with &lt;code>map()&lt;/code> has been extracted into the function &lt;code>pluck()&lt;/code>. Plucking is often more readable when extracting an element buried in a deep data structure. Compare this base R code which reads non-linearly:&lt;/p>
&lt;pre class="r">&lt;code>accessor(x[[1]])$foo&lt;/code>&lt;/pre>
&lt;p>To the equivalent pluck:&lt;/p>
&lt;pre class="r">&lt;code>x %&amp;gt;% pluck(1, accessor, &amp;quot;foo&amp;quot;)&lt;/code>&lt;/pre>
&lt;p>The new function &lt;code>attr_getter()&lt;/code> generates attribute accessors that can be used in &lt;code>pluck()&lt;/code>:&lt;/p>
&lt;pre class="r">&lt;code>dfs &amp;lt;- list(iris, mtcars)
dfs %&amp;gt;% pluck(2, attr_getter(&amp;quot;row.names&amp;quot;))
#&amp;gt; [1] &amp;quot;Mazda RX4&amp;quot; &amp;quot;Mazda RX4 Wag&amp;quot; &amp;quot;Datsun 710&amp;quot;
#&amp;gt; [4] &amp;quot;Hornet 4 Drive&amp;quot; &amp;quot;Hornet Sportabout&amp;quot; &amp;quot;Valiant&amp;quot;
#&amp;gt; [7] &amp;quot;Duster 360&amp;quot; &amp;quot;Merc 240D&amp;quot; &amp;quot;Merc 230&amp;quot;
#&amp;gt; [10] &amp;quot;Merc 280&amp;quot; &amp;quot;Merc 280C&amp;quot; &amp;quot;Merc 450SE&amp;quot;
#&amp;gt; [13] &amp;quot;Merc 450SL&amp;quot; &amp;quot;Merc 450SLC&amp;quot; &amp;quot;Cadillac Fleetwood&amp;quot;
#&amp;gt; [16] &amp;quot;Lincoln Continental&amp;quot; &amp;quot;Chrysler Imperial&amp;quot; &amp;quot;Fiat 128&amp;quot;
#&amp;gt; [19] &amp;quot;Honda Civic&amp;quot; &amp;quot;Toyota Corolla&amp;quot; &amp;quot;Toyota Corona&amp;quot;
#&amp;gt; [22] &amp;quot;Dodge Challenger&amp;quot; &amp;quot;AMC Javelin&amp;quot; &amp;quot;Camaro Z28&amp;quot;
#&amp;gt; [25] &amp;quot;Pontiac Firebird&amp;quot; &amp;quot;Fiat X1-9&amp;quot; &amp;quot;Porsche 914-2&amp;quot;
#&amp;gt; [28] &amp;quot;Lotus Europa&amp;quot; &amp;quot;Ford Pantera L&amp;quot; &amp;quot;Ferrari Dino&amp;quot;
#&amp;gt; [31] &amp;quot;Maserati Bora&amp;quot; &amp;quot;Volvo 142E&amp;quot;&lt;/code>&lt;/pre>
&lt;p>Or in mapped indexing:&lt;/p>
&lt;pre class="r">&lt;code>x &amp;lt;- list(
list(vec = letters, df = mtcars),
list(vec = LETTERS, df = iris)
)
x %&amp;gt;% map(list(&amp;quot;df&amp;quot;, attr_getter(&amp;quot;row.names&amp;quot;)))
#&amp;gt; [[1]]
#&amp;gt; [1] &amp;quot;Mazda RX4&amp;quot; &amp;quot;Mazda RX4 Wag&amp;quot; &amp;quot;Datsun 710&amp;quot;
#&amp;gt; [4] &amp;quot;Hornet 4 Drive&amp;quot; &amp;quot;Hornet Sportabout&amp;quot; &amp;quot;Valiant&amp;quot;
#&amp;gt; [7] &amp;quot;Duster 360&amp;quot; &amp;quot;Merc 240D&amp;quot; &amp;quot;Merc 230&amp;quot;
#&amp;gt; [10] &amp;quot;Merc 280&amp;quot; &amp;quot;Merc 280C&amp;quot; &amp;quot;Merc 450SE&amp;quot;
#&amp;gt; [13] &amp;quot;Merc 450SL&amp;quot; &amp;quot;Merc 450SLC&amp;quot; &amp;quot;Cadillac Fleetwood&amp;quot;
#&amp;gt; [16] &amp;quot;Lincoln Continental&amp;quot; &amp;quot;Chrysler Imperial&amp;quot; &amp;quot;Fiat 128&amp;quot;
#&amp;gt; [19] &amp;quot;Honda Civic&amp;quot; &amp;quot;Toyota Corolla&amp;quot; &amp;quot;Toyota Corona&amp;quot;
#&amp;gt; [22] &amp;quot;Dodge Challenger&amp;quot; &amp;quot;AMC Javelin&amp;quot; &amp;quot;Camaro Z28&amp;quot;
#&amp;gt; [25] &amp;quot;Pontiac Firebird&amp;quot; &amp;quot;Fiat X1-9&amp;quot; &amp;quot;Porsche 914-2&amp;quot;
#&amp;gt; [28] &amp;quot;Lotus Europa&amp;quot; &amp;quot;Ford Pantera L&amp;quot; &amp;quot;Ferrari Dino&amp;quot;
#&amp;gt; [31] &amp;quot;Maserati Bora&amp;quot; &amp;quot;Volvo 142E&amp;quot;
#&amp;gt;
#&amp;gt; [[2]]
#&amp;gt; [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
#&amp;gt; [18] 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
#&amp;gt; [35] 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
#&amp;gt; [52] 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68
#&amp;gt; [69] 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85
#&amp;gt; [86] 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102
#&amp;gt; [103] 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119
#&amp;gt; [120] 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136
#&amp;gt; [137] 137 138 139 140 141 142 143 144 145 146 147 148 149 150&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="set_names-is-much-more-flexible" class="section level3">
&lt;h3>set_names() is much more flexible&lt;/h3>
&lt;p>&lt;code>set_names()&lt;/code> (now reexported from the rlang package) has become much more flexible. It now takes &lt;code>...&lt;/code> arguments and concatenates them into one vector of names. This saves a bit of typing as you don’t have to concatenate explicitly with &lt;code>c()&lt;/code>. The code also looks a bit leaner:&lt;/p>
&lt;pre class="r">&lt;code>x &amp;lt;- letters[1:3] %&amp;gt;% set_names(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;)
x
#&amp;gt; foo bar baz
#&amp;gt; &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;&lt;/code>&lt;/pre>
&lt;p>In addition &lt;code>set_names()&lt;/code> now accepts functions as its first argument. The function is applied to existing names. Let’s transform the names of our new vector to uppercase with &lt;code>base::toupper()&lt;/code>:&lt;/p>
&lt;pre class="r">&lt;code>x %&amp;gt;% set_names(toupper)
#&amp;gt; FOO BAR BAZ
#&amp;gt; &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;&lt;/code>&lt;/pre>
&lt;p>When you supply a function, the &lt;code>...&lt;/code> arguments are forwarded to the function which is often handy. Here we might want to pass further arguments to &lt;code>base::paste()&lt;/code>:&lt;/p>
&lt;pre class="r">&lt;code>x %&amp;gt;% set_names(paste, &amp;quot;suffix&amp;quot;, sep = &amp;quot;_&amp;quot;)
#&amp;gt; foo_suffix bar_suffix baz_suffix
#&amp;gt; &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="reducing-with-a-three-argument-function" class="section level3">
&lt;h3>Reducing with a three-argument function&lt;/h3>
&lt;p>&lt;code>reduce2()&lt;/code> makes it possible to reduce with a three-argument reducing function. &lt;code>reduce2()&lt;/code> takes two vectors &lt;code>.x&lt;/code> and &lt;code>.y&lt;/code>, the first of which is reduced in the usual manner. The accumulated value is passed to the reducing function as first argument while the next value is passed as second argument. &lt;code>.y&lt;/code> on the other hand is mapped, not reduced. At each reducing round, the next value of &lt;code>.y&lt;/code> is passed to the reducing function as third argument.&lt;/p>
&lt;p>In the following example we have a binary paster that takes &lt;code>sep&lt;/code> as third argument. With the ordinary &lt;code>reduce()&lt;/code> we are stuck with a single separator during the whole reduction:&lt;/p>
&lt;pre class="r">&lt;code>paste2 &amp;lt;- function(x, y, sep) paste(x, y, sep = sep)
x &amp;lt;- letters[1:4]
reduce(x, paste2, sep = &amp;quot;.&amp;quot;)
#&amp;gt; [1] &amp;quot;a.b.c.d&amp;quot;&lt;/code>&lt;/pre>
&lt;p>If we want to vary the separator for each value of the input vector, &lt;code>reduce2()&lt;/code> allows us to pass a second vector containing specific separators. This auxiliary vector should have one fewer elements than the reduced vector:&lt;/p>
&lt;pre class="r">&lt;code>seps &amp;lt;- c(&amp;quot;-&amp;quot;, &amp;quot;.&amp;quot;, &amp;quot;_&amp;quot;)
reduce2(x, seps, paste2)
#&amp;gt; [1] &amp;quot;a-b.c_d&amp;quot;&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="variadic-lambda-formulas" class="section level3">
&lt;h3>Variadic lambda-formulas&lt;/h3>
&lt;p>You can now refer to arguments by position in lambda-formulas. The &lt;code>..1&lt;/code> symbol refers to the first argument, &lt;code>..2&lt;/code> to the second and so on. This makes it easier to use functions like &lt;code>pmap()&lt;/code> with the formula shortcut:&lt;/p>
&lt;pre class="r">&lt;code>pmap_chr(mtcars, ~paste(..2, ..4, sep = &amp;quot; - &amp;quot;))
#&amp;gt; [1] &amp;quot;6 - 110&amp;quot; &amp;quot;6 - 110&amp;quot; &amp;quot;4 - 93&amp;quot; &amp;quot;6 - 110&amp;quot; &amp;quot;8 - 175&amp;quot; &amp;quot;6 - 105&amp;quot; &amp;quot;8 - 245&amp;quot;
#&amp;gt; [8] &amp;quot;4 - 62&amp;quot; &amp;quot;4 - 95&amp;quot; &amp;quot;6 - 123&amp;quot; &amp;quot;6 - 123&amp;quot; &amp;quot;8 - 180&amp;quot; &amp;quot;8 - 180&amp;quot; &amp;quot;8 - 180&amp;quot;
#&amp;gt; [15] &amp;quot;8 - 205&amp;quot; &amp;quot;8 - 215&amp;quot; &amp;quot;8 - 230&amp;quot; &amp;quot;4 - 66&amp;quot; &amp;quot;4 - 52&amp;quot; &amp;quot;4 - 65&amp;quot; &amp;quot;4 - 97&amp;quot;
#&amp;gt; [22] &amp;quot;8 - 150&amp;quot; &amp;quot;8 - 150&amp;quot; &amp;quot;8 - 245&amp;quot; &amp;quot;8 - 175&amp;quot; &amp;quot;4 - 66&amp;quot; &amp;quot;4 - 91&amp;quot; &amp;quot;4 - 113&amp;quot;
#&amp;gt; [29] &amp;quot;8 - 264&amp;quot; &amp;quot;6 - 175&amp;quot; &amp;quot;8 - 335&amp;quot; &amp;quot;4 - 109&amp;quot;&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="api-changes" class="section level3">
&lt;h3>API changes&lt;/h3>
&lt;p>purrr no longer depends on lazyeval or Rcpp (or dplyr, as of the previous version). This makes the dependency graph of the tidyverse simpler, and makes purrr more suitable as a dependency of lower-level packages.&lt;/p>
&lt;p>A number of functions have been renamed or deprecated:&lt;/p>
&lt;ul>
&lt;li>&lt;p>&lt;code>is_numeric()&lt;/code> and &lt;code>is_scalar_numeric()&lt;/code> are deprecated because they don’t test for what you might expect at first sight.&lt;/p>&lt;/li>
&lt;li>&lt;p>&lt;code>as_function()&lt;/code> is now &lt;code>as_mapper()&lt;/code> because it is a tranformation that makes sense primarily for mapping functions, not in general. The rlang package has an &lt;code>as_function()&lt;/code> coercer that is smaller in scope.&lt;/p>&lt;/li>
&lt;li>&lt;p>The data frame suffix &lt;code>_df&lt;/code> has been (soft) deprecated in favour of &lt;code>_dfr&lt;/code> to more clearly indicate that it’s a row-bind. All variants now also have a &lt;code>_dfc&lt;/code> for column binding. They currently don’t handle functions returning vectors because of a bug, but they will in the next minor version of purrr.&lt;/p>&lt;/li>
&lt;li>&lt;p>&lt;code>cross_n()&lt;/code> has been renamed to &lt;code>cross()&lt;/code>. The &lt;code>_n&lt;/code> suffix was removed for consistency with &lt;code>pmap()&lt;/code> (originally called &lt;code>map_n()&lt;/code> at the start of the project) and &lt;code>transpose()&lt;/code> (originally called &lt;code>zip_n()&lt;/code>). Similarly, &lt;code>cross_d()&lt;/code> has been renamed to &lt;code>cross_df()&lt;/code> for consistency with &lt;code>map_df()&lt;/code>.&lt;/p>&lt;/li>
&lt;li>&lt;p>&lt;code>contains()&lt;/code> has been renamed to &lt;code>has_element()&lt;/code> to avoid conflicts with dplyr.&lt;/p>&lt;/li>
&lt;li>&lt;p>&lt;code>at_depth()&lt;/code> has been renamed to &lt;code>modify_depth()&lt;/code>.&lt;/p>&lt;/li>
&lt;/ul>
&lt;p>Finally, these functions have been removed from the package:&lt;/p>
&lt;ul>
&lt;li>&lt;p>The previously deprecated functions &lt;code>flatmap()&lt;/code>, &lt;code>map3()&lt;/code>, &lt;code>map_n()&lt;/code>, &lt;code>walk3()&lt;/code>, &lt;code>walk_n()&lt;/code>, &lt;code>zip2()&lt;/code>, &lt;code>zip3()&lt;/code>, &lt;code>zip_n()&lt;/code> have been removed.&lt;/p>&lt;/li>
&lt;li>&lt;p>&lt;code>order_by()&lt;/code>, &lt;code>sort_by()&lt;/code> and &lt;code>split_by()&lt;/code> have been removed. &lt;code>order_by()&lt;/code> conflicted with &lt;code>dplyr::order_by()&lt;/code> and the complete family doesn’t feel that useful. Use tibbles instead.&lt;/p>&lt;/li>
&lt;/ul>
&lt;/div></description></item></channel></rss>