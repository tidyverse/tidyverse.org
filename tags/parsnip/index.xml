<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>parsnip | Tidyverse</title><link>https://www.tidyverse.org/tags/parsnip/</link><atom:link href="https://www.tidyverse.org/tags/parsnip/index.xml" rel="self" type="application/rss+xml"/><description>parsnip</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 19 Mar 2025 00:00:00 +0000</lastBuildDate><item><title>Improved sparsity support in tidymodels</title><link>https://www.tidyverse.org/blog/2025/03/tidymodels-sparsity/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2025/03/tidymodels-sparsity/</guid><description>&lt;p>Photo by &lt;a href="https://unsplash.com/@oxygenvisuals?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Oliver Olah&lt;/a> on &lt;a href="https://unsplash.com/photos/green-tree-in-the-middle-of-grass-field-KD8nzFznQQ0?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash&lt;/a>&lt;/p>
&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>We&amp;rsquo;re stoked to announce tidymodels now fully supports sparse data from end to end. We have been working on this for
&lt;a href="https://github.com/tidymodels/recipes/pull/515" target="_blank" rel="noopener">over 5 years&lt;/a>. This is an extension of the work we have done
&lt;a href="https://www.tidyverse.org/blog/2020/11/tidymodels-sparse-support/" target="_blank" rel="noopener">previously&lt;/a> with blueprints, which would carry the data sparsely some of the way.&lt;/p>
&lt;p>You will need
&lt;a href="https://recipes.tidymodels.org/news/index.html#recipes-120" target="_blank" rel="noopener">recipes 1.2.0&lt;/a>,
&lt;a href="https://parsnip.tidymodels.org/news/index.html#parsnip-130" target="_blank" rel="noopener">parsnip 1.3.0&lt;/a>,
&lt;a href="https://workflows.tidymodels.org/news/index.html#workflows-120" target="_blank" rel="noopener">workflows 1.2.0&lt;/a> or later for this to work.&lt;/p>
&lt;h2 id="what-are-sparse-data">What are sparse data?
&lt;a href="#what-are-sparse-data">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The term &lt;strong>sparse data&lt;/strong> refers to a data set containing many zeroes. Sparse data appears in all kinds of fields and can be produced in a number of preprocessing methods. The reason why we care about sparse data is because of how computers store numbers. A 32-bit integer value takes 4 bytes to store. An array of 32-bit integers takes 40 bytes, and so on. This happens because each value is written down.&lt;/p>
&lt;p>A sparse representation instead stores the locations and values of the non-zero entries. Suppose we have the following vector with 20 entries:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It could be represented sparsely using the 3 values &lt;code>positions = c(1, 3, 7)&lt;/code>, &lt;code>values = c(3, 5, 8)&lt;/code>, and &lt;code>length = 20&lt;/code>. Now, we have seven values to represent a vector of 20 elements. Since some modeling tasks contain even sparser data, this type of representation starts to show real benefits in terms of execution time and memory consumption.&lt;/p>
&lt;p>The tidymodels set of packages has undergone several internal changes to allow it to represent data sparsely internally when it would be beneficial. These changes allow you to fit models that contain sparse data faster and more memory efficiently than before. Moreover, it allows you to fit models previously not possible due to them not fitting in memory.&lt;/p>
&lt;h2 id="sparse-matrix-support">Sparse matrix support
&lt;a href="#sparse-matrix-support">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The first benefit of these changes is that &lt;code>recipe()&lt;/code>, &lt;code>prep()&lt;/code>, &lt;code>bake()&lt;/code>, &lt;code>fit()&lt;/code>, and
&lt;a href="https://rdrr.io/r/stats/predict.html" target="_blank" rel="noopener">&lt;code>predict()&lt;/code>&lt;/a> now accept sparse matrices created using the Matrix package.&lt;/p>
&lt;p>The &lt;code>permeability_qsar&lt;/code> data set from the modeldata package contains quite a lot of zeroes in the predictors, so we will use it as a demonstration. Starting by coercing it into a sparse matrix.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://tidymodels.tidymodels.org'>tidymodels&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://Matrix.R-forge.R-project.org'>Matrix&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>permeability_sparse&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/methods/as.html'>as&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/matrix.html'>as.matrix&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>permeability_qsar&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='s'>"sparseMatrix"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>We can now use this sparse matrix in our code the same way as a dense matrix or data frame:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>rec_spec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>recipe&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>permeability&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>permeability_sparse&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>step_zv&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>all_predictors&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>mod_spec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>boost_tree&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"regression"&lt;/span>, &lt;span class='s'>"xgboost"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>wf_spec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>workflow&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>rec_spec&lt;/span>, &lt;span class='nv'>mod_spec&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Model training has the usual syntax:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>wf_fit&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>wf_spec&lt;/span>, &lt;span class='nv'>permeability_sparse&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>as does prediction:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>wf_fit&lt;/span>, &lt;span class='nv'>permeability_sparse&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 165 × 1&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; .pred&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 1&lt;/span> 10.5 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 2&lt;/span> 1.50 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 3&lt;/span> 13.1 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 4&lt;/span> 1.10 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 5&lt;/span> 1.25 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 6&lt;/span> 0.738&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 7&lt;/span> 29.3 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 8&lt;/span> 2.44 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 9&lt;/span> 36.3 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>10&lt;/span> 4.31 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># ℹ 155 more rows&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Note that only some models/engines work well with sparse data. These are all listed here &lt;a href="https://www.tidymodels.org/find/sparse/">https://www.tidymodels.org/find/sparse/&lt;/a>. If the model doesn&amp;rsquo;t support sparse data, it will be coerced into the default non-sparse representation and used as usual.&lt;/p>
&lt;p>With a few exceptions, it should work like any other data set. However, this approach has two main limitations. The first is that we are limited to regression tasks since the outcome has to be numeric to be part of the sparse matrix.&lt;/p>
&lt;p>The second limitation is that it only works with non-formula methods for parsnip and workflows. This means that you can use a recipe with &lt;code>add_recipe()&lt;/code> or select variables directly with &lt;code>add_variables()&lt;/code> when using a workflow. And you need to use &lt;code>fit_xy()&lt;/code> instead of &lt;code>fit()&lt;/code> when using a parsnip object by itself.&lt;/p>
&lt;p>If this is of interest we also have a &lt;a href="https://www.tidymodels.org/">https://www.tidymodels.org/&lt;/a> post about
&lt;a href="https://www.tidymodels.org/learn/work/sparse-matrix/" target="_blank" rel="noopener">using sparse matrices in tidymodels&lt;/a>.&lt;/p>
&lt;h2 id="sparse-data-from-recipes-steps">Sparse data from recipes steps
&lt;a href="#sparse-data-from-recipes-steps">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Where this sparsity support really starts to shine is when the recipe we use will generate sparse data. They come in two flavors, sparsity creation steps and sparsity preserving steps. Both listed here: &lt;a href="https://www.tidymodels.org/find/sparse/">https://www.tidymodels.org/find/sparse/&lt;/a>.&lt;/p>
&lt;p>Some steps like &lt;code>step_dummy()&lt;/code>, &lt;code>step_indicate_na()&lt;/code>, and
&lt;a href="https://textrecipes.tidymodels.org/reference/step_tf.html" target="_blank" rel="noopener">&lt;code>textrecipes::step_tf()&lt;/code>&lt;/a> will almost always produce a lot of zeroes. We take advantage of that by generating it sparsely when it is beneficial. If these steps end up producing sparse vectors, we want to make sure the sparsity is preserved. A couple of handfuls of steps, such as &lt;code>step_impute_mean()&lt;/code> and &lt;code>step_scale(),&lt;/code> have been updated to be able to work efficiently with sparse vectors. Both types of steps are detailed in the above-linked list of compatible methods.&lt;/p>
&lt;p>What this means in practice is that if you use a model/engine that supports sparse data and have a recipe that produces enough sparse data, then the steps will switch to produce sparse data by using a new sparse data format to store the data (when appropriate) as the recipe is being processed. Then if the model can accept sparse objects, we convert the data from our new sparse format to a standard sparse matrix object. Increasing performance when possible while preserving performance otherwise.&lt;/p>
&lt;p>Below is a simple recipe using the &lt;code>ames&lt;/code> data set. &lt;code>step_dummy()&lt;/code> is applied to all the categorical predictors, leading to a significant amount of zeroes.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>rec_spec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>recipe&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>Sale_Price&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>ames&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>step_zv&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>all_predictors&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>step_normalize&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>all_numeric_predictors&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>step_dummy&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>all_nominal_predictors&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>mod_spec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>boost_tree&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"regression"&lt;/span>, &lt;span class='s'>"xgboost"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>wf_spec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>workflow&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>rec_spec&lt;/span>, &lt;span class='nv'>mod_spec&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>When we go to fit it now, it takes around 125ms and allocates 37.2MB. Compared to before these changes it would take around 335ms and allocate 67.5MB.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>wf_fit&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>wf_spec&lt;/span>, &lt;span class='nv'>ames&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>We see similar speedups when we predictor with around 20ms and 25.2MB now, compared to around 60ms and 55.6MB before.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>wf_fit&lt;/span>, &lt;span class='nv'>ames&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 2,930 × 1&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; .pred&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 1&lt;/span> &lt;span style='text-decoration: underline;'>208&lt;/span>649.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 2&lt;/span> &lt;span style='text-decoration: underline;'>115&lt;/span>339.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 3&lt;/span> &lt;span style='text-decoration: underline;'>148&lt;/span>634.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 4&lt;/span> &lt;span style='text-decoration: underline;'>239&lt;/span>770.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 5&lt;/span> &lt;span style='text-decoration: underline;'>190&lt;/span>082.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 6&lt;/span> &lt;span style='text-decoration: underline;'>184&lt;/span>604.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 7&lt;/span> &lt;span style='text-decoration: underline;'>208&lt;/span>572.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 8&lt;/span> &lt;span style='text-decoration: underline;'>177&lt;/span>403 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 9&lt;/span> &lt;span style='text-decoration: underline;'>261&lt;/span>000.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>10&lt;/span> &lt;span style='text-decoration: underline;'>198&lt;/span>604.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># ℹ 2,920 more rows&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>These improvements are tightly related to memory allocation, which depends on the sparsity of the data set produced by the recipe. This is why it is hard to say how much benefit you will see. We have seen orders of magnitudes of improvements, both in terms of time and memory allocation. We have also been able to fit models where previously the data was too big to fit in memory.&lt;/p>
&lt;p>Please see the post on tidymodels.org, which goes into more detail about when you are likely to benefit from this and how to change your recipes and workflows to take full advantage of this new feature.&lt;/p>
&lt;p>There is also a &lt;a href="https://www.tidymodels.org/">https://www.tidymodels.org/&lt;/a> post going into a bit more detail about how to
&lt;a href="https://www.tidymodels.org/learn/work/sparse-recipe/" target="_blank" rel="noopener">use recipes to produce sparse data&lt;/a>.&lt;/p></description></item><item><title>bonsai 0.3.0</title><link>https://www.tidyverse.org/blog/2024/06/bonsai-0-3-0/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2024/06/bonsai-0-3-0/</guid><description>&lt;p>We&amp;rsquo;re brimming with glee to announce the release of
&lt;a href="https://bonsai.tidymodels.org" target="_blank" rel="noopener">bonsai&lt;/a> 0.3.0. bonsai is a parsnip extension package for tree-based models, and includes support for random forest and gradient-boosted tree frameworks like partykit and LightGBM. This most recent release of the package introduces support for the &lt;code>&amp;quot;aorsf&amp;quot;&lt;/code> engine, which implements accelerated oblique random forests (Jaeger et al. 2022, Jaeger et al. 2024).&lt;/p>
&lt;p>You can install it from CRAN with:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/install.packages.html'>install.packages&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"bonsai"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This blog post will demonstrate a modeling workflow where the benefits of using oblique random forests shine through.&lt;/p>
&lt;p>You can see a full list of changes in the
&lt;a href="https://bonsai.tidymodels.org/news/index.html#bonsai-030" target="_blank" rel="noopener">release notes&lt;/a>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://tidymodels.tidymodels.org'>tidymodels&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://bonsai.tidymodels.org/'>bonsai&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://plsmod.tidymodels.org'>plsmod&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://github.com/tidymodels/corrr'>corrr&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="the-meats-data">The &lt;code>meats&lt;/code> data
&lt;a href="#the-meats-data">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The modeldata package, loaded automatically with the tidymodels meta-package, includes several example datasets to demonstrate modeling problems. We&amp;rsquo;ll make use of a dataset called &lt;code>meats&lt;/code> in this post. Each row is a measurement of a sample of finely chopped meat.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>meats&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 215 × 103&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; x_001 x_002 x_003 x_004 x_005 x_006 x_007 x_008 x_009 x_010 x_011 x_012 x_013&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 1&lt;/span> 2.62 2.62 2.62 2.62 2.62 2.62 2.62 2.62 2.63 2.63 2.63 2.63 2.64&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 2&lt;/span> 2.83 2.84 2.84 2.85 2.85 2.86 2.86 2.87 2.87 2.88 2.88 2.89 2.90&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 3&lt;/span> 2.58 2.58 2.59 2.59 2.59 2.59 2.59 2.60 2.60 2.60 2.60 2.61 2.61&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 4&lt;/span> 2.82 2.82 2.83 2.83 2.83 2.83 2.83 2.84 2.84 2.84 2.84 2.85 2.85&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 5&lt;/span> 2.79 2.79 2.79 2.79 2.80 2.80 2.80 2.80 2.81 2.81 2.81 2.82 2.82&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 6&lt;/span> 3.01 3.02 3.02 3.03 3.03 3.04 3.04 3.05 3.06 3.06 3.07 3.08 3.09&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 7&lt;/span> 2.99 2.99 3.00 3.01 3.01 3.02 3.02 3.03 3.04 3.04 3.05 3.06 3.07&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 8&lt;/span> 2.53 2.53 2.53 2.53 2.53 2.53 2.53 2.53 2.54 2.54 2.54 2.54 2.54&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 9&lt;/span> 3.27 3.28 3.29 3.29 3.30 3.31 3.31 3.32 3.33 3.33 3.34 3.35 3.36&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>10&lt;/span> 3.40 3.41 3.41 3.42 3.43 3.43 3.44 3.45 3.46 3.47 3.48 3.48 3.49&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># ℹ 205 more rows&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># ℹ 90 more variables: x_014 &amp;lt;dbl&amp;gt;, x_015 &amp;lt;dbl&amp;gt;, x_016 &amp;lt;dbl&amp;gt;, x_017 &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># x_018 &amp;lt;dbl&amp;gt;, x_019 &amp;lt;dbl&amp;gt;, x_020 &amp;lt;dbl&amp;gt;, x_021 &amp;lt;dbl&amp;gt;, x_022 &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># x_023 &amp;lt;dbl&amp;gt;, x_024 &amp;lt;dbl&amp;gt;, x_025 &amp;lt;dbl&amp;gt;, x_026 &amp;lt;dbl&amp;gt;, x_027 &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># x_028 &amp;lt;dbl&amp;gt;, x_029 &amp;lt;dbl&amp;gt;, x_030 &amp;lt;dbl&amp;gt;, x_031 &amp;lt;dbl&amp;gt;, x_032 &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># x_033 &amp;lt;dbl&amp;gt;, x_034 &amp;lt;dbl&amp;gt;, x_035 &amp;lt;dbl&amp;gt;, x_036 &amp;lt;dbl&amp;gt;, x_037 &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># x_038 &amp;lt;dbl&amp;gt;, x_039 &amp;lt;dbl&amp;gt;, x_040 &amp;lt;dbl&amp;gt;, x_041 &amp;lt;dbl&amp;gt;, x_042 &amp;lt;dbl&amp;gt;, …&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>From that dataset&amp;rsquo;s documentation:&lt;/p>
&lt;blockquote>
&lt;p>These data are recorded on a Tecator Infratec Food and Feed Analyzer&amp;hellip; For each meat sample the data consists of a 100 channel spectrum of absorbances and the contents of moisture (water), fat and protein. The absorbance is -log10 of the transmittance measured by the spectrometer. The three contents, measured in percent, are determined by analytic chemistry.&lt;/p>
&lt;/blockquote>
&lt;p>We&amp;rsquo;ll try to predict the protein content, as a percentage, using the absorbance measurements.&lt;/p>
&lt;p>Before we take a further look, let&amp;rsquo;s split up our data. I&amp;rsquo;ll first select off two other possible outcome variables and, after splitting into training and testing sets, resample the data using 5-fold cross-validation with 2 repeats.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>meats&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>meats&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;span class='nf'>select&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>-&lt;/span>&lt;span class='nv'>water&lt;/span>, &lt;span class='o'>-&lt;/span>&lt;span class='nv'>fat&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/Random.html'>set.seed&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>meats_split&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>initial_split&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>meats&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>meats_train&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>training&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>meats_split&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>meats_test&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>testing&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>meats_split&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>meats_folds&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>vfold_cv&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>meats_train&lt;/span>, v &lt;span class='o'>=&lt;/span> &lt;span class='m'>5&lt;/span>, repeats &lt;span class='o'>=&lt;/span> &lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The tricky parts of this modeling problem are that:&lt;/p>
&lt;ol>
&lt;li>There are few observations to work with (215 total).&lt;/li>
&lt;li>Each of these 100 absorbance measurements are &lt;em>highly&lt;/em> correlated.&lt;/li>
&lt;/ol>
&lt;p>Visualizing that correlation:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>meats_train&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://corrr.tidymodels.org/reference/correlate.html'>correlate&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/autoplot.html'>autoplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>theme&lt;/span>&lt;span class='o'>(&lt;/span>axis.text.x &lt;span class='o'>=&lt;/span> &lt;span class='nf'>element_blank&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>, axis.text.y &lt;span class='o'>=&lt;/span> &lt;span class='nf'>element_blank&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Correlation computed with&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>•&lt;/span> Method: 'pearson'&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>•&lt;/span> Missing treated using: 'pairwise.complete.obs'&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/correlate-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>Almost all of these pairwise correlations between predictors are near 1, besides the last variable and every other variable. That last variable with weaker correlation values? It&amp;rsquo;s the outcome.&lt;/p>
&lt;h2 id="baseline-models">Baseline models
&lt;a href="#baseline-models">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>There are several existing model implementations in tidymodels that are resilient to highly correlated predictors. The first one I&amp;rsquo;d probably reach for is an elastic net: an interpolation of the LASSO and Ridge regularized linear regression models. Evaluating that modeling approach against resamples:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='c'># define a regularized linear model&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>spec_lr&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/linear_reg.html'>linear_reg&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>penalty &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://hardhat.tidymodels.org/reference/tune.html'>tune&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>, mixture &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://hardhat.tidymodels.org/reference/tune.html'>tune&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"glmnet"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='c'># try out different penalization approaches&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>res_lr&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>tune_grid&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>spec_lr&lt;/span>, &lt;span class='nv'>protein&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, &lt;span class='nv'>meats_folds&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>show_best&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>res_lr&lt;/span>, metric &lt;span class='o'>=&lt;/span> &lt;span class='s'>"rmse"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 5 × 8&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; penalty mixture .metric .estimator mean n std_err .config &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> 0.000&lt;span style='text-decoration: underline;'>032&lt;/span>4 0.668 rmse standard 1.24 10 0.051&lt;span style='text-decoration: underline;'>6&lt;/span> Preprocessor1_Mo…&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> 0.000&lt;span style='text-decoration: underline;'>000&lt;/span>005&lt;span style='text-decoration: underline;'>24&lt;/span> 0.440 rmse standard 1.25 10 0.054&lt;span style='text-decoration: underline;'>8&lt;/span> Preprocessor1_Mo…&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> 0.000&lt;span style='text-decoration: underline;'>000&lt;/span>461 0.839 rmse standard 1.26 10 0.053&lt;span style='text-decoration: underline;'>8&lt;/span> Preprocessor1_Mo…&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>4&lt;/span> 0.000&lt;span style='text-decoration: underline;'>005&lt;/span>50 0.965 rmse standard 1.26 10 0.054&lt;span style='text-decoration: underline;'>0&lt;/span> Preprocessor1_Mo…&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>5&lt;/span> 0.000&lt;span style='text-decoration: underline;'>000&lt;/span>048&lt;span style='text-decoration: underline;'>9&lt;/span> 0.281 rmse standard 1.26 10 0.053&lt;span style='text-decoration: underline;'>4&lt;/span> Preprocessor1_Mo…&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nf'>show_best&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>res_lr&lt;/span>, metric &lt;span class='o'>=&lt;/span> &lt;span class='s'>"rsq"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 5 × 8&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; penalty mixture .metric .estimator mean n std_err .config &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> 0.000&lt;span style='text-decoration: underline;'>032&lt;/span>4 0.668 rsq standard 0.849 10 0.012&lt;span style='text-decoration: underline;'>6&lt;/span> Preprocessor1_Mo…&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> 0.000&lt;span style='text-decoration: underline;'>000&lt;/span>005&lt;span style='text-decoration: underline;'>24&lt;/span> 0.440 rsq standard 0.848 10 0.012&lt;span style='text-decoration: underline;'>8&lt;/span> Preprocessor1_Mo…&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> 0.000&lt;span style='text-decoration: underline;'>000&lt;/span>461 0.839 rsq standard 0.846 10 0.011&lt;span style='text-decoration: underline;'>4&lt;/span> Preprocessor1_Mo…&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>4&lt;/span> 0.000&lt;span style='text-decoration: underline;'>005&lt;/span>50 0.965 rsq standard 0.846 10 0.011&lt;span style='text-decoration: underline;'>1&lt;/span> Preprocessor1_Mo…&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>5&lt;/span> 0.000&lt;span style='text-decoration: underline;'>000&lt;/span>048&lt;span style='text-decoration: underline;'>9&lt;/span> 0.281 rsq standard 0.846 10 0.012&lt;span style='text-decoration: underline;'>6&lt;/span> Preprocessor1_Mo…&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>That best RMSE value of 1.24 gives us a baseline to work with, and the best R-squared 0.85 seems like a good start.&lt;/p>
&lt;p>Many tree-based model implementations in tidymodels generally handle correlated predictors well. Just to be apples-to-apples with &lt;code>&amp;quot;aorsf&amp;quot;&lt;/code>, let&amp;rsquo;s use a different random forest engine to get a better sense for baseline performance:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>spec_rf&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/rand_forest.html'>rand_forest&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>mtry &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://hardhat.tidymodels.org/reference/tune.html'>tune&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>, min_n &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://hardhat.tidymodels.org/reference/tune.html'>tune&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='c'># this is the default engine, but for consistency's sake:&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"ranger"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_args.html'>set_mode&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"regression"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>res_rf&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>tune_grid&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>spec_rf&lt;/span>, &lt;span class='nv'>protein&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, &lt;span class='nv'>meats_folds&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #0000BB;'>i&lt;/span> &lt;span style='color: #000000;'>Creating pre-processing data to finalize unknown parameter: mtry&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>show_best&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>res_rf&lt;/span>, metric &lt;span class='o'>=&lt;/span> &lt;span class='s'>"rmse"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 5 × 8&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; mtry min_n .metric .estimator mean n std_err .config &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> 96 4 rmse standard 2.37 10 0.090&lt;span style='text-decoration: underline;'>5&lt;/span> Preprocessor1_Model08&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> 41 6 rmse standard 2.39 10 0.088&lt;span style='text-decoration: underline;'>3&lt;/span> Preprocessor1_Model01&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> 88 10 rmse standard 2.43 10 0.081&lt;span style='text-decoration: underline;'>6&lt;/span> Preprocessor1_Model06&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>4&lt;/span> 79 17 rmse standard 2.51 10 0.074&lt;span style='text-decoration: underline;'>0&lt;/span> Preprocessor1_Model07&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>5&lt;/span> 27 18 rmse standard 2.52 10 0.077&lt;span style='text-decoration: underline;'>8&lt;/span> Preprocessor1_Model04&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nf'>show_best&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>res_rf&lt;/span>, metric &lt;span class='o'>=&lt;/span> &lt;span class='s'>"rsq"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 5 × 8&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; mtry min_n .metric .estimator mean n std_err .config &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> 96 4 rsq standard 0.424 10 0.038&lt;span style='text-decoration: underline;'>5&lt;/span> Preprocessor1_Model08&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> 41 6 rsq standard 0.409 10 0.039&lt;span style='text-decoration: underline;'>4&lt;/span> Preprocessor1_Model01&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> 88 10 rsq standard 0.387 10 0.036&lt;span style='text-decoration: underline;'>5&lt;/span> Preprocessor1_Model06&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>4&lt;/span> 79 17 rsq standard 0.353 10 0.040&lt;span style='text-decoration: underline;'>4&lt;/span> Preprocessor1_Model07&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>5&lt;/span> 27 18 rsq standard 0.346 10 0.039&lt;span style='text-decoration: underline;'>7&lt;/span> Preprocessor1_Model04&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Not so hot. Just to show I&amp;rsquo;m not making a straw man here, I&amp;rsquo;ll evaluate a few more alternative modeling approaches behind the curtain and print out their best performance metrics:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Gradient boosted tree with LightGBM&lt;/strong>. Best RMSE: 2.34. Best R-squared: 0.43.&lt;/li>
&lt;li>&lt;strong>Partial least squares regression&lt;/strong>. Best RMSE: 1.39. Best R-squared: 0.81.&lt;/li>
&lt;li>&lt;strong>Support vector machine&lt;/strong>. Best RMSE: 2.28. Best R-squared: 0.46.&lt;/li>
&lt;/ul>
&lt;p>This is a tricky one.&lt;/p>
&lt;h2 id="introducing-accelerated-oblique-random-forests">Introducing accelerated oblique random forests
&lt;a href="#introducing-accelerated-oblique-random-forests">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The 0.3.0 release of bonsai introduces support for accelerated oblique random forests via the &lt;code>&amp;quot;aorsf&amp;quot;&lt;/code> engine for classification and regression in tidymodels. (Tidy survival modelers might note that
&lt;a href="https://www.tidyverse.org/blog/2023/04/censored-0-2-0/" target="_blank" rel="noopener">we already support &lt;code>&amp;quot;aorsf&amp;quot;&lt;/code> for censored regression&lt;/a> via the
&lt;a href="https://censored.tidymodels.org" target="_blank" rel="noopener">censored&lt;/a> parsnip extension package!)&lt;/p>
&lt;p>Unlike trees in conventional random forests, which create splits using thresholds based on individual predictors (e.g. &lt;code>x_001 &amp;gt; 3&lt;/code>), oblique random forests use linear combinations of predictors to create splits (e.g. &lt;code>x_001 * x_002 &amp;gt; 7.5&lt;/code>) and have been shown to improve predictive performance related to conventional random forests for a variety of applications (Menze et al. 2011). &amp;ldquo;Oblique&amp;rdquo; references the appearance of decision boundaries when a set of splits is plotted; I&amp;rsquo;ve grabbed a visual from the
&lt;a href="https://github.com/ropensci/aorsf?tab=readme-ov-file#what-does-oblique-mean" target="_blank" rel="noopener">aorsf README&lt;/a> that demonstrates:&lt;/p>
&lt;div class="highlight">
&lt;p>&lt;img src="figures/oblique.png" alt="Two plots of decision boundaries for a classification problem. One uses single-variable splitting and the other oblique splitting. Both trees partition the predictor space defined by predictors X1 and X2, but the oblique splits do a better job of separating the two classes thanks to an 'oblique' boundary formed by considering both X1 and X2 at the same time." width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>In the above, we&amp;rsquo;d like to separate the purple dots from the orange squares. A tree in a traditional random forest, represented on the left, can only generate splits based on one of X1 or X2 at a time. A tree in an oblique random forest, represented on the right, can consider both X1 and X2 in creating decision boundaries, often resulting in stronger predictive performance.&lt;/p>
&lt;p>Where does the &amp;ldquo;accelerated&amp;rdquo; come from? Generally, finding optimal oblique splits is computationally more intensive than finding single-predictor splits. The aorsf package uses something called &amp;ldquo;Newton Raphson scoring&amp;rdquo;&amp;mdash;the same algorithm under the hood in the survival package&amp;mdash;to identify splits based on linear combinations of predictor variables. This approach speeds up that process greatly, resulting in fit times that are analogous to implementations of traditional random forests in R (and hundreds of times faster than existing oblique random forest implementations, Jaeger et al. 2024).&lt;/p>
&lt;p>The code to tune this model with the &lt;code>&amp;quot;aorsf&amp;quot;&lt;/code> engine is the same as for &lt;code>&amp;quot;ranger&amp;quot;&lt;/code>, except we switch out the &lt;code>engine&lt;/code> argument to
&lt;a href="https://parsnip.tidymodels.org/reference/set_engine.html" target="_blank" rel="noopener">&lt;code>set_engine()&lt;/code>&lt;/a>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>spec_aorsf&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/rand_forest.html'>rand_forest&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> mtry &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://hardhat.tidymodels.org/reference/tune.html'>tune&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> min_n &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://hardhat.tidymodels.org/reference/tune.html'>tune&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span> &lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"aorsf"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_args.html'>set_mode&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"regression"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>res_aorsf&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>tune_grid&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>spec_aorsf&lt;/span>, &lt;span class='nv'>protein&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, &lt;span class='nv'>meats_folds&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #0000BB;'>i&lt;/span> &lt;span style='color: #000000;'>Creating pre-processing data to finalize unknown parameter: mtry&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>show_best&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>res_aorsf&lt;/span>, metric &lt;span class='o'>=&lt;/span> &lt;span class='s'>"rmse"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 5 × 8&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; mtry min_n .metric .estimator mean n std_err .config &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> 87 11 rmse standard 0.786 10 0.037&lt;span style='text-decoration: underline;'>0&lt;/span> Preprocessor1_Model02&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> 98 8 rmse standard 0.789 10 0.036&lt;span style='text-decoration: underline;'>3&lt;/span> Preprocessor1_Model10&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> 48 5 rmse standard 0.793 10 0.036&lt;span style='text-decoration: underline;'>3&lt;/span> Preprocessor1_Model01&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>4&lt;/span> 16 17 rmse standard 0.803 10 0.032&lt;span style='text-decoration: underline;'>5&lt;/span> Preprocessor1_Model09&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>5&lt;/span> 31 18 rmse standard 0.813 10 0.035&lt;span style='text-decoration: underline;'>9&lt;/span> Preprocessor1_Model05&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='nf'>show_best&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>res_aorsf&lt;/span>, metric &lt;span class='o'>=&lt;/span> &lt;span class='s'>"rsq"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 5 × 8&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; mtry min_n .metric .estimator mean n std_err .config &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> 48 5 rsq standard 0.946 10 0.004&lt;span style='text-decoration: underline;'>46&lt;/span> Preprocessor1_Model01&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> 98 8 rsq standard 0.945 10 0.004&lt;span style='text-decoration: underline;'>82&lt;/span> Preprocessor1_Model10&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> 87 11 rsq standard 0.945 10 0.004&lt;span style='text-decoration: underline;'>84&lt;/span> Preprocessor1_Model02&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>4&lt;/span> 16 17 rsq standard 0.941 10 0.003&lt;span style='text-decoration: underline;'>70&lt;/span> Preprocessor1_Model09&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>5&lt;/span> 31 18 rsq standard 0.940 10 0.005&lt;span style='text-decoration: underline;'>47&lt;/span> Preprocessor1_Model05&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Holy smokes. The best RMSE from aorsf is 0.79, much more performant than the previous best RMSE from the elastic net with a value of 1.24, and the best R-squared is 0.95, much stronger than the previous best (also from the elastic net) of 0.85.&lt;/p>
&lt;p>Especially if your modeling problems involve few samples of many, highly correlated predictors, give the &lt;code>&amp;quot;aorsf&amp;quot;&lt;/code> modeling engine a whirl in your workflows and let us know what you think!&lt;/p>
&lt;h2 id="references">References
&lt;a href="#references">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Byron C. Jaeger, Sawyer Welden, Kristin Lenoir, Jaime L. Speiser, Matthew W. Segar, Ambarish Pandey, Nicholas M. Pajewski. 2024. &amp;ldquo;Accelerated and Interpretable Oblique Random Survival Forests.&amp;rdquo; &lt;em>Journal of Computational and Graphical Statistics&lt;/em> 33.1: 192-207.&lt;/p>
&lt;p>Byron C. Jaeger, Sawyer Welden, Kristin Lenoir, and Nicholas M. Pajewski. 2022. &amp;ldquo;aorsf: An R package for Supervised Learning Using the Oblique Random Survival Forest.&amp;rdquo; &lt;em>The Journal of Open Source Software&lt;/em>.&lt;/p>
&lt;p>Bjoern H. Menze, B. Michael Kelm, Daniel N. Splitthoff, Ullrich Koethe, and Fred A. Hamprecht. (2011). &amp;ldquo;On Oblique Random Forests.&amp;rdquo; &lt;em>Joint European Conference on Machine Learning and Knowledge Discovery in Databases&lt;/em> (pp. 453&amp;ndash;469). Springer.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Thank you to
&lt;a href="https://github.com/bcjaeger" target="_blank" rel="noopener">@bcjaeger&lt;/a>, the aorsf author, for doing most of the work to implement aorsf support in bonsai. Thank you to
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/joranE" target="_blank" rel="noopener">@joranE&lt;/a>,
&lt;a href="https://github.com/jrosell" target="_blank" rel="noopener">@jrosell&lt;/a>,
&lt;a href="https://github.com/nipnipj" target="_blank" rel="noopener">@nipnipj&lt;/a>,
&lt;a href="https://github.com/p-schaefer" target="_blank" rel="noopener">@p-schaefer&lt;/a>,
&lt;a href="https://github.com/seb-mueller" target="_blank" rel="noopener">@seb-mueller&lt;/a>, and
&lt;a href="https://github.com/tcovert" target="_blank" rel="noopener">@tcovert&lt;/a> for their contributions on the bonsai repository since version 0.2.1.&lt;/p></description></item><item><title>Survival analysis for time-to-event data with tidymodels</title><link>https://www.tidyverse.org/blog/2024/04/tidymodels-survival-analysis/</link><pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2024/04/tidymodels-survival-analysis/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>We&amp;rsquo;re tickled pink to announce the support of survival analysis for time-to-event data across tidymodels. The
&lt;a href="https://www.tidymodels.org/" target="_blank" rel="noopener">tidymodels&lt;/a> framework is a collection of R packages for modeling and machine learning using tidyverse principles. This new support makes survival analysis a first-class citizen in tidymodels and gives censored regression modeling the same flexibility and ease as classification or regression.&lt;/p>
&lt;p>The functionality resides in multiple tidymodels packages. The easiest way to install them all is to install the tidymodels meta-package:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/install.packages.html'>install.packages&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"tidymodels"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This blog post will highlight why this is useful, explain which additions we&amp;rsquo;ve made to the framework, and point to several places to learn more.&lt;/p>
&lt;p>You can see a full list of changes in the release notes:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://parsnip.tidymodels.org/news/index.html#parsnip-120" target="_blank" rel="noopener">parsnip&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://censored.tidymodels.org/news/index.html#censored-030" target="_blank" rel="noopener">censored&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://yardstick.tidymodels.org/news/index.html#yardstick-130" target="_blank" rel="noopener">yardstick&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://workflows.tidymodels.org/news/index.html#workflows-114" target="_blank" rel="noopener">workflows&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://tune.tidymodels.org/news/index.html#tune-120" target="_blank" rel="noopener">tune&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://finetune.tidymodels.org/news/index.html#finetune-120" target="_blank" rel="noopener">finetune&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://workflowsets.tidymodels.org/news/index.html#workflowsets-110" target="_blank" rel="noopener">workflowsets&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="increasing-usefulness-two-perspectives">Increasing usefulness: Two perspectives
&lt;a href="#increasing-usefulness-two-perspectives">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;d like to situate the changes from two different perspectives: How this is useful for people already familiar with survival analysis as well as for people already familiar with tidymodels.&lt;/p>
&lt;p>If you are already familiar with both: Excellent, this is very much for you! Read on for more details on how these two things come together.&lt;/p>
&lt;h3 id="adding-tidymodels-to-your-tool-kit">Adding tidymodels to your tool kit
&lt;a href="#adding-tidymodels-to-your-tool-kit">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>If you are already familiar with survival analysis but maybe not tidymodels, these changes now unlock a whole framework for predictive modelling for you. It applies tidyverse principles to modeling, meaning it strives to be consistent, composable, and human-centered. The framework covers the modeling process from the initial test/train split of the data all the way to tuning various models. Along the way it offers a rich selection of preprocessing techniques, resampling schemes, and performance metrics along with safe-guards against accidental overfitting. We make the full case for tidymodels at
&lt;a href="https://www.tidymodels.org/" target="_blank" rel="noopener">tidymodels.org&lt;/a>.&lt;/p>
&lt;h3 id="adding-survival-analysis-to-your-tool-kit">Adding survival analysis to your tool kit
&lt;a href="#adding-survival-analysis-to-your-tool-kit">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>If you are already familiar with tidymodels but maybe not survival analysis, these changes let you leverage the familiar framework for an additional type of modeling problem. Survival analysis offers methods for modeling time-to-event data. While it has its roots in medical research, it has broad applications as that event of interest can be so much more than a medical outcome. Take customer churn as an example: We are interested in how long someone is a customer for and when they churn. For customers who churned, we have the complete time for which they were customers. For existing customers, we only know how long they&amp;rsquo;ve been customers for &lt;em>so far&lt;/em>. Such observations are called censored. So what are our modeling choices here?&lt;/p>
&lt;p>We could look at the time and model that as a regression problem. We could look at the event status and model that as a classification problem. Both options might get us somewhere close to an answer to our original modeling question but not quite there. Censored regression models let us model an outcome that includes both aspects, the time and the event status. And with that, it can deal with both censored and uncensored observations appropriately. With this type of model, we can predict the survival time, or in more applied terms, how long someone will stay as a customer. We can also predict the probability of survival at a given time point. This lets us answer questions like &amp;ldquo;How likely is it that this customer will churn after 3 months?&amp;quot;. See which prediction types are available for which models at
&lt;a href="https://censored.tidymodels.org/" target="_blank" rel="noopener">censored.tidymodels.org&lt;/a>.&lt;/p>
&lt;h2 id="ch-ch-changes-whats-new-for-censored-regression">Ch-ch-changes: What&amp;rsquo;s new for censored regression?
&lt;a href="#ch-ch-changes-whats-new-for-censored-regression">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The main components needed for this full-fledged integration of survival analysis into tidymodels were&lt;/p>
&lt;ul>
&lt;li>Survival analysis models that can take censoring into account&lt;/li>
&lt;li>Survival analysis performance metrics that can take censoring into account&lt;/li>
&lt;li>Integrating changes required by these models and metrics into the framework&lt;/li>
&lt;/ul>
&lt;p>For the models, parsnip gained a new mode, &lt;code>&amp;quot;censored regression&amp;quot;&lt;/code>, for existing models as well as new model types such as &lt;code>proportional_hazards()&lt;/code>. Engines for these reside in censored, the parsnip extension package for survival models. The &lt;code>&amp;quot;censored regression&amp;quot;&lt;/code> mode has been around for a while and we&amp;rsquo;ve previously shared posts on
&lt;a href="https://www.tidyverse.org/blog/2021/11/survival-analysis-parsnip-adjacent/" target="_blank" rel="noopener">our initial thoughts&lt;/a> and the
&lt;a href="https://www.tidyverse.org/blog/2022/08/censored-0-1-0/" target="_blank" rel="noopener">release of censored&lt;/a>.&lt;/p>
&lt;p>Now we&amp;rsquo;ve added the metrics:
&lt;a href="https://yardstick.tidymodels.org/news/index.html#yardstick-130" target="_blank" rel="noopener">yardstick v1.3.0&lt;/a> includes new metrics for assessing censored regression models. Somewhat similar to how metrics for classification models can take class predictions or probability predictions as input, these survival metrics can take predicted survival times or predictions of survival probabilities as input.&lt;/p>
&lt;p>The new metrics are&lt;/p>
&lt;ul>
&lt;li>Concordance index on the survival time via &lt;code>concordance_survival()&lt;/code>&lt;/li>
&lt;li>Brier score on the survival probability and its integrated version via &lt;code>brier_survival()&lt;/code> and &lt;code>brier_survival_integrated()&lt;/code>&lt;/li>
&lt;li>ROC curve and the area under the ROC curve on the survival probabilities via &lt;code>roc_curve_survival()&lt;/code> and &lt;code>auc_roc_survival()&lt;/code> respectively&lt;/li>
&lt;/ul>
&lt;p>The probability of survival is always defined &lt;em>at a certain point in time&lt;/em>. We call that time point the &lt;em>evaluation time&lt;/em> because it is then also the time point at which we want to evaluate model performance. Metrics that work on the survival probabilities are also called &lt;em>dynamic metrics&lt;/em> and you can read more about them here:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://www.tidymodels.org/learn/statistics/survival-metrics/" target="_blank" rel="noopener">Dynamic Performance Metrics for Event Time Data&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://www.tidymodels.org/learn/statistics/survival-metrics-details/" target="_blank" rel="noopener">Accounting for Censoring in Performance Metrics for Event Time Data&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The evaluation time is also the best example to illustrate the changes necessary to the framework. Most of them were under the hood but the evaluation time is user-facing. Let&amp;rsquo;s take a look at that.&lt;/p>
&lt;p>While the need for evaluation times is dependent on type of metric, it is not actually specified as an argument to the metric functions. Like yardstick&amp;rsquo;s other metrics, those take pre-made predictions as the input. So where do you specify it then?&lt;/p>
&lt;ul>
&lt;li>You need to specify it to directly predict survival probabilities, via
&lt;a href="https://rdrr.io/r/stats/predict.html" target="_blank" rel="noopener">&lt;code>predict()&lt;/code>&lt;/a> or &lt;code>augment()&lt;/code>. We introduced the corresponding &lt;code>eval_time&lt;/code> argument first for fitted models in
&lt;a href="https://www.tidyverse.org/blog/2023/04/censored-0-2-0/#introducing-eval_time" target="_blank" rel="noopener">parsnip and censored&lt;/a> and have added it now for workflows.&lt;/li>
&lt;li>You also need to specify it for the tuning functions &lt;code>tune_*()&lt;/code> from tune and finetune as they will predict survival probabilities as part of the tuning process.&lt;/li>
&lt;li>Lastly, the &lt;code>eval_time&lt;/code> argument now shows up when working with tuning/resampling results such as in &lt;code>show_best()&lt;/code> or &lt;code>autoplot()&lt;/code>. Those changes span the packages generating and working with resampling results: tune, finetune, and workflowsets.&lt;/li>
&lt;/ul>
&lt;p>As we said, plenty of changes under the hood but you shouldn&amp;rsquo;t need to notice them. Everything else should work &amp;ldquo;as usual,&amp;rdquo; allowing the same ease and flexibility in combining tidymodels functionality for censored regression as for classification and regression.&lt;/p>
&lt;h2 id="the-pieces-come-together-a-case-study">The pieces come together: A case study
&lt;a href="#the-pieces-come-together-a-case-study">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>To see it all in action, check out the case study
&lt;a href="https://www.tidymodels.org/learn/statistics/survival-case-study/" target="_blank" rel="noopener">How long until building complaints are dispositioned?&lt;/a> on the tidymodels website!&lt;/p>
&lt;p>The city of New York publishes data on complaints received by the Department of Buildings that include how long it takes for a complaint to be dealt with (&amp;ldquo;dispositioned&amp;rdquo;) as well as several characteristics of the complaint. The case study covers a full analysis. We start with splitting the data into test and training sets, explore different preprocessing strategies and model types via tuning, and predict with a final model. It should give you a good first impression of how to use tidymodels for predictive survival analysis.&lt;/p>
&lt;p>We hope you&amp;rsquo;ll find this new capability of tidymodels useful!&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Many thanks to the people who contributed to our packages since their last release:&lt;/p>
&lt;p>&lt;strong>parsnip:&lt;/strong>
&lt;a href="https://github.com/AlbanOtt2" target="_blank" rel="noopener">@AlbanOtt2&lt;/a>,
&lt;a href="https://github.com/birbritto" target="_blank" rel="noopener">@birbritto&lt;/a>,
&lt;a href="https://github.com/christophscheuch" target="_blank" rel="noopener">@christophscheuch&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/Freestyleyang" target="_blank" rel="noopener">@Freestyleyang&lt;/a>,
&lt;a href="https://github.com/gmcmacran" target="_blank" rel="noopener">@gmcmacran&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/jmunyoon" target="_blank" rel="noopener">@jmunyoon&lt;/a>,
&lt;a href="https://github.com/joscani" target="_blank" rel="noopener">@joscani&lt;/a>,
&lt;a href="https://github.com/jxu" target="_blank" rel="noopener">@jxu&lt;/a>,
&lt;a href="https://github.com/marcelglueck" target="_blank" rel="noopener">@marcelglueck&lt;/a>,
&lt;a href="https://github.com/mattheaphy" target="_blank" rel="noopener">@mattheaphy&lt;/a>,
&lt;a href="https://github.com/mesdi" target="_blank" rel="noopener">@mesdi&lt;/a>,
&lt;a href="https://github.com/millermc38" target="_blank" rel="noopener">@millermc38&lt;/a>,
&lt;a href="https://github.com/nipnipj" target="_blank" rel="noopener">@nipnipj&lt;/a>,
&lt;a href="https://github.com/pgg1309" target="_blank" rel="noopener">@pgg1309&lt;/a>,
&lt;a href="https://github.com/rdavis120" target="_blank" rel="noopener">@rdavis120&lt;/a>,
&lt;a href="https://github.com/seb-mueller" target="_blank" rel="noopener">@seb-mueller&lt;/a>,
&lt;a href="https://github.com/SHo-JANG" target="_blank" rel="noopener">@SHo-JANG&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>,
&lt;a href="https://github.com/vidarsumo" target="_blank" rel="noopener">@vidarsumo&lt;/a>, and
&lt;a href="https://github.com/wzbillings" target="_blank" rel="noopener">@wzbillings&lt;/a>.&lt;/p>
&lt;p>&lt;strong>censored:&lt;/strong>
&lt;a href="https://github.com/bcjaeger" target="_blank" rel="noopener">@bcjaeger&lt;/a>,
&lt;a href="https://github.com/brunocarlin" target="_blank" rel="noopener">@brunocarlin&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/noahtsao" target="_blank" rel="noopener">@noahtsao&lt;/a>, and
&lt;a href="https://github.com/tripartio" target="_blank" rel="noopener">@tripartio&lt;/a>.&lt;/p>
&lt;p>&lt;strong>yardstick:&lt;/strong>
&lt;a href="https://github.com/aecoleman" target="_blank" rel="noopener">@aecoleman&lt;/a>,
&lt;a href="https://github.com/asb2111" target="_blank" rel="noopener">@asb2111&lt;/a>,
&lt;a href="https://github.com/atsyplenkov" target="_blank" rel="noopener">@atsyplenkov&lt;/a>,
&lt;a href="https://github.com/bgreenwell" target="_blank" rel="noopener">@bgreenwell&lt;/a>,
&lt;a href="https://github.com/Dpananos" target="_blank" rel="noopener">@Dpananos&lt;/a>,
&lt;a href="https://github.com/EduMinsky" target="_blank" rel="noopener">@EduMinsky&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/heidekrueger" target="_blank" rel="noopener">@heidekrueger&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/iacrowe" target="_blank" rel="noopener">@iacrowe&lt;/a>,
&lt;a href="https://github.com/jarbet" target="_blank" rel="noopener">@jarbet&lt;/a>,
&lt;a href="https://github.com/jxu" target="_blank" rel="noopener">@jxu&lt;/a>,
&lt;a href="https://github.com/mattwarkentin" target="_blank" rel="noopener">@mattwarkentin&lt;/a>,
&lt;a href="https://github.com/maxwell-geospatial" target="_blank" rel="noopener">@maxwell-geospatial&lt;/a>,
&lt;a href="https://github.com/moloscripts" target="_blank" rel="noopener">@moloscripts&lt;/a>,
&lt;a href="https://github.com/rdavis120" target="_blank" rel="noopener">@rdavis120&lt;/a>,
&lt;a href="https://github.com/ruddnr" target="_blank" rel="noopener">@ruddnr&lt;/a>,
&lt;a href="https://github.com/SimonCoulombe" target="_blank" rel="noopener">@SimonCoulombe&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/tbrittoborges" target="_blank" rel="noopener">@tbrittoborges&lt;/a>,
&lt;a href="https://github.com/tonyelhabr" target="_blank" rel="noopener">@tonyelhabr&lt;/a>,
&lt;a href="https://github.com/tripartio" target="_blank" rel="noopener">@tripartio&lt;/a>,
&lt;a href="https://github.com/TSI-PTG" target="_blank" rel="noopener">@TSI-PTG&lt;/a>,
&lt;a href="https://github.com/vnijs" target="_blank" rel="noopener">@vnijs&lt;/a>,
&lt;a href="https://github.com/wbuchanan" target="_blank" rel="noopener">@wbuchanan&lt;/a>, and
&lt;a href="https://github.com/zkrog" target="_blank" rel="noopener">@zkrog&lt;/a>.&lt;/p>
&lt;p>&lt;strong>workflows:&lt;/strong>
&lt;a href="https://github.com/Milardkh" target="_blank" rel="noopener">@Milardkh&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;p>&lt;strong>tune:&lt;/strong>
&lt;a href="https://github.com/AlbertoImg" target="_blank" rel="noopener">@AlbertoImg&lt;/a>,
&lt;a href="https://github.com/dramanica" target="_blank" rel="noopener">@dramanica&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/epiheather" target="_blank" rel="noopener">@epiheather&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/joranE" target="_blank" rel="noopener">@joranE&lt;/a>,
&lt;a href="https://github.com/jrosell" target="_blank" rel="noopener">@jrosell&lt;/a>,
&lt;a href="https://github.com/jxu" target="_blank" rel="noopener">@jxu&lt;/a>,
&lt;a href="https://github.com/kbodwin" target="_blank" rel="noopener">@kbodwin&lt;/a>,
&lt;a href="https://github.com/kenraywilliams" target="_blank" rel="noopener">@kenraywilliams&lt;/a>,
&lt;a href="https://github.com/KJT-Habitat" target="_blank" rel="noopener">@KJT-Habitat&lt;/a>,
&lt;a href="https://github.com/lionel-" target="_blank" rel="noopener">@lionel-&lt;/a>,
&lt;a href="https://github.com/marcozanotti" target="_blank" rel="noopener">@marcozanotti&lt;/a>,
&lt;a href="https://github.com/MasterLuke84" target="_blank" rel="noopener">@MasterLuke84&lt;/a>,
&lt;a href="https://github.com/mikemahoney218" target="_blank" rel="noopener">@mikemahoney218&lt;/a>,
&lt;a href="https://github.com/PathosEthosLogos" target="_blank" rel="noopener">@PathosEthosLogos&lt;/a>,
&lt;a href="https://github.com/Peter4801" target="_blank" rel="noopener">@Peter4801&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>, and
&lt;a href="https://github.com/walkerjameschris" target="_blank" rel="noopener">@walkerjameschris&lt;/a>.&lt;/p>
&lt;p>&lt;strong>finetune:&lt;/strong>
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/jdberson" target="_blank" rel="noopener">@jdberson&lt;/a>,
&lt;a href="https://github.com/jrosell" target="_blank" rel="noopener">@jrosell&lt;/a>,
&lt;a href="https://github.com/mfansler" target="_blank" rel="noopener">@mfansler&lt;/a>,
&lt;a href="https://github.com/ruddnr" target="_blank" rel="noopener">@ruddnr&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;p>&lt;strong>workflowsets:&lt;/strong>
&lt;a href="https://github.com/dchiu911" target="_blank" rel="noopener">@dchiu911&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/jkylearmstrong" target="_blank" rel="noopener">@jkylearmstrong&lt;/a>,
&lt;a href="https://github.com/PathosEthosLogos" target="_blank" rel="noopener">@PathosEthosLogos&lt;/a>, and
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>.&lt;/p></description></item><item><title>Three ways errors are about to get better in tidymodels</title><link>https://www.tidyverse.org/blog/2023/11/tidymodels-errors-q4/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2023/11/tidymodels-errors-q4/</guid><description>&lt;p>Twice a year, the tidymodels team comes together for &amp;ldquo;spring cleaning,&amp;rdquo; a week-long project devoted to package maintenance. Ahead of the week, we come up with a list of maintenance tasks that we&amp;rsquo;d like to see consistently implemented across our packages. Many of these tasks can be completed by running one usethis function, while others are much more involved, like issue triage.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> In tidymodels, triaging issues in our core packages helps us to better understand common ways that users struggle to wrap their heads around an API choice we&amp;rsquo;ve made or find the information they need. So, among other things, refinements to the wording of our error messages is a common output of our spring cleanings. This blog post will call out three kinds of changes to our erroring that came out of this spring cleaning:&lt;/p>
&lt;ul>
&lt;li>Improving existing errors:
&lt;a href="#outcome">The outcome went missing&lt;/a>&lt;/li>
&lt;li>Do something where we once did nothing:
&lt;a href="#predict">Predicting with things that can&amp;rsquo;t predict&lt;/a>&lt;/li>
&lt;li>Make a place and point to it:
&lt;a href="#model">Model formulas&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>To demonstrate, we&amp;rsquo;ll walk through some examples using the tidymodels packages:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://tidymodels.tidymodels.org'>tidymodels&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ── &lt;span style='font-weight: bold;'>Attaching packages&lt;/span> ──────────────────────────── tidymodels 1.1.1 ──&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>broom &lt;/span> 1.0.5 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>recipes &lt;/span> 1.0.8.&lt;span style='color: #BB0000;'>9000&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>dials &lt;/span> 1.2.0 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>rsample &lt;/span> 1.2.0 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>dplyr &lt;/span> 1.1.3 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>tibble &lt;/span> 3.2.1 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>ggplot2 &lt;/span> 3.4.4 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>tidyr &lt;/span> 1.3.0 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>infer &lt;/span> 1.0.5 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>tune &lt;/span> 1.1.2.&lt;span style='color: #BB0000;'>9000&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>modeldata &lt;/span> 1.2.0 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>workflows &lt;/span> 1.1.3 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>parsnip &lt;/span> 1.1.1.&lt;span style='color: #BB0000;'>9001&lt;/span> &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>workflowsets&lt;/span> 1.0.1 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>purrr &lt;/span> 1.0.2 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>yardstick &lt;/span> 1.2.0&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;span>&lt;span class='c'>#&amp;gt; ── &lt;span style='font-weight: bold;'>Conflicts&lt;/span> ─────────────────────────────── tidymodels_conflicts() ──&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>purrr&lt;/span>::&lt;span style='color: #00BB00;'>discard()&lt;/span> masks &lt;span style='color: #0000BB;'>scales&lt;/span>::discard()&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>dplyr&lt;/span>::&lt;span style='color: #00BB00;'>filter()&lt;/span> masks &lt;span style='color: #0000BB;'>stats&lt;/span>::filter()&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>dplyr&lt;/span>::&lt;span style='color: #00BB00;'>lag()&lt;/span> masks &lt;span style='color: #0000BB;'>stats&lt;/span>::lag()&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>recipes&lt;/span>::&lt;span style='color: #00BB00;'>step()&lt;/span> masks &lt;span style='color: #0000BB;'>stats&lt;/span>::step()&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #0000BB;'>•&lt;/span> Use suppressPackageStartupMessages() to eliminate package startup messages&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Note that my installed versions include the current dev version of a few tidymodels packages. You can install those versions with:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>pak&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://pak.r-lib.org/reference/pak.html'>pak&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/paste.html'>paste0&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"tidymodels/"&lt;/span>, &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"tune"&lt;/span>, &lt;span class='s'>"parsnip"&lt;/span>, &lt;span class='s'>"recipes"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="the-outcome-went-missing-">The outcome went missing 👻
&lt;a href="#the-outcome-went-missing-">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The tidymodels packages focus on &lt;em>supervised&lt;/em> machine learning problems, predicting the value of an outcome using predictors.&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> For example, in the code:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>linear_spec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>linear_reg&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>linear_fit&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>linear_spec&lt;/span>, &lt;span class='nv'>mpg&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>hp&lt;/span>, &lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The &lt;code>mpg&lt;/code> variable is the outcome. There are many ways that an analyst may mistakenly fail to pass an outcome. In the most straightforward case, they might omit the outcome on the LHS of the formula:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">linear_spec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">hp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in lm.fit(x, y, offset = offset, singular.ok = singular.ok, ...) : &lt;/span>
&lt;span class="c1">#&amp;gt; incompatible dimensions&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, parsnip used to defer to the modeling engine to raise an error, which may or may not be informative.&lt;/p>
&lt;p>There are many less obvious ways an analyst may mistakenly supply no outcome variable. For example, try spotting the issue in the following code, defining a recipe to perform principal component analysis (PCA) on the numeric variables in the data before fitting the model:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">mtcars_rec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_pca&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">all_numeric&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nf">workflow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtcars_rec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">linear_spec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error: object &amp;#39;.&amp;#39; not found&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A head-scratcher! To help diagnose what&amp;rsquo;s happening here, we could first try seeing what data is actually being passed to the model.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>mtcars_rec_trained&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span>&lt;/span>
&lt;span> &lt;span class='nv'>mtcars_rec&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>prep&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span> &lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>mtcars_rec_trained&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span> &lt;span class='nf'>bake&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='kc'>NULL&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 32 × 5&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; PC1 PC2 PC3 PC4 PC5&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 1&lt;/span> -&lt;span style='color: #BB0000;'>195.&lt;/span> 12.8 -&lt;span style='color: #BB0000;'>11.4&lt;/span> 0.016&lt;span style='text-decoration: underline;'>4&lt;/span> 2.17 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 2&lt;/span> -&lt;span style='color: #BB0000;'>195.&lt;/span> 12.9 -&lt;span style='color: #BB0000;'>11.7&lt;/span> -&lt;span style='color: #BB0000;'>0.479&lt;/span> 2.11 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 3&lt;/span> -&lt;span style='color: #BB0000;'>142.&lt;/span> 25.9 -&lt;span style='color: #BB0000;'>16.0&lt;/span> -&lt;span style='color: #BB0000;'>1.34&lt;/span> -&lt;span style='color: #BB0000;'>1.18&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 4&lt;/span> -&lt;span style='color: #BB0000;'>279.&lt;/span> -&lt;span style='color: #BB0000;'>38.3&lt;/span> -&lt;span style='color: #BB0000;'>14.0&lt;/span> 0.157 -&lt;span style='color: #BB0000;'>0.817&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 5&lt;/span> -&lt;span style='color: #BB0000;'>399.&lt;/span> -&lt;span style='color: #BB0000;'>37.3&lt;/span> -&lt;span style='color: #BB0000;'>1.38&lt;/span> 2.56 -&lt;span style='color: #BB0000;'>0.444&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 6&lt;/span> -&lt;span style='color: #BB0000;'>248.&lt;/span> -&lt;span style='color: #BB0000;'>25.6&lt;/span> -&lt;span style='color: #BB0000;'>12.2&lt;/span> -&lt;span style='color: #BB0000;'>3.01&lt;/span> -&lt;span style='color: #BB0000;'>1.08&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 7&lt;/span> -&lt;span style='color: #BB0000;'>435.&lt;/span> 20.9 13.9 0.801 -&lt;span style='color: #BB0000;'>0.916&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 8&lt;/span> -&lt;span style='color: #BB0000;'>160.&lt;/span> -&lt;span style='color: #BB0000;'>20.0&lt;/span> -&lt;span style='color: #BB0000;'>23.3&lt;/span> -&lt;span style='color: #BB0000;'>1.06&lt;/span> 0.787&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 9&lt;/span> -&lt;span style='color: #BB0000;'>172.&lt;/span> 10.8 -&lt;span style='color: #BB0000;'>18.3&lt;/span> -&lt;span style='color: #BB0000;'>4.40&lt;/span> -&lt;span style='color: #BB0000;'>0.836&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>10&lt;/span> -&lt;span style='color: #BB0000;'>209.&lt;/span> 19.7 -&lt;span style='color: #BB0000;'>8.94&lt;/span> -&lt;span style='color: #BB0000;'>2.58&lt;/span> 1.33 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># ℹ 22 more rows&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Mmm. What happened to &lt;code>mpg&lt;/code>? We mistakenly told &lt;code>step_pca()&lt;/code> to perform PCA on &lt;em>all&lt;/em> of the numeric variables, not just the numeric &lt;em>predictors&lt;/em>! As a result, it incorporated &lt;code>mpg&lt;/code> into the principal components, removing each of the original numeric variables after the fact. Rewriting using the correct tidyselect specification &lt;code>all_numeric_predictors()&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>mtcars_rec_new&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>recipe&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mpg&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, &lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>step_pca&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>all_numeric_predictors&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>workflow&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_rec_new&lt;/span>, &lt;span class='nv'>linear_spec&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span> &lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ══ Workflow [trained] ════════════════════════════════════════════════&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='font-style: italic;'>Preprocessor:&lt;/span> Recipe&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='font-style: italic;'>Model:&lt;/span> linear_reg()&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ── Preprocessor ──────────────────────────────────────────────────────&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; 1 Recipe Step&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; • step_pca()&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; ── Model ─────────────────────────────────────────────────────────────&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Call:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; stats::lm(formula = ..y ~ ., data = data)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Coefficients:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; (Intercept) PC1 PC2 PC3 PC4 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; 43.39293 0.07609 -0.05266 0.57892 0.94890 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; PC5 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; -1.72569&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Works like a charm. That error we saw previously could be much more helpful, though. With the current developmental version of parsnip, this looks like:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>linear_spec&lt;/span>, &lt;span class='o'>~&lt;/span> &lt;span class='nv'>hp&lt;/span>, &lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'>:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> `linear_reg()` was unable to find an outcome.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> Ensure that you have specified an outcome column and that it hasn't&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; been removed in pre-processing.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Or, with workflows:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>workflow&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars_rec&lt;/span>, &lt;span class='nv'>linear_spec&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span> &lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'>:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> `linear_reg()` was unable to find an outcome.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> Ensure that you have specified an outcome column and that it hasn't&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; been removed in pre-processing.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Much better.&lt;/p>
&lt;h2 id="predicting-with-things-that-cant-predict">Predicting with things that can&amp;rsquo;t predict
&lt;a href="#predicting-with-things-that-cant-predict">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Earlier this year, Dr. Louise E. Sinks put out a
&lt;a href="https://lsinks.github.io/posts/2023-04-10-tidymodels/tidymodels_tutorial.html" target="_blank" rel="noopener">wonderful blog post&lt;/a> documenting what it felt like to approach the various object types defined in the tidymodels as a newcomer to the collection of packages. They wrote:&lt;/p>
&lt;blockquote>
&lt;p>I found it confusing that &lt;code>fit&lt;/code>, &lt;code>last_fit&lt;/code>, &lt;code>fit_resamples&lt;/code>, etc., did not all produce objects that contained the same information and could be acted on by the same functions.&lt;/p>
&lt;/blockquote>
&lt;p>This makes sense. While we try to forefront the intended mental model for fitting and predicting with tidymodels in our APIs and documentation, we also need to be proactive in anticipating common challenges in constructing that mental model.&lt;/p>
&lt;p>For example, we&amp;rsquo;ve found that it&amp;rsquo;s sometimes not clear to users which outputs they can call
&lt;a href="https://rdrr.io/r/stats/predict.html" target="_blank" rel="noopener">&lt;code>predict()&lt;/code>&lt;/a> on. One such situation, as Louise points out, is with &lt;code>fit_resamples()&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='c'># fit a linear regression model to bootstrap resamples of mtcars&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>mtcars_res&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>fit_resamples&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>linear_reg&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>mpg&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, &lt;span class='nf'>bootstraps&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>mtcars_res&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; # Resampling results&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; # Bootstrap sampling &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 25 × 4&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; splits id .metrics .notes &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 1&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/11]&amp;gt;&lt;/span> Bootstrap01 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 2&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/10]&amp;gt;&lt;/span> Bootstrap02 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 3&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/16]&amp;gt;&lt;/span> Bootstrap03 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 4&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/11]&amp;gt;&lt;/span> Bootstrap04 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 5&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/10]&amp;gt;&lt;/span> Bootstrap05 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 6&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/13]&amp;gt;&lt;/span> Bootstrap06 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 7&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/16]&amp;gt;&lt;/span> Bootstrap07 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 8&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/11]&amp;gt;&lt;/span> Bootstrap08 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 9&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/11]&amp;gt;&lt;/span> Bootstrap09 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>10&lt;/span> &lt;span style='color: #555555;'>&amp;lt;split [32/10]&amp;gt;&lt;/span> Bootstrap10 &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 4]&amp;gt;&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [0 × 3]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># ℹ 15 more rows&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>With previous tidymodels versions, mistakenly trying to predict with this object resulted in the following output:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">predict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtcars_res&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in UseMethod(&amp;#34;predict&amp;#34;) : &lt;/span>
&lt;span class="c1">#&amp;gt; no applicable method for &amp;#39;predict&amp;#39; applied to an object of class&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;#34;c(&amp;#39;resample_results&amp;#39;, &amp;#39;tune_results&amp;#39;, &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39;, &amp;#39;data.frame&amp;#39;)&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some R developers may recognize this error as what results when we didn&amp;rsquo;t define any
&lt;a href="https://rdrr.io/r/stats/predict.html" target="_blank" rel="noopener">&lt;code>predict()&lt;/code>&lt;/a> method for &lt;code>tune_results&lt;/code> objects. We didn&amp;rsquo;t do so because prediction isn&amp;rsquo;t well-defined for tuning results. &lt;em>But&lt;/em>, this error message does little to help a user understand why that&amp;rsquo;s the case.&lt;/p>
&lt;p>We&amp;rsquo;ve recently made some changes to error more informatively in this case. We do so by defining a &amp;ldquo;dummy&amp;rdquo;
&lt;a href="https://rdrr.io/r/stats/predict.html" target="_blank" rel="noopener">&lt;code>predict()&lt;/code>&lt;/a> method for tuning results, implemented only for the sake of erroring more informatively. The same code will now give the following output:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">predict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtcars_res&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in `predict()`:&lt;/span>
&lt;span class="c1">#&amp;gt; ! `predict()` is not well-defined for tuning results.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ To predict with the optimal model configuration from tuning&lt;/span>
&lt;span class="c1">#&amp;gt; results, ensure that the tuning result was generated with the&lt;/span>
&lt;span class="c1">#&amp;gt; control option `save_workflow = TRUE`, run `fit_best()`, and&lt;/span>
&lt;span class="c1">#&amp;gt; then predict using `predict()` on its output.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ To collect predictions from tuning results, ensure that the&lt;/span>
&lt;span class="c1">#&amp;gt; tuning result was generated with the control option `save_pred&lt;/span>
&lt;span class="c1">#&amp;gt; = TRUE` and run `collect_predictions()`.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>References to important concepts or functions, like
&lt;a href="https://tune.tidymodels.org/reference/control_grid.html" target="_blank" rel="noopener">control options&lt;/a>,
&lt;a href="https://tune.tidymodels.org/reference/fit_best.html?q=fit_best" target="_blank" rel="noopener">&lt;code>fit_best()&lt;/code>&lt;/a>, and
&lt;a href="https://tune.tidymodels.org/reference/collect_predictions.html?q=collect" target="_blank" rel="noopener">&lt;code>collect_predictions()&lt;/code>&lt;/a>, link to the help-files for those functions using
&lt;a href="https://cli.r-lib.org/reference/cli_abort.html" target="_blank" rel="noopener">cli&amp;rsquo;s erroring tools&lt;/a>.&lt;/p>
&lt;p>We hope new error messages like this will help to get folks back on track.&lt;/p>
&lt;h2 id="model-formulas">Model formulas
&lt;a href="#model-formulas">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>In R, formulas provide a compact, symbolic notation to specify model terms. Many modeling functions in R make use of &amp;ldquo;specials,&amp;rdquo; or nonstandard notations used in formulas. Specials are defined and handled as a special case by a given modeling package. parsnip defers to engine packages to handle specials, so you can work with them as usual. For example, the mgcv package provides support for generalized additive models in R, and defines a special called &lt;code>s()&lt;/code> to indicate smoothing terms. You can interface with it via tidymodels like so:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='c'># define a generalized additive model specification&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>gam_spec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>gen_additive_mod&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"regression"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='c'># fit the specification using a formula with specials&lt;/span>&lt;/span>
&lt;span>&lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>gam_spec&lt;/span>, &lt;span class='nv'>mpg&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>cyl&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nf'>s&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>disp&lt;/span>, k &lt;span class='o'>=&lt;/span> &lt;span class='m'>5&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; parsnip model object&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Family: gaussian &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Link function: identity &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Formula:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; mpg ~ cyl + s(disp, k = 5)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Estimated degrees of freedom:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; 3.39 total = 5.39 &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; GCV score: 6.380152&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>While parsnip can handle specials just fine, the package is often used in conjunction with the greater tidymodels package ecosystem, which defines its own pre-processing infrastructure and functionality via packages like hardhat and recipes. The specials defined in many modeling packages introduce conflicts with that infrastructure. To support specials while also maintaining consistent syntax elsewhere in the ecosystem, &lt;strong>tidymodels delineates between two types of formulas: preprocessing formulas and model formulas&lt;/strong>. Preprocessing formulas determine the input variables, while model formulas determine the model structure.&lt;/p>
&lt;p>This is a tricky abstraction, and one that users have tripped up on in the past. Users could generate all sorts of different errors by 1) mistakenly passing model formulas where preprocessing formulas were expected, or 2) forgetting to pass a model formula where it&amp;rsquo;s needed. For an example of 1), we could pass recipes the same formula we passed to parsnip:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">cyl&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nf">s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">disp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in `inline_check()`:&lt;/span>
&lt;span class="c1">#&amp;gt; ! No in-line functions should be used here; use steps to &lt;/span>
&lt;span class="c1">#&amp;gt; define baking actions.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But we &lt;em>just&lt;/em> used a special with another tidymodels function! Rude!&lt;/p>
&lt;p>Or, to demonstrate 2), we pass the preprocessing formula as we ought to but forget to provide the model formula:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">gam_wflow&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">workflow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_formula&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_model&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gam_spec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">gam_wflow&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in `fit_xy()`:&lt;/span>
&lt;span class="c1">#&amp;gt; ! `fit()` must be used with GAM models (due to its use of formulas).&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Uh, but I &lt;em>did&lt;/em> just use &lt;code>fit()&lt;/code>!&lt;/p>
&lt;p>Since the distinction between model formulas and preprocessor formulas comes up in functions across tidymodels, we decide to create a
&lt;a href="https://parsnip.tidymodels.org/dev/reference/model_formula.html" target="_blank" rel="noopener">central page&lt;/a> that documents the concept itself, hopefully making the syntax associated with it come more easily to users. Then, we link to it &lt;em>all over the place&lt;/em>. For example, those errors now look like:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>recipe&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mpg&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>cyl&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nf'>s&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>disp&lt;/span>, k &lt;span class='o'>=&lt;/span> &lt;span class='m'>5&lt;/span>&lt;span class='o'>)&lt;/span>, &lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'> in `inline_check()`:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> No in-line functions should be used here.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> The following function was found: `s`.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> Use steps to do transformations instead.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> If your modeling engine uses special terms in formulas, pass that&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; formula to workflows as a model formula&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; (`?parsnip::model_formula()`).&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Or:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>gam_wflow&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span> &lt;span class='nf'>fit&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>mtcars&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'>:&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> When working with generalized additive models, please supply&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; the model specification to `workflows::add_model()` along with a&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; `formula` argument.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BBBB;'>ℹ&lt;/span> See `?parsnip::model_formula()` to learn more.&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>While I&amp;rsquo;ve only outlined three, there are all sorts of improvements to error messages on their way to the tidymodels packages in upcoming releases. If you happen to stumble across them, we hope they quickly set you back on the right path. 🗺&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Issue triage consists of categorizing, prioritizing, and consolidating issues in a repository&amp;rsquo;s issue tracker. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>See the
&lt;a href="https://tidyclust.tidymodels.org" target="_blank" rel="noopener">tidyclust&lt;/a> package for unsupervised learning with tidymodels! &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>censored 0.2.0</title><link>https://www.tidyverse.org/blog/2023/04/censored-0-2-0/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2023/04/censored-0-2-0/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>We&amp;rsquo;re thrilled to announce the release of
&lt;a href="https://censored.tidymodels.org/" target="_blank" rel="noopener">censored&lt;/a> 0.2.0. censored is a parsnip extension package for survival models.&lt;/p>
&lt;p>You can install it from CRAN with:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/install.packages.html'>install.packages&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"censored"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This blog post will introduce you to a new argument name, &lt;code>eval_time&lt;/code>, and two new engines for fitting random forests and parametric survival models.&lt;/p>
&lt;p>You can see a full list of changes in the
&lt;a href="https://github.com/tidymodels/censored/releases/tag/v0.2.0" target="_blank" rel="noopener">release notes&lt;/a>.&lt;/p>
&lt;h2 id="introducing-eval_time">Introducing &lt;code>eval_time&lt;/code>
&lt;a href="#introducing-eval_time">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>As we continue to add support for survival analysis across tidymodels, we have seen a need to be more explicit about which time we mean when we say &amp;ldquo;time&amp;rdquo;: event time, observed time, censoring time, time at which to predict survival probability at? The last one is a particular mouthful. We now refer to this time as &amp;ldquo;evaluation time.&amp;rdquo; In preparation for dynamic survival performance metrics which can be calculated at different evaluation time points, the argument to set these evaluation time points for
&lt;a href="https://rdrr.io/r/stats/predict.html" target="_blank" rel="noopener">&lt;code>predict()&lt;/code>&lt;/a> is now called &lt;code>eval_time&lt;/code> instead of just &lt;code>time&lt;/code>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>cox&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/proportional_hazards.html'>proportional_hazards&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"survival"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_args.html'>set_mode&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"censored regression"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/fit.html'>fit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/Surv.html'>Surv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>time&lt;/span>, &lt;span class='nv'>status&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>lung&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>pred&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>cox&lt;/span>, &lt;span class='nv'>lung&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span>, &lt;span class='o'>]&lt;/span>, type &lt;span class='o'>=&lt;/span> &lt;span class='s'>"survival"&lt;/span>, eval_time &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>100&lt;/span>, &lt;span class='m'>500&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>pred&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 3 × 1&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; .pred &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span> &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 2]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 2]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [2 × 2]&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The predictions follow the tidymodels principle of one row per observation, and the nested tibble contains the predicted survival probability, &lt;code>.pred_survival&lt;/code>, as well as the corresponding evaluation time. The column for the evaluation time is now called &lt;code>.eval_time&lt;/code> instead of &lt;code>.time&lt;/code>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>pred&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>.pred&lt;/span>&lt;span class='o'>[[&lt;/span>&lt;span class='m'>2&lt;/span>&lt;span class='o'>]&lt;/span>&lt;span class='o'>]&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 2 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; .eval_time .pred_survival&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> 100 0.910&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> 500 0.422&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="new-engines">New engines
&lt;a href="#new-engines">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>censored contains engines for parametric, semi-parametric, and tree-based models. This release adds two new engines:&lt;/p>
&lt;ul>
&lt;li>the &lt;code>&amp;quot;aorsf&amp;quot;&lt;/code> engine for random forests via
&lt;a href="https://parsnip.tidymodels.org/reference/rand_forest.html" target="_blank" rel="noopener">&lt;code>rand_forest()&lt;/code>&lt;/a>&lt;/li>
&lt;li>the &lt;code>&amp;quot;flexsurvspline&amp;quot;&lt;/code> engine for parametric models via
&lt;a href="https://parsnip.tidymodels.org/reference/survival_reg.html" target="_blank" rel="noopener">&lt;code>survival_reg()&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="new-aorsf-engine-for-rand_forest">New &lt;code>&amp;quot;aorsf&amp;quot;&lt;/code> engine for &lt;code>rand_forest()&lt;/code>
&lt;a href="#new-aorsf-engine-for-rand_forest">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>This engine has been contributed by
&lt;a href="https://github.com/bcjaeger" target="_blank" rel="noopener">Byron Jaeger&lt;/a> and enables users to fit oblique random survival forests with the aorsf package. What&amp;rsquo;s with the &lt;em>oblique&lt;/em> you ask?&lt;/p>
&lt;p>Oblique describes how the decision trees that form the random forest make their splits at each node. If the split is based on a single predictor, the resulting tree is called &lt;em>axis-based&lt;/em> because the split is perpendicular to the axis of the predictor. If the split is based on a linear combination of predictors, there is a lot more flexibility in how the data is split: the split does not need to be perpendicular to any of the predictor axes. Such trees are called &lt;em>oblique&lt;/em>.&lt;/p>
&lt;p>The documentation for the
&lt;a href="https://docs.ropensci.org/aorsf" target="_blank" rel="noopener">aorsf&lt;/a> package includes a nice illustration of this with the splits for an axis-based tree on the left and an oblique tree on the right:&lt;/p>
&lt;p>&lt;img src="https://docs.ropensci.org/aorsf/reference/figures/tree_axis_v_oblique.png" alt="Two scatter plots of data with two predictors, X1 and X2, and two classes, coded as pink dots and orange squares. The lefthand plot shows the splits of an axis-based decision tree which are at a right angle to the axis. The resulting partition generally separates the classes well but not perfectly. The righthand plot shows the splits of an oblique tree which achieves perfect separation on this example because it can cut across the predictor space diagnonally.">&lt;/p>
&lt;p>To fit such a model, set the engine for a random forest to &lt;code>&amp;quot;aorsf&amp;quot;&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>lung&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/na.fail.html'>na.omit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>lung&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>forest&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/rand_forest.html'>rand_forest&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"aorsf"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_args.html'>set_mode&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"censored regression"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/fit.html'>fit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/Surv.html'>Surv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>time&lt;/span>, &lt;span class='nv'>status&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>lung&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>pred&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>forest&lt;/span>, &lt;span class='nv'>lung&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span>, &lt;span class='o'>]&lt;/span>, type &lt;span class='o'>=&lt;/span> &lt;span class='s'>"survival"&lt;/span>, eval_time &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>100&lt;/span>, &lt;span class='m'>500&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='nv'>pred&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>.pred&lt;/span>&lt;span class='o'>[[&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>]&lt;/span>&lt;span class='o'>]&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 2 × 2&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; .eval_time .pred_survival&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> 100 0.928&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> 500 0.368&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="new-flexsurvspline-engine-for-survival_reg">New &lt;code>&amp;quot;flexsurvspline&amp;quot;&lt;/code> engine for &lt;code>survival_reg()&lt;/code>
&lt;a href="#new-flexsurvspline-engine-for-survival_reg">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>This engine has been contributed by
&lt;a href="https://github.com/mattwarkentin" target="_blank" rel="noopener">Matt Warkentin&lt;/a> and enables users to fit a parametric survival model with splines via
&lt;a href="https://rdrr.io/pkg/flexsurv/man/flexsurvspline.html" target="_blank" rel="noopener">&lt;code>flexsurv::flexsurvspline()&lt;/code>&lt;/a>.&lt;/p>
&lt;p>This model uses natural cubic splines to model a transformation of the survival function, e.g., the log cumulative hazard. This gives a lot more flexibility to a parametric model allowing us, for example, to represent more irregular hazard curves. Let&amp;rsquo;s illustrate that with a data set of survival times of breast cancer patients, based on the example from
&lt;a href="https://www.jstatsoft.org/article/view/v070i08" target="_blank" rel="noopener">Jackson (2016)&lt;/a>.&lt;/p>
&lt;p>The flexibility of the model is governed by &lt;code>k&lt;/code>, the number of knots in the spline. We set &lt;code>scale = &amp;quot;odds&amp;quot;&lt;/code> for a proportional hazards model.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/data.html'>data&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>bc&lt;/span>, package &lt;span class='o'>=&lt;/span> &lt;span class='s'>"flexsurv"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>fit_splines&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/survival_reg.html'>survival_reg&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"flexsurvspline"&lt;/span>, k &lt;span class='o'>=&lt;/span> &lt;span class='m'>5&lt;/span>, scale &lt;span class='o'>=&lt;/span> &lt;span class='s'>"odds"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/fit.html'>fit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/Surv.html'>Surv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>recyrs&lt;/span>, &lt;span class='nv'>censrec&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>group&lt;/span>, data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>bc&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>For comparison, we also fit a parametric model without splines.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>fit_gengamma&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/survival_reg.html'>survival_reg&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>dist &lt;span class='o'>=&lt;/span> &lt;span class='s'>"gengamma"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"flexsurv"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/fit.html'>fit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/Surv.html'>Surv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>recyrs&lt;/span>, &lt;span class='nv'>censrec&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>group&lt;/span>, data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>bc&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>We can predict the hazard for the three levels of the prognostic &lt;code>group&lt;/code>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>bc_groups&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>tibble&lt;/span>&lt;span class='o'>(&lt;/span>group &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Poor"&lt;/span>,&lt;span class='s'>"Medium"&lt;/span>,&lt;span class='s'>"Good"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>pred_splines&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>fit_splines&lt;/span>, new_data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>bc_groups&lt;/span>, type &lt;span class='o'>=&lt;/span> &lt;span class='s'>"hazard"&lt;/span>, &lt;/span>
&lt;span> eval_time &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/seq.html'>seq&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0.1&lt;/span>, &lt;span class='m'>8&lt;/span>, by &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>mutate&lt;/span>&lt;span class='o'>(&lt;/span>model &lt;span class='o'>=&lt;/span> &lt;span class='s'>"splines"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>bind_cols&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>bc_groups&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nv'>pred_gengamma&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>fit_gengamma&lt;/span>, new_data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>bc_groups&lt;/span>, type &lt;span class='o'>=&lt;/span> &lt;span class='s'>"hazard"&lt;/span>, &lt;/span>
&lt;span> eval_time &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/seq.html'>seq&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0.1&lt;/span>, &lt;span class='m'>8&lt;/span>, by &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>mutate&lt;/span>&lt;span class='o'>(&lt;/span>model &lt;span class='o'>=&lt;/span> &lt;span class='s'>"gengamma"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>bind_cols&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>bc_groups&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Plotting the predictions of both models shows a lot more flexibility in the splines model.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>bind_rows&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>pred_splines&lt;/span>, &lt;span class='nv'>pred_gengamma&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>mutate&lt;/span>&lt;span class='o'>(&lt;/span>group &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/factor.html'>factor&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>group&lt;/span>, levels &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"Poor"&lt;/span>,&lt;span class='s'>"Medium"&lt;/span>,&lt;span class='s'>"Good"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>tidyr&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://tidyr.tidyverse.org/reference/unnest.html'>unnest&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>cols &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.pred&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>|&amp;gt;&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>ggplot&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>geom_line&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>aes&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.eval_time&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.pred_hazard&lt;/span>, group &lt;span class='o'>=&lt;/span> &lt;span class='nv'>group&lt;/span>, col &lt;span class='o'>=&lt;/span> &lt;span class='nv'>group&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>facet_wrap&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>~&lt;/span> &lt;span class='nv'>model&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-8-1.png" alt="Two panels side by side, showing the predicted hazard curves for the three prognostic groups from the parametric model on the left and the spline model on the right. The curves for the spline model show more wiggliness, having more flexibility to adapt to the data than the curves from the parametric model which have to follow a generalized gamma distribution." width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Special thanks to Matt Warkentin and Byron Jaeger for the new engines! A big thank you to all the people who have contributed to censored since the release of v0.1.0:&lt;/p>
&lt;p>
&lt;a href="https://github.com/bcjaeger" target="_blank" rel="noopener">@bcjaeger&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/mattwarkentin" target="_blank" rel="noopener">@mattwarkentin&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/therneau" target="_blank" rel="noopener">@therneau&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p></description></item><item><title>Q4 2022 tidymodels digest</title><link>https://www.tidyverse.org/blog/2022/12/tidymodels-2022-q4/</link><pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2022/12/tidymodels-2022-q4/</guid><description>&lt;p>The
&lt;a href="https://www.tidymodels.org/" target="_blank" rel="noopener">tidymodels&lt;/a> framework is a collection of R packages for modeling and machine learning using tidyverse principles.&lt;/p>
&lt;p>Since the beginning of 2021, we have been publishing
&lt;a href="https://www.tidyverse.org/categories/roundup/" target="_blank" rel="noopener">quarterly updates&lt;/a> here on the tidyverse blog summarizing what&amp;rsquo;s new in the tidymodels ecosystem. The purpose of these regular posts is to share useful new features and any updates you may have missed. You can check out the
&lt;a href="https://www.tidyverse.org/tags/tidymodels/" target="_blank" rel="noopener">&lt;code>tidymodels&lt;/code> tag&lt;/a> to find all tidymodels blog posts here, including our roundup posts as well as those that are more focused, like these posts from the past couple months:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://www.tidyverse.org/blog/2022/12/tidyclust-0-1-0/" target="_blank" rel="noopener">tidyclust is on CRAN&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://www.tidyverse.org/blog/2022/11/model-calibration/" target="_blank" rel="noopener">Model calibration&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://www.tidyverse.org/blog/2022/10/parsnip-checking-1-0-2/" target="_blank" rel="noopener">Improvements to model specification checking in tidymodels&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Since
&lt;a href="https://www.tidyverse.org/blog/2022/10/tidymodels-2022-q3/" target="_blank" rel="noopener">our last roundup post&lt;/a>, there have been CRAN releases of 9 tidymodels packages. Here are links to their NEWS files:&lt;/p>
&lt;div class="highlight">
&lt;ul>
&lt;li>bonsai
&lt;a href="https://bonsai.tidymodels.org/news/index.html" target="_blank" rel="noopener">(0.2.1)&lt;/a>&lt;/li>
&lt;li>broom
&lt;a href="https://broom.tidymodels.org/news/index.html" target="_blank" rel="noopener">(1.0.2)&lt;/a>&lt;/li>
&lt;li>butcher
&lt;a href="https://butcher.tidymodels.org/news/index.html" target="_blank" rel="noopener">(0.3.1)&lt;/a>&lt;/li>
&lt;li>dials
&lt;a href="https://dials.tidymodels.org/news/index.html" target="_blank" rel="noopener">(1.1.0)&lt;/a>&lt;/li>
&lt;li>parsnip
&lt;a href="https://parsnip.tidymodels.org/news/index.html" target="_blank" rel="noopener">(1.0.3)&lt;/a>&lt;/li>
&lt;li>recipes
&lt;a href="https://recipes.tidymodels.org/news/index.html" target="_blank" rel="noopener">(1.0.3)&lt;/a>&lt;/li>
&lt;li>rsample
&lt;a href="https://rsample.tidymodels.org/news/index.html" target="_blank" rel="noopener">(1.1.1)&lt;/a>&lt;/li>
&lt;li>stacks
&lt;a href="https://stacks.tidymodels.org/news/index.html" target="_blank" rel="noopener">(1.0.1)&lt;/a>&lt;/li>
&lt;li>workflows
&lt;a href="https://workflows.tidymodels.org/news/index.html" target="_blank" rel="noopener">(1.1.2)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>We&amp;rsquo;ll highlight a few especially notable changes below: more specialized role selectors in recipes, extended support for grouped resampling in rsample, and a big speedup in parsnip. First, loading the collection of packages:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://tidymodels.tidymodels.org'>tidymodels&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="specialized-role-selectors">Specialized role selectors
&lt;a href="#specialized-role-selectors">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The
&lt;a href="https://recipes.tidymodels.org/" target="_blank" rel="noopener">recipes package for preprocessing&lt;/a> supports tidyselect-style variable selection, and includes some of its own selectors to support common modeling workflows.&lt;/p>
&lt;p>To illustrate, we&amp;rsquo;ll make use of a dataset &lt;code>goofy_data&lt;/code> with a number of different variable types:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>goofy_data&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; tibble [100 × 10] (S3: tbl_df/tbl/data.frame)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ class: Factor w/ 2 levels "class_1","class_2": 1 1 2 1 2 1 1 2 2 2 ...&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ a : Factor w/ 7 levels "-3","-2","-1",..: 4 4 3 2 4 5 2 2 3 5 ...&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ b : Factor w/ 9 levels "-4","-3","-2",..: 9 5 4 3 4 7 4 2 3 6 ...&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ c : int [1:100] 0 0 0 0 0 0 0 -1 0 1 ...&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ d : int [1:100] 0 1 1 1 0 1 1 0 0 1 ...&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ e : int [1:100] 1 0 1 0 0 1 1 0 1 1 ...&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ f : num [1:100] 1.01 -1.99 2.18 2.3 -3.01 ...&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ g : num [1:100] -0.845 1.456 1.948 1.354 1.085 ...&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ h : num [1:100] -0.285 0.59 -0.938 1.447 0.424 ...&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; $ i : chr [1:100] "white" "maroon" "maroon" "maroon" ...&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Imagine a classification problem on the &lt;code>goofy_data&lt;/code> where we&amp;rsquo;d like to predict &lt;code>class&lt;/code> using the remaining variables as predictors. The selector functions allow us to perform operations on only the predictors with a certain class. For instance, centering and scaling all numeric predictors:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>recipe&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>class&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, &lt;span class='nv'>goofy_data&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>step_normalize&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>all_numeric_predictors&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>prep&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Recipe&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Inputs:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; role #variables&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; outcome 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; predictor 9&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Training data contained 100 data points and no missing data.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Operations:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Centering and scaling for c, d, e, f, g, h [trained]&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Or making dummy variables out of each of the nominal predictors:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>recipe&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>class&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, &lt;span class='nv'>goofy_data&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>step_dummy&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>all_nominal_predictors&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>prep&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Recipe&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Inputs:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; role #variables&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; outcome 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; predictor 9&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Training data contained 100 data points and no missing data.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Operations:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Dummy variables from a, b, i [trained]&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Operations like those above have been long-standing functionality in recipes, and are powerful tools for effective modeling. The most recent release of recipes introduced
&lt;a href="https://fosstodon.org/@emilhvitfeldt/109315135944110742" target="_blank" rel="noopener">finer-grain selectors&lt;/a> for variable types. For instance, we may want to only center and scale the &lt;em>double&lt;/em> (i.e. real-valued) predictors, excluding the integers. With the new release of recipes, we can easily do so:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>recipe&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>class&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, &lt;span class='nv'>goofy_data&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>step_normalize&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>all_double_predictors&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>prep&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Recipe&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Inputs:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; role #variables&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; outcome 1&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; predictor 9&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Training data contained 100 data points and no missing data.&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Operations:&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; Centering and scaling for f, g, h [trained]&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This is one of a number of new selectors:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The &lt;code>all_nominal()&lt;/code> selector now has finer-grained versions &lt;code>all_string()&lt;/code>, &lt;code>all_factor()&lt;/code>, &lt;code>all_unordered()&lt;/code>, and &lt;code>all_ordered()&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>all_numeric()&lt;/code> selector now has finer-grained versions &lt;code>all_double()&lt;/code>, and &lt;code>all_integer()&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>New &lt;code>all_logical()&lt;/code>, &lt;code>all_date()&lt;/code>, and &lt;code>all_datetime()&lt;/code> selectors.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>All new selectors have &lt;code>*_predictors()&lt;/code> variants. You can read more about recipes 1.0.3 in the
&lt;a href="https://recipes.tidymodels.org/news/index.html#recipes-103" target="_blank" rel="noopener">release notes&lt;/a>.&lt;/p>
&lt;h2 id="grouped-resampling">Grouped resampling
&lt;a href="#grouped-resampling">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The most recent release of rsample introduced support for stratification with grouped resampling. Consider the following toy data set on the number of melons in a household:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>melons&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 4,928 × 3&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; household n_melons chops&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;fct&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;int&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 1&lt;/span> 1 114 Yes &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 2&lt;/span> 1 179 Yes &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 3&lt;/span> 1 163 Yes &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 4&lt;/span> 1 35 Yes &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 5&lt;/span> 1 93 Yes &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 6&lt;/span> 1 55 Yes &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 7&lt;/span> 1 165 Yes &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 8&lt;/span> 1 30 Yes &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 9&lt;/span> 1 140 Yes &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>10&lt;/span> 1 7 Yes &lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># … with 4,918 more rows&lt;/span>&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>There are 100 different households in this dataset. Each member of the household has some number of melons &lt;code>n_melons&lt;/code> in their fridge. A household, i.e., all its members, either &lt;code>chops&lt;/code> their melons or keeps them whole.&lt;/p>
&lt;p>Each of the resampling functions in rsample have a &lt;code>group_*&lt;/code>ed analogue. From rsample&amp;rsquo;s
&lt;a href="https://rsample.tidymodels.org/articles/Common_Patterns.html#grouped-resampling" target="_blank" rel="noopener">&amp;ldquo;Common Patterns&amp;rdquo; article&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Often, some observations in your data will be &amp;ldquo;more related&amp;rdquo; to each other than would be probable under random chance, for instance because they represent repeated measurements of the same subject or were all collected at a single location. In these situations, you often want to assign all related observations to either the analysis or assessment fold as a group, to avoid having assessment data that's closely related to the data used to fit a model.&lt;/p>
&lt;/blockquote>
&lt;p>For example, the grouped &lt;code>initial_split()&lt;/code> variant will allot the training and testing set mutually exclusive levels of the &lt;code>group&lt;/code> variable:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>resample&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>group_initial_split&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>melons&lt;/span>, group &lt;span class='o'>=&lt;/span> &lt;span class='nv'>household&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;/span>
&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/sum.html'>sum&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/unique.html'>unique&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>training&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>resample&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>household&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://rdrr.io/r/base/match.html'>%in%&lt;/a>&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/unique.html'>unique&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>testing&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>resample&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>household&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 0&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>However, note that there are only a few households that don&amp;rsquo;t chop their melons, and those households tend to have many more melons to chop!&lt;/p>
&lt;div class="highlight">
&lt;p>&lt;img src="figs/melon-plot-1.png" alt="A ggplot histogram displaying the mean number of melons per household, filled by whether the household chops their melons or not. The plot shows that there are relatively few households that don't chop their melons, but those households have many more melons to chop. Households that chop their melons have around 80 to chop, while those that don't have around 200." width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>If we&amp;rsquo;re ultimately interested in modeling whether a household chops their melons, we ought to ensure that both values of &lt;code>chops&lt;/code> are well-represented in both the training and testing set. The argument &lt;code>strata = chops&lt;/code> indicates that sampling by &lt;code>household&lt;/code> will occur within values of &lt;code>chops&lt;/code>. Note that the strata must be constant in each group, so here, all members of a household need to either chop or not.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nv'>resample_stratified&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>group_initial_split&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>melons&lt;/span>, group &lt;span class='o'>=&lt;/span> &lt;span class='nv'>household&lt;/span>, strata &lt;span class='o'>=&lt;/span> &lt;span class='nv'>chops&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Note that this resampling scheme still resulted in different &lt;code>household&lt;/code>s being allotted to training and testing:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/sum.html'>sum&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/unique.html'>unique&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>training&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>resample_stratified&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>household&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://rdrr.io/r/base/match.html'>%in%&lt;/a>&lt;/span> &lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/unique.html'>unique&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>testing&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>resample_stratified&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>household&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 0&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Also, though, it ensured that similar proportions of &lt;code>chops&lt;/code> values are allotted to the training and testing set:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/diff.html'>diff&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/mean.html'>mean&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>training&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>resample_stratified&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>chops&lt;/span> &lt;span class='o'>==&lt;/span> &lt;span class='s'>"Yes"&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;/span>
&lt;span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/mean.html'>mean&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>testing&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>resample_stratified&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>chops&lt;/span> &lt;span class='o'>==&lt;/span> &lt;span class='s'>"Yes"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/span>
&lt;span>&lt;span class='c'>#&amp;gt; [1] 0.01000042&lt;/span>&lt;/span>
&lt;span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>You can read more about rsample 1.1.1 in the
&lt;a href="https://rsample.tidymodels.org/news/index.html#rsample-111" target="_blank" rel="noopener">release notes&lt;/a>.&lt;/p>
&lt;h2 id="performance-speedup">Performance speedup
&lt;a href="#performance-speedup">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We recently made a performance tweak, released as part of parsnip 1.0.3, that resulted in a substantial speedup in fit time. Fitting models via parsnip is a fundamental operation in the tidymodels, so the speedup can be observed across many modeling workflows.&lt;/p>
&lt;p>The figure below demonstrates this speedup in
&lt;a href="https://gist.github.com/simonpcouch/651d0ea4d968b455ded8194578dabf52" target="_blank" rel="noopener">an experiment&lt;/a> involving fitting a simple linear regression model on resamples of simulated data. Simulated datasets with between one hundred and one million rows were partitioned into five, ten, or twenty folds and fitted with the new version of parsnip as well as the version preceding it. With smaller datasets, the speedup is negligible, but fit times decrease by a factor of three to five once training data reaches one million rows.&lt;/p>
&lt;div class="highlight">
&lt;p>&lt;img src="figs/speedup-1.png" alt="A ggplot line plot displaying the relative speedup between parsnip 1.0.2 and 1.0.3. The number of rows in training data is on the x axis, ranging from one hundred to one million, and the factor of speedup (1.0.2 over 1.0.3) is on the y axis, ranging from 1 to 5. Three lines, colored by 'number of folds,' noting 5, 10, or 20 resamples, stretch from the bottom left to top right of the plot. This shows that, as training data gets larger, the magnitude of speedup with the new parsnip version gets larger and larger." width="100%" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>You can read more about parsnip 1.0.3 in the
&lt;a href="https://parsnip.tidymodels.org/news/index.html#parsnip-103" target="_blank" rel="noopener">release notes&lt;/a>.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;d like to thank those in the community that contributed to tidymodels in the last quarter:&lt;/p>
&lt;div class="highlight">
&lt;ul>
&lt;li>bonsai:
&lt;a href="https://github.com/HenrikBengtsson" target="_blank" rel="noopener">@HenrikBengtsson&lt;/a>, and
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>.&lt;/li>
&lt;li>broom:
&lt;a href="https://github.com/amorris28" target="_blank" rel="noopener">@amorris28&lt;/a>,
&lt;a href="https://github.com/capnrefsmmat" target="_blank" rel="noopener">@capnrefsmmat&lt;/a>,
&lt;a href="https://github.com/larmarange" target="_blank" rel="noopener">@larmarange&lt;/a>,
&lt;a href="https://github.com/lukepilling" target="_blank" rel="noopener">@lukepilling&lt;/a>, and
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>.&lt;/li>
&lt;li>butcher:
&lt;a href="https://github.com/galen-ft" target="_blank" rel="noopener">@galen-ft&lt;/a>, and
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>.&lt;/li>
&lt;li>dials:
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>, and
&lt;a href="https://github.com/Tadge-Analytics" target="_blank" rel="noopener">@Tadge-Analytics&lt;/a>.&lt;/li>
&lt;li>parsnip:
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/exsell-jc" target="_blank" rel="noopener">@exsell-jc&lt;/a>,
&lt;a href="https://github.com/fkohrt" target="_blank" rel="noopener">@fkohrt&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/jonthegeek" target="_blank" rel="noopener">@jonthegeek&lt;/a>,
&lt;a href="https://github.com/Marwolaeth" target="_blank" rel="noopener">@Marwolaeth&lt;/a>,
&lt;a href="https://github.com/mattwarkentin" target="_blank" rel="noopener">@mattwarkentin&lt;/a>,
&lt;a href="https://github.com/schoonees" target="_blank" rel="noopener">@schoonees&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/sweiner123" target="_blank" rel="noopener">@sweiner123&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/li>
&lt;li>recipes:
&lt;a href="https://github.com/andeek" target="_blank" rel="noopener">@andeek&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/joeycouse" target="_blank" rel="noopener">@joeycouse&lt;/a>,
&lt;a href="https://github.com/mdancho84" target="_blank" rel="noopener">@mdancho84&lt;/a>, and
&lt;a href="https://github.com/mobius-eng" target="_blank" rel="noopener">@mobius-eng&lt;/a>.&lt;/li>
&lt;li>rsample:
&lt;a href="https://github.com/bschneidr" target="_blank" rel="noopener">@bschneidr&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/mikemahoney218" target="_blank" rel="noopener">@mikemahoney218&lt;/a>,
&lt;a href="https://github.com/pgg1309" target="_blank" rel="noopener">@pgg1309&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/li>
&lt;li>stacks:
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>.&lt;/li>
&lt;li>workflows:
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/talegari" target="_blank" rel="noopener">@talegari&lt;/a>, and
&lt;a href="https://github.com/xiaochi-liu" target="_blank" rel="noopener">@xiaochi-liu&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>We&amp;rsquo;re grateful for all of the tidymodels community, from observers to users to contributors, and wish you all a happy new year!&lt;/p></description></item><item><title>Improvements to model specification checking in tidymodels</title><link>https://www.tidyverse.org/blog/2022/10/parsnip-checking-1-0-2/</link><pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2022/10/parsnip-checking-1-0-2/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>We&amp;rsquo;re stoked to announce the new release of
&lt;a href="https://parsnip.tidymodels.org/" target="_blank" rel="noopener">parsnip&lt;/a> v1.0.2 on CRAN! parsnip provides a tidy, unified interface to various statistical and machine learning models. This release includes improvements to errors and warnings that proliferate throughout the tidymodels ecosystem. These changes are meant to better anticipate common mistakes and nudge users informatively when defining model specifications. parsnip v1.0.2 includes a number of other changes that you can read about in the
&lt;a href="https://parsnip.tidymodels.org/news/index.html#parsnip-102" target="_blank" rel="noopener">release notes&lt;/a>.&lt;/p>
&lt;h2 id="parsnip-and-its-extension-packages">parsnip and its extension packages
&lt;a href="#parsnip-and-its-extension-packages">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;ll load parsnip, along with other core packages in tidymodels, using the tidymodels meta-package:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidymodels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>parsnip provides a unified interface to machine learning models, supporting a wide array of modeling approaches implemented across numerous R packages. For instance, the code to specify a linear regression model using the &lt;code>glmnet&lt;/code> package:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">linear_reg&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;glmnet&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_mode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;regression&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Linear Regression Model Specification (regression)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Computational engine: glmnet&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;is quite similar to that needed to specify a boosted tree regression model using &lt;code>xgboost&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">boost_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;xgboost&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_mode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;regression&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Boosted Tree Model Specification (regression)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Computational engine: xgboost&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We refer to these objects as &lt;em>model specifications&lt;/em>. They have three main components:&lt;/p>
&lt;ul>
&lt;li>The &lt;strong>model type&lt;/strong>: In this case, a linear regression or boosted tree.&lt;/li>
&lt;li>The &lt;strong>mode&lt;/strong>: The learning task, such as regression or classification.&lt;/li>
&lt;li>The &lt;strong>engine&lt;/strong>: The implementation for the given model type and mode, usually an R package.&lt;/li>
&lt;/ul>
&lt;p>This conceptual split of the model specification allows for parsnip&amp;rsquo;s consistent syntax - and it makes it extensible. Anyone (including you!) can write a parsnip &lt;em>extension package&lt;/em> that tightly integrates with other tidymodels packages out-of-the-box. We maintain a few of these packages ourselves, such as:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://github.com/tidymodels/agua" target="_blank" rel="noopener">agua&lt;/a>: models from the H2O modeling ecosystem&lt;/li>
&lt;li>
&lt;a href="https://github.com/tidymodels/baguette" target="_blank" rel="noopener">baguette&lt;/a>: bootstrap aggregating ensemble models&lt;/li>
&lt;li>
&lt;a href="https://github.com/tidymodels/censored" target="_blank" rel="noopener">censored&lt;/a>: censored regression and survival analysis&lt;/li>
&lt;/ul>
&lt;p>Similarly, community members outside of the tidymodels team have written parsnip extension packages, such as:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://github.com/business-science/modeltime" target="_blank" rel="noopener">modeltime&lt;/a>: time series forecasting&lt;/li>
&lt;li>
&lt;a href="https://github.com/hsbadr/additive" target="_blank" rel="noopener">additive&lt;/a>: generalized additive models&lt;/li>
&lt;/ul>
&lt;p>Much of our work on improving errors and warnings in this release has focused on parsnip&amp;rsquo;s integration with its extensions.&lt;/p>
&lt;h2 id="improvements-to-errors-and-warnings">Improvements to errors and warnings
&lt;a href="#improvements-to-errors-and-warnings">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Two &amp;ldquo;big ideas&amp;rdquo; have helped us focus our efforts related to improving errors and messages in the ecosystem.&lt;/p>
&lt;ul>
&lt;li>The same kind of mistake should raise the same prompt.&lt;/li>
&lt;li>Don&amp;rsquo;t tell the user they did something they didn&amp;rsquo;t do.&lt;/li>
&lt;/ul>
&lt;p>We&amp;rsquo;ll address both in the sections below!&lt;/p>
&lt;h3 id="the-same-kind-of-mistake-should-raise-the-same-prompt">The same kind of mistake should raise the same prompt
&lt;a href="#the-same-kind-of-mistake-should-raise-the-same-prompt">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The first problem we sought to address with these changes is that, in some cases, the same conceptual mistake could lead to different kinds of errors from parsnip and the packages that depend on it.&lt;/p>
&lt;p>A common mistake that users (and we, as developers) make when defining model specifications is forgetting to load the needed extension package for a given model specification.&lt;/p>
&lt;p>For example, parsnip supports bagged decision tree models via the &lt;code>bag_tree()&lt;/code> model type, though requires extension packages for actual implementations of the model. The censored package implements the &lt;code>censored regression&lt;/code> mode for bagged decision trees via &lt;code>rpart&lt;/code>, and the baguette package implements a few additional engines for &lt;code>regression&lt;/code> and &lt;code>classification&lt;/code> with this model type.&lt;/p>
&lt;p>In parsnip v1.0.1, if we specified a &lt;code>bag_tree()&lt;/code> model without loading any extension packages, we&amp;rsquo;d see:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">bt&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rpart&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">bt&lt;/span>
&lt;span class="c1">#&amp;gt; parsnip could not locate an implementation for `bag_tree` model specifications&lt;/span>
&lt;span class="c1">#&amp;gt; using the `rpart` engine.&lt;/span>
&lt;span class="c1">#&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; Bagged Decision Tree Model Specification (unknown)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Main Arguments:&lt;/span>
&lt;span class="c1">#&amp;gt; cost_complexity = 0&lt;/span>
&lt;span class="c1">#&amp;gt; min_n = 2&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Computational engine: rpart&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After seeing this prompt, we may not remember which extension package was the one that implemented this specification. A reasonable guess might be the censored package:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">censored&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Loading required package: survival&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, trying again:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rpart&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_mode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;regression&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in `stop_incompatible_mode()`:&lt;/span>
&lt;span class="c1">#&amp;gt; ! Available modes for engine rpart are: &amp;#39;unknown&amp;#39;, &amp;#39;censored regression&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The censored package clearly wasn&amp;rsquo;t the right one to load. Strangely, though, a side effect of loading it was that the prompt then became more cryptic, and it was converted from a message to an error. Perhaps even more strangely, if we instead supply an engine that only has an implementation in baguette and not censored, we see a different error:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;C5.0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in `check_spec_mode_engine_val()`:&lt;/span>
&lt;span class="c1">#&amp;gt; ! Engine &amp;#39;C5.0&amp;#39; is not supported for `bag_tree()`. See `show_engines(&amp;#39;bag_tree&amp;#39;)`.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Not only is this error different from the one above, but it seems to suggest that there is literally no &lt;code>C5.0&lt;/code> implementation anywhere.&lt;/p>
&lt;p>Returning to our &lt;code>bt&lt;/code> object, suppose we moved forward with defining tuning parameters, and want to define the grid to optimize over:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">bt&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">bt&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cost_complexity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">tune&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nf">extract_parameter_set_dials&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">grid_random&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in `grid_random()`:&lt;/span>
&lt;span class="c1">#&amp;gt; ! At least one parameter object is required.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So far in this section, we&amp;rsquo;ve made the same mistake&amp;mdash;failing to load the needed parsnip extension package&amp;mdash;four times, and received four different prompts.&lt;/p>
&lt;p>The good news is that, in each of the above cases, the newest version of parsnip always supplies a message, &lt;em>and&lt;/em> it&amp;rsquo;s the same kind of message, &lt;em>and&lt;/em> it&amp;rsquo;s much more helpful.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parsnip&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rpart&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; ! parsnip could not locate an implementation for `bag_tree` model&lt;/span>
&lt;span class="c1">#&amp;gt; specifications using the `rpart` engine.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ The parsnip extension packages censored and baguette implement support for&lt;/span>
&lt;span class="c1">#&amp;gt; this specification.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ Please install (if needed) and load to continue.&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Bagged Decision Tree Model Specification (unknown mode)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Main Arguments:&lt;/span>
&lt;span class="c1">#&amp;gt; cost_complexity = 0&lt;/span>
&lt;span class="c1">#&amp;gt; min_n = 2&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Computational engine: rpart&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note how the above message now suggests the two possible parsnip extensions that could provide support for this model specification.&lt;/p>
&lt;p>We could load censored, and then this specification is possible; censored implements a &lt;code>censored regression&lt;/code> mode for bagged trees:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">censored&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Loading required package: survival&lt;/span>
&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rpart&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Bagged Decision Tree Model Specification (unknown mode)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Main Arguments:&lt;/span>
&lt;span class="c1">#&amp;gt; cost_complexity = 0&lt;/span>
&lt;span class="c1">#&amp;gt; min_n = 2&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Computational engine: rpart&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The censored package, however, doesn&amp;rsquo;t implement a &lt;code>regression&lt;/code> mode for bagged trees. Thus, if we set the mode to &lt;code>regression&lt;/code> but fail to load the package that provides support for that mode, parsnip will again prompt us to load the correct package:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rpart&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_mode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;regression&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; ! parsnip could not locate an implementation for `bag_tree` regression model&lt;/span>
&lt;span class="c1">#&amp;gt; specifications using the `rpart` engine.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ The parsnip extension package baguette implements support for this&lt;/span>
&lt;span class="c1">#&amp;gt; specification.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ Please install (if needed) and load to continue.&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Bagged Decision Tree Model Specification (regression)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Main Arguments:&lt;/span>
&lt;span class="c1">#&amp;gt; cost_complexity = 0&lt;/span>
&lt;span class="c1">#&amp;gt; min_n = 2&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Computational engine: rpart&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That side-effect of loading censored is no longer the case for the &lt;code>C5.0&lt;/code> engine, as well:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;C5.0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; ! parsnip could not locate an implementation for `bag_tree` model&lt;/span>
&lt;span class="c1">#&amp;gt; specifications using the `C5.0` engine.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ The parsnip extension package baguette implements support for this&lt;/span>
&lt;span class="c1">#&amp;gt; specification.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ Please install (if needed) and load to continue.&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Bagged Decision Tree Model Specification (unknown mode)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Main Arguments:&lt;/span>
&lt;span class="c1">#&amp;gt; cost_complexity = 0&lt;/span>
&lt;span class="c1">#&amp;gt; min_n = 2&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Computational engine: C5.0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, if we try to extract information about tuning parameters for a model that&amp;rsquo;s not well-specified with parsnip v1.0.2, the message about missing extensions is elevated to an error:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">bt&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">bt&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cost_complexity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">tune&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nf">extract_parameter_set_dials&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">grid_random&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error:&lt;/span>
&lt;span class="c1">#&amp;gt; ! parsnip could not locate an implementation for `bag_tree` regression&lt;/span>
&lt;span class="c1">#&amp;gt; model specifications using the `rpart` engine.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ The parsnip extension package baguette implements support for this&lt;/span>
&lt;span class="c1">#&amp;gt; specification.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ Please install (if needed) and load to continue.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Given parsnip&amp;rsquo;s infrastructure, the technical conditions that raise these four prompts are quite different, but &lt;em>the technical reasons don&amp;rsquo;t matter&lt;/em>; the mistake being made is the same, and that&amp;rsquo;s what ought to determine the prompt raised.&lt;/p>
&lt;h3 id="dont-tell-the-user-they-did-something-they-didnt-do">Don&amp;rsquo;t tell the user they did something they didn&amp;rsquo;t do
&lt;a href="#dont-tell-the-user-they-did-something-they-didnt-do">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Another consideration that helped us frame these changes is that we feel error messages shouldn&amp;rsquo;t reference operations that users don&amp;rsquo;t need to know about. We&amp;rsquo;ll return to the example of forgetting to load extension packages to elaborate on what we mean here.&lt;/p>
&lt;p>With parsnip v1.0.1, if we just load the package and initialize a &lt;code>bag_tree()&lt;/code> model, we see:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parsnip&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">#&amp;gt; parsnip could not locate an implementation for `bag_tree` model specifications&lt;/span>
&lt;span class="c1">#&amp;gt; using the `rpart` engine.&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Bagged Decision Tree Model Specification (unknown)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Main Arguments:&lt;/span>
&lt;span class="c1">#&amp;gt; cost_complexity = 0&lt;/span>
&lt;span class="c1">#&amp;gt; min_n = 2&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Computational engine: rpart&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note the ending of the message: &amp;ldquo;&amp;hellip;using the &lt;code>rpart&lt;/code> engine.&amp;rdquo; We didn&amp;rsquo;t specify that we wanted to use &lt;code>rpart&lt;/code> as an engine, yet that seems to be what went wrong!&lt;/p>
&lt;p>Readers who have fitted bagged decision tree models with parsnip before may realize that &lt;code>rpart&lt;/code> is the default engine for these models. This shouldn&amp;rsquo;t be requisite knowledge to interpret this message, though, and is not helpful in addressing the issue. With v1.0.2, we only mention the information that users give to us when constructing that message, and tell them exactly which packages they might need to install/load:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parsnip&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">#&amp;gt; ! parsnip could not locate an implementation for `bag_tree` model&lt;/span>
&lt;span class="c1">#&amp;gt; specifications.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ The parsnip extension packages censored and baguette implement support for&lt;/span>
&lt;span class="c1">#&amp;gt; this specification.&lt;/span>
&lt;span class="c1">#&amp;gt; ℹ Please install (if needed) and load to continue.&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Bagged Decision Tree Model Specification (unknown mode)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Main Arguments:&lt;/span>
&lt;span class="c1">#&amp;gt; cost_complexity = 0&lt;/span>
&lt;span class="c1">#&amp;gt; min_n = 2&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Computational engine: rpart&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We hinted at another example of this guideline in the previous section; parsnip shouldn&amp;rsquo;t refer to internal functions when it raises error messages. Above, with parsnip v1.0.1, we saw:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">censored&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Loading required package: survival&lt;/span>
&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rpart&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_mode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;regression&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in `stop_incompatible_mode()`:&lt;/span>
&lt;span class="c1">#&amp;gt; ! Available modes for engine rpart are: &amp;#39;unknown&amp;#39;, &amp;#39;censored regression&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The error points out a function called &lt;code>stop_incompatible_mode()&lt;/code>, which is a function used internally by parsnip to check modes. There&amp;rsquo;s a different function, &lt;code>check_spec_mode_engine_val()&lt;/code>, that will flag super silly modes:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parsnip&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rpart&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_mode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;beep bop boop&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in `check_spec_mode_engine_val()`:&lt;/span>
&lt;span class="c1">#&amp;gt; ! &amp;#39;beep bop boop&amp;#39; is not a known mode for model `bag_tree()`.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The important part, though, is that &lt;em>the technical reasons don&amp;rsquo;t matter&lt;/em>. Users don&amp;rsquo;t know&amp;mdash;and don&amp;rsquo;t need to know&amp;mdash;what &lt;code>stop_incompatible_mode()&lt;/code> or &lt;code>check_spec_mode_engine_val()&lt;/code> do.&lt;/p>
&lt;p>In parsnip v1.0.2, we now point users to the function they actually called that eventually gave rise to the error:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rpart&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_mode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;beep bop boop&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Error in `set_mode()`:&lt;/span>
&lt;span class="c1">#&amp;gt; ! &amp;#39;beep bop boop&amp;#39; is not a known mode for model `bag_tree()`.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We hope these changes improve folks&amp;rsquo; experience when modeling with parsnip in the future!&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;!-- This post has highlighted upcoming improvements to model specification checking in parsnip. For those who'd like to learn more, I've written a [companion article](https://simonpcouch.com/blog) on my blog that delves further into the tooling we use to check model specifications. -->
&lt;p>Thanks to the folks who have contributed to this release of parsnip via GitHub:
&lt;a href="https://github.com/gustavomodelli" target="_blank" rel="noopener">@gustavomodelli&lt;/a>,
&lt;a href="https://github.com/joeycouse" target="_blank" rel="noopener">@joeycouse&lt;/a>,
&lt;a href="https://github.com/mrkaye97" target="_blank" rel="noopener">@mrkaye97&lt;/a>,
&lt;a href="https://github.com/siegfried" target="_blank" rel="noopener">@siegfried&lt;/a>.&lt;/p>
&lt;p>Contributions from many others, in the form of StackOverflow and RStudio Community posts, have been greatly helpful in our work on these improvements.&lt;/p></description></item><item><title>censored 0.1.0</title><link>https://www.tidyverse.org/blog/2022/08/censored-0-1-0/</link><pubDate>Wed, 10 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2022/08/censored-0-1-0/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>We&amp;rsquo;re extremely pleased to announce the first release of
&lt;a href="https://censored.tidymodels.org" target="_blank" rel="noopener">censored&lt;/a> on CRAN. The censored package is a parsnip extension package for survival models.&lt;/p>
&lt;p>You can install it from CRAN with:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/install.packages.html'>install.packages&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"censored"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This blog post will introduce a new model type, a new mode, and new prediction types for survival analysis in the tidymodels framework. We have
&lt;a href="https://www.tidyverse.org/blog/2021/11/survival-analysis-parsnip-adjacent/" target="_blank" rel="noopener">previously&lt;/a> blogged about these changes while they were in development, now they have been released!&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://github.com/tidymodels/censored'>censored&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; Loading required package: parsnip&lt;/span>
&lt;span class='c'>#&amp;gt; Loading required package: survival&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="model-types-modes-and-engines">Model types, modes, and engines
&lt;a href="#model-types-modes-and-engines">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A parsnip model specification consists of three elements:&lt;/p>
&lt;ul>
&lt;li>a &lt;strong>model type&lt;/strong> such as linear model, random forest, support vector machine, etc&lt;/li>
&lt;li>a computational &lt;strong>engine&lt;/strong> such as a specific R package or tools outside of R like Keras or Stan&lt;/li>
&lt;li>a &lt;strong>mode&lt;/strong> such as regression or classification&lt;/li>
&lt;/ul>
&lt;p>parsnip 1.0.0 introduces a new mode &lt;code>&amp;quot;censored regression&amp;quot;&lt;/code> and the censored package provides engines to fit various models in this new mode. With the addition of the new
&lt;a href="https://parsnip.tidymodels.org/reference/proportional_hazards.html" target="_blank" rel="noopener">&lt;code>proportional_hazards()&lt;/code>&lt;/a> model type, the available models cover parametric, semi-parametric, and tree-based models:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">model&lt;/th>
&lt;th align="left">engine&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">
&lt;a href="https://parsnip.tidymodels.org/reference/bag_tree.html" target="_blank" rel="noopener">&lt;code>bag_tree()&lt;/code>&lt;/a>&lt;/td>
&lt;td align="left">rpart&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">
&lt;a href="https://parsnip.tidymodels.org/reference/boost_tree.html" target="_blank" rel="noopener">&lt;code>boost_tree()&lt;/code>&lt;/a>&lt;/td>
&lt;td align="left">mboost&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">
&lt;a href="https://parsnip.tidymodels.org/reference/decision_tree.html" target="_blank" rel="noopener">&lt;code>decision_tree()&lt;/code>&lt;/a>&lt;/td>
&lt;td align="left">rpart&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">
&lt;a href="https://parsnip.tidymodels.org/reference/decision_tree.html" target="_blank" rel="noopener">&lt;code>decision_tree()&lt;/code>&lt;/a>&lt;/td>
&lt;td align="left">partykit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">
&lt;a href="https://parsnip.tidymodels.org/reference/proportional_hazards.html" target="_blank" rel="noopener">&lt;code>proportional_hazards()&lt;/code>&lt;/a>&lt;/td>
&lt;td align="left">survival&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">
&lt;a href="https://parsnip.tidymodels.org/reference/proportional_hazards.html" target="_blank" rel="noopener">&lt;code>proportional_hazards()&lt;/code>&lt;/a>&lt;/td>
&lt;td align="left">glmnet&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">
&lt;a href="https://parsnip.tidymodels.org/reference/rand_forest.html" target="_blank" rel="noopener">&lt;code>rand_forest()&lt;/code>&lt;/a>&lt;/td>
&lt;td align="left">partykit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">
&lt;a href="https://parsnip.tidymodels.org/reference/survival_reg.html" target="_blank" rel="noopener">&lt;code>survival_reg()&lt;/code>&lt;/a>&lt;/td>
&lt;td align="left">survival&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">
&lt;a href="https://parsnip.tidymodels.org/reference/survival_reg.html" target="_blank" rel="noopener">&lt;code>survival_reg()&lt;/code>&lt;/a>&lt;/td>
&lt;td align="left">flexsurv&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>All models can be fitted through a formula interface. For example, when the engine allows for stratification variables, these can be specified by using a
&lt;a href="https://rdrr.io/pkg/survival/man/strata.html" target="_blank" rel="noopener">&lt;code>strata()&lt;/code>&lt;/a> term in the formula, as in the survival package.&lt;/p>
&lt;p>The &lt;code>cetaceans&lt;/code> data set contains information about dolphins and whales living in captivity in the USA. It is derived from a
&lt;a href="https://github.com/rfordatascience/tidytuesday/tree/master/data/2018/2018-12-18" target="_blank" rel="noopener">Tidy Tuesday data set&lt;/a> and you can install the corresponding data package with &lt;code>pak::pak(&amp;quot;hfrick/cetaceans&amp;quot;)&lt;/code>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>cetaceans&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>cetaceans&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; tibble [1,358 × 10] (S3: tbl_df/tbl/data.frame)&lt;/span>
&lt;span class='c'>#&amp;gt; $ age : num [1:1358] 28 44 39 38 38 37 36 36 35 34 ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ event : num [1:1358] 0 0 0 0 0 0 0 0 0 0 ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ species : chr [1:1358] "Bottlenose" "Bottlenose" "Bottlenose" "Bottlenose" ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ sex : chr [1:1358] "F" "F" "M" "F" ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ birth_decade : num [1:1358] 1980 1970 1970 1970 1970 1980 1980 1980 1980 1980 ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ born_in_captivity: logi [1:1358] TRUE TRUE TRUE TRUE TRUE TRUE ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ time_in_captivity: num [1:1358] 1 1 1 1 1 1 1 1 1 1 ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ origin_location : chr [1:1358] "Marineland Florida" "Dolphin Research Center" "SeaWorld" "SeaWorld" ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ transfers : int [1:1358] 0 0 13 1 2 2 2 2 3 4 ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ current_location : chr [1:1358] "Marineland Florida" "Dolphin Research Center" "SeaWorld" "SeaWorld" ...&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>To illustrate the new modelling function
&lt;a href="https://parsnip.tidymodels.org/reference/proportional_hazards.html" target="_blank" rel="noopener">&lt;code>proportional_hazards()&lt;/code>&lt;/a> and the formula interface for glmnet, let&amp;rsquo;s fit a penalized Cox model.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>cox_penalized&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/proportional_hazards.html'>proportional_hazards&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>penalty &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.1&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"glmnet"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_args.html'>set_mode&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"censored regression"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/fit.html'>fit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/Surv.html'>Surv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>age&lt;/span>, &lt;span class='nv'>event&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>sex&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>transfers&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/strata.html'>strata&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>born_in_captivity&lt;/span>&lt;span class='o'>)&lt;/span>,
data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>cetaceans&lt;/span>
&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="prediction-types">Prediction types
&lt;a href="#prediction-types">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>For censored regression, parsnip now also includes new prediction types:&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;time&amp;quot;&lt;/code> for the survival time&lt;/li>
&lt;li>&lt;code>&amp;quot;survival&amp;quot;&lt;/code> for the survival probability&lt;/li>
&lt;li>&lt;code>&amp;quot;hazard&amp;quot;&lt;/code> for the hazard&lt;/li>
&lt;li>&lt;code>&amp;quot;quantile&amp;quot;&lt;/code> for quantiles of the event time distribution&lt;/li>
&lt;li>&lt;code>&amp;quot;linear_pred&amp;quot;&lt;/code> for the linear predictor&lt;/li>
&lt;/ul>
&lt;p>Predictions made with censored respect the tidymodels principles of:&lt;/p>
&lt;ul>
&lt;li>The predictions are always inside a tibble.&lt;/li>
&lt;li>The column names and types are unsurprising and predictable.&lt;/li>
&lt;li>The number of rows in &lt;code>new_data&lt;/code> and the output are the same.&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s demonstrate that with a small data set to predict on: just three observations, and the first one includes a missing value for one of the predictors.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>cetaceans_3&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>cetaceans&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span>,&lt;span class='o'>]&lt;/span>
&lt;span class='nv'>cetaceans_3&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>sex&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>]&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='kc'>NA&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Predictions of types &lt;code>&amp;quot;time&amp;quot;&lt;/code> and &lt;code>&amp;quot;survival&amp;quot;&lt;/code> are available for all model/engine combinations in censored.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>cox_penalized&lt;/span>, new_data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>cetaceans_3&lt;/span>, type &lt;span class='o'>=&lt;/span> &lt;span class='s'>"time"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 3 × 1&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; .pred_time&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> &lt;span style='color: #BB0000;'>NA&lt;/span> &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> 31.8&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> 52.6&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Survival probability can be predicted at multiple time points, specified through the &lt;code>time&lt;/code> argument to
&lt;a href="https://rdrr.io/r/stats/predict.html" target="_blank" rel="noopener">&lt;code>predict()&lt;/code>&lt;/a>. Here we are predicting survival probability at age 10, 20, 30, and 40 years.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>pred&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>cox_penalized&lt;/span>, new_data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>cetaceans_3&lt;/span>, type &lt;span class='o'>=&lt;/span> &lt;span class='s'>"survival"&lt;/span>, time &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>10&lt;/span>, &lt;span class='m'>20&lt;/span>, &lt;span class='m'>30&lt;/span>, &lt;span class='m'>40&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>pred&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 3 × 1&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; .pred &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;list&amp;gt;&lt;/span> &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [4 × 2]&amp;gt;&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [4 × 2]&amp;gt;&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> &lt;span style='color: #555555;'>&amp;lt;tibble [4 × 2]&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The &lt;code>.pred&lt;/code> column is a list-column, containing nested tibbles:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='c'># for the observation with NA&lt;/span>
&lt;span class='nv'>pred&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>.pred&lt;/span>&lt;span class='o'>[[&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>]&lt;/span>&lt;span class='o'>]&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 4 × 2&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; .time .pred_survival&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> 10 &lt;span style='color: #BB0000;'>NA&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> 20 &lt;span style='color: #BB0000;'>NA&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> 30 &lt;span style='color: #BB0000;'>NA&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>4&lt;/span> 40 &lt;span style='color: #BB0000;'>NA&lt;/span>&lt;/span>
&lt;span class='c'># without NA&lt;/span>
&lt;span class='nv'>pred&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>.pred&lt;/span>&lt;span class='o'>[[&lt;/span>&lt;span class='m'>2&lt;/span>&lt;span class='o'>]&lt;/span>&lt;span class='o'>]&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 4 × 2&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; .time .pred_survival&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> 10 0.729&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>2&lt;/span> 20 0.567&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>3&lt;/span> 30 0.386&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>4&lt;/span> 40 0.386&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This can be used to visualize an approximation of the underlying survival curve.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://ggplot2.tidyverse.org'>ggplot2&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>cox_penalized&lt;/span>, new_data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>cetaceans&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='m'>2&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span>,&lt;span class='o'>]&lt;/span>,
type &lt;span class='o'>=&lt;/span> &lt;span class='s'>"survival"&lt;/span>, time &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/seq.html'>seq&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0&lt;/span>, &lt;span class='m'>80&lt;/span>, &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>dplyr&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://dplyr.tidyverse.org/reference/mutate.html'>mutate&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>id &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/factor.html'>factor&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>2&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>tidyr&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://tidyr.tidyverse.org/reference/nest.html'>unnest&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>cols &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.pred&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.time&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.pred_survival&lt;/span>, col &lt;span class='o'>=&lt;/span> &lt;span class='nv'>id&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_path.html'>geom_step&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggtheme.html'>theme_bw&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/survival-curve-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>More examples of available models, engines, and prediction types can be found in the article
&lt;a href="https://censored.tidymodels.org/articles/examples.html" target="_blank" rel="noopener">Fitting and Predicting with censored&lt;/a>.&lt;/p>
&lt;h2 id="whats-next">What&amp;rsquo;s next?
&lt;a href="#whats-next">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Our aim is to broadly integrate survival analysis in the tidymodels framework. Next, we&amp;rsquo;ll be working on adding appropriate metrics to the yardstick package and enabling model tuning via the tune package.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A big thanks to all the contributors:
&lt;a href="https://github.com/bcjaeger" target="_blank" rel="noopener">@bcjaeger&lt;/a>,
&lt;a href="https://github.com/brunocarlin" target="_blank" rel="noopener">@brunocarlin&lt;/a>,
&lt;a href="https://github.com/caimiao0714" target="_blank" rel="noopener">@caimiao0714&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/dvdsb" target="_blank" rel="noopener">@dvdsb&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/erikvona" target="_blank" rel="noopener">@erikvona&lt;/a>,
&lt;a href="https://github.com/gvelasq" target="_blank" rel="noopener">@gvelasq&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/jennybc" target="_blank" rel="noopener">@jennybc&lt;/a>,
&lt;a href="https://github.com/mattwarkentin" target="_blank" rel="noopener">@mattwarkentin&lt;/a>,
&lt;a href="https://github.com/mikemahoney218" target="_blank" rel="noopener">@mikemahoney218&lt;/a>,
&lt;a href="https://github.com/schelhorn" target="_blank" rel="noopener">@schelhorn&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p></description></item><item><title>Q2 2022 tidymodels digest</title><link>https://www.tidyverse.org/blog/2022/07/tidymodels-2022-q2/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2022/07/tidymodels-2022-q2/</guid><description>&lt;!--
TODO:
* [X] Look over / edit the post's title in the yaml
* [X] Edit (or delete) the description; note this appears in the Twitter card
* [X] Pick category and tags (see existing with [`hugodown::tidy_show_meta()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html))
* [X] Find photo &amp; update yaml metadata
* [X] Create `thumbnail-sq.jpg`; height and width should be equal
* [X] Create `thumbnail-wd.jpg`; width should be >5x height
* [X] [`hugodown::use_tidy_thumbnails()`](https://rdrr.io/pkg/hugodown/man/use_tidy_post.html)
* [X] Add intro sentence, e.g. the standard tagline for the package
* [X] [`usethis::use_tidy_thanks()`](https://usethis.r-lib.org/reference/use_tidy_thanks.html)
-->
&lt;p>The
&lt;a href="https://www.tidymodels.org/" target="_blank" rel="noopener">tidymodels&lt;/a> framework is a collection of R packages for modeling and machine learning using tidyverse principles.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://tidymodels.tidymodels.org'>tidymodels&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; ── &lt;span style='font-weight: bold;'>Attaching packages&lt;/span> ────────────────────────────────────── tidymodels 1.0.0 ──&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>broom &lt;/span> 1.0.0 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>recipes &lt;/span> 1.0.1&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>dials &lt;/span> 1.0.0 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>rsample &lt;/span> 1.0.0&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>dplyr &lt;/span> 1.0.9 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>tibble &lt;/span> 3.1.7&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>ggplot2 &lt;/span> 3.3.6 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>tidyr &lt;/span> 1.2.0&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>infer &lt;/span> 1.0.2 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>tune &lt;/span> 1.0.0&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>modeldata &lt;/span> 1.0.0 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>workflows &lt;/span> 1.0.0&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>parsnip &lt;/span> 1.0.0 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>workflowsets&lt;/span> 1.0.0&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>purrr &lt;/span> 0.3.4 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>yardstick &lt;/span> 1.0.0&lt;/span>
&lt;span class='c'>#&amp;gt; ── &lt;span style='font-weight: bold;'>Conflicts&lt;/span> ───────────────────────────────────────── tidymodels_conflicts() ──&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>purrr&lt;/span>::&lt;span style='color: #00BB00;'>discard()&lt;/span> masks &lt;span style='color: #0000BB;'>scales&lt;/span>::discard()&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>dplyr&lt;/span>::&lt;span style='color: #00BB00;'>filter()&lt;/span> masks &lt;span style='color: #0000BB;'>stats&lt;/span>::filter()&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>dplyr&lt;/span>::&lt;span style='color: #00BB00;'>lag()&lt;/span> masks &lt;span style='color: #0000BB;'>stats&lt;/span>::lag()&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>recipes&lt;/span>::&lt;span style='color: #00BB00;'>step()&lt;/span> masks &lt;span style='color: #0000BB;'>stats&lt;/span>::step()&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #0000BB;'>•&lt;/span> Search for functions across packages at &lt;span style='color: #00BB00;'>https://www.tidymodels.org/find/&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Since the beginning of last year, we have been publishing
&lt;a href="https://www.tidyverse.org/categories/roundup/" target="_blank" rel="noopener">quarterly updates&lt;/a> here on the tidyverse blog summarizing what&amp;rsquo;s new in the tidymodels ecosystem. The purpose of these regular posts is to share useful new features and any updates you may have missed. You can check out the
&lt;a href="https://www.tidyverse.org/tags/tidymodels/" target="_blank" rel="noopener">&lt;code>tidymodels&lt;/code> tag&lt;/a> to find all tidymodels blog posts here, including our roundup posts as well as those that are more focused, like these from the past month or so:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://www.tidyverse.org/blog/2022/06/spatialsample-0-2-0/" target="_blank" rel="noopener">spatialsample&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://www.tidyverse.org/blog/2022/05/recipes-update-05-20222/" target="_blank" rel="noopener">recipes and its extension packages&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://www.tidyverse.org/blog/2022/06/bonsai-0-1-0/" target="_blank" rel="noopener">bonsai&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Since
&lt;a href="https://www.tidyverse.org/blog/2022/04/tidymodels-2022-q1/" target="_blank" rel="noopener">our last roundup post&lt;/a>, there have been CRAN releases of 25 tidymodels packages. You can install these updates from CRAN with:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/install.packages.html'>install.packages&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='s'>"rsample"&lt;/span>, &lt;span class='s'>"spatialsample"&lt;/span>, &lt;span class='s'>"parsnip"&lt;/span>, &lt;span class='s'>"baguette"&lt;/span>, &lt;span class='s'>"multilevelmod"&lt;/span>, &lt;span class='s'>"discrim"&lt;/span>,
&lt;span class='s'>"plsmod"&lt;/span>, &lt;span class='s'>"poissonreg"&lt;/span>, &lt;span class='s'>"rules"&lt;/span>, &lt;span class='s'>"recipes"&lt;/span>, &lt;span class='s'>"embed"&lt;/span>, &lt;span class='s'>"themis"&lt;/span>, &lt;span class='s'>"textrecipes"&lt;/span>,
&lt;span class='s'>"workflows"&lt;/span>, &lt;span class='s'>"workflowsets"&lt;/span>, &lt;span class='s'>"tune"&lt;/span>, &lt;span class='s'>"yardstick"&lt;/span>, &lt;span class='s'>"broom"&lt;/span>, &lt;span class='s'>"dials"&lt;/span>, &lt;span class='s'>"butcher"&lt;/span>,
&lt;span class='s'>"hardhat"&lt;/span>, &lt;span class='s'>"infer"&lt;/span>, &lt;span class='s'>"stacks"&lt;/span>, &lt;span class='s'>"tidyposterior"&lt;/span>, &lt;span class='s'>"tidypredict"&lt;/span>
&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;ul>
&lt;li>
&lt;a href="https://baguette.tidymodels.org/news/index.html#baguette-100" target="_blank" rel="noopener">baguette&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://broom.tidymodels.org/news/index.html#broom-080" target="_blank" rel="noopener">broom&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://butcher.tidymodels.org/news/index.html#butcher-020" target="_blank" rel="noopener">butcher&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://dials.tidymodels.org/news/index.html#dials-100" target="_blank" rel="noopener">dials&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://discrim.tidymodels.org/news/index.html#discrim-100" target="_blank" rel="noopener">discrim&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://embed.tidymodels.org/news/index.html#embed-100" target="_blank" rel="noopener">embed&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://hardhat.tidymodels.org/news/index.html#hardhat-120" target="_blank" rel="noopener">hardhat&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://infer.tidymodels.org/news/index.html#infer-v102" target="_blank" rel="noopener">infer&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://modeldata.tidymodels.org/news/index.html#modeldata-100" target="_blank" rel="noopener">modeldata&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://multilevelmod.tidymodels.org/news/index.html#multilevelmod-100" target="_blank" rel="noopener">multilevelmod&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://parsnip.tidymodels.org/news/index.html#parsnip-100" target="_blank" rel="noopener">parsnip&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://poissonreg.tidymodels.org/news/index.html#poissonreg-100" target="_blank" rel="noopener">poissonreg&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://recipes.tidymodels.org/news/index.html#recipes-101" target="_blank" rel="noopener">recipes&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://rsample.tidymodels.org/news/index.html#rsample-100" target="_blank" rel="noopener">rsample&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://rules.tidymodels.org/news/index.html#rules-100" target="_blank" rel="noopener">rules&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://spatialsample.tidymodels.org/news/index.html#spatialsample-020" target="_blank" rel="noopener">spatialsample&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://stacks.tidymodels.org/news/index.html#stacks-023" target="_blank" rel="noopener">stacks&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://textrecipes.tidymodels.org/news/index.html#textrecipes-100" target="_blank" rel="noopener">textrecipes&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://themis.tidymodels.org/news/index.html#themis-100" target="_blank" rel="noopener">themis&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.tidymodels.org/news/index.html#tidymodels-100" target="_blank" rel="noopener">tidymodels&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://tidyposterior.tidymodels.org/news/index.html#tidyposterior-100" target="_blank" rel="noopener">tidyposterior&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://tidypredict.tidymodels.org/news/index.html#tidypredict-049" target="_blank" rel="noopener">tidypredict&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://tune.tidymodels.org/news/index.html#tune-100" target="_blank" rel="noopener">tune&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://workflows.tidymodels.org/news/index.html#workflows-100" target="_blank" rel="noopener">workflows&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://workflowsets.tidymodels.org/news/index.html#workflowsets-100" target="_blank" rel="noopener">workflowsets&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://yardstick.tidymodels.org/news/index.html#yardstick-100" target="_blank" rel="noopener">yardstick&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>NEWS&lt;/code> files are linked here for each package; you&amp;rsquo;ll notice that there are a lot! We know it may be bothersome to keep up with all these changes, so we want to draw your attention to our recent blog posts above and also highlight a few more useful updates in today&amp;rsquo;s blog post.&lt;/p>
&lt;p>We are confident that we have created a good foundation with our implementation across many of our packages and we are using this as an opportunity to bump the packages versions to 1.0.0.&lt;/p>
&lt;h2 id="case-weights">Case weights
&lt;a href="#case-weights">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Much of the work we have been doing so far this year has been related to case weights. For a more detailed account of the deliberations see this earlier post about the
&lt;a href="https://www.tidyverse.org/blog/2022/05/case-weights/" target="_blank" rel="noopener">use of case weights with tidymodels&lt;/a>.&lt;/p>
&lt;p>A full worked example can be found in the
&lt;a href="tidyverse.org/blog/2022/05/case-weights/#tidymodels-syntax">previous blog post&lt;/a> and on
&lt;a href="https://www.tidymodels.org/learn/work/case-weights/" target="_blank" rel="noopener">the tidymodels site&lt;/a>.&lt;/p>
&lt;p>As an example let&amp;rsquo;s go over how case weights are used within tidymodels. We start by simulating a data set using &lt;code>sim_classification()&lt;/code>, this data set is going to be unbalanced and we will be using importance weights to give more weight to the minority class. In tidymodels you can use &lt;code>importance_weights()&lt;/code> or &lt;code>frequency_weights()&lt;/code> to denote what type of weight you are working with. Setting the type of weight should be the first thing you do.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/Random.html'>set.seed&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>training_sim&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>sim_classification&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>5000&lt;/span>, intercept &lt;span class='o'>=&lt;/span> &lt;span class='o'>-&lt;/span>&lt;span class='m'>25&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>mutate&lt;/span>&lt;span class='o'>(&lt;/span>
case_wts &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/ifelse.html'>ifelse&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>class&lt;/span> &lt;span class='o'>==&lt;/span> &lt;span class='s'>"class_1"&lt;/span>, &lt;span class='m'>60&lt;/span>, &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>,
case_wts &lt;span class='o'>=&lt;/span> &lt;span class='nf'>importance_weights&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>case_wts&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>training_sim&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>relocate&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>case_wts&lt;/span>, .after &lt;span class='o'>=&lt;/span> &lt;span class='nv'>class&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 5,000 × 17&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; class case_wts two_factor_1 two_factor_2 non_linear_1 non_linear_2&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;fct&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;imp_wts&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 1&lt;/span> class_2 1 0.092&lt;span style='text-decoration: underline;'>4&lt;/span> -&lt;span style='color: #BB0000;'>1.70&lt;/span> -&lt;span style='color: #BB0000;'>0.579&lt;/span> 0.201&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 2&lt;/span> class_2 1 -&lt;span style='color: #BB0000;'>0.136&lt;/span> 0.608 -&lt;span style='color: #BB0000;'>0.770&lt;/span> 0.114&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 3&lt;/span> class_2 1 -&lt;span style='color: #BB0000;'>0.080&lt;/span>&lt;span style='color: #BB0000; text-decoration: underline;'>6&lt;/span> -&lt;span style='color: #BB0000;'>2.07&lt;/span> -&lt;span style='color: #BB0000;'>0.709&lt;/span> 0.272&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 4&lt;/span> class_2 1 1.35 2.75 -&lt;span style='color: #BB0000;'>0.380&lt;/span> 0.785&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 5&lt;/span> class_2 1 -&lt;span style='color: #BB0000;'>0.238&lt;/span> 1.08 -&lt;span style='color: #BB0000;'>0.700&lt;/span> 0.638&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 6&lt;/span> class_2 1 -&lt;span style='color: #BB0000;'>0.322&lt;/span> -&lt;span style='color: #BB0000;'>1.79&lt;/span> 0.053&lt;span style='text-decoration: underline;'>4&lt;/span> 0.470&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 7&lt;/span> class_2 1 1.35 -&lt;span style='color: #BB0000;'>0.102&lt;/span> -&lt;span style='color: #BB0000;'>0.764&lt;/span> 0.827&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 8&lt;/span> class_2 1 0.595 1.30 -&lt;span style='color: #BB0000;'>0.045&lt;/span>&lt;span style='color: #BB0000; text-decoration: underline;'>4&lt;/span> 0.493&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 9&lt;/span> class_2 1 0.563 0.916 -&lt;span style='color: #BB0000;'>0.383&lt;/span> 0.775&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>10&lt;/span> class_2 1 -&lt;span style='color: #BB0000;'>0.327&lt;/span> -&lt;span style='color: #BB0000;'>0.457&lt;/span> -&lt;span style='color: #BB0000;'>0.390&lt;/span> 0.704&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># … with 4,990 more rows, and 11 more variables: non_linear_3 &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># linear_01 &amp;lt;dbl&amp;gt;, linear_02 &amp;lt;dbl&amp;gt;, linear_03 &amp;lt;dbl&amp;gt;, linear_04 &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># linear_05 &amp;lt;dbl&amp;gt;, linear_06 &amp;lt;dbl&amp;gt;, linear_07 &amp;lt;dbl&amp;gt;, linear_08 &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># linear_09 &amp;lt;dbl&amp;gt;, linear_10 &amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Now that we have the data we can the resamples we want. We assigned weights before creating the resamples so that information is being carried into the resamples. The weights are not used in the creation of the resamples.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/Random.html'>set.seed&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>sim_folds&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>vfold_cv&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>training_sim&lt;/span>, strata &lt;span class='o'>=&lt;/span> &lt;span class='nv'>class&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>When creating the model specification we don&amp;rsquo;t need to do anything special, as parsnip will apply case weights when there is support for it. If you are unsure if a model supports case weights you can consult the documentation or the &lt;code>show_model_info()&lt;/code> function, like so: &lt;code>show_model_info(&amp;quot;logistic_reg&amp;quot;)&lt;/code>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>lr_spec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span>
&lt;span class='nf'>logistic_reg&lt;/span>&lt;span class='o'>(&lt;/span>penalty &lt;span class='o'>=&lt;/span> &lt;span class='nf'>tune&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>, mixture &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>set_engine&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"glmnet"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Next, we will set up a recipe for preprocessing&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>sim_rec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span>
&lt;span class='nf'>recipe&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>class&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>training_sim&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>step_ns&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>starts_with&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"non_linear"&lt;/span>&lt;span class='o'>)&lt;/span>, deg_free &lt;span class='o'>=&lt;/span> &lt;span class='m'>10&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>step_normalize&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>all_numeric_predictors&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>sim_rec&lt;/span>
&lt;span class='c'>#&amp;gt; Recipe&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; Inputs:&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; role #variables&lt;/span>
&lt;span class='c'>#&amp;gt; case_weights 1&lt;/span>
&lt;span class='c'>#&amp;gt; outcome 1&lt;/span>
&lt;span class='c'>#&amp;gt; predictor 15&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; Operations:&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; Natural splines on starts_with("non_linear")&lt;/span>
&lt;span class='c'>#&amp;gt; Centering and scaling for all_numeric_predictors()&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The recipe automatically detects the case weights even though they are captured by the dot on the right-hand side of the formula. The recipe automatically sets its role and will error if that column is changed in any way.&lt;/p>
&lt;p>As mentioned above, any unsupervised steps are unaffected by importance weights so neither &lt;code>step_ns()&lt;/code> or &lt;code>step_normalize()&lt;/code> use the weights in their calculations.&lt;/p>
&lt;p>When using case weights, we would like to encourage users to keep their model and preprocessing tool within a workflow. The workflows package now has an add_case_weights() function to help here:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>lr_wflow&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span>
&lt;span class='nf'>workflow&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>add_model&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>lr_spec&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>add_recipe&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>sim_rec&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>add_case_weights&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>case_wts&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>lr_wflow&lt;/span>
&lt;span class='c'>#&amp;gt; ══ Workflow ════════════════════════════════════════════════════════════════════&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='font-style: italic;'>Preprocessor:&lt;/span> Recipe&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='font-style: italic;'>Model:&lt;/span> logistic_reg()&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; ── Preprocessor ────────────────────────────────────────────────────────────────&lt;/span>
&lt;span class='c'>#&amp;gt; 2 Recipe Steps&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; • step_ns()&lt;/span>
&lt;span class='c'>#&amp;gt; • step_normalize()&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; ── Case Weights ────────────────────────────────────────────────────────────────&lt;/span>
&lt;span class='c'>#&amp;gt; case_wts&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; ── Model ───────────────────────────────────────────────────────────────────────&lt;/span>
&lt;span class='c'>#&amp;gt; Logistic Regression Model Specification (classification)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; Main Arguments:&lt;/span>
&lt;span class='c'>#&amp;gt; penalty = tune()&lt;/span>
&lt;span class='c'>#&amp;gt; mixture = 1&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; Computational engine: glmnet&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>And that is all you need to use case weights, the remaining functions from the tune and yardstick package know how to deal with case weights depending on the type of weight.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>cls_metrics&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>metric_set&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>sensitivity&lt;/span>, &lt;span class='nv'>specificity&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>grid&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>tibble&lt;/span>&lt;span class='o'>(&lt;/span>penalty &lt;span class='o'>=&lt;/span> &lt;span class='m'>10&lt;/span>&lt;span class='o'>^&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/seq.html'>seq&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>-&lt;/span>&lt;span class='m'>3&lt;/span>, &lt;span class='m'>0&lt;/span>, length.out &lt;span class='o'>=&lt;/span> &lt;span class='m'>20&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/Random.html'>set.seed&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>3&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>lr_res&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span>
&lt;span class='nv'>lr_wflow&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>tune_grid&lt;/span>&lt;span class='o'>(&lt;/span>resamples &lt;span class='o'>=&lt;/span> &lt;span class='nv'>sim_folds&lt;/span>, grid &lt;span class='o'>=&lt;/span> &lt;span class='nv'>grid&lt;/span>, metrics &lt;span class='o'>=&lt;/span> &lt;span class='nv'>cls_metrics&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>autoplot&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>lr_res&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/unnamed-chunk-8-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;h2 id="non-standard-roles-in-recipes">Non-standard roles in recipes
&lt;a href="#non-standard-roles-in-recipes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The recipes package use the idea of roles to determine how and when the different variables are used. The main roles are &lt;code>&amp;quot;outcome&amp;quot;&lt;/code>, &lt;code>&amp;quot;predictor&amp;quot;&lt;/code>, and now &lt;code>&amp;quot;case_weights&amp;quot;&lt;/code>. You are also able to change the roles of these variables using &lt;code>add_role()&lt;/code> and &lt;code>update_role()&lt;/code>.&lt;/p>
&lt;p>With a recent addition of case weights as another type of standard role, we have made recipes more robust. It now checks that all columns in the &lt;code>data&lt;/code> supplied to &lt;code>recipe()&lt;/code> are also present in the &lt;code>new_data&lt;/code> supplied to &lt;code>bake()&lt;/code>. An exception is made for columns with roles of either &lt;code>&amp;quot;outcome&amp;quot;&lt;/code> or &lt;code>&amp;quot;case_weights&amp;quot;&lt;/code> because these are typically not required at &lt;code>bake()&lt;/code> time.&lt;/p>
&lt;p>This change for stricter checking of roles will mean that you might need to make some small changes to your code if you are using non-standard roles.&lt;/p>
&lt;p>Let&amp;rsquo;s look at the &lt;code>tate_text&lt;/code> data set as an example:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/data.html'>data&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"tate_text"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>glimpse&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>tate_text&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; Rows: 4,284&lt;/span>
&lt;span class='c'>#&amp;gt; Columns: 5&lt;/span>
&lt;span class='c'>#&amp;gt; $ id &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> 21926, 20472, 20474, 20473, 20513, 21389, 121187, 19455, 20938,…&lt;/span>
&lt;span class='c'>#&amp;gt; $ artist &lt;span style='color: #555555; font-style: italic;'>&amp;lt;fct&amp;gt;&lt;/span> "Absalon", "Auerbach, Frank", "Auerbach, Frank", "Auerbach, Fra…&lt;/span>
&lt;span class='c'>#&amp;gt; $ title &lt;span style='color: #555555; font-style: italic;'>&amp;lt;chr&amp;gt;&lt;/span> "Proposals for a Habitat", "Michael", "Geoffrey", "Jake", "To t…&lt;/span>
&lt;span class='c'>#&amp;gt; $ medium &lt;span style='color: #555555; font-style: italic;'>&amp;lt;fct&amp;gt;&lt;/span> "Video, monitor or projection, colour and sound (stereo)", "Etc…&lt;/span>
&lt;span class='c'>#&amp;gt; $ year &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> 1990, 1990, 1990, 1990, 1990, 1990, 1990, 1990, 1990, 1990, 199…&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This data set includes an &lt;code>id&lt;/code> variable that shouldn&amp;rsquo;t have any predictive power and a &lt;code>title&lt;/code> variable that we want to ignore for now. We can let the recipe know that we don&amp;rsquo;t want it to treat &lt;code>id&lt;/code> and &lt;code>title&lt;/code> as predictors by giving them a different role which we will call &lt;code>&amp;quot;id&amp;quot;&lt;/code> here:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>tate_rec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>recipe&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>year&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>tate_text&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>update_role&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>id&lt;/span>, &lt;span class='nv'>title&lt;/span>, new_role &lt;span class='o'>=&lt;/span> &lt;span class='s'>"id"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>step_dummy_extract&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>artist&lt;/span>, &lt;span class='nv'>medium&lt;/span>, sep &lt;span class='o'>=&lt;/span> &lt;span class='s'>", "&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>tate_rec_prepped&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>prep&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>tate_rec&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This will now error when we try to apply the recipe to new data that contains only our predictors:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>new_painting&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>tibble&lt;/span>&lt;span class='o'>(&lt;/span>
artist &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Hamilton, Richard"&lt;/span>,
medium &lt;span class='o'>=&lt;/span> &lt;span class='s'>"Letterpress on paper"&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>bake&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>tate_rec_prepped&lt;/span>, &lt;span class='nv'>new_painting&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00; font-weight: bold;'>Error&lt;/span>&lt;span style='font-weight: bold;'> in `bake()`:&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BBBB00;'>!&lt;/span> The following required columns are missing from `new_data`: "id", "title".&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #0000BB;'>ℹ&lt;/span> These columns have one of the following roles, which are required at `bake()` time: "id".&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #0000BB;'>ℹ&lt;/span> If these roles are not required at `bake()` time, use `update_role_requirements(role = "your_role", bake = FALSE)`.&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>It complains because the recipe is expecting the &lt;code>id&lt;/code> and &lt;code>title&lt;/code> variables to be in the data set passed to &lt;code>bake()&lt;/code>. We can use
&lt;a href="https://recipes.tidymodels.org/reference/update_role_requirements.html" target="_blank" rel="noopener">update_role_requirements()&lt;/a> to tell the recipe that variables of role &lt;code>&amp;quot;id&amp;quot;&lt;/code> are not required when baking and we are good to go!&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>tate_rec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>recipe&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>year&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>, data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>tate_text&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>update_role&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>id&lt;/span>, &lt;span class='nv'>title&lt;/span>, new_role &lt;span class='o'>=&lt;/span> &lt;span class='s'>"id"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>update_role_requirements&lt;/span>&lt;span class='o'>(&lt;/span>role &lt;span class='o'>=&lt;/span> &lt;span class='s'>"id"&lt;/span>, bake &lt;span class='o'>=&lt;/span> &lt;span class='kc'>FALSE&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>%&amp;gt;%&lt;/span>
&lt;span class='nf'>step_dummy_extract&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>artist&lt;/span>, &lt;span class='nv'>medium&lt;/span>, sep &lt;span class='o'>=&lt;/span> &lt;span class='s'>", "&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>tate_rec_prepped&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>prep&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>tate_rec&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>bake&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>tate_rec_prepped&lt;/span>, &lt;span class='nv'>new_painting&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 1 × 2,675&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; artist_Abigail artist_Abraham artist_Absalon artist_Abts artist_Achill&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>1&lt;/span> 0 0 0 0 0&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># … with 2,670 more variables: artist_Ackroyd &amp;lt;dbl&amp;gt;, artist_Adam &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># artist_Agnes &amp;lt;dbl&amp;gt;, artist_Ahtila &amp;lt;dbl&amp;gt;, artist_Ai &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># artist_Akram &amp;lt;dbl&amp;gt;, artist_Aksel &amp;lt;dbl&amp;gt;, artist_Al &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># artist_Al.Ani &amp;lt;dbl&amp;gt;, artist_Alan &amp;lt;dbl&amp;gt;, artist_Albert &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># artist_Aleksandra &amp;lt;dbl&amp;gt;, artist_Alex &amp;lt;dbl&amp;gt;, artist_Alexander &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># artist_Alexandre.da &amp;lt;dbl&amp;gt;, artist_Alfredo &amp;lt;dbl&amp;gt;, artist_Alice &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># artist_Alimpiev &amp;lt;dbl&amp;gt;, artist_Alison &amp;lt;dbl&amp;gt;, artist_Allen &amp;lt;dbl&amp;gt;, …&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>applicable
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/marlycormar" target="_blank" rel="noopener">@marlycormar&lt;/a>,
&lt;a href="https://github.com/mikemahoney218" target="_blank" rel="noopener">@mikemahoney218&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>baguette:
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>bonsai:
&lt;a href="https://github.com/bwilkowski" target="_blank" rel="noopener">@bwilkowski&lt;/a>,
&lt;a href="https://github.com/joeycouse" target="_blank" rel="noopener">@joeycouse&lt;/a>,
&lt;a href="https://github.com/pinogl" target="_blank" rel="noopener">@pinogl&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>broom:
&lt;a href="https://github.com/behrman" target="_blank" rel="noopener">@behrman&lt;/a>,
&lt;a href="https://github.com/corybrunson" target="_blank" rel="noopener">@corybrunson&lt;/a>,
&lt;a href="https://github.com/fschaffner" target="_blank" rel="noopener">@fschaffner&lt;/a>,
&lt;a href="https://github.com/gjones1219" target="_blank" rel="noopener">@gjones1219&lt;/a>,
&lt;a href="https://github.com/grantmcdermott" target="_blank" rel="noopener">@grantmcdermott&lt;/a>,
&lt;a href="https://github.com/mfansler" target="_blank" rel="noopener">@mfansler&lt;/a>,
&lt;a href="https://github.com/michaeltopper1" target="_blank" rel="noopener">@michaeltopper1&lt;/a>,
&lt;a href="https://github.com/ray-p144" target="_blank" rel="noopener">@ray-p144&lt;/a>,
&lt;a href="https://github.com/RichardJActon" target="_blank" rel="noopener">@RichardJActon&lt;/a>,
&lt;a href="https://github.com/russHyde" target="_blank" rel="noopener">@russHyde&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/tappek" target="_blank" rel="noopener">@tappek&lt;/a>,
&lt;a href="https://github.com/Timelessprod" target="_blank" rel="noopener">@Timelessprod&lt;/a>, and
&lt;a href="https://github.com/vincentarelbundock" target="_blank" rel="noopener">@vincentarelbundock&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>butcher:
&lt;a href="https://github.com/cregouby" target="_blank" rel="noopener">@cregouby&lt;/a>,
&lt;a href="https://github.com/davidkane9" target="_blank" rel="noopener">@davidkane9&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>, and
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>censored:
&lt;a href="https://github.com/bcjaeger" target="_blank" rel="noopener">@bcjaeger&lt;/a>,
&lt;a href="https://github.com/brunocarlin" target="_blank" rel="noopener">@brunocarlin&lt;/a>,
&lt;a href="https://github.com/erikvona" target="_blank" rel="noopener">@erikvona&lt;/a>,
&lt;a href="https://github.com/gvelasq" target="_blank" rel="noopener">@gvelasq&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/mikemahoney218" target="_blank" rel="noopener">@mikemahoney218&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>corrr:
&lt;a href="https://github.com/astamm" target="_blank" rel="noopener">@astamm&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/john-s-f" target="_blank" rel="noopener">@john-s-f&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>, and
&lt;a href="https://github.com/thisisdaryn" target="_blank" rel="noopener">@thisisdaryn&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>dials:
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/franzbischoff" target="_blank" rel="noopener">@franzbischoff&lt;/a>,
&lt;a href="https://github.com/hadley" target="_blank" rel="noopener">@hadley&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/mikemahoney218" target="_blank" rel="noopener">@mikemahoney218&lt;/a>,
&lt;a href="https://github.com/py9mrg" target="_blank" rel="noopener">@py9mrg&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>discrim:
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/jmarshallnz" target="_blank" rel="noopener">@jmarshallnz&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>embed:
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/exsell-jc" target="_blank" rel="noopener">@exsell-jc&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/mkhansa" target="_blank" rel="noopener">@mkhansa&lt;/a>,
&lt;a href="https://github.com/talegari" target="_blank" rel="noopener">@talegari&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hardhat:
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/jonthegeek" target="_blank" rel="noopener">@jonthegeek&lt;/a>,
&lt;a href="https://github.com/mdancho84" target="_blank" rel="noopener">@mdancho84&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>infer:
&lt;a href="https://github.com/gdbassett" target="_blank" rel="noopener">@gdbassett&lt;/a>,
&lt;a href="https://github.com/liubao210" target="_blank" rel="noopener">@liubao210&lt;/a>,
&lt;a href="https://github.com/nipnipj" target="_blank" rel="noopener">@nipnipj&lt;/a>, and
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>modeldata:
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/jbkunst" target="_blank" rel="noopener">@jbkunst&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>multilevelmod:
&lt;a href="https://github.com/a-difabio" target="_blank" rel="noopener">@a-difabio&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/sitendug" target="_blank" rel="noopener">@sitendug&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>, and
&lt;a href="https://github.com/YiweiZhu" target="_blank" rel="noopener">@YiweiZhu&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>parsnip:
&lt;a href="https://github.com/bappa10085" target="_blank" rel="noopener">@bappa10085&lt;/a>,
&lt;a href="https://github.com/brunocarlin" target="_blank" rel="noopener">@brunocarlin&lt;/a>,
&lt;a href="https://github.com/cb12991" target="_blank" rel="noopener">@cb12991&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/deschen1" target="_blank" rel="noopener">@deschen1&lt;/a>,
&lt;a href="https://github.com/edgararuiz" target="_blank" rel="noopener">@edgararuiz&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/emmamendelsohn" target="_blank" rel="noopener">@emmamendelsohn&lt;/a>,
&lt;a href="https://github.com/exsell-jc" target="_blank" rel="noopener">@exsell-jc&lt;/a>,
&lt;a href="https://github.com/fdeoliveirag" target="_blank" rel="noopener">@fdeoliveirag&lt;/a>,
&lt;a href="https://github.com/gundalav" target="_blank" rel="noopener">@gundalav&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/jmarshallnz" target="_blank" rel="noopener">@jmarshallnz&lt;/a>,
&lt;a href="https://github.com/joeycouse" target="_blank" rel="noopener">@joeycouse&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/Npaffen" target="_blank" rel="noopener">@Npaffen&lt;/a>,
&lt;a href="https://github.com/oj713" target="_blank" rel="noopener">@oj713&lt;/a>,
&lt;a href="https://github.com/pmags" target="_blank" rel="noopener">@pmags&lt;/a>,
&lt;a href="https://github.com/PursuitOfDataScience" target="_blank" rel="noopener">@PursuitOfDataScience&lt;/a>,
&lt;a href="https://github.com/qiushiyan" target="_blank" rel="noopener">@qiushiyan&lt;/a>,
&lt;a href="https://github.com/salim-b" target="_blank" rel="noopener">@salim-b&lt;/a>,
&lt;a href="https://github.com/shosaco" target="_blank" rel="noopener">@shosaco&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/tolliam" target="_blank" rel="noopener">@tolliam&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>plsmod:
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>poissonreg:
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>recipes:
&lt;a href="https://github.com/abichat" target="_blank" rel="noopener">@abichat&lt;/a>,
&lt;a href="https://github.com/albertiniufu" target="_blank" rel="noopener">@albertiniufu&lt;/a>,
&lt;a href="https://github.com/AndrewKostandy" target="_blank" rel="noopener">@AndrewKostandy&lt;/a>,
&lt;a href="https://github.com/aridf" target="_blank" rel="noopener">@aridf&lt;/a>,
&lt;a href="https://github.com/brunocarlin" target="_blank" rel="noopener">@brunocarlin&lt;/a>,
&lt;a href="https://github.com/cb12991" target="_blank" rel="noopener">@cb12991&lt;/a>,
&lt;a href="https://github.com/conorjudge" target="_blank" rel="noopener">@conorjudge&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/duccioa" target="_blank" rel="noopener">@duccioa&lt;/a>,
&lt;a href="https://github.com/edgararuiz" target="_blank" rel="noopener">@edgararuiz&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/exsell-jc" target="_blank" rel="noopener">@exsell-jc&lt;/a>,
&lt;a href="https://github.com/gundalav" target="_blank" rel="noopener">@gundalav&lt;/a>,
&lt;a href="https://github.com/hsbadr" target="_blank" rel="noopener">@hsbadr&lt;/a>,
&lt;a href="https://github.com/jkennel" target="_blank" rel="noopener">@jkennel&lt;/a>,
&lt;a href="https://github.com/joeycouse" target="_blank" rel="noopener">@joeycouse&lt;/a>,
&lt;a href="https://github.com/joranE" target="_blank" rel="noopener">@joranE&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/kendonB" target="_blank" rel="noopener">@kendonB&lt;/a>,
&lt;a href="https://github.com/krzjoa" target="_blank" rel="noopener">@krzjoa&lt;/a>,
&lt;a href="https://github.com/madprogramer" target="_blank" rel="noopener">@madprogramer&lt;/a>,
&lt;a href="https://github.com/mdporter" target="_blank" rel="noopener">@mdporter&lt;/a>,
&lt;a href="https://github.com/mdsteiner" target="_blank" rel="noopener">@mdsteiner&lt;/a>,
&lt;a href="https://github.com/nipnipj" target="_blank" rel="noopener">@nipnipj&lt;/a>,
&lt;a href="https://github.com/PursuitOfDataScience" target="_blank" rel="noopener">@PursuitOfDataScience&lt;/a>,
&lt;a href="https://github.com/r2evans" target="_blank" rel="noopener">@r2evans&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/szymonkusak" target="_blank" rel="noopener">@szymonkusak&lt;/a>,
&lt;a href="https://github.com/themichjam" target="_blank" rel="noopener">@themichjam&lt;/a>,
&lt;a href="https://github.com/tmastny" target="_blank" rel="noopener">@tmastny&lt;/a>,
&lt;a href="https://github.com/tomazweiss" target="_blank" rel="noopener">@tomazweiss&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>,
&lt;a href="https://github.com/TylerGrantSmith" target="_blank" rel="noopener">@TylerGrantSmith&lt;/a>, and
&lt;a href="https://github.com/zenggyu" target="_blank" rel="noopener">@zenggyu&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rsample:
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/dfalbel" target="_blank" rel="noopener">@dfalbel&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/mattwarkentin" target="_blank" rel="noopener">@mattwarkentin&lt;/a>,
&lt;a href="https://github.com/mdporter" target="_blank" rel="noopener">@mdporter&lt;/a>,
&lt;a href="https://github.com/mikemahoney218" target="_blank" rel="noopener">@mikemahoney218&lt;/a>,
&lt;a href="https://github.com/pgoodling-usgs" target="_blank" rel="noopener">@pgoodling-usgs&lt;/a>,
&lt;a href="https://github.com/sametsoekel" target="_blank" rel="noopener">@sametsoekel&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>, and
&lt;a href="https://github.com/wkdavis" target="_blank" rel="noopener">@wkdavis&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rules:
&lt;a href="https://github.com/DesmondChoy" target="_blank" rel="noopener">@DesmondChoy&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>, and
&lt;a href="https://github.com/wdkeyzer" target="_blank" rel="noopener">@wdkeyzer&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>shinymodels:
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>, and
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>spatialsample:
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/mikemahoney218" target="_blank" rel="noopener">@mikemahoney218&lt;/a>,
&lt;a href="https://github.com/MxNl" target="_blank" rel="noopener">@MxNl&lt;/a>,
&lt;a href="https://github.com/nipnipj" target="_blank" rel="noopener">@nipnipj&lt;/a>, and
&lt;a href="https://github.com/PathosEthosLogos" target="_blank" rel="noopener">@PathosEthosLogos&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stacks:
&lt;a href="https://github.com/amcmahon17" target="_blank" rel="noopener">@amcmahon17&lt;/a>,
&lt;a href="https://github.com/domijan" target="_blank" rel="noopener">@domijan&lt;/a>,
&lt;a href="https://github.com/Jeffrothschild" target="_blank" rel="noopener">@Jeffrothschild&lt;/a>,
&lt;a href="https://github.com/mcavs" target="_blank" rel="noopener">@mcavs&lt;/a>,
&lt;a href="https://github.com/mvt-oviedo" target="_blank" rel="noopener">@mvt-oviedo&lt;/a>,
&lt;a href="https://github.com/osorensen" target="_blank" rel="noopener">@osorensen&lt;/a>,
&lt;a href="https://github.com/py9mrg" target="_blank" rel="noopener">@py9mrg&lt;/a>,
&lt;a href="https://github.com/rcannood" target="_blank" rel="noopener">@rcannood&lt;/a>,
&lt;a href="https://github.com/Saarialho" target="_blank" rel="noopener">@Saarialho&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>, and
&lt;a href="https://github.com/williamshell" target="_blank" rel="noopener">@williamshell&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>textrecipes:
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/NLDataScientist" target="_blank" rel="noopener">@NLDataScientist&lt;/a>,
&lt;a href="https://github.com/PursuitOfDataScience" target="_blank" rel="noopener">@PursuitOfDataScience&lt;/a>, and
&lt;a href="https://github.com/raj-hubber" target="_blank" rel="noopener">@raj-hubber&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>themis:
&lt;a href="https://github.com/coforfe" target="_blank" rel="noopener">@coforfe&lt;/a>, and
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>tidymodels:
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/EngrStudent" target="_blank" rel="noopener">@EngrStudent&lt;/a>,
&lt;a href="https://github.com/exsell-jc" target="_blank" rel="noopener">@exsell-jc&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/kcarnold" target="_blank" rel="noopener">@kcarnold&lt;/a>,
&lt;a href="https://github.com/scottlyden" target="_blank" rel="noopener">@scottlyden&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>tidyposterior:
&lt;a href="https://github.com/jmgirard" target="_blank" rel="noopener">@jmgirard&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/mikemahoney218" target="_blank" rel="noopener">@mikemahoney218&lt;/a>,
&lt;a href="https://github.com/mone27" target="_blank" rel="noopener">@mone27&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>tidypredict:
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/mgirlich" target="_blank" rel="noopener">@mgirlich&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>tune:
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/dax44" target="_blank" rel="noopener">@dax44&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/felxcon" target="_blank" rel="noopener">@felxcon&lt;/a>,
&lt;a href="https://github.com/franzbischoff" target="_blank" rel="noopener">@franzbischoff&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/joeycouse" target="_blank" rel="noopener">@joeycouse&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/mattwarkentin" target="_blank" rel="noopener">@mattwarkentin&lt;/a>,
&lt;a href="https://github.com/mdancho84" target="_blank" rel="noopener">@mdancho84&lt;/a>,
&lt;a href="https://github.com/mikemahoney218" target="_blank" rel="noopener">@mikemahoney218&lt;/a>,
&lt;a href="https://github.com/munoztd0" target="_blank" rel="noopener">@munoztd0&lt;/a>,
&lt;a href="https://github.com/nikhilpathiyil" target="_blank" rel="noopener">@nikhilpathiyil&lt;/a>,
&lt;a href="https://github.com/pgoodling-usgs" target="_blank" rel="noopener">@pgoodling-usgs&lt;/a>,
&lt;a href="https://github.com/py9mrg" target="_blank" rel="noopener">@py9mrg&lt;/a>,
&lt;a href="https://github.com/qiushiyan" target="_blank" rel="noopener">@qiushiyan&lt;/a>,
&lt;a href="https://github.com/siegfried" target="_blank" rel="noopener">@siegfried&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/thegargiulian" target="_blank" rel="noopener">@thegargiulian&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>,
&lt;a href="https://github.com/williamshell" target="_blank" rel="noopener">@williamshell&lt;/a>, and
&lt;a href="https://github.com/wtbxsjy" target="_blank" rel="noopener">@wtbxsjy&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>usemodels:
&lt;a href="https://github.com/aloes2512" target="_blank" rel="noopener">@aloes2512&lt;/a>,
&lt;a href="https://github.com/amcmahon17" target="_blank" rel="noopener">@amcmahon17&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>, and
&lt;a href="https://github.com/larry77" target="_blank" rel="noopener">@larry77&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>workflows:
&lt;a href="https://github.com/CarstenLange" target="_blank" rel="noopener">@CarstenLange&lt;/a>,
&lt;a href="https://github.com/dajmcdon" target="_blank" rel="noopener">@dajmcdon&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/nipnipj" target="_blank" rel="noopener">@nipnipj&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/themichjam" target="_blank" rel="noopener">@themichjam&lt;/a>, and
&lt;a href="https://github.com/TylerGrantSmith" target="_blank" rel="noopener">@TylerGrantSmith&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>workflowsets:
&lt;a href="https://github.com/a-difabio" target="_blank" rel="noopener">@a-difabio&lt;/a>,
&lt;a href="https://github.com/BorisDelange" target="_blank" rel="noopener">@BorisDelange&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>,
&lt;a href="https://github.com/wdefreitas" target="_blank" rel="noopener">@wdefreitas&lt;/a>, and
&lt;a href="https://github.com/yonicd" target="_blank" rel="noopener">@yonicd&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>yardstick:
&lt;a href="https://github.com/1lliter8" target="_blank" rel="noopener">@1lliter8&lt;/a>,
&lt;a href="https://github.com/amcmahon17" target="_blank" rel="noopener">@amcmahon17&lt;/a>,
&lt;a href="https://github.com/brshallo" target="_blank" rel="noopener">@brshallo&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/gsverhoeven" target="_blank" rel="noopener">@gsverhoeven&lt;/a>,
&lt;a href="https://github.com/mikemahoney218" target="_blank" rel="noopener">@mikemahoney218&lt;/a>,
&lt;a href="https://github.com/parsifal9" target="_blank" rel="noopener">@parsifal9&lt;/a>, and
&lt;a href="https://github.com/sametsoekel" target="_blank" rel="noopener">@sametsoekel&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>bonsai 0.1.0</title><link>https://www.tidyverse.org/blog/2022/06/bonsai-0-1-0/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2022/06/bonsai-0-1-0/</guid><description>&lt;p>We&amp;rsquo;re super stoked to announce the first release of the
&lt;a href="https://bonsai.tidymodels.org/" target="_blank" rel="noopener">bonsai&lt;/a> package on CRAN! bonsai is a
&lt;a href="https://parsnip.tidymodels.org/" target="_blank" rel="noopener">parsnip&lt;/a> extension package for tree-based models.&lt;/p>
&lt;p>You can install it from CRAN with:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/install.packages.html'>install.packages&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"bonsai"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Without extension packages, the parsnip package already supports fitting decision trees, random forests, and boosted trees. The bonsai package introduces support for two additional engines that implement variants of these algorithms:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://CRAN.R-project.org/package=partykit" target="_blank" rel="noopener">partykit&lt;/a>: conditional inference trees via
&lt;a href="https://parsnip.tidymodels.org/reference/decision_tree.html" target="_blank" rel="noopener">&lt;code>decision_tree()&lt;/code>&lt;/a> and conditional random forests via
&lt;a href="https://parsnip.tidymodels.org/reference/rand_forest.html" target="_blank" rel="noopener">&lt;code>rand_forest()&lt;/code>&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://CRAN.R-project.org/package=lightgbm" target="_blank" rel="noopener">LightGBM&lt;/a>: optimized gradient boosted trees via
&lt;a href="https://parsnip.tidymodels.org/reference/boost_tree.html" target="_blank" rel="noopener">&lt;code>boost_tree()&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>As we introduce further support for tree-based model engines in the tidymodels, new implementations will reside in this package (rather than parsnip).&lt;/p>
&lt;p>To demonstrate how to use the package, we&amp;rsquo;ll fit a few tree-based models and explore their output. First, loading bonsai as well as the rest of the tidymodels core packages:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://bonsai.tidymodels.org/'>bonsai&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; Loading required package: parsnip&lt;/span>
&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://tidymodels.tidymodels.org'>tidymodels&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; ── &lt;span style='font-weight: bold;'>Attaching packages&lt;/span> ────────────────────────────────────── tidymodels 0.2.0 ──&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>broom &lt;/span> 0.8.0 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>rsample &lt;/span> 0.1.1 &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>dials &lt;/span> 1.0.0 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>tibble &lt;/span> 3.1.7 &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>dplyr &lt;/span> 1.0.9 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>tidyr &lt;/span> 1.2.0 &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>ggplot2 &lt;/span> 3.3.6 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>tune &lt;/span> 0.2.0 &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>infer &lt;/span> 1.0.2 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>workflows &lt;/span> 0.2.6 &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>modeldata &lt;/span> 0.1.1.&lt;span style='color: #BB0000;'>9000&lt;/span> &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>workflowsets&lt;/span> 0.2.1 &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>purrr &lt;/span> 0.3.4 &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>yardstick &lt;/span> 1.0.0 &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #00BB00;'>✔&lt;/span> &lt;span style='color: #0000BB;'>recipes &lt;/span> 0.2.0&lt;/span>
&lt;span class='c'>#&amp;gt; ── &lt;span style='font-weight: bold;'>Conflicts&lt;/span> ───────────────────────────────────────── tidymodels_conflicts() ──&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>purrr&lt;/span>::&lt;span style='color: #00BB00;'>discard()&lt;/span> masks &lt;span style='color: #0000BB;'>scales&lt;/span>::discard()&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>dplyr&lt;/span>::&lt;span style='color: #00BB00;'>filter()&lt;/span> masks &lt;span style='color: #0000BB;'>stats&lt;/span>::filter()&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>dplyr&lt;/span>::&lt;span style='color: #00BB00;'>lag()&lt;/span> masks &lt;span style='color: #0000BB;'>stats&lt;/span>::lag()&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #BB0000;'>✖&lt;/span> &lt;span style='color: #0000BB;'>recipes&lt;/span>::&lt;span style='color: #00BB00;'>step()&lt;/span> masks &lt;span style='color: #0000BB;'>stats&lt;/span>::step()&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #0000BB;'>•&lt;/span> Dig deeper into tidy modeling with R at &lt;span style='color: #00BB00;'>https://www.tmwr.org&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Note that we use a development version of the
&lt;a href="https://modeldata.tidymodels.org/" target="_blank" rel="noopener">modeldata&lt;/a> package to generate example data later on in this post using the new &lt;code>sim_regression()&lt;/code> function&amp;mdash;you can install this version of the package using &lt;code>pak::pak(tidymodels/modeldata)&lt;/code>.&lt;/p>
&lt;p>We&amp;rsquo;ll use a
&lt;a href="https://allisonhorst.github.io/palmerpenguins/" target="_blank" rel="noopener">dataset&lt;/a> containing measurements on 3 different species of penguins as an example. Loading that data in and checking it out:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/data.html'>data&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>penguins&lt;/span>, package &lt;span class='o'>=&lt;/span> &lt;span class='s'>"modeldata"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/utils/str.html'>str&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>penguins&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; tibble [344 × 7] (S3: tbl_df/tbl/data.frame)&lt;/span>
&lt;span class='c'>#&amp;gt; $ species : Factor w/ 3 levels "Adelie","Chinstrap",..: 1 1 1 1 1 1 1 1 1 1 ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ island : Factor w/ 3 levels "Biscoe","Dream",..: 3 3 3 3 3 3 3 3 3 3 ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ bill_length_mm : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ bill_depth_mm : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ body_mass_g : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...&lt;/span>
&lt;span class='c'>#&amp;gt; $ sex : Factor w/ 2 levels "female","male": 2 1 1 NA 1 2 1 2 NA NA ...&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Specifically, we&amp;rsquo;ll make use of flipper length and home island to model a penguin&amp;rsquo;s species:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>ggplot&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>penguins&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>aes&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>island&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>flipper_length_mm&lt;/span>, col &lt;span class='o'>=&lt;/span> &lt;span class='nv'>species&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>geom_jitter&lt;/span>&lt;span class='o'>(&lt;/span>width &lt;span class='o'>=&lt;/span> &lt;span class='m'>.2&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/penguin-plot-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>Looking at this plot, you might begin to imagine your own simple set of binary splits for guessing which species a penguin might be given its home island and flipper length. Given that this small set of predictors almost completely separates our outcome with only a few splits, a relatively simple tree should serve our purposes just fine.&lt;/p>
&lt;h2 id="decision-trees">Decision Trees
&lt;a href="#decision-trees">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>bonsai introduces support for fitting decision trees with partykit, which implements a variety of decision trees called conditional inference trees (CITs).&lt;/p>
&lt;p>CITs differ from implementations of decision trees available elsewhere in the tidymodels in the criteria used to generate splits. The details of how these criteria differ are outside of the scope of this post.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> Practically, though, CITs offer a few notable advantages over CART- and C5.0-based decision trees:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Overfitting&lt;/strong>: Common implementations of decision trees are notoriously prone to overfitting, and require several well-chosen penalization (i.e. cost-complexity) and early stopping (e.g. pruning, max depth) hyperparameters to fit a model that will perform well when predicting on new observations. &amp;ldquo;Out-of-the-box,&amp;rdquo; CITs are not as prone to these same issues and do not accept a penalization parameter at all.&lt;/li>
&lt;li>&lt;strong>Selection bias&lt;/strong>: Common implementations of decision trees are biased towards selecting variables with many possible split points or missing values. CITs are natively not prone to the first issue, and many popular implementations address the second vulnerability.&lt;/li>
&lt;/ul>
&lt;p>To define a conditional inference tree model specification, just set the modeling engine to &lt;code>&amp;quot;partykit&amp;quot;&lt;/code> when creating a decision tree. Fitting to the penguins data, then:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>dt_mod&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/decision_tree.html'>decision_tree&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>engine &lt;span class='o'>=&lt;/span> &lt;span class='s'>"partykit"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_args.html'>set_mode&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>mode &lt;span class='o'>=&lt;/span> &lt;span class='s'>"classification"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/fit.html'>fit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
formula &lt;span class='o'>=&lt;/span> &lt;span class='nv'>species&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>flipper_length_mm&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>island&lt;/span>,
data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>penguins&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>dt_mod&lt;/span>
&lt;span class='c'>#&amp;gt; parsnip model object&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; Model formula:&lt;/span>
&lt;span class='c'>#&amp;gt; species ~ flipper_length_mm + island&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; Fitted party:&lt;/span>
&lt;span class='c'>#&amp;gt; [1] root&lt;/span>
&lt;span class='c'>#&amp;gt; | [2] island in Biscoe&lt;/span>
&lt;span class='c'>#&amp;gt; | | [3] flipper_length_mm &amp;lt;= 203&lt;/span>
&lt;span class='c'>#&amp;gt; | | | [4] flipper_length_mm &amp;lt;= 196: Adelie (n = 38, err = 0.0%)&lt;/span>
&lt;span class='c'>#&amp;gt; | | | [5] flipper_length_mm &amp;gt; 196: Adelie (n = 8, err = 25.0%)&lt;/span>
&lt;span class='c'>#&amp;gt; | | [6] flipper_length_mm &amp;gt; 203: Gentoo (n = 122, err = 0.0%)&lt;/span>
&lt;span class='c'>#&amp;gt; | [7] island in Dream, Torgersen&lt;/span>
&lt;span class='c'>#&amp;gt; | | [8] island in Dream&lt;/span>
&lt;span class='c'>#&amp;gt; | | | [9] flipper_length_mm &amp;lt;= 192: Adelie (n = 59, err = 33.9%)&lt;/span>
&lt;span class='c'>#&amp;gt; | | | [10] flipper_length_mm &amp;gt; 192: Chinstrap (n = 65, err = 26.2%)&lt;/span>
&lt;span class='c'>#&amp;gt; | | [11] island in Torgersen: Adelie (n = 52, err = 0.0%)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; Number of inner nodes: 5&lt;/span>
&lt;span class='c'>#&amp;gt; Number of terminal nodes: 6&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Do any of these splits line up with your intuition? This tree results in only 6 terminal nodes and describes the structure shown in the above plot quite well.&lt;/p>
&lt;p>Read more about this implementation of decision trees in
&lt;a href="https://parsnip.tidymodels.org/reference/details_decision_tree_partykit.html" target="_blank" rel="noopener">&lt;code>?details_decision_tree_partykit&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="random-forests">Random Forests
&lt;a href="#random-forests">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>One generalization of a decision tree is a &lt;em>random forest&lt;/em>, which fits a large number of decision trees, each independently of the others. The fitted random forest model combines predictions from the individual decision trees to generate its predictions.&lt;/p>
&lt;p>bonsai introduces support for random forests using the &lt;code>partykit&lt;/code> engine, which implements an algorithm called a &lt;em>conditional random forest&lt;/em>. Conditional random forests are a type of random forest that uses conditional inference trees (like the one we fit above!) for its constituent decision trees.&lt;/p>
&lt;p>To fit a conditional random forest with partykit, our code looks pretty similar to that which we we needed to fit a conditional inference tree. Just switch out
&lt;a href="https://parsnip.tidymodels.org/reference/decision_tree.html" target="_blank" rel="noopener">&lt;code>decision_tree()&lt;/code>&lt;/a> with
&lt;a href="https://parsnip.tidymodels.org/reference/rand_forest.html" target="_blank" rel="noopener">&lt;code>rand_forest()&lt;/code>&lt;/a> and remember to keep the engine set as &lt;code>&amp;quot;partykit&amp;quot;&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>rf_mod&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/rand_forest.html'>rand_forest&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>engine &lt;span class='o'>=&lt;/span> &lt;span class='s'>"partykit"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_args.html'>set_mode&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>mode &lt;span class='o'>=&lt;/span> &lt;span class='s'>"classification"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/fit.html'>fit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
formula &lt;span class='o'>=&lt;/span> &lt;span class='nv'>species&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>flipper_length_mm&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>island&lt;/span>,
data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>penguins&lt;/span>
&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Read more about this implementation of random forests in
&lt;a href="https://parsnip.tidymodels.org/reference/details_rand_forest_partykit.html" target="_blank" rel="noopener">&lt;code>?details_rand_forest_partykit&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="boosted-trees">Boosted Trees
&lt;a href="#boosted-trees">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Another generalization of a decision tree is a series of decision trees where &lt;em>each tree depends on the results of previous trees&lt;/em>&amp;mdash;this is called a &lt;em>boosted tree&lt;/em>. bonsai implements an additional parsnip engine for this model type called &lt;code>&amp;quot;lightgbm&amp;quot;&lt;/code>. While fitting boosted trees is quite computationally intensive, especially with high-dimensional data, LightGBM provides an implementation of a highly efficient variant of the algorithm.&lt;/p>
&lt;p>To make use of it, start out with a &lt;code>boost_tree&lt;/code> model spec and set &lt;code>engine = &amp;quot;lightgbm&amp;quot;&lt;/code>:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>bt_mod&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/boost_tree.html'>boost_tree&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>engine &lt;span class='o'>=&lt;/span> &lt;span class='s'>"lightgbm"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_args.html'>set_mode&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>mode &lt;span class='o'>=&lt;/span> &lt;span class='s'>"classification"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/fit.html'>fit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
formula &lt;span class='o'>=&lt;/span> &lt;span class='nv'>species&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>flipper_length_mm&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>island&lt;/span>,
data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>penguins&lt;/span>
&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The main benefit of using LightGBM is its computational efficiency: as the number of observations in training data increases, we can observe an increasingly substantial decrease in time-to-fit when using the LightGBM engine as compared to other implementations of boosted trees, like XGBoost.&lt;/p>
&lt;p>To show this, we&amp;rsquo;ll use the &lt;code>sim_regression()&lt;/code> function from modeldata to simulate increasingly large datasets that we can fit models to. For example, generating a dataset with 10 observations and 20 numeric predictors:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>sim_regression&lt;/span>&lt;span class='o'>(&lt;/span>num_samples &lt;span class='o'>=&lt;/span> &lt;span class='m'>10&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># A tibble: 10 × 21&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; outcome predictor_01 predictor_02 predictor_03 predictor_04 predictor_05&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span> &lt;span style='color: #555555; font-style: italic;'>&amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 1&lt;/span> 41.9 -&lt;span style='color: #BB0000;'>3.15&lt;/span> 3.72 -&lt;span style='color: #BB0000;'>0.800&lt;/span> -&lt;span style='color: #BB0000;'>5.87&lt;/span> 0.265&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 2&lt;/span> 49.4 4.93 6.15 5.09 0.501 -&lt;span style='color: #BB0000;'>2.45&lt;/span> &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 3&lt;/span> -&lt;span style='color: #BB0000;'>9.20&lt;/span> 0.020&lt;span style='text-decoration: underline;'>0&lt;/span> -&lt;span style='color: #BB0000;'>2.31&lt;/span> 4.64 0.422 3.14 &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 4&lt;/span> -&lt;span style='color: #BB0000;'>0.385&lt;/span> -&lt;span style='color: #BB0000;'>1.97&lt;/span> -&lt;span style='color: #BB0000;'>2.56&lt;/span> -&lt;span style='color: #BB0000;'>0.018&lt;/span>&lt;span style='color: #BB0000; text-decoration: underline;'>2&lt;/span> 1.83 -&lt;span style='color: #BB0000;'>4.23&lt;/span> &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 5&lt;/span> 8.08 -&lt;span style='color: #BB0000;'>0.266&lt;/span> -&lt;span style='color: #BB0000;'>0.574&lt;/span> -&lt;span style='color: #BB0000;'>1.08&lt;/span> -&lt;span style='color: #BB0000;'>1.75&lt;/span> 1.57 &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 6&lt;/span> 3.79 0.145 3.86 3.91 3.32 -&lt;span style='color: #BB0000;'>4.27&lt;/span> &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 7&lt;/span> 1.12 -&lt;span style='color: #BB0000;'>6.35&lt;/span> -&lt;span style='color: #BB0000;'>2.39&lt;/span> 0.119 0.848 1.74 &lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 8&lt;/span> 3.21 4.56 3.20 -&lt;span style='color: #BB0000;'>2.68&lt;/span> -&lt;span style='color: #BB0000;'>1.11&lt;/span> 0.729&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'> 9&lt;/span> -&lt;span style='color: #BB0000;'>4.56&lt;/span> 2.97 -&lt;span style='color: #BB0000;'>1.36&lt;/span> -&lt;span style='color: #BB0000;'>1.90&lt;/span> -&lt;span style='color: #BB0000;'>1.01&lt;/span> 0.557&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'>10&lt;/span> 0.140 -&lt;span style='color: #BB0000;'>0.234&lt;/span> -&lt;span style='color: #BB0000;'>1.05&lt;/span> 0.551 0.861 -&lt;span style='color: #BB0000;'>0.937&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># … with 15 more variables: predictor_06 &amp;lt;dbl&amp;gt;, predictor_07 &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># predictor_08 &amp;lt;dbl&amp;gt;, predictor_09 &amp;lt;dbl&amp;gt;, predictor_10 &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># predictor_11 &amp;lt;dbl&amp;gt;, predictor_12 &amp;lt;dbl&amp;gt;, predictor_13 &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># predictor_14 &amp;lt;dbl&amp;gt;, predictor_15 &amp;lt;dbl&amp;gt;, predictor_16 &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># predictor_17 &amp;lt;dbl&amp;gt;, predictor_18 &amp;lt;dbl&amp;gt;, predictor_19 &amp;lt;dbl&amp;gt;,&lt;/span>&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;span style='color: #555555;'># predictor_20 &amp;lt;dbl&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Now, fitting boosted trees on increasingly large datasets with XGBoost and LightGBM and observing time-to-fit:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='c'># given an engine and nrow(training_data), return the time to fit&lt;/span>
&lt;span class='nv'>time_boost_fit&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='kr'>function&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>engine&lt;/span>, &lt;span class='nv'>n&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&amp;#123;&lt;/span>
&lt;span class='nv'>time&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/system.time.html'>system.time&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>&amp;#123;&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/boost_tree.html'>boost_tree&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>engine &lt;span class='o'>=&lt;/span> &lt;span class='nv'>engine&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_args.html'>set_mode&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>mode &lt;span class='o'>=&lt;/span> &lt;span class='s'>"regression"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/fit.html'>fit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>
formula &lt;span class='o'>=&lt;/span> &lt;span class='nv'>outcome&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>.&lt;/span>,
data &lt;span class='o'>=&lt;/span> &lt;span class='nf'>sim_regression&lt;/span>&lt;span class='o'>(&lt;/span>num_samples &lt;span class='o'>=&lt;/span> &lt;span class='nv'>n&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>&amp;#125;&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>tibble&lt;/span>&lt;span class='o'>(&lt;/span>
engine &lt;span class='o'>=&lt;/span> &lt;span class='nv'>engine&lt;/span>,
n &lt;span class='o'>=&lt;/span> &lt;span class='nv'>n&lt;/span>,
time_to_fit &lt;span class='o'>=&lt;/span> &lt;span class='nv'>time&lt;/span>&lt;span class='o'>[[&lt;/span>&lt;span class='s'>"elapsed"&lt;/span>&lt;span class='o'>]&lt;/span>&lt;span class='o'>]&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='o'>&amp;#125;&lt;/span>
&lt;span class='c'># setup engine and n_samples combinations&lt;/span>
&lt;span class='nv'>engines&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/rep.html'>rep&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>XGBoost &lt;span class='o'>=&lt;/span> &lt;span class='s'>"xgboost"&lt;/span>, LightGBM &lt;span class='o'>=&lt;/span> &lt;span class='s'>"lightgbm"&lt;/span>&lt;span class='o'>)&lt;/span>, each &lt;span class='o'>=&lt;/span> &lt;span class='m'>11&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>n_samples&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/Round.html'>round&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/rep.html'>rep&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>10&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='m'>10&lt;/span>&lt;span class='o'>^&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/seq.html'>seq&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>2&lt;/span>, &lt;span class='m'>4.5&lt;/span>, &lt;span class='m'>.25&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>, times &lt;span class='o'>=&lt;/span> &lt;span class='m'>2&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'># apply the function over each combination&lt;/span>
&lt;span class='nv'>fit_times&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span>
&lt;span class='nf'>map2_dfr&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nv'>engines&lt;/span>,
&lt;span class='nv'>n_samples&lt;/span>,
&lt;span class='nv'>time_boost_fit&lt;/span>
&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>mutate&lt;/span>&lt;span class='o'>(&lt;/span>
engine &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/factor.html'>factor&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>engine&lt;/span>, levels &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"xgboost"&lt;/span>, &lt;span class='s'>"lightgbm"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='c'># visualize results&lt;/span>
&lt;span class='nf'>ggplot&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>fit_times&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>aes&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>n&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>time_to_fit&lt;/span>, col &lt;span class='o'>=&lt;/span> &lt;span class='nv'>engine&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>geom_line&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>scale_x_log10&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/boost-comparison-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>As we can see, the decrease in time-to-fit when using LightGBM as opposed to XGBoost becomes more notable as the number of rows in the training data increases.&lt;/p>
&lt;p>Read more about this implementation of boosted trees in
&lt;a href="https://parsnip.tidymodels.org/reference/details_boost_tree_lightgbm.html" target="_blank" rel="noopener">&lt;code>?details_boost_tree_lightgbm&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="other-notes">Other Notes
&lt;a href="#other-notes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>This package is based off of
&lt;a href="https://github.com/curso-r/treesnip" target="_blank" rel="noopener">the treesnip package&lt;/a> by Daniel Falbel, Athos Damiani, and Roel M. Hogervorst. Users of that package will note that we have not included support for
&lt;a href="https://github.com/catboost/catboost" target="_blank" rel="noopener">the catboost package&lt;/a>. Unfortunately, the catboost R package is not on CRAN, so we&amp;rsquo;re not able to add support for the package for now. We&amp;rsquo;ll be keeping an eye on discussions in that development community and plan to support the package upon its release to CRAN!&lt;/p>
&lt;p>Each of these model specs and engines have several arguments and tuning parameters that affect user experience and results greatly. We recommend reading about each of these parameters and tuning them when you find them relevant for your modeling use case.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A big thanks to Daniel Falbel, Athos Damiani, and Roel M. Hogervorst for their work on
&lt;a href="https://github.com/curso-r/treesnip" target="_blank" rel="noopener">the treesnip package&lt;/a>, on which this package is based. We&amp;rsquo;ve listed the treesnip authors as co-authors of bonsai in recognition of their help in laying the foundations for this project.&lt;/p>
&lt;p>We&amp;rsquo;re also grateful for the wonderful package hex sticker by Amanda Petri!&lt;/p>
&lt;p>Finally, thank you to those who have tested and provided feedback on the developmental versions of the package over the last couple months.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>For those interested, the
&lt;a href="https://doi.org/10.1198/106186006X133933" target="_blank" rel="noopener">original paper&lt;/a> introducing conditional inference trees describes and motivates these differences well. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Using case weights with tidymodels</title><link>https://www.tidyverse.org/blog/2022/05/case-weights/</link><pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2022/05/case-weights/</guid><description>&lt;!--
TODO:
* [ ] Look over / edit the post's title in the yaml
* [ ] Edit (or delete) the description; note this appears in the Twitter card
* [ ] Pick category and tags (see existing with `hugodown::tidy_show_meta()`)
* [ ] Find photo &amp; update yaml metadata
* [ ] Create `thumbnail-sq.jpg`; height and width should be equal
* [ ] Create `thumbnail-wd.jpg`; width should be >5x height
* [ ] `hugodown::use_tidy_thumbnails()`
* [ ] Add intro sentence, e.g. the standard tagline for the package
* [ ] `usethis::use_tidy_thanks()`
-->
&lt;p>We are pleased to announce that tidymodels packages now support the use of case weights. There has been a ton of work and multiple technical hurdles to overcome. The diversity of the types of weights and how they should be used is very complex, but I think that we&amp;rsquo;ve come up with a solution that is fairly straightforward for users.&lt;/p>
&lt;p>Several packages are affected by these changes and we&amp;rsquo;re keeping them on GitHub until everything is finalized. See the last section for instructions for installing the development versions.&lt;/p>
&lt;h2 id="what-are-case-weights">What are case weights?
&lt;a href="#what-are-case-weights">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Case weights are non-negative numbers used to specify how much each observation influences the estimation of a model.&lt;/p>
&lt;p>If you are new to this term, it is worth reading Thomas Lumley’s excellent post
&lt;a href="https://notstatschat.rbind.io/2020/08/04/weights-in-statistics/" target="_blank" rel="noopener">&lt;em>Weights in statistics&lt;/em>&lt;/a> as well as
&lt;a href="https://projecteuclid.org/journals/statistical-science/volume-22/issue-2/Struggles-with-Survey-Weighting-and-Regression-Modeling/10.1214/088342306000000691.full" target="_blank" rel="noopener">&amp;ldquo;Struggles with Survey Weighting and Regression Modeling&amp;rdquo;&lt;/a>. Although &amp;ldquo;case weights&amp;rdquo; isn&amp;rsquo;t a universally used term, we&amp;rsquo;ll use it to distinguish it from other types of weights, such as class weights in cost-sensitive learning and others.&lt;/p>
&lt;p>There are different types of case weights whose terminology can be very different across problem domains. Here are some examples:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Frequency weights&lt;/strong> are integers that denote how many times a particular row of data has been observed. They help compress redundant rows into a single entry.&lt;/li>
&lt;li>&lt;strong>Importance weights&lt;/strong> focus on how much each row of the data set should influence model estimation. These can be based on data or arbitrarily set to achieve some goal.&lt;/li>
&lt;li>When survey respondents have different probabilities of selection, (inverse) &lt;strong>probability weights&lt;/strong> can help reduce bias in the results of a data analysis.&lt;/li>
&lt;li>If a data point has an associated precision, &lt;strong>analytic weighting&lt;/strong> helps a model focus on the data points with less uncertainty (such as in meta-analysis).&lt;/li>
&lt;/ul>
&lt;p>There are undoubtedly more types of weights in other domains. Quoting
&lt;a href="https://projecteuclid.org/journals/statistical-science/volume-22/issue-2/Struggles-with-Survey-Weighting-and-Regression-Modeling/10.1214/088342306000000691.full" target="_blank" rel="noopener">Andrew Gelman&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Weighting causes no end of confusion both in applied and theoretical statistics. People just assume because something has one name (&amp;ldquo;weights&amp;rdquo;), it is one thing. So then we get questions like, &amp;ldquo;How do you do weighted regression in Stan,&amp;rdquo; and we have to reply, &amp;ldquo;What is it that you actually want to do?&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h2 id="how-are-they-used-in-traditional-modeling">How are they used in traditional modeling?
&lt;a href="#how-are-they-used-in-traditional-modeling">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A traditional example is categorical data where a small number of possible categories are observed many times. For example, &lt;code>UCBAdmissions&lt;/code> contains &amp;ldquo;Aggregate data on applicants to graduate school at Berkeley for the six largest departments in 1973 classified by admission and sex.&amp;rdquo;&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;UCBAdmissions&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">UCBAdmissions&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## , , Dept = A
##
## Gender
## Admit Male Female
## Admitted 512 89
## Rejected 313 19
##
## , , Dept = B
##
## Gender
## Admit Male Female
## Admitted 353 17
## Rejected 207 8
##
## , , Dept = C
##
## Gender
## Admit Male Female
## Admitted 120 202
## Rejected 205 391
##
## , , Dept = D
##
## Gender
## Admit Male Female
## Admitted 138 131
## Rejected 279 244
##
## , , Dept = E
##
## Gender
## Admit Male Female
## Admitted 53 94
## Rejected 138 299
##
## , , Dept = F
##
## Gender
## Admit Male Female
## Admitted 22 24
## Rejected 351 317
&lt;/code>&lt;/pre>&lt;p>This is a 3D array, so let&amp;rsquo;s convert it to a rectangular data format:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidymodels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ucb&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">as_tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UCBAdmissions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">across&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is.character&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="nf">as.factor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">.)&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">ucb&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 24 × 4
## Admit Gender Dept n
## &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Admitted Male A 512
## 2 Rejected Male A 313
## 3 Admitted Female A 89
## 4 Rejected Female A 19
## 5 Admitted Male B 353
## 6 Rejected Male B 207
## 7 Admitted Female B 17
## 8 Rejected Female B 8
## 9 Admitted Male C 120
## 10 Rejected Male C 205
## # … with 14 more rows
&lt;/code>&lt;/pre>&lt;p>There are 24 possible configurations of the variables but a total of 4526 observations. If we want to model the data in this format, we could use a logistic regression:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">glm_fit&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">glm&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">Admit&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">Gender&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Dept&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ucb&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">weights&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">family&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;binomial&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">glm_fit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>##
## Call: glm(formula = Admit ~ Gender + Dept, family = &amp;quot;binomial&amp;quot;, data = ucb,
## weights = n)
##
## Coefficients:
## (Intercept) GenderMale DeptB DeptC DeptD DeptE
## -0.68192 0.09987 0.04340 1.26260 1.29461 1.73931
## DeptF
## 3.30648
##
## Degrees of Freedom: 23 Total (i.e. Null); 17 Residual
## Null Deviance: 6044
## Residual Deviance: 5187 AIC: 5201
&lt;/code>&lt;/pre>&lt;p>&lt;em>This is not quite right though&lt;/em>. There are 12 combinations of &lt;code>Gender&lt;/code> and &lt;code>Dept&lt;/code>. How can the model have 23 total degrees of freedom?&lt;/p>
&lt;p>If we are treating our data as binomial, the traditional method for fitting this model is to convert the data to a format with columns for the number of events and non-events (per covariate pattern). Let&amp;rsquo;s convert our data into that format:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">ucb_grouped_data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">ucb&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">pivot_wider&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">id_cols&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Gender&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Dept&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">names_from&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Admit&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">values_from&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">values_fill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0L&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">ucb_grouped_data&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 12 × 4
## Gender Dept Admitted Rejected
## &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Male A 512 313
## 2 Female A 89 19
## 3 Male B 353 207
## 4 Female B 17 8
## 5 Male C 120 205
## 6 Female C 202 391
## 7 Male D 138 279
## 8 Female D 131 244
## 9 Male E 53 138
## 10 Female E 94 299
## 11 Male F 22 351
## 12 Female F 24 317
&lt;/code>&lt;/pre>&lt;p>Now, since there are really only 12 covariate combinations, the appropriate model can be created.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">glm&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nf">cbind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Rejected&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Admitted&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">Gender&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Dept&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ucb_grouped_data&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">family&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binomial&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>##
## Call: glm(formula = cbind(Rejected, Admitted) ~ Gender + Dept, family = binomial,
## data = ucb_grouped_data)
##
## Coefficients:
## (Intercept) GenderMale DeptB DeptC DeptD DeptE
## -0.68192 0.09987 0.04340 1.26260 1.29461 1.73931
## DeptF
## 3.30648
##
## Degrees of Freedom: 11 Total (i.e. Null); 5 Residual
## Null Deviance: 877.1
## Residual Deviance: 20.2 AIC: 103.1
&lt;/code>&lt;/pre>&lt;p>In both cases the model coefficients are the same but the standard errors and degrees of freedom are only correct for the model with grouped data.&lt;/p>
&lt;h2 id="why-is-this-so-complicated">Why is this so complicated?
&lt;a href="#why-is-this-so-complicated">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Traditionally, weights in base R functions are used to fit the model and to report a few measures of model efficacy. Here, &lt;code>glm()&lt;/code> reports the deviance while &lt;code>lm()&lt;/code> shows estimates of the RMSE and adjusted-R&lt;sup>2&lt;/sup>.&lt;/p>
&lt;p>Believe it or not, the logistic regression code shown above, which is a typical example of using weights in a classical statistical setting, is much simpler than what we have to contend with in modern data analysis. There are a few things that we do in modern data analysis where correctly using weights is not so straightforward. These include:&lt;/p>
&lt;ul>
&lt;li>Resampling (e.g. bootstrap or cross-validation).&lt;/li>
&lt;li>Preprocessing methods such as centering and scaling.&lt;/li>
&lt;li>Additional measures of performance (e.g. area under the ROC curve, mean absolute deviations, Kohen&amp;rsquo;s Kappa, and so on).&lt;/li>
&lt;/ul>
&lt;p>A framework like tidymodels should enable users to utilize case weights across all phases of their data analysis.&lt;/p>
&lt;p>Additionally, the type of case weights &lt;strong>and their intent&lt;/strong> affect which of these operations should be affected.&lt;/p>
&lt;p>For example, frequency weights should affect the estimation of the model, the preprocessing steps, and performance estimation. If the predictors require centering, a weighted mean should be used to appropriately ensure that the mean of that column is truly zero. Let&amp;rsquo;s say that sensitivity and specificity estimates are required. The 2x2 table of observed and predicted results should have cell counts that reflect the case weights. If they did not, infrequently occurring data points have as much weight as the rows that have a high prevalence.&lt;/p>
&lt;p>As a counter example, importance weights reflect the idea that they should only influence &lt;em>the model fitting procedure&lt;/em>. It wouldn&amp;rsquo;t make sense to use a weighted mean to center a predictor; the weight shouldn&amp;rsquo;t influence an unsupervised operation in the same way as model estimation. More critically, any holdout data set used to quantify model efficacy should reflect the data as seen in the wild (without the impact of the weights).&lt;/p>
&lt;h2 id="how-does-tidymodels-handle-weights">How does tidymodels handle weights?
&lt;a href="#how-does-tidymodels-handle-weights">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;ve decided to add some additional vector data types that allow users to describe the type of weights. These data types also help tidymodels functions know what the intent of the analysis should be.&lt;/p>
&lt;p>In parsnip, the functions &lt;code>frequency_weights()&lt;/code> and &lt;code>importance_weights()&lt;/code> can be used to set the weights:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># For the UC admissions data&lt;/span>
&lt;span class="n">ucb&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">ucb&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">frequency_weights&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">ucb&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">n&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## &amp;lt;frequency_weights[24]&amp;gt;
## [1] 512 313 89 19 353 207 17 8 120 205 202 391 138 279 131 244 53 138 94
## [20] 299 22 351 24 317
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># For a general vector of importance weights: &lt;/span>
&lt;span class="nf">importance_weights&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">runif&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## &amp;lt;importance_weights[10]&amp;gt;
## [1] 0.91 0.53 0.72 0.81 0.33 0.11 0.61 0.61 0.20 0.49
&lt;/code>&lt;/pre>&lt;p>The class of these objects tells packages like recipes and yardstick if their values should be used for preprocessing and performance metrics, respectively:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Importance weights only affect the model estimation and &lt;em>supervised&lt;/em> recipes steps. They are not used with yardstick functions for calculating measures of model performance.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Frequency weights are used for all parts of the preprocessing, model fitting, and performance estimation operations.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Currently, these are the only classes implemented. We are doing a lot of reading on how the analysis of survey data should use case weights and how we can enable this and other data analysis use cases.
&lt;a href="https://community.rstudio.com/t/case-weight-blog-post-discussion/136281" target="_blank" rel="noopener">We&amp;rsquo;d love to hear from you&lt;/a> if you have expertise in this area.&lt;/p>
&lt;h2 id="about-resampling">About resampling
&lt;a href="#about-resampling">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>This is a topic that we are still unsure about. We definitively think that importance weights should not affect how the data are split or resampled.&lt;/p>
&lt;p>Frequency weights are more complex. Suppose we are using 10-fold cross-validation with the logistic regression on the UCB admission data, should we:&lt;/p>
&lt;ul>
&lt;li>Have all the case weights be placed into either the modeling or holdout set?&lt;/li>
&lt;li>Fractionally, split the case weights into both the modeling and holdout data?&lt;/li>
&lt;/ul>
&lt;p>For the latter case, suppose a row of data has a case weight of 100 and we use 10-fold cross-validation. We would always put 90 of those 100 into the modeling data set and the other 10 into the holdout. This seems to be consistent with the sampling of the data and is what would happen if there were actually 100 rows in the data (instead of one row with a case weight of 100). However, it does raise questions regarding data leakage by just re-predicting the same data that went into the model.&lt;/p>
&lt;p>This is also an area where we&amp;rsquo;d like
&lt;a href="https://community.rstudio.com/t/case-weight-blog-post-discussion/136281" target="_blank" rel="noopener">community feedback&lt;/a>.&lt;/p>
&lt;h2 id="tidymodels-syntax">Tidymodels syntax
&lt;a href="#tidymodels-syntax">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Let&amp;rsquo;s work through an example. We&amp;rsquo;ll use some data simulated with a severe class imbalance. These functions are in the
&lt;a href="https://modeldata.tidymodels.org/dev/reference/sim_classification.html" target="_blank" rel="noopener">development version of the modeldata package&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">training_sim&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">sim_classification&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">intercept&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">-25&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">training_sim&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">class&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 2 × 2
## class n
## &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;
## 1 class_1 80
## 2 class_2 4920
&lt;/code>&lt;/pre>&lt;p>If we would like to encourage models to more accurately predict the minority class, we can give these samples a much larger weight in the analysis&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">training_sim&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">training_sim&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">case_wts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">ifelse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">class&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;class_1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">60&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">case_wts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">importance_weights&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">case_wts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We strongly advise that users set the case weight column before any other tidymodels functions are used. This ensures that they are handled correctly in the analyses that follow. In some cases, such as recipes, we prohibit changing the case weight column. Since the intent of the weights is needed, errors could occur if that intent was changed during the analysis.&lt;/p>
&lt;p>Let&amp;rsquo;s use 10-fold cross-validation to resample the data. This case is unaffected by the presence of weights:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sim_folds&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">vfold_cv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">training_sim&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">class&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;ll fit a regularized logistic regression model to the data using glmnet:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">lr_spec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">logistic_reg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">penalty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">tune&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">mixture&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;glmnet&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For this model, we need to ensure that the predictors are in the same units. We&amp;rsquo;ll use a recipe to center and scale the data and also add some spline terms for predictors that appear to have a nonlinear relationship with the outcome:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">sim_rec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">class&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">training_sim&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_ns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">starts_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;non_linear&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">deg_free&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_normalize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">all_numeric_predictors&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">sim_rec&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## Recipe
##
## Inputs:
##
## role #variables
## case_weights 1
## outcome 1
## predictor 15
##
## Operations:
##
## Natural splines on starts_with(&amp;quot;non_linear&amp;quot;)
## Centering and scaling for all_numeric_predictors()
&lt;/code>&lt;/pre>&lt;p>There are a few things to point out here. The recipe automatically detects the case weights even though they are captured by the dot in the right-hand side of the formula. The recipe automatically sets their role and will error if that column is changed in any way.&lt;/p>
&lt;p>As mentioned above, any unsupervised steps are unaffected by importance weights so neither &lt;code>step_ns()&lt;/code> or &lt;code>step_normalize()&lt;/code> use the weights in their calculations.&lt;/p>
&lt;p>When using case weights, we would like to encourage users to keep their model and preprocessing tool within a workflow. The workflows package now has an &lt;code>add_case_weights()&lt;/code> function to help here:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">lr_wflow&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">workflow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_model&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lr_spec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sim_rec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_case_weights&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">case_wts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">lr_wflow&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## ══ Workflow ═════════════════════════════════════════════════════════════════════════
## Preprocessor: Recipe
## Model: logistic_reg()
##
## ── Preprocessor ─────────────────────────────────────────────────────────────────────
## 2 Recipe Steps
##
## • step_ns()
## • step_normalize()
##
## ── Case Weights ─────────────────────────────────────────────────────────────────────
## case_wts
##
## ── Model ────────────────────────────────────────────────────────────────────────────
## Logistic Regression Model Specification (classification)
##
## Main Arguments:
## penalty = tune()
## mixture = 1
##
## Computational engine: glmnet
&lt;/code>&lt;/pre>&lt;p>Existing &lt;code>add_*()&lt;/code> functions in workflows add objects (instead of data). Rather than specifying case weights in each preprocessor function (e.g. &lt;code>add_formula()&lt;/code> and so on), this syntax is more simple and works with any type of preprocessor.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">cls_metrics&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">metric_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sensitivity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">specificity&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">grid&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">penalty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="nf">^seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">-3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length.out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">20&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">lr_res&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">lr_wflow&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">tune_grid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">resamples&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sim_folds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">grid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">grid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metrics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cls_metrics&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">autoplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lr_res&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="figure/sim-tune-1.svg" title="plot of chunk sim-tune" alt="plot of chunk sim-tune" width="100%" />&lt;/p>
&lt;p>In tidymodels, the default is that the first level of the outcome factor is the event of interest. Since the first level of the outcome has the fewest values, we would expect the sensitivity of the model to suffer. These results suggest that the weights are making the model focus on the majority class.&lt;/p>
&lt;p>For comparison, let&amp;rsquo;s remove the weights and then tune the same parameter values.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">lr_unwt_wflow&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">lr_wflow&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">remove_case_weights&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">lr_unwt_res&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">lr_unwt_wflow&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">tune_grid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">resamples&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sim_folds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">grid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">grid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metrics&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cls_metrics&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>How do the results compare?&lt;/p>
&lt;p>&lt;img src="figure/plot-results-1.svg" title="plot of chunk plot-results" alt="plot of chunk plot-results" width="100%" />&lt;/p>
&lt;p>The importance weights certainly did their job since the weighted analysis has a better balance of sensitivity and specificity.&lt;/p>
&lt;h2 id="getting-feedback">Getting feedback
&lt;a href="#getting-feedback">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;ve laid the groundwork for using case weights holistically in tidymodels. For those of you who use case weights, we&amp;rsquo;d like to know what you think of our approach and answer any questions that you have. We have an
&lt;a href="https://community.rstudio.com/t/case-weight-blog-post-discussion/136281" target="_blank" rel="noopener">RStudio Community post&lt;/a> queued up to discuss this topic.&lt;/p>
&lt;p>We&amp;rsquo;ve waited to release packages with case weight support until the main pieces were in place. If you would like to play around with what we&amp;rsquo;ve done, you can load the development versions of the packages using:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">rlang&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">is_installed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;pak&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;pak&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">pkgs&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hardhat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;parsnip&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;recipes&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;modeldata&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;tune&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;workflows&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;yardstick&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">pkgs&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">paste0&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tidymodels/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pkgs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">pak&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">pak&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pkgs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you use any of the parsnip extension packages (e.g. discrim, rules, etc), make sure to install the development versions of these too.&lt;/p></description></item><item><title>Updates for parsnip packages</title><link>https://www.tidyverse.org/blog/2022/03/parsnip-roundup-2022/</link><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2022/03/parsnip-roundup-2022/</guid><description>&lt;!--
TODO:
* [x] Look over / edit the post's title in the yaml
* [x] Edit (or delete) the description; note this appears in the Twitter card
* [x] Pick category and tags (see existing with `hugodown::tidy_show_meta()`)
* [x] Find photo &amp; update yaml metadata
* [x] Create `thumbnail-sq.jpg`; height and width should be equal
* [x] Create `thumbnail-wd.jpg`; width should be >5x height
* [x] `hugodown::use_tidy_thumbnails()`
* [x] Add intro sentence, e.g. the standard tagline for the package
* [x] `usethis::use_tidy_thanks()`
-->
&lt;p>We&amp;rsquo;re delighted to announce the release of
&lt;a href="https://parsnip.tidymodels.org/" target="_blank" rel="noopener">parsnip&lt;/a> 0.2.1. parsnip is a unified modeling interface for tidymodels.&lt;/p>
&lt;p>This release of parsnip precipitated releases of our parsnip extension packages: baguette, discrim, plsmod, poissonreg, and rules. It also allowed us to release an additional package called multilevelmod (see the section below). We&amp;rsquo;ve kept CRAN busy!&lt;/p>
&lt;p>You can see a full list of recent parsnip changes in the
&lt;a href="https://parsnip.tidymodels.org/news/index.html" target="_blank" rel="noopener">release notes&lt;/a>.
You can install the entire set from CRAN with:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;parsnip&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;baguette&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;discrim&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;multilevelmod&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;plsmod&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;poissonreg&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rules&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s look at a summary of the changes, which are almost entirely in parsnip, before looking at multilevelmod.&lt;/p>
&lt;h2 id="major-changes-to-parsnip">Major changes to parsnip
&lt;a href="#major-changes-to-parsnip">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>There are a lot of improvements in this version of parsnip. The main changes are described below.&lt;/p>
&lt;h3 id="more-documentation-improvements">More documentation improvements
&lt;a href="#more-documentation-improvements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>A
&lt;a href="https://www.tidyverse.org/blog/2021/07/tidymodels-july-2021/#better-model-documentation" target="_blank" rel="noopener">previous version of parsnip&lt;/a> added a nice feature where the help package for each model showed the engines that are available. One confusing aspect of this was that the list depended on what packages that were loaded. It also didn&amp;rsquo;t tell users what engines are &lt;em>possible&lt;/em>.&lt;/p>
&lt;p>Now, parsnip shows all of the known engines and labels which require extension packages. Here&amp;rsquo;s a screenshot of what you get with &lt;code>?linear_reg&lt;/code>:&lt;/p>
&lt;p>&lt;img src="engines.png" title="plot of chunk engines" alt="plot of chunk engines" width="80%" style="display: block; margin: auto;" />&lt;/p>
&lt;p>This will not change within a version of parsnip; we&amp;rsquo;ll update each list with each release.&lt;/p>
&lt;h3 id="bart">BART
&lt;a href="#bart">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>We&amp;rsquo;ve added a model function for the excellent Bayesian Additive Regression Trees (BART) approach and an engine for the
&lt;a href="https://github.com/vdorie/dbarts" target="_blank" rel="noopener">dbarts&lt;/a> package. The model is an ensemble of trees that is assembled using Bayesian estimation methods. It typically has very good predictive performance and is also able to generate estimates of the predictive posterior variance, and prediction intervals.&lt;/p>
&lt;p>A good overview of this model is: &lt;em>Bayesian Additive Regression Trees: A Review and Look Forward&lt;/em> (
&lt;a href="https://par.nsf.gov/servlets/purl/10181031" target="_blank" rel="noopener">pdf&lt;/a>).&lt;/p>
&lt;h3 id="new-engines">New engines
&lt;a href="#new-engines">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Within parsnip, a &lt;code>&amp;quot;glm&amp;quot;&lt;/code> engine was added for linear regression. An engine vale of &lt;code>&amp;quot;brulee&amp;quot;&lt;/code> was added for linear, logistic, and multinomial regression as well as for neural networks. The brulee package is a new, and is for fitting models using torch (look for a blog post soon on this package).&lt;/p>
&lt;p>As discussed below, the multilevelmod package adds a lot more engines for linear(ish) models, such as
&lt;a href="https://parsnip.tidymodels.org/reference/details_linear_reg_gee.html" target="_blank" rel="noopener">&lt;code>&amp;quot;gee&amp;quot;&lt;/code>&lt;/a>,
&lt;a href="https://parsnip.tidymodels.org/reference/details_linear_reg_gls.html" target="_blank" rel="noopener">&lt;code>&amp;quot;gls&amp;quot;&lt;/code>&lt;/a>,
&lt;a href="https://parsnip.tidymodels.org/reference/details_linear_reg_lme.html" target="_blank" rel="noopener">&lt;code>&amp;quot;lme&amp;quot;&lt;/code>&lt;/a>,
&lt;a href="https://parsnip.tidymodels.org/reference/details_linear_reg_lmer.html" target="_blank" rel="noopener">&lt;code>&amp;quot;lmer&amp;quot;&lt;/code>&lt;/a>, and
&lt;a href="https://parsnip.tidymodels.org/reference/details_linear_reg_stan_glmer.html" target="_blank" rel="noopener">&lt;code>&amp;quot;stan_glmer&amp;quot;&lt;/code>&lt;/a>. There are similar engines for logistic and Poisson regression.&lt;/p>
&lt;h2 id="multilevelmod">multilevelmod
&lt;a href="#multilevelmod">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>This package has been simmering for a while on GitHub. Its engines are useful for fitting a variety of models that go by a litany of different names: mixed effects models, random coefficient models, variance component models, hierarchical linear models, and so on.&lt;/p>
&lt;p>One aspect of these models is that they mostly work with the formula method, which specifies both the model terms and also which of these are &amp;ldquo;random effects&amp;rdquo;.&lt;/p>
&lt;p>As an example, let&amp;rsquo;s look at the measurement system analysis (MSA) data in the package. In these data, 56 separate items were measured twice using a laboratory test. The lab would like to understand how noisy their data are and if different samples can be distinguished from one another. Here&amp;rsquo;s a plot of the data:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ggplot2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parsnip&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">multilevelmod&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msa_data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">msa_data&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">reorder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">col&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">replicate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">replicate&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">geom_point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">alpha&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">labs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;lab result&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">theme_bw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">theme&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">axis.text.x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">element_text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">angle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">90&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">legend.position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;top&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="figure/data-plot-1.svg" title="plot of chunk data-plot" alt="plot of chunk data-plot" style="display: block; margin: auto;" />&lt;/p>
&lt;p>With this data set, the goal is to estimate how much of the variation in the lab test is due to the different samples (as it should be since they are different) or measurement noise. The latter term could be associated with day-to-day differences, people-to-people differences etc. It might also be irreducible noise. In any case, we&amp;rsquo;d like to get estimates of these two sources of variation.&lt;/p>
&lt;p>A straightforward way to estimate this is to use a repeated measurements model that considers the samples to be randomly selected from a population that are independent from one another. We can add a random intercept term that is different for each sample. From this, the sample-to-sample variance can be computed.&lt;/p>
&lt;p>There are a lot of packages that can do this but we&amp;rsquo;ll use the lme4 package:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">msa_model&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">linear_reg&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;lmer&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="c1"># The formula has (1|id) which means that each sample (=id) should&lt;/span>
&lt;span class="c1"># have a different intercept (=1)&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">msa_data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">msa_model&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## parsnip model object
##
## Linear mixed model fit by REML ['lmerMod']
## Formula: value ~ (1 | id)
## Data: data
## REML criterion at convergence: 163.0314
## Random effects:
## Groups Name Std.Dev.
## id (Intercept) 0.6397
## Residual 0.2618
## Number of obs: 112, groups: id, 56
## Fixed Effects:
## (Intercept)
## 0.8778
&lt;/code>&lt;/pre>&lt;p>We can see from this output that the sample-to-sample variance is &lt;code>0.6397^2 = 0.40921&lt;/code> which gives a percental of the total variance of:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="m">0.6397&lt;/span> &lt;span class="n">^&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="m">0.6397&lt;/span> &lt;span class="n">^&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="m">0.2618&lt;/span> &lt;span class="n">^&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="m">100&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## [1] 85.6539
&lt;/code>&lt;/pre>&lt;p>Pretty good!&lt;/p>
&lt;p>There is a lot more that can be done with these models in terms of prediction and inference. If you are interested in more about multilevelmod, take a look at the
&lt;a href="https://multilevelmod.tidymodels.org/articles/multilevelmod.html" target="_blank" rel="noopener">Get Started&lt;/a> vignette.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;d like to thank all of the contributors to these packages since their last releases:
&lt;a href="https://github.com/asshah4" target="_blank" rel="noopener">@asshah4&lt;/a>,
&lt;a href="https://github.com/batpigandme" target="_blank" rel="noopener">@batpigandme&lt;/a>,
&lt;a href="https://github.com/bshor" target="_blank" rel="noopener">@bshor&lt;/a>,
&lt;a href="https://github.com/cimentadaj" target="_blank" rel="noopener">@cimentadaj&lt;/a>,
&lt;a href="https://github.com/daaronr" target="_blank" rel="noopener">@daaronr&lt;/a>,
&lt;a href="https://github.com/davestr2" target="_blank" rel="noopener">@davestr2&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/deschen1" target="_blank" rel="noopener">@deschen1&lt;/a>,
&lt;a href="https://github.com/dfalbel" target="_blank" rel="noopener">@dfalbel&lt;/a>,
&lt;a href="https://github.com/dietrichson" target="_blank" rel="noopener">@dietrichson&lt;/a>,
&lt;a href="https://github.com/edgararuiz" target="_blank" rel="noopener">@edgararuiz&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/fabrice-rossi" target="_blank" rel="noopener">@fabrice-rossi&lt;/a>,
&lt;a href="https://github.com/frequena" target="_blank" rel="noopener">@frequena&lt;/a>,
&lt;a href="https://github.com/ghost" target="_blank" rel="noopener">@ghost&lt;/a>,
&lt;a href="https://github.com/gmcmacran" target="_blank" rel="noopener">@gmcmacran&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/JB304245" target="_blank" rel="noopener">@JB304245&lt;/a>,
&lt;a href="https://github.com/Jeffrothschild" target="_blank" rel="noopener">@Jeffrothschild&lt;/a>,
&lt;a href="https://github.com/jennybc" target="_blank" rel="noopener">@jennybc&lt;/a>,
&lt;a href="https://github.com/jonthegeek" target="_blank" rel="noopener">@jonthegeek&lt;/a>,
&lt;a href="https://github.com/josefortou" target="_blank" rel="noopener">@josefortou&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/kcarnold" target="_blank" rel="noopener">@kcarnold&lt;/a>,
&lt;a href="https://github.com/maspotts" target="_blank" rel="noopener">@maspotts&lt;/a>,
&lt;a href="https://github.com/mattwarkentin" target="_blank" rel="noopener">@mattwarkentin&lt;/a>,
&lt;a href="https://github.com/meenakshi-kushwaha" target="_blank" rel="noopener">@meenakshi-kushwaha&lt;/a>,
&lt;a href="https://github.com/miepstei" target="_blank" rel="noopener">@miepstei&lt;/a>,
&lt;a href="https://github.com/mmp3" target="_blank" rel="noopener">@mmp3&lt;/a>,
&lt;a href="https://github.com/NickCH-K" target="_blank" rel="noopener">@NickCH-K&lt;/a>,
&lt;a href="https://github.com/nikhilpathiyil" target="_blank" rel="noopener">@nikhilpathiyil&lt;/a>,
&lt;a href="https://github.com/nvelden" target="_blank" rel="noopener">@nvelden&lt;/a>,
&lt;a href="https://github.com/p-lemercier" target="_blank" rel="noopener">@p-lemercier&lt;/a>,
&lt;a href="https://github.com/psads-git" target="_blank" rel="noopener">@psads-git&lt;/a>,
&lt;a href="https://github.com/RaymondBalise" target="_blank" rel="noopener">@RaymondBalise&lt;/a>,
&lt;a href="https://github.com/rmflight" target="_blank" rel="noopener">@rmflight&lt;/a>,
&lt;a href="https://github.com/saadaslam" target="_blank" rel="noopener">@saadaslam&lt;/a>,
&lt;a href="https://github.com/Shafi2016" target="_blank" rel="noopener">@Shafi2016&lt;/a>,
&lt;a href="https://github.com/shuckle16" target="_blank" rel="noopener">@shuckle16&lt;/a>,
&lt;a href="https://github.com/sitendug" target="_blank" rel="noopener">@sitendug&lt;/a>,
&lt;a href="https://github.com/ssh352" target="_blank" rel="noopener">@ssh352&lt;/a>,
&lt;a href="https://github.com/stephenhillphd" target="_blank" rel="noopener">@stephenhillphd&lt;/a>,
&lt;a href="https://github.com/stevenpawley" target="_blank" rel="noopener">@stevenpawley&lt;/a>,
&lt;a href="https://github.com/Steviey" target="_blank" rel="noopener">@Steviey&lt;/a>,
&lt;a href="https://github.com/t-kalinowski" target="_blank" rel="noopener">@t-kalinowski&lt;/a>,
&lt;a href="https://github.com/t-neumann" target="_blank" rel="noopener">@t-neumann&lt;/a>,
&lt;a href="https://github.com/tiagomaie" target="_blank" rel="noopener">@tiagomaie&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>,
&lt;a href="https://github.com/tsengj" target="_blank" rel="noopener">@tsengj&lt;/a>,
&lt;a href="https://github.com/ttrodrigz" target="_blank" rel="noopener">@ttrodrigz&lt;/a>,
&lt;a href="https://github.com/wdkeyzer" target="_blank" rel="noopener">@wdkeyzer&lt;/a>,
&lt;a href="https://github.com/yitao-li" target="_blank" rel="noopener">@yitao-li&lt;/a>,
&lt;a href="https://github.com/zenggyu" target="_blank" rel="noopener">@zenggyu&lt;/a>&lt;/p></description></item><item><title>Survival Analysis in tidymodels</title><link>https://www.tidyverse.org/blog/2021/11/survival-analysis-parsnip-adjacent/</link><pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2021/11/survival-analysis-parsnip-adjacent/</guid><description>&lt;p>Survival analysis is an important field in modeling and there are many R packages available which implement various models, from &amp;ldquo;classic&amp;rdquo; parametric models to boosted trees. While they cover a great variety of model types, they also come with considerable amounts of heterogeneity in syntax and levels of documentation. The
&lt;a href="https://www.tidymodels.org/" target="_blank" rel="noopener">tidymodels&lt;/a> framework is a collection of R packages for modeling and machine learning using tidyverse principles. It provides a consistent interface to a variety of modelling functions along with tools for resampling, assessing performance, and hyperparameter tuning.&lt;/p>
&lt;p>In terms of survival analysis, however, tidymodels so far hasn&amp;rsquo;t been as feature-rich as we&amp;rsquo;d like it to be, e.g., the available models only covered parametric survival models. With this post we&amp;rsquo;d like to provide an update on recent work to extend the tooling for survival analysis in tidymodels and gather feedback on future plans.&lt;/p>
&lt;p>Making survival analysis a first-class citizen in tidymodels requires touching several aspects across the collection of packages:&lt;/p>
&lt;ul>
&lt;li>Pre-processing to accommodate the data structure of censored data.&lt;/li>
&lt;li>A bigger selection of models which can be specified, fitted, and used for prediction.&lt;/li>
&lt;li>Additional performance metrics tailored to survival data.&lt;/li>
&lt;/ul>
&lt;p>The new
&lt;a href="https://censored.tidymodels.org/" target="_blank" rel="noopener">censored&lt;/a> package along with
&lt;a href="https://parsnip.tidymodels.org/" target="_blank" rel="noopener">parsnip&lt;/a> offers several new models, engines, and prediction types. The censored package is not on CRAN yet but we are looking for early adopters to try it out and give us feedback! You can install it via&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nf'>devtools&lt;/span>&lt;span class='nf'>::&lt;/span>&lt;span class='nf'>&lt;a href='https://devtools.r-lib.org//reference/remote-reexports.html'>install_github&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"tidymodels/censored"&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="a-new-mode-for-parsnip">A new mode for parsnip
&lt;a href="#a-new-mode-for-parsnip">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Some model types can be used for multiple purposes with the same computation engine, e.g. a
&lt;a href="https://parsnip.tidymodels.org/reference/decision_tree.html" target="_blank" rel="noopener">&lt;code>decision_tree()&lt;/code>&lt;/a> model can be used for either classification or regression with the &lt;code>rpart&lt;/code> engine. This distinction is made in parsnip by
&lt;a href="https://parsnip.tidymodels.org/articles/parsnip_Intro.html#motivation" target="_blank" rel="noopener">specifying the mode of a model&lt;/a>. We have now introduced a new &lt;code>&amp;quot;censored regression&amp;quot;&lt;/code> mode in parsnip for models which can be used for survival analysis. The aforementioned
&lt;a href="https://parsnip.tidymodels.org/reference/decision_tree.html" target="_blank" rel="noopener">&lt;code>decision_tree()&lt;/code>&lt;/a> with the &lt;code>rpart&lt;/code> engine can also be used to fit a survival decision tree:&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://github.com/tidymodels/censored'>censored&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/decision_tree.html'>decision_tree&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"rpart"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_args.html'>set_mode&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"censored regression"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; Decision Tree Model Specification (censored regression)&lt;/span>
&lt;span class='c'>#&amp;gt; &lt;/span>
&lt;span class='c'>#&amp;gt; Computational engine: rpart&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="model-fitting">Model fitting
&lt;a href="#model-fitting">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>For fitting a model, parsnip typically supports a formula and a matrix interface, regardless of the interface of the engine. For censored regression models, we are currently only supporting a formula interface. Most engines already support this type of interface, and a formula allows us to specify the outcome via the standard
&lt;a href="https://rdrr.io/pkg/survival/man/Surv.html" target="_blank" rel="noopener">&lt;code>survival::Surv()&lt;/code>&lt;/a> function, tying together event time and status.&lt;/p>
&lt;p>A formula also let&amp;rsquo;s us specify stratification for a proportional hazards model. For the
&lt;a href="https://rdrr.io/pkg/survival/man/coxph.html" target="_blank" rel="noopener">&lt;code>survival::coxph()&lt;/code>&lt;/a> function, which powers the &lt;code>survival&lt;/code> engine for
&lt;a href="https://parsnip.tidymodels.org/reference/proportional_hazards.html" target="_blank" rel="noopener">&lt;code>proportional_hazards()&lt;/code>&lt;/a>, this may look like&lt;/p>
&lt;div align="center">
&lt;p>&lt;code>Surv(time, event) ~ x + z + strata(s)&lt;/code>&lt;/p>
&lt;/div>
&lt;p>Some other packages can fit this model, let&amp;rsquo;s use the glmnet package. However,
&lt;a href="https://glmnet.stanford.edu/reference/glmnet.html" target="_blank" rel="noopener">&lt;code>glmnet::glmnet()&lt;/code>&lt;/a>, does not have a formula interface and it requires us to specify the strata by stratifying the response via &lt;code>stratifySurv(y, s)&lt;/code>. The response is typically a &lt;code>Surv&lt;/code> object, so you could end up with a formula like this:&lt;/p>
&lt;div align="center">
&lt;p>&lt;code>stratifySurv(Surv(time, event), strata) ~ x + z&lt;/code>&lt;/p>
&lt;/div>
&lt;p>This works for fitting the model but the syntax is rather convoluted on the left-hand side of the formula. The specification of the stratification is inconsistent with the approach taken by the survival package. Additionally, without further modification, prediction fails because variables on the left-hand side of the formula are treated as response variables by parsnip and are not available at prediction time.&lt;/p>
&lt;p>We already need to translate from formula interface to matrix interface for this engine, and we like interfaces to be as consistent as possible here in tidymodels so we decided to go with the specification of stratification through a
&lt;a href="https://rdrr.io/pkg/survival/man/strata.html" target="_blank" rel="noopener">&lt;code>strata()&lt;/code>&lt;/a> term on the right-hand side of the formula for proportional hazards models, regardless of the engine.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://github.com/therneau/survival'>survival&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>bladder_train&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>bladder&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='o'>-&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/c.html'>c&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span>&lt;span class='o'>)&lt;/span>,&lt;span class='o'>]&lt;/span>
&lt;span class='nv'>bladder_test&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>bladder&lt;/span>&lt;span class='o'>[&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span>,&lt;span class='o'>]&lt;/span>
&lt;span class='nv'>cox_spec&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/proportional_hazards.html'>proportional_hazards&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>penalty &lt;span class='o'>=&lt;/span> &lt;span class='m'>0.123&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"glmnet"&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>f_fit&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/fit.html'>fit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>cox_spec&lt;/span>,
&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/Surv.html'>Surv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>stop&lt;/span>, &lt;span class='nv'>event&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>rx&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>size&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>number&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/strata.html'>strata&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>enum&lt;/span>&lt;span class='o'>)&lt;/span>,
data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>bladder_train&lt;/span>&lt;span class='o'>)&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="prediction">Prediction
&lt;a href="#prediction">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>We have introduced several new prediction types: time to event (&lt;code>time&lt;/code>), linear predictor (&lt;code>linear_pred&lt;/code>), survival probability (&lt;code>survival&lt;/code>), and hazard (&lt;code>hazard&lt;/code>). Some of these types are time-dependent, e.g., the survival probability is the probability to survive beyond a certain time point. In keeping with the tidymodels design principle that each row of the data set you&amp;rsquo;re predicting on should give you exactly one row in the dataset of predictions, &lt;code>predict(type = &amp;quot;survival&amp;quot;, time)&lt;/code> returns a nested tibble if &lt;code>time&lt;/code> contains multiple time points. This can be used to approximate survival curves.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>f_pred&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>f_fit&lt;/span>, new_data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>bladder_test&lt;/span>,
type &lt;span class='o'>=&lt;/span> &lt;span class='s'>"survival"&lt;/span>, time &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/seq.html'>seq&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>0&lt;/span>, &lt;span class='m'>20&lt;/span>, &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>f_pred&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>f_pred&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>mutate&lt;/span>&lt;span class='o'>(&lt;/span>id &lt;span class='o'>=&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/factor.html'>factor&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>1&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>3&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>unnest&lt;/span>&lt;span class='o'>(&lt;/span>cols &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.pred&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>f_pred&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>ggplot&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>aes&lt;/span>&lt;span class='o'>(&lt;/span>x &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.time&lt;/span>, y &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.pred_survival&lt;/span>, col &lt;span class='o'>=&lt;/span> &lt;span class='nv'>id&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>geom_step&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/predict-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>Usually, the linear predictor is the linear combination of the predictors, weighted with the coefficients, often denoted as $x^{T} \beta$. This is what is being returned by the &lt;code>glmnet&lt;/code> engine for
&lt;a href="https://parsnip.tidymodels.org/reference/proportional_hazards.html" target="_blank" rel="noopener">&lt;code>proportional_hazards()&lt;/code>&lt;/a> models and by the &lt;code>mboost&lt;/code> engine for
&lt;a href="https://parsnip.tidymodels.org/reference/boost_tree.html" target="_blank" rel="noopener">&lt;code>boost_tree()&lt;/code>&lt;/a> models (e.g., with mode &lt;code>&amp;quot;censored regression&amp;quot;&lt;/code>). For proportional hazards models, the linear predictor describes &lt;em>relative&lt;/em> risk, i.e., it refers to a pair of observations: the observation $x$ and a reference observation of predictors with value 0.&lt;/p>
&lt;p>The survival package implements different choices for the reference observation. As a default it uses the mean predictor, i.e., the observation $x$ is centered with the mean predictor before the usual weighted linear combination is calculated. What makes a useful reference observation is context-dependent and can be more complex than just 0 or the average. In a medical setting with predictors age and drug concentration, one might be interested in the effect relative to mean age but a drug concentration of 0 (the control group). While we think through a more general approach to specifying such a reference observation or baseline hazard, we ensure that all engines in censored use the same approach: a reference observation of 0.&lt;/p>
&lt;p>Let&amp;rsquo;s illustrate the difference in (default) predictions derived from the survival and censored packages and their relationship with the linear predictor. The prodlim package lets us simulate survival data with two predictors &lt;code>X1&lt;/code> (binary) and &lt;code>X2&lt;/code> (numeric) which both have an effect of $exp(1)$ on the hazard of the unobserved event time.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://tidymodels.tidymodels.org'>tidymodels&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>&lt;a href='https://ggplot2.tidyverse.org'>ggplot2&lt;/a>&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='kr'>&lt;a href='https://rdrr.io/r/base/library.html'>library&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>prodlim&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/Random.html'>set.seed&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>43500&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'># add 0.5 to X2 (with mean 0) to demonstrate the effect of centering&lt;/span>
&lt;span class='nv'>train_dat&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/prodlim/man/SimSurv.html'>SimSurv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>2000&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;span class='nf'>mutate&lt;/span>&lt;span class='o'>(&lt;/span>X2 &lt;span class='o'>=&lt;/span> &lt;span class='nv'>X2&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='m'>0.5&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>test_dat&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/prodlim/man/SimSurv.html'>SimSurv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='m'>20&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;span class='nf'>mutate&lt;/span>&lt;span class='o'>(&lt;/span>X2 &lt;span class='o'>=&lt;/span> &lt;span class='nv'>X2&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='m'>0.5&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>test_pred&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nv'>test_dat&lt;/span>&lt;span class='o'>[&lt;/span>, &lt;span class='m'>5&lt;/span>&lt;span class='o'>:&lt;/span>&lt;span class='m'>6&lt;/span>&lt;span class='o'>]&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>We can compare the value of the linear predictor using the true coefficients of 1 with the predictions from the survival package. Plotting them against each other shows the offset of the mean of &lt;code>X2&lt;/code>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>fit_survival&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/coxph.html'>coxph&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/Surv.html'>Surv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>time&lt;/span>, &lt;span class='nv'>status&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>X1&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>X2&lt;/span>, data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>train_dat&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>pred_survival&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>fit_survival&lt;/span>, newdata &lt;span class='o'>=&lt;/span> &lt;span class='nv'>test_pred&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>pred&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>bind_cols&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nv'>test_pred&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;span class='nf'>mutate&lt;/span>&lt;span class='o'>(&lt;/span>linear_pred &lt;span class='o'>=&lt;/span> &lt;span class='nv'>X1&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='m'>1&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>X2&lt;/span> &lt;span class='o'>*&lt;/span> &lt;span class='m'>1&lt;/span>&lt;span class='o'>)&lt;/span>,
&lt;span class='nf'>tibble&lt;/span>&lt;span class='o'>(&lt;/span>pred_survival &lt;span class='o'>=&lt;/span> &lt;span class='nv'>pred_survival&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nf'>&lt;a href='https://rdrr.io/r/base/mean.html'>mean&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>train_dat&lt;/span>&lt;span class='o'>$&lt;/span>&lt;span class='nv'>X2&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='c'>#&amp;gt; [1] 0.4683339&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>pred&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>linear_pred&lt;/span>, &lt;span class='nv'>pred_survival&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_point.html'>geom_point&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_abline.html'>geom_abline&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>slope &lt;span class='o'>=&lt;/span> &lt;span class='m'>1&lt;/span>, intercept &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/lp-center-plot-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;p>Measuring performance is a key element of predictive modelling. Our design philosophy in tidymodels is that the calculation of performance metrics should be agnostic to ancillary information such as the model type or the training set. Essentially all you need are the observations and the predictions. For proportional hazards models, the observation and the prediction actually describe different aspects of survival: the observation is the survival time while the prediction describes the risk; the two have an inverse relationship. To help us standardize the assessment modules, we change the sign of the linear predictor. This may be opposite to the sign of predictions obtained using the underlying engine directly. You can opt out of this by setting the &lt;code>increasing&lt;/code> argument of
&lt;a href="https://rdrr.io/r/stats/predict.html" target="_blank" rel="noopener">&lt;code>predict()&lt;/code>&lt;/a> to &lt;code>FALSE&lt;/code>.&lt;/p>
&lt;div class="highlight">
&lt;pre class='chroma'>&lt;code class='language-r' data-lang='r'>&lt;span class='nv'>fit_censored&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/proportional_hazards.html'>proportional_hazards&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://parsnip.tidymodels.org/reference/set_engine.html'>set_engine&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='s'>"survival"&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://generics.r-lib.org/reference/fit.html'>fit&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://rdrr.io/pkg/survival/man/Surv.html'>Surv&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>time&lt;/span>, &lt;span class='nv'>status&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>~&lt;/span> &lt;span class='nv'>X1&lt;/span> &lt;span class='o'>+&lt;/span> &lt;span class='nv'>X2&lt;/span>, data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>train_dat&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>pred_censored&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>&lt;a href='https://rdrr.io/r/stats/predict.html'>predict&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>fit_censored&lt;/span>, type &lt;span class='o'>=&lt;/span> &lt;span class='s'>"linear_pred"&lt;/span>, new_data &lt;span class='o'>=&lt;/span> &lt;span class='nv'>test_pred&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>pred&lt;/span> &lt;span class='o'>&amp;lt;-&lt;/span> &lt;span class='nf'>bind_cols&lt;/span>&lt;span class='o'>(&lt;/span>
&lt;span class='nv'>pred&lt;/span>,
&lt;span class='nv'>pred_censored&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span> &lt;span class='nf'>rename&lt;/span>&lt;span class='o'>(&lt;/span>pred_censored &lt;span class='o'>=&lt;/span> &lt;span class='nv'>.pred_linear_pred&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;span class='o'>)&lt;/span>
&lt;span class='nv'>pred&lt;/span> &lt;span class='o'>&lt;a href='https://magrittr.tidyverse.org/reference/pipe.html'>%&amp;gt;%&lt;/a>&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/ggplot.html'>ggplot&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/aes.html'>aes&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='nv'>linear_pred&lt;/span>, &lt;span class='nv'>pred_censored&lt;/span>&lt;span class='o'>)&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_point.html'>geom_point&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>&lt;span class='o'>)&lt;/span> &lt;span class='o'>+&lt;/span>
&lt;span class='nf'>&lt;a href='https://ggplot2.tidyverse.org/reference/geom_abline.html'>geom_abline&lt;/a>&lt;/span>&lt;span class='o'>(&lt;/span>slope &lt;span class='o'>=&lt;/span> &lt;span class='o'>-&lt;/span>&lt;span class='m'>1&lt;/span>, intercept &lt;span class='o'>=&lt;/span> &lt;span class='m'>0&lt;/span>&lt;span class='o'>)&lt;/span>
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="figs/lp-sign-1.png" width="700px" style="display: block; margin: auto;" />&lt;/p>
&lt;/div>
&lt;h3 id="model-and-prediction-types-available-in-censored">Model and prediction types available in censored
&lt;a href="#model-and-prediction-types-available-in-censored">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Currently, censored contains the following models, engine, and prediction types with ✔ indicating &amp;ldquo;available&amp;rdquo;, ✖ indicating &amp;ldquo;unavailable&amp;rdquo;, and ◯ indicating &amp;ldquo;to do&amp;rdquo;.&lt;/p>
&lt;div class="highlight">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">model&lt;/th>
&lt;th align="left">engine&lt;/th>
&lt;th align="left">time&lt;/th>
&lt;th align="left">survival&lt;/th>
&lt;th align="left">linear_pred&lt;/th>
&lt;th align="left">raw&lt;/th>
&lt;th align="left">quantile&lt;/th>
&lt;th align="left">hazard&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">bag_tree&lt;/td>
&lt;td align="left">rpart&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">boost_tree&lt;/td>
&lt;td align="left">mboost&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">decision_tree&lt;/td>
&lt;td align="left">party&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">decision_tree&lt;/td>
&lt;td align="left">rpart&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">proportional_hazards&lt;/td>
&lt;td align="left">glmnet&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">proportional_hazards&lt;/td>
&lt;td align="left">survival&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">rand_forest&lt;/td>
&lt;td align="left">party&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">rand_forest&lt;/td>
&lt;td align="left">randomForestSRC&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">rand_forest&lt;/td>
&lt;td align="left">ranger&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">survival_reg&lt;/td>
&lt;td align="left">flexsurv&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">survival_reg&lt;/td>
&lt;td align="left">survival&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">◯&lt;/td>
&lt;td align="left">✖&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;td align="left">✔&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h3 id="whats-next">What&amp;rsquo;s next?
&lt;a href="#whats-next">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>We want survival analysis to be a first-class citizen in tidymodels which means having access to preprocessing, resampling, models, metrics, and tuning. The next steps on that path are:&lt;/p>
&lt;ul>
&lt;li>A role for censoring indicator columns and a step &lt;code>step_surv()&lt;/code> in recipes.&lt;/li>
&lt;li>A new ROC metric for survival models in yardstick.&lt;/li>
&lt;li>An adaption of workflows and tune is to follow after that.&lt;/li>
&lt;/ul>
&lt;p>Additionally, we are in the process of figuring out how different types of censoring and time-dependent effects fit into our API.&lt;/p>
&lt;p>We&amp;rsquo;d love to hear from you! Some questions we have include: Would you find this useful? Are there particular models/methods you&amp;rsquo;d like to see? Do you use time-dependent effects? Do you use interactions? Which types of censoring do you use?&lt;/p>
&lt;p>We&amp;rsquo;d greatly appreciate feedback, ideally in the replies to the
&lt;a href="https://community.rstudio.com/t/feedback-on-the-censored-package-for-survival-analysis-with-tidymodels/119674" target="_blank" rel="noopener">corresponding post on RStudio Community&lt;/a>!&lt;/p></description></item><item><title>New tidymodels releases for July 2021</title><link>https://www.tidyverse.org/blog/2021/07/tidymodels-july-2021/</link><pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2021/07/tidymodels-july-2021/</guid><description>&lt;!--
TODO:
* [ ] Look over / edit the post's title in the yaml
* [ ] Edit (or delete) the description; note this appears in the Twitter card
* [ ] Pick category and tags (see existing with `hugodown::tidy_show_meta()`)
* [ ] Find photo &amp; update yaml metadata
* [ ] Create `thumbnail-sq.jpg`; height and width should be equal
* [ ] Create `thumbnail-wd.jpg`; width should be >5x height
* [ ] `hugodown::use_tidy_thumbnails()`
* [ ] Add intro sentence, e.g. the standard tagline for the package
* [ ] `usethis::use_tidy_thanks()`
-->
&lt;p>The
&lt;a href="https://www.tidymodels.org/" target="_blank" rel="noopener">tidymodels&lt;/a> framework is a collection of R packages for modeling and machine learning using tidyverse principles. Earlier this year, we
&lt;a href="https://www.tidyverse.org/blog/2021/03/tidymodels-2021-q1/" target="_blank" rel="noopener">started regular updates&lt;/a> here on the tidyverse blog summarizing recent developments in the tidymodels ecosystem. You can check out the
&lt;a href="https://www.tidyverse.org/tags/tidymodels/" target="_blank" rel="noopener">&lt;code>tidymodels&lt;/code> tag&lt;/a> to find all tidymodels blog posts here, including those that focus on a single package or more major releases. The purpose of these roundup posts is to keep you informed about any releases you may have missed and useful new functionality as we maintain these packages.&lt;/p>
&lt;p>Recently, we had a series of CRAN releases:
&lt;a href="https://hardhat.tidymodels.org/news/index.html#hardhat-0-1-6-2021-07-14" target="_blank" rel="noopener">hardhat&lt;/a>,
&lt;a href="https://workflows.tidymodels.org/news/#workflows-0-2-3-2021-07-15" target="_blank" rel="noopener">workflows&lt;/a>,
&lt;a href="https://parsnip.tidymodels.org/news/#parsnip-0-1-7-2021-07-21" target="_blank" rel="noopener">parsnip&lt;/a>,
&lt;a href="https://tune.tidymodels.org/news/#tune-0-1-6-2021-07-21" target="_blank" rel="noopener">tune&lt;/a>,
&lt;a href="https://finetune.tidymodels.org/news/#finetune-0-1-0-unreleased" target="_blank" rel="noopener">finetune&lt;/a>,
&lt;a href="https://workflowsets.tidymodels.org/news/#workflowsets-0-1-0-unreleased" target="_blank" rel="noopener">workflowsets&lt;/a>, and
&lt;a href="https://discrim.tidymodels.org/news/#discrim-0-1-3-unreleased" target="_blank" rel="noopener">discrim&lt;/a>. These were coordinated because of some cross-package improvements. This blog post summarizes the changes.&lt;/p>
&lt;h2 id="object-extraction">Object extraction
&lt;a href="#object-extraction">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The tidymodels team decided that we needed a consistent set of APIs for extracting things from objects. For example, a parsnip model contains the underlying model fit based on the engine. A &lt;code>linear_reg()&lt;/code> model with the &lt;code>&amp;quot;lm&amp;quot;&lt;/code> engine contains an &lt;code>lm&lt;/code> object. There were some existing functions to do this (mostly named &lt;code>pull_*()&lt;/code>) but they were fairly inconsistent and were not generics.&lt;/p>
&lt;p>We added the following functions: &lt;code>extract_fit_engine()&lt;/code>, &lt;code>extract_fit_parsnip()&lt;/code>, &lt;code>extract_mold()&lt;/code>, &lt;code>extract_numeric()&lt;/code>, &lt;code>extract_preprocessor()&lt;/code>, &lt;code>extract_recipe()&lt;/code>, &lt;code>extract_spec_parsnip()&lt;/code>, &lt;code>extract_workflow()&lt;/code>, and &lt;code>extract_workflow_set_result()&lt;/code>.&lt;/p>
&lt;p>The nice thing about this change is that a function such as &lt;code>extract_recipe()&lt;/code> can be used with objects created by the tune, workflows, or workflowsets packages.&lt;/p>
&lt;p>The existing &lt;code>pull_*()&lt;/code> methods have been soft-deprecated and will stick around for a while.&lt;/p>
&lt;h2 id="better-model-documentation">Better model documentation
&lt;a href="#better-model-documentation">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>One issue that we&amp;rsquo;ve seen in the parsnip documentation is that there is just &lt;em>so much&lt;/em> on each model page. It can be intimidating and difficult to find that one piece of information that you were looking for.&lt;/p>
&lt;p>We&amp;rsquo;ve reorganized the model pages so that there are now sub-packages for each engine. For example, when you use &lt;code>?linear_reg&lt;/code>, the help page has a &lt;em>dynamic&lt;/em> list of engines from parsnip or any parsnip-adjacent package that has been loaded. Here is what the
&lt;a href="https://parsnip.tidymodels.org/reference/linear_reg.html" target="_blank" rel="noopener">pkgdown site&lt;/a> looks like:&lt;/p>
&lt;p>&lt;img src="linear_reg.png" title="plot of chunk parsnip" alt="plot of chunk parsnip" width="90%" style="display: block; margin: auto;" />&lt;/p>
&lt;p>There is a similar dynamic list in the &lt;code>See Also&lt;/code> section.&lt;/p>
&lt;p>Each engine page provides basic information about tuning parameters, modes, preprocessing requirements, and anything else that we thing is relevant. For example, for the C5.0 engine for &lt;code>boost_tree()&lt;/code>:&lt;/p>
&lt;p>&lt;img src="C5.0.png" title="plot of chunk C50" alt="plot of chunk C50" width="90%" style="display: block; margin: auto;" />&lt;/p>
&lt;p>Finally, the existing parsnip documentation didn&amp;rsquo;t show the actual fitting and/or prediction in action. A
&lt;a href="https://parsnip.tidymodels.org/articles/articles/Examples.html" target="_blank" rel="noopener">new pkgdown article&lt;/a> has worked examples demonstrating the use of parsnip models on real data. Here is a screen shot for MARS regression via the earth package:&lt;/p>
&lt;p>&lt;img src="earth.png" title="plot of chunk earth" alt="plot of chunk earth" width="90%" style="display: block; margin: auto;" />&lt;/p>
&lt;p>We think that these changes will greatly improve the whole parsnip experience, especially for new users.&lt;/p>
&lt;h2 id="simpler-parsnip-and-workflows-interfaces">Simpler parsnip and workflows interfaces
&lt;a href="#simpler-parsnip-and-workflows-interfaces">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Our good friend and colleague
&lt;a href="https://twitter.com/drob" target="_blank" rel="noopener">David Robinson&lt;/a> had
&lt;a href="http://varianceexplained.org/r/sliced-ml/#where-tidymodels-can-improve" target="_blank" rel="noopener">some great ideas&lt;/a> for specific improvements for our APIs. After some discussion, both of his suggestions were implemented.&lt;/p>
&lt;p>First, we enabled a default engine for parsnip models (you may have noticed this in the screen shots above). This produces simpler code for some model functions and, if a model has a single mode, fitting is as concise as&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># use lm() for regression&lt;/span>
&lt;span class="nf">linear_reg&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Another nice feature is more succinct piping for workflows. A preprocessor, such as a formula or recipe, can be piped into &lt;code>workflow()&lt;/code> now. Also, there is an optional second argument in that function for the model specification.&lt;/p>
&lt;p>Instead of&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">car_rec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_ns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">disp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">deg_free&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">car_wflow&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">workflow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">car_rec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_model&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">linear_reg&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>you can now use&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">car_wflow&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_ns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">disp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">deg_free&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">workflow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">linear_reg&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you might be on the fence about using tidymodels,
&lt;a href="http://varianceexplained.org/r/sliced-ml/" target="_blank" rel="noopener">David&amp;rsquo;s blog post&lt;/a> does an excellent job encapsulating the benefits of our approach, so give it a read.&lt;/p>
&lt;h2 id="other-changes">Other changes
&lt;a href="#other-changes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>parsnip now has a generalized additive model function
&lt;a href="https://parsnip.tidymodels.org/reference/gen_additive_mod.html" target="_blank" rel="noopener">&lt;code>gen_additive_mod()&lt;/code>&lt;/a>! There is currently one engine (&lt;code>mgcv&lt;/code>).&lt;/p>
&lt;p>The tune package has better control over random numbers since, in some cases, the
&lt;a href="https://github.com/tidymodels/tune/issues/389" target="_blank" rel="noopener">RNGkind was changed&lt;/a> after tuning a model.&lt;/p>
&lt;p>The discrim package has the new parsnip-like documentation and new model engines. Also, the shrunken discriminant analysis method of Ahdesmaki and Strimmer (2010) was added as an engine to &lt;code>discrim_linear()&lt;/code>. The newly resurrected sparsediscrim package allowed use to include new engines for
&lt;a href="https://discrim.tidymodels.org/reference/details_discrim_linear_sparsediscrim.html" target="_blank" rel="noopener">&lt;code>discrim_linear()&lt;/code>&lt;/a> and
&lt;a href="https://discrim.tidymodels.org/reference/details_discrim_quad_sparsediscrim.html" target="_blank" rel="noopener">&lt;code>discrim_quad()&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;d like to thank everyone who has contributed to these packages since their last release:&lt;/p>
&lt;p>&lt;strong>hardhat&lt;/strong>:
&lt;a href="https://github.com/cregouby" target="_blank" rel="noopener">@cregouby&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/DiabbZegpi" target="_blank" rel="noopener">@DiabbZegpi&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/jwijffels" target="_blank" rel="noopener">@jwijffels&lt;/a>,
&lt;a href="https://github.com/LasWin" target="_blank" rel="noopener">@LasWin&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;p>&lt;strong>workflows&lt;/strong>:
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/dgrtwo" target="_blank" rel="noopener">@dgrtwo&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/LiamBlake" target="_blank" rel="noopener">@LiamBlake&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;p>&lt;strong>parsnip&lt;/strong>:
&lt;a href="https://github.com/cgoo4" target="_blank" rel="noopener">@cgoo4&lt;/a>,
&lt;a href="https://github.com/dgrtwo" target="_blank" rel="noopener">@dgrtwo&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/graysonwhite" target="_blank" rel="noopener">@graysonwhite&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/mdancho84" target="_blank" rel="noopener">@mdancho84&lt;/a>,
&lt;a href="https://github.com/RaymondBalise" target="_blank" rel="noopener">@RaymondBalise&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>, and
&lt;a href="https://github.com/yutannihilation" target="_blank" rel="noopener">@yutannihilation&lt;/a>.&lt;/p>
&lt;p>&lt;strong>tune&lt;/strong>:
&lt;a href="https://github.com/amazongodman" target="_blank" rel="noopener">@amazongodman&lt;/a>,
&lt;a href="https://github.com/brshallo" target="_blank" rel="noopener">@brshallo&lt;/a>,
&lt;a href="https://github.com/dpanyard" target="_blank" rel="noopener">@dpanyard&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/klin333" target="_blank" rel="noopener">@klin333&lt;/a>,
&lt;a href="https://github.com/mbac" target="_blank" rel="noopener">@mbac&lt;/a>,
&lt;a href="https://github.com/PathosEthosLogos" target="_blank" rel="noopener">@PathosEthosLogos&lt;/a>,
&lt;a href="https://github.com/tjcason" target="_blank" rel="noopener">@tjcason&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>, and
&lt;a href="https://github.com/yogat3ch" target="_blank" rel="noopener">@yogat3ch&lt;/a>.&lt;/p>
&lt;p>&lt;strong>finetune&lt;/strong>:
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/hnagaty" target="_blank" rel="noopener">@hnagaty&lt;/a>,
&lt;a href="https://github.com/lukasal" target="_blank" rel="noopener">@lukasal&lt;/a>,
&lt;a href="https://github.com/Mayalaroz" target="_blank" rel="noopener">@Mayalaroz&lt;/a>,
&lt;a href="https://github.com/mrkaye97" target="_blank" rel="noopener">@mrkaye97&lt;/a>,
&lt;a href="https://github.com/shinyquant" target="_blank" rel="noopener">@shinyquant&lt;/a>,
&lt;a href="https://github.com/skeydan" target="_blank" rel="noopener">@skeydan&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;p>&lt;strong>workflowsets&lt;/strong>:
&lt;a href="https://github.com/amazongodman" target="_blank" rel="noopener">@amazongodman&lt;/a>,
&lt;a href="https://github.com/jonthegeek" target="_blank" rel="noopener">@jonthegeek&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/oskasf" target="_blank" rel="noopener">@oskasf&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>, and
&lt;a href="https://github.com/yogat3ch" target="_blank" rel="noopener">@yogat3ch&lt;/a>.&lt;/p>
&lt;p>&lt;strong>discrim&lt;/strong>:
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p></description></item><item><title>Q2 2021 tidymodels digest</title><link>https://www.tidyverse.org/blog/2021/07/tidymodels-2021-q2/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2021/07/tidymodels-2021-q2/</guid><description>&lt;p>The
&lt;a href="https://www.tidymodels.org/" target="_blank" rel="noopener">tidymodels&lt;/a> framework is a collection of R packages for modeling and machine learning using tidyverse principles. Earlier this year, we
&lt;a href="https://www.tidyverse.org/blog/2021/03/tidymodels-2021-q1/" target="_blank" rel="noopener">started regular updates&lt;/a> here on the tidyverse blog summarizing recent developments in the tidymodels ecosystem. You can check out the
&lt;a href="https://www.tidyverse.org/tags/tidymodels/" target="_blank" rel="noopener">&lt;code>tidymodels&lt;/code> tag&lt;/a> to find all tidymodels blog posts here, including those that focus on a single package or more major releases. The purpose of these roundup posts is to keep you informed about any releases you may have missed and useful new functionality as we maintain these packages.&lt;/p>
&lt;p>Since our last roundup post, there have been 19 CRAN releases of 15 different packages. That might sound like a lot of change to absorb as a tidymodels user! However, we purposefully write code in small, modular packages that we can release frequently to make models easier to deploy and our software easier to maintain. You can install these updates from CRAN with:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;broom&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;butcher&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;discrim&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;hardhat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;parsnip&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;probably&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;recipes&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;rsample&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;stacks&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;themis&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;tidymodels&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;tidyposterior&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;tune&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;workflowsets&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;yardstick&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>NEWS&lt;/code> files are linked here for each package; you&amp;rsquo;ll notice that many of these releases involve small bug fixes or internal changes that are not user-facing. It&amp;rsquo;s a lot to keep up with and there are some super useful updates in the mix, so read on for several highlights!&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://broom.tidymodels.org/news/index.html#broom-0-7-8-2021-06-24" target="_blank" rel="noopener">broom&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://butcher.tidymodels.org/news/index.html#butcher-0-1-4-2021-03-19" target="_blank" rel="noopener">butcher&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://discrim.tidymodels.org/news/index.html#discrim-0-1-2-2021-05-28" target="_blank" rel="noopener">discrim&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://hardhat.tidymodels.org/news/index.html#hardhat-0-1-4-2020-07-02" target="_blank" rel="noopener">hardhat&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://parsnip.tidymodels.org/news/index.html#parsnip-0-1-6-2021-05-27" target="_blank" rel="noopener">parsnip&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://probably.tidymodels.org/news/index.html#probably-0-0-6-2020-06-05" target="_blank" rel="noopener">probably&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://recipes.tidymodels.org/news/index.html#recipes-0-1-16-2021-04-16" target="_blank" rel="noopener">recipes&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://rsample.tidymodels.org/news/index.html#rsample-0-1-0-2021-05-08" target="_blank" rel="noopener">rsample&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://github.com/tidymodels/stacks/blob/main/NEWS.md#v020" target="_blank" rel="noopener">stacks&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://themis.tidymodels.org/dev/news/index.html#themis-0-1-4-2021-06-12" target="_blank" rel="noopener">themis&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.tidymodels.org/news/index.html#tidymodels-0-1-3-2021-04-19" target="_blank" rel="noopener">tidymodels&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://github.com/tidymodels/tidyposterior/blob/master/NEWS.md#tidyposterior-010" target="_blank" rel="noopener">tidyposterior&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://tune.tidymodels.org/news/index.html#tune-0-1-5-2021-04-23" target="_blank" rel="noopener">tune&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://workflowsets.tidymodels.org/news/index.html#workflowsets-0-0-2-2021-04-16" target="_blank" rel="noopener">workflowsets&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://yardstick.tidymodels.org/news/index.html#yardstick-0-0-8-2021-03-28" target="_blank" rel="noopener">yardstick&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="reduce-the-memory-footprint-of-your-recipes">Reduce the memory footprint of your recipes
&lt;a href="#reduce-the-memory-footprint-of-your-recipes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The
&lt;a href="https://butcher.tidymodels.org/" target="_blank" rel="noopener">butcher&lt;/a> package provides methods to remove (or &amp;ldquo;axe&amp;rdquo;) components from model objects that are not needed for prediction. The most recent release updated how butcher handles &lt;em>recipes&lt;/em> (the tidymodels approach for preprocessing and feature engineering) for more complete and robust coverage. Let&amp;rsquo;s consider a simulated churn-classification dataset for phone company customers:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidymodels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">butcher&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;mlc_churn&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">123&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">churn_split&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">initial_split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mlc_churn&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">churn_train&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">training&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn_split&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">churn_test&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">testing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn_split&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn_train&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">voice_mail_plan&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">churn&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">geom_bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">alpha&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0.8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;fill&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">scale_x_continuous&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scales&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">percent_format&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">labs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="figure/unnamed-chunk-3-1.png" alt="plot of chunk unnamed-chunk-3">&lt;/p>
&lt;p>For some kinds of models, we would want to create dummy or indicator variables from nominal predictors, and preprocess features to be on the same scale. We can use recipes for this task:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">churn_rec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">voice_mail_plan&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">total_intl_minutes&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="n">total_day_minutes&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">total_eve_minutes&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">churn_train&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_dummy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">all_nominal_predictors&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_normalize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">all_predictors&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can &lt;code>prep(churn_rec)&lt;/code> to estimate the quantities needed to create categorical features and to scale all the predictors:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">churn_prep&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">prep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn_rec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">churn_prep&lt;/span>
&lt;span class="c1">#&amp;gt; Data Recipe&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Inputs:&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; role #variables&lt;/span>
&lt;span class="c1">#&amp;gt; outcome 1&lt;/span>
&lt;span class="c1">#&amp;gt; predictor 5&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Training data contained 3750 data points and no missing data.&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Operations:&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Dummy variables from voice_mail_plan, state [trained]&lt;/span>
&lt;span class="c1">#&amp;gt; Centering and scaling for total_intl_minutes, total_day_minutes, ... [trained]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To remove everything from this prepped recipe not needed for applying to new data (e.g.
&lt;a href="https://recipes.tidymodels.org/reference/bake.html" target="_blank" rel="noopener">bake()&lt;/a> it), we can call &lt;code>butcher(churn_prep)&lt;/code>. In some applications, modeling practitioners need to make custom functions with a feature-engineering recipe. Sometimes those functions have&amp;hellip; a lot of extra STUFF in them, stuff that is not needed for prediction.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">butchered_plus&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">some_stuff_in_the_environment&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">runif&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1e6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">churn_prep&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">voice_mail_plan&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">total_intl_minutes&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="n">total_day_minutes&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">total_eve_minutes&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">churn_train&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_dummy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">all_nominal_predictors&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_normalize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">all_predictors&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">prep&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nf">butcher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn_prep&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the old version of butcher, we did not successfully remove all that extra stuff, and recipes were bigger than they needed to be:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># old version of butcher&lt;/span>
&lt;span class="n">lobstr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">obj_size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">butcher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn_prep&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; 1,835,512 B&lt;/span>
&lt;span class="n">lobstr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">obj_size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">butchered_plus&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="c1">#&amp;gt; 9,836,480 B&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the new version of butcher, we now successfully remove unneeded components from the recipe, so it is smaller:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># new version of butcher&lt;/span>
&lt;span class="n">lobstr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">obj_size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">butcher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn_prep&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; 1,695,352 B&lt;/span>
&lt;span class="n">lobstr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">obj_size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">butchered_plus&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="c1">#&amp;gt; 1,695,352 B&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are also &lt;code>butcher()&lt;/code> methods for &lt;code>workflow()&lt;/code> objects, so when you &lt;code>butcher()&lt;/code> a modeling workflow, you remove everything not needed for prediction from both its estimated recipe &lt;em>and&lt;/em> its trained model, making it as lightweight as possible for deployment.&lt;/p>
&lt;h2 id="svms-and-fast-logistic-regression-with-liblinear">SVMs and fast logistic regression with LiblineaR
&lt;a href="#svms-and-fast-logistic-regression-with-liblinear">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Unfortunately, the &lt;code>&amp;quot;liquidSVM&amp;quot;&lt;/code> engine for support vector machine models that parsnip supported was deprecated in the latest release, because that package was removed from CRAN. We added a new engine in the same release that allows users to fit linear SVMs with the
&lt;a href="https://parsnip.tidymodels.org/reference/svm_linear.html" target="_blank" rel="noopener">parsnip model &lt;code>svm_linear()&lt;/code>&lt;/a>, as well as having another option for logistic regression. This new &lt;code>&amp;quot;LiblineaR&amp;quot;&lt;/code> engine is based on the same C++ library that is shipped with
&lt;a href="https://scikit-learn.org/" target="_blank" rel="noopener">scikit-learn&lt;/a>. We&amp;rsquo;d like to thank the
&lt;a href="https://www.dnalytics.com/software/liblinear/" target="_blank" rel="noopener">maintainers of the LiblineaR R package&lt;/a> for all their help as we set up this integration.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">234&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">churn_folds&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">vfold_cv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn_train&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">churn&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">liblinear_spec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">logistic_reg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">penalty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mixture&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_mode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;classification&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;LiblineaR&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">liblinear_wf&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">workflow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn_rec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_model&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">liblinear_spec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">fit_resamples&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">liblinear_wf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">resamples&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">churn_folds&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # Resampling results&lt;/span>
&lt;span class="c1">#&amp;gt; # 5-fold cross-validation using stratification &lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 5 x 4&lt;/span>
&lt;span class="c1">#&amp;gt; splits id .metrics .notes &lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;list&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;list&amp;gt; &amp;lt;list&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; 1 &amp;lt;split [2999/751]&amp;gt; Fold1 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 2 &amp;lt;split [2999/751]&amp;gt; Fold2 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 3 &amp;lt;split [3000/750]&amp;gt; Fold3 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 4 &amp;lt;split [3001/749]&amp;gt; Fold4 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 5 &amp;lt;split [3001/749]&amp;gt; Fold5 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>&amp;quot;LiblineaR&amp;quot;&lt;/code> engine for regularized logistic regression
&lt;a href="https://twitter.com/juliasilge/status/1374029310764359681" target="_blank" rel="noopener">can be very fast compared to the &lt;code>&amp;quot;glmnet&amp;quot;&lt;/code> engine&lt;/a>, even when we use a
&lt;a href="https://www.tidyverse.org/blog/2020/11/tidymodels-sparse-support/" target="_blank" rel="noopener">sparse representation&lt;/a>. Check out
&lt;a href="https://gist.github.com/juliasilge/26a43e5e68cf12842354e6652dfed688" target="_blank" rel="noopener">benchmarking code here&lt;/a>.&lt;/p>
&lt;h2 id="post-processing-your-model-predictions-with-probably-and-yardstick">Post-processing your model predictions with probably and yardstick
&lt;a href="#post-processing-your-model-predictions-with-probably-and-yardstick">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We recently had releases of both the
&lt;a href="https://yardstick.tidymodels.org/" target="_blank" rel="noopener">yardstick&lt;/a> and
&lt;a href="https://probably.tidymodels.org/" target="_blank" rel="noopener">probably&lt;/a> packages, which now work together even better. The probably package can, among other things, help you post-process your model predictions. This data on churn is imbalanced, with many more customers who did not churn than those who did; we may need to use a threshold other than 0.5 for most appropriate results, or an organization may want to set a specific threshold for some action to prevent churn. You can set a threshold using the
&lt;a href="https://probably.tidymodels.org/reference/make_class_pred.html" target="_blank" rel="noopener">probably function &lt;code>make_two_class_pred()&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">probably&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">123&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">churn_preds&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">liblinear_wf&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn_train&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">augment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn_test&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">churn_post&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">churn_preds&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">.pred&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">make_two_class_pred&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">.pred_yes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">levels&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">churn&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">threshold&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0.7&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The class predictions created with probably integrate well with functions from yardstick, including custom sets of metrics created with
&lt;a href="https://yardstick.tidymodels.org/reference/metric_set.html" target="_blank" rel="noopener">&lt;code>metric_set()&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">churn_metrics&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">metric_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">accuracy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sens&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">spec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">churn_post&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">churn_metrics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">truth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">churn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">estimate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">.pred_class&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 3 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; .metric .estimator .estimate&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 accuracy binary 0.854 &lt;/span>
&lt;span class="c1">#&amp;gt; 2 sens binary 0.0619&lt;/span>
&lt;span class="c1">#&amp;gt; 3 spec binary 0.999&lt;/span>
&lt;span class="n">churn_post&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">churn_metrics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">truth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">churn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">estimate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">.pred&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 3 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; .metric .estimator .estimate&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 accuracy binary 0.746&lt;/span>
&lt;span class="c1">#&amp;gt; 2 sens binary 0.149&lt;/span>
&lt;span class="c1">#&amp;gt; 3 spec binary 0.856&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that with the default threshold of 0.5, basically no customers were classified as at risk for churn! Adjusting the threshold with &lt;code>make_two_class_pred()&lt;/code> helps to address this issue.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;d like to extend our thanks to all of the contributors who helped make these releases during Q2 possible!&lt;/p>
&lt;ul>
&lt;li>
&lt;p>broom:
&lt;a href="https://github.com/alexpghayes" target="_blank" rel="noopener">@alexpghayes&lt;/a>,
&lt;a href="https://github.com/andrewsris" target="_blank" rel="noopener">@andrewsris&lt;/a>,
&lt;a href="https://github.com/arcruz0" target="_blank" rel="noopener">@arcruz0&lt;/a>,
&lt;a href="https://github.com/bbolker" target="_blank" rel="noopener">@bbolker&lt;/a>,
&lt;a href="https://github.com/bgall" target="_blank" rel="noopener">@bgall&lt;/a>,
&lt;a href="https://github.com/cccneto" target="_blank" rel="noopener">@cccneto&lt;/a>,
&lt;a href="https://github.com/ddsjoberg" target="_blank" rel="noopener">@ddsjoberg&lt;/a>,
&lt;a href="https://github.com/DerForscher107" target="_blank" rel="noopener">@DerForscher107&lt;/a>,
&lt;a href="https://github.com/dikiprawisuda" target="_blank" rel="noopener">@dikiprawisuda&lt;/a>,
&lt;a href="https://github.com/dmenne" target="_blank" rel="noopener">@dmenne&lt;/a>,
&lt;a href="https://github.com/grantmcdermott" target="_blank" rel="noopener">@grantmcdermott&lt;/a>,
&lt;a href="https://github.com/japhir" target="_blank" rel="noopener">@japhir&lt;/a>,
&lt;a href="https://github.com/karldw" target="_blank" rel="noopener">@karldw&lt;/a>,
&lt;a href="https://github.com/kelseygonzalez" target="_blank" rel="noopener">@kelseygonzalez&lt;/a>,
&lt;a href="https://github.com/leejasme" target="_blank" rel="noopener">@leejasme&lt;/a>,
&lt;a href="https://github.com/LukasWallrich" target="_blank" rel="noopener">@LukasWallrich&lt;/a>,
&lt;a href="https://github.com/MatthieuStigler" target="_blank" rel="noopener">@MatthieuStigler&lt;/a>,
&lt;a href="https://github.com/mbac" target="_blank" rel="noopener">@mbac&lt;/a>,
&lt;a href="https://github.com/nt-williams" target="_blank" rel="noopener">@nt-williams&lt;/a>,
&lt;a href="https://github.com/pachadotdev" target="_blank" rel="noopener">@pachadotdev&lt;/a>,
&lt;a href="https://github.com/rpruim" target="_blank" rel="noopener">@rpruim&lt;/a>,
&lt;a href="https://github.com/rsbivand" target="_blank" rel="noopener">@rsbivand&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>, and
&lt;a href="https://github.com/vincentarelbundock" target="_blank" rel="noopener">@vincentarelbundock&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>butcher:
&lt;a href="https://github.com/bshor" target="_blank" rel="noopener">@bshor&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>, and
&lt;a href="https://github.com/lbenz-mdsol" target="_blank" rel="noopener">@lbenz-mdsol&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>discrim:
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hardhat:
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>parsnip:
&lt;a href="https://github.com/brshallo" target="_blank" rel="noopener">@brshallo&lt;/a>,
&lt;a href="https://github.com/cgoo4" target="_blank" rel="noopener">@cgoo4&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/dgrtwo" target="_blank" rel="noopener">@dgrtwo&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/graysonwhite" target="_blank" rel="noopener">@graysonwhite&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/hsbadr" target="_blank" rel="noopener">@hsbadr&lt;/a>,
&lt;a href="https://github.com/joeycouse" target="_blank" rel="noopener">@joeycouse&lt;/a>,
&lt;a href="https://github.com/jtlandis" target="_blank" rel="noopener">@jtlandis&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/klin333" target="_blank" rel="noopener">@klin333&lt;/a>,
&lt;a href="https://github.com/mdancho84" target="_blank" rel="noopener">@mdancho84&lt;/a>,
&lt;a href="https://github.com/paulponcet" target="_blank" rel="noopener">@paulponcet&lt;/a>,
&lt;a href="https://github.com/pfc5098" target="_blank" rel="noopener">@pfc5098&lt;/a>,
&lt;a href="https://github.com/RaymondBalise" target="_blank" rel="noopener">@RaymondBalise&lt;/a>,
&lt;a href="https://github.com/smingerson" target="_blank" rel="noopener">@smingerson&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>,
&lt;a href="https://github.com/UnclAlDeveloper" target="_blank" rel="noopener">@UnclAlDeveloper&lt;/a>, and
&lt;a href="https://github.com/vadimus202" target="_blank" rel="noopener">@vadimus202&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>probably:
&lt;a href="https://github.com/hsbadr" target="_blank" rel="noopener">@hsbadr&lt;/a>, and
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>recipes:
&lt;a href="https://github.com/AlbertRapp" target="_blank" rel="noopener">@AlbertRapp&lt;/a>,
&lt;a href="https://github.com/asmae-toumi" target="_blank" rel="noopener">@asmae-toumi&lt;/a>,
&lt;a href="https://github.com/atusy" target="_blank" rel="noopener">@atusy&lt;/a>,
&lt;a href="https://github.com/christiantillich" target="_blank" rel="noopener">@christiantillich&lt;/a>,
&lt;a href="https://github.com/EdwinTh" target="_blank" rel="noopener">@EdwinTh&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/jake-mason" target="_blank" rel="noopener">@jake-mason&lt;/a>,
&lt;a href="https://github.com/jkennel" target="_blank" rel="noopener">@jkennel&lt;/a>,
&lt;a href="https://github.com/jtlandis" target="_blank" rel="noopener">@jtlandis&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/LiamBlake" target="_blank" rel="noopener">@LiamBlake&lt;/a>,
&lt;a href="https://github.com/lindeloev" target="_blank" rel="noopener">@lindeloev&lt;/a>,
&lt;a href="https://github.com/mikemc" target="_blank" rel="noopener">@mikemc&lt;/a>,
&lt;a href="https://github.com/mrkaye97" target="_blank" rel="noopener">@mrkaye97&lt;/a>,
&lt;a href="https://github.com/renanxcortes" target="_blank" rel="noopener">@renanxcortes&lt;/a>,
&lt;a href="https://github.com/schoonees" target="_blank" rel="noopener">@schoonees&lt;/a>,
&lt;a href="https://github.com/SlowMo24" target="_blank" rel="noopener">@SlowMo24&lt;/a>,
&lt;a href="https://github.com/smingerson" target="_blank" rel="noopener">@smingerson&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rsample:
&lt;a href="https://github.com/brian-j-smith" target="_blank" rel="noopener">@brian-j-smith&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/LiamBlake" target="_blank" rel="noopener">@LiamBlake&lt;/a>,
&lt;a href="https://github.com/mattwarkentin" target="_blank" rel="noopener">@mattwarkentin&lt;/a>,
&lt;a href="https://github.com/PathosEthosLogos" target="_blank" rel="noopener">@PathosEthosLogos&lt;/a>,
&lt;a href="https://github.com/rkb965" target="_blank" rel="noopener">@rkb965&lt;/a>, and
&lt;a href="https://github.com/supermdat" target="_blank" rel="noopener">@supermdat&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stacks:
&lt;a href="https://github.com/asmae-toumi" target="_blank" rel="noopener">@asmae-toumi&lt;/a>,
&lt;a href="https://github.com/Crisel12" target="_blank" rel="noopener">@Crisel12&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>themis:
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/kylegilde" target="_blank" rel="noopener">@kylegilde&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>tidymodels:
&lt;a href="https://github.com/dmenne" target="_blank" rel="noopener">@dmenne&lt;/a>,
&lt;a href="https://github.com/Edward-Egros" target="_blank" rel="noopener">@Edward-Egros&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/PathosEthosLogos" target="_blank" rel="noopener">@PathosEthosLogos&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>, and
&lt;a href="https://github.com/verajosemanuel" target="_blank" rel="noopener">@verajosemanuel&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>tidyposterior:
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>tune:
&lt;a href="https://github.com/albert-ying" target="_blank" rel="noopener">@albert-ying&lt;/a>,
&lt;a href="https://github.com/amazongodman" target="_blank" rel="noopener">@amazongodman&lt;/a>,
&lt;a href="https://github.com/brshallo" target="_blank" rel="noopener">@brshallo&lt;/a>,
&lt;a href="https://github.com/dpanyard" target="_blank" rel="noopener">@dpanyard&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/klin333" target="_blank" rel="noopener">@klin333&lt;/a>,
&lt;a href="https://github.com/mbac" target="_blank" rel="noopener">@mbac&lt;/a>,
&lt;a href="https://github.com/PathosEthosLogos" target="_blank" rel="noopener">@PathosEthosLogos&lt;/a>,
&lt;a href="https://github.com/silvanhi" target="_blank" rel="noopener">@silvanhi&lt;/a>,
&lt;a href="https://github.com/smingerson" target="_blank" rel="noopener">@smingerson&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>, and
&lt;a href="https://github.com/yogat3ch" target="_blank" rel="noopener">@yogat3ch&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>workflowsets:
&lt;a href="https://github.com/amazongodman" target="_blank" rel="noopener">@amazongodman&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/gunnergalactico" target="_blank" rel="noopener">@gunnergalactico&lt;/a>,
&lt;a href="https://github.com/hnagaty" target="_blank" rel="noopener">@hnagaty&lt;/a>,
&lt;a href="https://github.com/jonthegeek" target="_blank" rel="noopener">@jonthegeek&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/mdancho84" target="_blank" rel="noopener">@mdancho84&lt;/a>,
&lt;a href="https://github.com/oskasf" target="_blank" rel="noopener">@oskasf&lt;/a>,
&lt;a href="https://github.com/rafzamb" target="_blank" rel="noopener">@rafzamb&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>, and
&lt;a href="https://github.com/yogat3ch" target="_blank" rel="noopener">@yogat3ch&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>yardstick:
&lt;a href="https://github.com/brshallo" target="_blank" rel="noopener">@brshallo&lt;/a>,
&lt;a href="https://github.com/coletl" target="_blank" rel="noopener">@coletl&lt;/a>,
&lt;a href="https://github.com/datenzauberai" target="_blank" rel="noopener">@datenzauberai&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/klin333" target="_blank" rel="noopener">@klin333&lt;/a>,
&lt;a href="https://github.com/mattwarkentin" target="_blank" rel="noopener">@mattwarkentin&lt;/a>,
&lt;a href="https://github.com/mdancho84" target="_blank" rel="noopener">@mdancho84&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Choose your own tidymodels adventure</title><link>https://www.tidyverse.org/blog/2021/05/choose-tidymodels-adventure/</link><pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2021/05/choose-tidymodels-adventure/</guid><description>&lt;p>The
&lt;a href="https://www.tidymodels.org/" target="_blank" rel="noopener">tidymodels&lt;/a> framework is a collection of R packages for modeling and machine learning using tidyverse principles. You can install the tidymodels suite of packages from CRAN with:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tidymodels&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The packages in tidymodels are designed to work together in a unified ecosystem, but they are flexible and modular; you can use tidymodels packages for certain parts of a modeling analysis without committing to the entire ecosystem, when preferred. We purposefully write code in these small, modular packages both to make them easier to maintain and easier to use in production systems. This does mean that it can be challenging for a newcomer to know where their specific problem fits in this ecosystem.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidymodels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; ── Attaching packages ────────────────────────────────── tidymodels 0.1.3 ──&lt;/span>
&lt;span class="c1">#&amp;gt; ✓ broom 0.7.6 ✓ recipes 0.1.16&lt;/span>
&lt;span class="c1">#&amp;gt; ✓ dials 0.0.9 ✓ rsample 0.1.0 &lt;/span>
&lt;span class="c1">#&amp;gt; ✓ dplyr 1.0.6 ✓ tibble 3.1.2 &lt;/span>
&lt;span class="c1">#&amp;gt; ✓ ggplot2 3.3.3 ✓ tidyr 1.1.3 &lt;/span>
&lt;span class="c1">#&amp;gt; ✓ infer 0.5.4 ✓ tune 0.1.5 &lt;/span>
&lt;span class="c1">#&amp;gt; ✓ modeldata 0.1.0 ✓ workflows 0.2.2 &lt;/span>
&lt;span class="c1">#&amp;gt; ✓ parsnip 0.1.5 ✓ workflowsets 0.0.2 &lt;/span>
&lt;span class="c1">#&amp;gt; ✓ purrr 0.3.4 ✓ yardstick 0.0.8&lt;/span>
&lt;span class="c1">#&amp;gt; ── Conflicts ───────────────────────────────────── tidymodels_conflicts() ──&lt;/span>
&lt;span class="c1">#&amp;gt; x purrr::discard() masks scales::discard()&lt;/span>
&lt;span class="c1">#&amp;gt; x dplyr::filter() masks stats::filter()&lt;/span>
&lt;span class="c1">#&amp;gt; x dplyr::lag() masks stats::lag()&lt;/span>
&lt;span class="c1">#&amp;gt; x recipes::step() masks stats::step()&lt;/span>
&lt;span class="c1">#&amp;gt; • Use tidymodels_prefer() to resolve common conflicts.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In general, we recommend a couple of resources for folks learning about tidymodels: the
&lt;a href="https://www.tidymodels.org/start/" target="_blank" rel="noopener">&lt;strong>Get Started&lt;/strong> section of tidymodels.org&lt;/a> to get going quickly and our book
&lt;a href="https://www.tmwr.org/" target="_blank" rel="noopener">&lt;em>Tidy Modeling with R&lt;/em>&lt;/a> to dig deeper. This post takes on a more specific task for a newcomer to tidymodels. We consider several categories of real-world modeling analyses and recommend ways to
&lt;a href="https://en.wikipedia.org/wiki/Choose_Your_Own_Adventure" target="_blank" rel="noopener">choose your own adventure&lt;/a> in the tidymodels ecosystem. In tidymodels, you can train:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>a single model,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>a workflow, or&lt;/p>
&lt;/li>
&lt;li>
&lt;p>a set of workflows.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Each of these choices is best in difference circumstances, and we&amp;rsquo;ll consider each in the following sections.&lt;/p>
&lt;h2 id="starting-with-the-basics-a-parsnip-model">Starting with the basics: a &lt;strong>parsnip&lt;/strong> model
&lt;a href="#starting-with-the-basics-a-parsnip-model">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A fully featured ecosystem for modeling and machine learning requires interfaces to, well, models, and the tidymodels package that provides those functions and interfaces is
&lt;a href="https://parsnip.tidymodels.org/" target="_blank" rel="noopener">parsnip&lt;/a>. If your modeling adventure involves smaller data and straightforward data preprocessing (like that provided by
&lt;a href="https://www.tmwr.org/base-r.html#formula" target="_blank" rel="noopener">R&amp;rsquo;s model formula&lt;/a>), you may be well-served by focusing on parsnip. The parsnip package is a good choice for fitting a straightforward model to a smaller data set like this one:&lt;/p>
&lt;p>&lt;img src="https://juliasilge.com/blog/student-debt/index_files/figure-html/unnamed-chunk-3-1.png" title="Plot showing student loan debt by race across time" alt="Plot showing student loan debt by race across time" width="70%" />&lt;/p>
&lt;p>To learn more about how to fit and evaluate parsnip models, check out
&lt;a href="https://www.tidymodels.org/start/models/" target="_blank" rel="noopener">this article at tidymodel.org&amp;rsquo;s &lt;strong>Get Started&lt;/strong> section&lt;/a> and
&lt;a href="https://juliasilge.com/blog/student-debt/" target="_blank" rel="noopener">this blog post (complete with screencast) by me&lt;/a>. You can use
&lt;a href="https://www.tidyverse.org/blog/2021/03/tidymodels-2021-q1/#choose-parsnip-models-with-an-rstudio-addin" target="_blank" rel="noopener">parsnip&amp;rsquo;s RStudio addin&lt;/a> to generate code for one or more models!&lt;/p>
&lt;p>We don&amp;rsquo;t believe most people using tidymodels fall into this first category, but we think that the tools we&amp;rsquo;ve built for these kinds of straightforward analyses are well-designed and will set you up for statistical and practical success in the short and long term. Instead of fitting a model with, say, &lt;code>lm()&lt;/code>, in parsnip we specify a model with code such as:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">linear_reg&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;lm&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; Linear Regression Model Specification (regression)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Computational engine: lm&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We then &lt;code>fit()&lt;/code> that model to data. More code is required to fit a simple model than you may be used to, but learning and using parsnip opens up the door for all the other things you can do with the same pipeline.&lt;/p>
&lt;h2 id="holistic-model-workflows">Holistic model &lt;strong>workflows&lt;/strong>
&lt;a href="#holistic-model-workflows">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>When you are setting off on a modeling adventure, it might be worth asking what we even mean by the word &amp;ldquo;model&amp;rdquo;; it is a word that gets overloaded really quickly! In the tidymodels ecosystem, we carefully incorporate &lt;em>both&lt;/em> feature engineering (also called data preprocessing) that must be learned from training data &lt;em>and&lt;/em> a model fit into a modeling workflow that is estimated together. For example, if you trained a least squares regression model with features learned from principal component analysis, the PCA preprocessing step should be considered part of the model workflow:&lt;/p>
&lt;p>&lt;img src="https://www.tmwr.org/premade/proper-workflow.svg" title="Diagram showing that PCA preprocessing is part of the modeling process, together with least squares estimation" alt="Diagram showing that PCA preprocessing is part of the modeling process, together with least squares estimation" />&lt;/p>
&lt;p>In the tidymodels ecosystem, we use the
&lt;a href="https://workflows.tidymodels.org/" target="_blank" rel="noopener">workflows&lt;/a> package to bundle together model components and promote more fluent modeling processes. You can fit, tune, and resample workflows, and using workflows has benefits from making it easier to keep track of model components in your code to avoiding data leakage in feature engineering.&lt;/p>
&lt;p>We generally expect that most people using tidymodels fall into this middle category, and most of our ecosystem is designed to optimize for these users&amp;rsquo; experience. Choose a &lt;code>workflow()&lt;/code> if you want to try several model and/or feature engineering options with your data, if you prefer a simpler and more unified interface for fitting and tuning, or if you like composable and pipeable code for analyses. The
&lt;a href="https://usemodels.tidymodels.org/" target="_blank" rel="noopener">usemodels&lt;/a> package can even automate the creation of a workflow, using &lt;em>your&lt;/em> data to determine a good recipe along with the model of your choice.&lt;/p>
&lt;p>To learn more about using workflows, see them
&lt;a href="https://www.tidymodels.org/start/case-study/" target="_blank" rel="noopener">used in action in this &lt;strong>Get Started&lt;/strong> article&lt;/a>. Also, I have quite a number of blog posts and screencasts that walk through how to use workflows, such as
&lt;a href="https://juliasilge.com/blog/palmer-penguins/" target="_blank" rel="noopener">this one&lt;/a> that compares two approaches for the same modeling problem and
&lt;a href="https://juliasilge.com/blog/water-sources/" target="_blank" rel="noopener">this one&lt;/a> that trains and evaluates a single workflow (one preprocessor + model).&lt;/p>
&lt;h2 id="screening-many-models-workflowsets">Screening many models: &lt;strong>workflowsets&lt;/strong>
&lt;a href="#screening-many-models-workflowsets">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Sometimes a modeling practitioner is in a situation where they don&amp;rsquo;t want to try out just a few approaches on a given data set, but &lt;em>many&lt;/em>: not just two or three or four, but A LOT. This is most common when a practitioner starts a new modeling project with a data set that is not well understood and there is little (or maybe no) &lt;em>a priori&lt;/em> knowledge about what kind of approach will work well.&lt;/p>
&lt;p>For this kind of tidymodels adventure, we encourage users to try the
&lt;a href="https://workflowsets.tidymodels.org/" target="_blank" rel="noopener">workflowsets&lt;/a> package, which supports the creation, fitting, and comparison of sets of multiple workflows. Combinations of preprocessors and models can be created, and the resulting workflow set can be tuned or resampled, then evaluated (perhaps using Bayesian analysis):&lt;/p>
&lt;p>&lt;img src="https://www.tidyverse.org/blog/2021/03/workflowsets-0-0-1/figure/plot-bayes-1.svg" title="Plot showing RMSE by workflow rank for many models" alt="Plot showing RMSE by workflow rank for many models" />&lt;/p>
&lt;p>We don&amp;rsquo;t expect that most people using tidymodels will use workflowsets, as it is a specialized tool only useful in some contexts. If you are familiar with AutoML tools, you may notice some similarities between them and what this package does; it has many of the same pros and cons. To learn more about workflowsets (including why our group was hesitant to support and build this functionality!) watch
&lt;a href="https://youtu.be/2OfTEakSFXQ" target="_blank" rel="noopener">Max&amp;rsquo;s recent talk for the LA RUG&lt;/a>, and also
&lt;a href="https://www.tmwr.org/workflow-sets.html" target="_blank" rel="noopener">read this chapter of our book&lt;/a>.&lt;/p>
&lt;h2 id="your-own-tidymodels-adventure">Your own tidymodels adventure
&lt;a href="#your-own-tidymodels-adventure">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We believe these three general categories cover most of the modeling adventures you as a practitioner might want to embark on, and our guidance here outlines the best choices given the current status of the tidymodels ecosystem here in the middle of 2021. The ecosystem is growing ever more mature, and packages like parsnip and workflows are more stable, while workflowsets is quite new and may be considered more experimental for now.&lt;/p>
&lt;p>For questions and discussions about tidymodels packages, modeling, and machine learning, join us
&lt;a href="https://rstd.io/tidymodels-community" target="_blank" rel="noopener">in discussion on RStudio Community&lt;/a>.&lt;/p></description></item><item><title>Catch up with tidymodels</title><link>https://www.tidyverse.org/blog/2021/03/tidymodels-2021-q1/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2021/03/tidymodels-2021-q1/</guid><description>&lt;p>The
&lt;a href="https://www.tidymodels.org/" target="_blank" rel="noopener">tidymodels&lt;/a> framework is a collection of R packages for modeling and machine learning using tidyverse principles. There have been quite a number of updates and new developments in the tidymodels ecosystem since our
&lt;a href="https://www.tidyverse.org/blog/2020/12/finetune-0-0-1/" target="_blank" rel="noopener">last blog post in December&lt;/a>! Since that post, tidymodels maintainers have published eight CRAN releases of existing packages. You can install these updates from CRAN with:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;broom&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;butcher&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;embed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;parsnip&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;rsample&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;rules&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;tune&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;workflows&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We purposefully write code in small, modular packages to make them easier to maintain (for us!) and use in production systems (for you!) but this does mean that sometimes any given package release can feel a bit minor. Some of the changes in these releases are small bug fixes or updates for changes in CRAN standards. However, there are also some substantively helpful new functions for modeling and resampling, and we want to make sure that folks can stay up-to-date with the changes and new features available.&lt;/p>
&lt;p>We plan to begin &lt;strong>regular updates&lt;/strong> every three or four months here on the tidyverse blog summarizing what&amp;rsquo;s happening lately in the tidymodels ecosystem overall. We&amp;rsquo;ll still continue the focused blog posts on more major new features that we&amp;rsquo;ve always written; look for one soon on a new package for creating and handling a collection of multiple modeling workflows all together. The &lt;code>NEWS&lt;/code> files are linked here for each package, but read below for more details on some highlights that may interest you!&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://broom.tidymodels.org/news/#broom-0-7-5-2021-02-19" target="_blank" rel="noopener">broom&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://butcher.tidymodels.org/news/#butcher-0-1-3-2021-03-04" target="_blank" rel="noopener">butcher&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://embed.tidymodels.org/news/#embed-0-1-4-2021-01-16" target="_blank" rel="noopener">embed&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://parsnip.tidymodels.org/news/#parsnip-0-1-5-2021-01-19" target="_blank" rel="noopener">parsnip&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://rsample.tidymodels.org/news/index.html#rsample-0-0-9-2021-02-17" target="_blank" rel="noopener">rsample&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://rules.tidymodels.org/news/#rules-0-1-1-2021-01-16" target="_blank" rel="noopener">rules&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://tune.tidymodels.org/news/index.html#tune-0-1-3-2021-02-28" target="_blank" rel="noopener">tune&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://workflows.tidymodels.org/news/index.html#workflows-0-2-2-2021-03-10" target="_blank" rel="noopener">workflows&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="choose-parsnip-models-with-an-rstudio-addin">Choose parsnip models with an RStudio addin
&lt;a href="#choose-parsnip-models-with-an-rstudio-addin">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The parsnip package provides support for a plethora of models. You can explore these models online at
&lt;a href="https://www.tidymodels.org/find/parsnip/" target="_blank" rel="noopener">tidymodels.org&lt;/a>, but the recent release of parsnip also contains an RStudio addin for choosing parsnip models and generating code to specify them.&lt;/p>
&lt;p>&lt;img src="parsnip_addin.gif" alt="addin gif">&lt;/p>
&lt;p>You can choose by classification or regression models, and even match by a regular expression.&lt;/p>
&lt;p>There is now also
&lt;a href="https://parsnip.tidymodels.org/reference/augment.html" target="_blank" rel="noopener">an &lt;code>augment()&lt;/code> function for parsnip models&lt;/a>, in addition to the &lt;code>augment()&lt;/code> functions
&lt;a href="https://tune.tidymodels.org/reference/augment.html" target="_blank" rel="noopener">for tuning results&lt;/a> and
&lt;a href="https://workflows.tidymodels.org/reference/augment.workflow.html" target="_blank" rel="noopener">for workflows&lt;/a>.
&lt;a href="https://juliasilge.com/blog/student-debt/" target="_blank" rel="noopener">This recent screencast demonstrates&lt;/a> how to use parsnip&amp;rsquo;s &lt;code>augment()&lt;/code> function.&lt;/p>
&lt;h2 id="new-functions-in-rsample">New functions in rsample
&lt;a href="#new-functions-in-rsample">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Most of the changes in the recent release for
&lt;a href="https://rsample.tidymodels.org/" target="_blank" rel="noopener">rsample&lt;/a> are internal and developer-facing, made to support rsample-adjacent packages like our new package for resampling spatial data (see below! 👀) but the new &lt;code>reg_intervals()&lt;/code> function allows you to find bootstrap confidence intervals for simple models fluently. You have always been able to use rsample functions for
&lt;a href="https://www.tidymodels.org/learn/statistics/bootstrap/" target="_blank" rel="noopener">flexible bootstrap resampling&lt;/a> but this new convenience function reduces the steps to get confidence intervals for models like &lt;code>lm()&lt;/code> and &lt;code>glm()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rsample&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ad_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;modeldata&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">123&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">reg_intervals&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">Class&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">tau&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">VEGF&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">model_fn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;glm&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ad_data&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">family&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;binomial&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 2 x 6
## term .lower .estimate .upper .alpha .method
## &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;
## 1 tau -4.92 -4.11 -3.08 0.05 student-t
## 2 VEGF 0.651 0.959 1.22 0.05 student-t
&lt;/code>&lt;/pre>&lt;p>Check out
&lt;a href="https://juliasilge.com/blog/superbowl-conf-int/" target="_blank" rel="noopener">my recent screencast&lt;/a> for more details on using &lt;code>reg_intervals()&lt;/code>.&lt;/p>
&lt;p>Also take a look at the
&lt;a href="https://rsample.tidymodels.org/reference/permutations.html" target="_blank" rel="noopener">new &lt;code>permutations()&lt;/code> function&lt;/a> for permuting variables!&lt;/p>
&lt;h2 id="resampling-for-spatial-data">Resampling for spatial data
&lt;a href="#resampling-for-spatial-data">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We are pleased to announce the first release of the
&lt;a href="https://spatialsample.tidymodels.org/" target="_blank" rel="noopener">spatialsample&lt;/a> package.&lt;/p>
&lt;p>You can install it from CRAN with:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;spatialsample&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The goal of spatialsample is to provide functions and classes for spatial resampling to use with
&lt;a href="https://rsample.tidymodels.org/" target="_blank" rel="noopener">rsample&lt;/a>. We intend to grow the number of spatial resampling approaches included in the package; the initial release includes &lt;code>spatial_clustering_cv()&lt;/code>, a straightforward spatial resampling strategy with light dependencies based on k-means clustering.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">spatialsample&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ames&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;modeldata&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">234&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">folds&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">spatial_clustering_cv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ames&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">coords&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Latitude&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Longitude&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">folds&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # 5-fold spatial cross-validation
## # A tibble: 5 x 2
## splits id
## &amp;lt;list&amp;gt; &amp;lt;chr&amp;gt;
## 1 &amp;lt;split [2277/653]&amp;gt; Fold1
## 2 &amp;lt;split [2767/163]&amp;gt; Fold2
## 3 &amp;lt;split [2040/890]&amp;gt; Fold3
## 4 &amp;lt;split [2567/363]&amp;gt; Fold4
## 5 &amp;lt;split [2069/861]&amp;gt; Fold5
&lt;/code>&lt;/pre>&lt;p>In this example, the &lt;code>ames&lt;/code> data on houses in Ames, IA is resampled with &lt;code>v = 5&lt;/code>; notice that the resulting partitions do not contain an equal number of observations.&lt;/p>
&lt;p>We can create a helper plotting function to visualize the five folds.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ggplot2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">purrr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dplyr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">plot_splits&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">analysis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">analysis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Analysis&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">bind_rows&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">assessment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">analysis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Assessment&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Longitude&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Latitude&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">analysis&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">geom_point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">alpha&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0.5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">labs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nf">walk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">folds&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">splits&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">plot_splits&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="figure/unnamed-chunk-5-.gif" alt="plot of chunk unnamed-chunk-5">&lt;/p>
&lt;p>Check out the
&lt;a href="https://spatialsample.tidymodels.org/articles/spatialsample.html" target="_blank" rel="noopener">main vignette&lt;/a> to see how this resampling strategy can be used for modeling, and
&lt;a href="https://github.com/tidymodels/spatialsample/issues" target="_blank" rel="noopener">submit an issue&lt;/a> if there is a particular spatial resampling approach that you are interested in us prioritizing for future releases.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A big thanks to all of the contributors who helped make these releases possible! For some of these packages (like rsample, butcher, and embed), we have never said thank you before so we&amp;rsquo;ll take this opportunity to express our appreciation.&lt;/p>
&lt;ul>
&lt;li>broom:
&lt;a href="https://github.com/AdroMine" target="_blank" rel="noopener">@AdroMine&lt;/a>,
&lt;a href="https://github.com/alexpghayes" target="_blank" rel="noopener">@alexpghayes&lt;/a>,
&lt;a href="https://github.com/Amogh-Joshi" target="_blank" rel="noopener">@Amogh-Joshi&lt;/a>,
&lt;a href="https://github.com/anddis" target="_blank" rel="noopener">@anddis&lt;/a>,
&lt;a href="https://github.com/andrjohns" target="_blank" rel="noopener">@andrjohns&lt;/a>,
&lt;a href="https://github.com/AntoniosBarotsis" target="_blank" rel="noopener">@AntoniosBarotsis&lt;/a>,
&lt;a href="https://github.com/arthur-e" target="_blank" rel="noopener">@arthur-e&lt;/a>,
&lt;a href="https://github.com/asreece" target="_blank" rel="noopener">@asreece&lt;/a>,
&lt;a href="https://github.com/asshah4" target="_blank" rel="noopener">@asshah4&lt;/a>,
&lt;a href="https://github.com/briatte" target="_blank" rel="noopener">@briatte&lt;/a>,
&lt;a href="https://github.com/bwiernik" target="_blank" rel="noopener">@bwiernik&lt;/a>,
&lt;a href="https://github.com/cbhurley" target="_blank" rel="noopener">@cbhurley&lt;/a>,
&lt;a href="https://github.com/clausherther" target="_blank" rel="noopener">@clausherther&lt;/a>,
&lt;a href="https://github.com/clauswilke" target="_blank" rel="noopener">@clauswilke&lt;/a>,
&lt;a href="https://github.com/crsh" target="_blank" rel="noopener">@crsh&lt;/a>,
&lt;a href="https://github.com/DarwinAwardWinner" target="_blank" rel="noopener">@DarwinAwardWinner&lt;/a>,
&lt;a href="https://github.com/deblnia" target="_blank" rel="noopener">@deblnia&lt;/a>,
&lt;a href="https://github.com/deschen1" target="_blank" rel="noopener">@deschen1&lt;/a>,
&lt;a href="https://github.com/eheinzen" target="_blank" rel="noopener">@eheinzen&lt;/a>,
&lt;a href="https://github.com/friendly" target="_blank" rel="noopener">@friendly&lt;/a>,
&lt;a href="https://github.com/grantmcdermott" target="_blank" rel="noopener">@grantmcdermott&lt;/a>,
&lt;a href="https://github.com/hasandiwan" target="_blank" rel="noopener">@hasandiwan&lt;/a>,
&lt;a href="https://github.com/hd-barros" target="_blank" rel="noopener">@hd-barros&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/hughjonesd" target="_blank" rel="noopener">@hughjonesd&lt;/a>,
&lt;a href="https://github.com/IndrajeetPatil" target="_blank" rel="noopener">@IndrajeetPatil&lt;/a>,
&lt;a href="https://github.com/irkaal" target="_blank" rel="noopener">@irkaal&lt;/a>,
&lt;a href="https://github.com/jiho" target="_blank" rel="noopener">@jiho&lt;/a>,
&lt;a href="https://github.com/jmbarbone" target="_blank" rel="noopener">@jmbarbone&lt;/a>,
&lt;a href="https://github.com/joshyam-k" target="_blank" rel="noopener">@joshyam-k&lt;/a>,
&lt;a href="https://github.com/JReising09" target="_blank" rel="noopener">@JReising09&lt;/a>,
&lt;a href="https://github.com/julian-urbano" target="_blank" rel="noopener">@julian-urbano&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/kjfarley" target="_blank" rel="noopener">@kjfarley&lt;/a>,
&lt;a href="https://github.com/kristyrobledo" target="_blank" rel="noopener">@kristyrobledo&lt;/a>,
&lt;a href="https://github.com/leeweizhe1993" target="_blank" rel="noopener">@leeweizhe1993&lt;/a>,
&lt;a href="https://github.com/leungi" target="_blank" rel="noopener">@leungi&lt;/a>,
&lt;a href="https://github.com/LukasWallrich" target="_blank" rel="noopener">@LukasWallrich&lt;/a>,
&lt;a href="https://github.com/matthieu-faron" target="_blank" rel="noopener">@matthieu-faron&lt;/a>,
&lt;a href="https://github.com/MatthieuStigler" target="_blank" rel="noopener">@MatthieuStigler&lt;/a>,
&lt;a href="https://github.com/milanwiedemann" target="_blank" rel="noopener">@milanwiedemann&lt;/a>,
&lt;a href="https://github.com/mk9y" target="_blank" rel="noopener">@mk9y&lt;/a>,
&lt;a href="https://github.com/mlatif71" target="_blank" rel="noopener">@mlatif71&lt;/a>,
&lt;a href="https://github.com/mlaviolet" target="_blank" rel="noopener">@mlaviolet&lt;/a>,
&lt;a href="https://github.com/Nateme16" target="_blank" rel="noopener">@Nateme16&lt;/a>,
&lt;a href="https://github.com/nlubock" target="_blank" rel="noopener">@nlubock&lt;/a>,
&lt;a href="https://github.com/pachamaltese" target="_blank" rel="noopener">@pachamaltese&lt;/a>,
&lt;a href="https://github.com/rudeboybert" target="_blank" rel="noopener">@rudeboybert&lt;/a>,
&lt;a href="https://github.com/saadaslam" target="_blank" rel="noopener">@saadaslam&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/tavareshugo" target="_blank" rel="noopener">@tavareshugo&lt;/a>,
&lt;a href="https://github.com/uqzwang" target="_blank" rel="noopener">@uqzwang&lt;/a>,
&lt;a href="https://github.com/vincentarelbundock" target="_blank" rel="noopener">@vincentarelbundock&lt;/a>,
&lt;a href="https://github.com/WillemVervoort" target="_blank" rel="noopener">@WillemVervoort&lt;/a>, and
&lt;a href="https://github.com/zief0002" target="_blank" rel="noopener">@zief0002&lt;/a>&lt;/li>
&lt;li>butcher:
&lt;a href="https://github.com/abichat" target="_blank" rel="noopener">@abichat&lt;/a>,
&lt;a href="https://github.com/adtserapio" target="_blank" rel="noopener">@adtserapio&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/edwinschut" target="_blank" rel="noopener">@edwinschut&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/irkaal" target="_blank" rel="noopener">@irkaal&lt;/a>,
&lt;a href="https://github.com/jarauh" target="_blank" rel="noopener">@jarauh&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/jyuu" target="_blank" rel="noopener">@jyuu&lt;/a>,
&lt;a href="https://github.com/kevinykuo" target="_blank" rel="noopener">@kevinykuo&lt;/a>,
&lt;a href="https://github.com/klin333" target="_blank" rel="noopener">@klin333&lt;/a>,
&lt;a href="https://github.com/mkearney" target="_blank" rel="noopener">@mkearney&lt;/a>,
&lt;a href="https://github.com/natejessee" target="_blank" rel="noopener">@natejessee&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>, and
&lt;a href="https://github.com/UnclAlDeveloper" target="_blank" rel="noopener">@UnclAlDeveloper&lt;/a>&lt;/li>
&lt;li>embed:
&lt;a href="https://github.com/agilebean" target="_blank" rel="noopener">@agilebean&lt;/a>,
&lt;a href="https://github.com/ajing" target="_blank" rel="noopener">@ajing&lt;/a>,
&lt;a href="https://github.com/Athospd" target="_blank" rel="noopener">@Athospd&lt;/a>,
&lt;a href="https://github.com/Cardosaum" target="_blank" rel="noopener">@Cardosaum&lt;/a>,
&lt;a href="https://github.com/ciberger" target="_blank" rel="noopener">@ciberger&lt;/a>,
&lt;a href="https://github.com/data-datum" target="_blank" rel="noopener">@data-datum&lt;/a>,
&lt;a href="https://github.com/dfalbel" target="_blank" rel="noopener">@dfalbel&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/goleng" target="_blank" rel="noopener">@goleng&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/ismailmuller" target="_blank" rel="noopener">@ismailmuller&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/konradsemsch" target="_blank" rel="noopener">@konradsemsch&lt;/a>,
&lt;a href="https://github.com/kylegilde" target="_blank" rel="noopener">@kylegilde&lt;/a>,
&lt;a href="https://github.com/lorenzwalthert" target="_blank" rel="noopener">@lorenzwalthert&lt;/a>,
&lt;a href="https://github.com/mlduarte" target="_blank" rel="noopener">@mlduarte&lt;/a>,
&lt;a href="https://github.com/nhward" target="_blank" rel="noopener">@nhward&lt;/a>,
&lt;a href="https://github.com/niszet" target="_blank" rel="noopener">@niszet&lt;/a>,
&lt;a href="https://github.com/quantumlinguist" target="_blank" rel="noopener">@quantumlinguist&lt;/a>,
&lt;a href="https://github.com/smingerson" target="_blank" rel="noopener">@smingerson&lt;/a>,
&lt;a href="https://github.com/tmastny" target="_blank" rel="noopener">@tmastny&lt;/a>,
&lt;a href="https://github.com/tonigril" target="_blank" rel="noopener">@tonigril&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>&lt;/li>
&lt;li>parsnip:
&lt;a href="https://github.com/awunderground" target="_blank" rel="noopener">@awunderground&lt;/a>,
&lt;a href="https://github.com/Bijaelo" target="_blank" rel="noopener">@Bijaelo&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/derek-corcoran-barrios" target="_blank" rel="noopener">@derek-corcoran-barrios&lt;/a>,
&lt;a href="https://github.com/eamoncaddigan" target="_blank" rel="noopener">@eamoncaddigan&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/ericpgreen" target="_blank" rel="noopener">@ericpgreen&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/irkaal" target="_blank" rel="noopener">@irkaal&lt;/a>,
&lt;a href="https://github.com/jjcurtin" target="_blank" rel="noopener">@jjcurtin&lt;/a>,
&lt;a href="https://github.com/joeycouse" target="_blank" rel="noopener">@joeycouse&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/kwiscion" target="_blank" rel="noopener">@kwiscion&lt;/a>,
&lt;a href="https://github.com/kylegilde" target="_blank" rel="noopener">@kylegilde&lt;/a>,
&lt;a href="https://github.com/lorenzwalthert" target="_blank" rel="noopener">@lorenzwalthert&lt;/a>,
&lt;a href="https://github.com/markfairbanks" target="_blank" rel="noopener">@markfairbanks&lt;/a>,
&lt;a href="https://github.com/mdancho84" target="_blank" rel="noopener">@mdancho84&lt;/a>,
&lt;a href="https://github.com/mlane3" target="_blank" rel="noopener">@mlane3&lt;/a>,
&lt;a href="https://github.com/mrepetto94" target="_blank" rel="noopener">@mrepetto94&lt;/a>,
&lt;a href="https://github.com/ndiquattro" target="_blank" rel="noopener">@ndiquattro&lt;/a>,
&lt;a href="https://github.com/rorynolan" target="_blank" rel="noopener">@rorynolan&lt;/a>,
&lt;a href="https://github.com/shosaco" target="_blank" rel="noopener">@shosaco&lt;/a>,
&lt;a href="https://github.com/smingerson" target="_blank" rel="noopener">@smingerson&lt;/a>,
&lt;a href="https://github.com/tanho63" target="_blank" rel="noopener">@tanho63&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>&lt;/li>
&lt;li>rsample:
&lt;a href="https://github.com/alexpghayes" target="_blank" rel="noopener">@alexpghayes&lt;/a>,
&lt;a href="https://github.com/apreshill" target="_blank" rel="noopener">@apreshill&lt;/a>,
&lt;a href="https://github.com/Athospd" target="_blank" rel="noopener">@Athospd&lt;/a>,
&lt;a href="https://github.com/brunocarlin" target="_blank" rel="noopener">@brunocarlin&lt;/a>,
&lt;a href="https://github.com/ColinConwell" target="_blank" rel="noopener">@ColinConwell&lt;/a>,
&lt;a href="https://github.com/cportner" target="_blank" rel="noopener">@cportner&lt;/a>,
&lt;a href="https://github.com/danilinares" target="_blank" rel="noopener">@danilinares&lt;/a>,
&lt;a href="https://github.com/DanOvando" target="_blank" rel="noopener">@DanOvando&lt;/a>,
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/dchiu911" target="_blank" rel="noopener">@dchiu911&lt;/a>,
&lt;a href="https://github.com/Dpananos" target="_blank" rel="noopener">@Dpananos&lt;/a>,
&lt;a href="https://github.com/dpastling" target="_blank" rel="noopener">@dpastling&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/fbchow" target="_blank" rel="noopener">@fbchow&lt;/a>,
&lt;a href="https://github.com/fusaroli" target="_blank" rel="noopener">@fusaroli&lt;/a>,
&lt;a href="https://github.com/gcameron89777" target="_blank" rel="noopener">@gcameron89777&lt;/a>,
&lt;a href="https://github.com/gregrs-uk" target="_blank" rel="noopener">@gregrs-uk&lt;/a>,
&lt;a href="https://github.com/gtalckmin" target="_blank" rel="noopener">@gtalckmin&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/hlynurhallgrims" target="_blank" rel="noopener">@hlynurhallgrims&lt;/a>,
&lt;a href="https://github.com/irkaal" target="_blank" rel="noopener">@irkaal&lt;/a>,
&lt;a href="https://github.com/issactoast" target="_blank" rel="noopener">@issactoast&lt;/a>,
&lt;a href="https://github.com/JamesM131" target="_blank" rel="noopener">@JamesM131&lt;/a>,
&lt;a href="https://github.com/johnaeanderson" target="_blank" rel="noopener">@johnaeanderson&lt;/a>,
&lt;a href="https://github.com/jonkeane" target="_blank" rel="noopener">@jonkeane&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/jyuu" target="_blank" rel="noopener">@jyuu&lt;/a>,
&lt;a href="https://github.com/krlmlr" target="_blank" rel="noopener">@krlmlr&lt;/a>,
&lt;a href="https://github.com/kylegilde" target="_blank" rel="noopener">@kylegilde&lt;/a>,
&lt;a href="https://github.com/mattwarkentin" target="_blank" rel="noopener">@mattwarkentin&lt;/a>,
&lt;a href="https://github.com/mdancho84" target="_blank" rel="noopener">@mdancho84&lt;/a>,
&lt;a href="https://github.com/msmith01" target="_blank" rel="noopener">@msmith01&lt;/a>,
&lt;a href="https://github.com/MxNl" target="_blank" rel="noopener">@MxNl&lt;/a>,
&lt;a href="https://github.com/NikolaiVogl" target="_blank" rel="noopener">@NikolaiVogl&lt;/a>,
&lt;a href="https://github.com/oude-gao" target="_blank" rel="noopener">@oude-gao&lt;/a>,
&lt;a href="https://github.com/PathosEthosLogos" target="_blank" rel="noopener">@PathosEthosLogos&lt;/a>,
&lt;a href="https://github.com/RMHogervorst" target="_blank" rel="noopener">@RMHogervorst&lt;/a>,
&lt;a href="https://github.com/sccmckenzie" target="_blank" rel="noopener">@sccmckenzie&lt;/a>,
&lt;a href="https://github.com/Shu-Wan" target="_blank" rel="noopener">@Shu-Wan&lt;/a>,
&lt;a href="https://github.com/skeller88" target="_blank" rel="noopener">@skeller88&lt;/a>,
&lt;a href="https://github.com/skinnider" target="_blank" rel="noopener">@skinnider&lt;/a>,
&lt;a href="https://github.com/sschooler" target="_blank" rel="noopener">@sschooler&lt;/a>,
&lt;a href="https://github.com/swt30" target="_blank" rel="noopener">@swt30&lt;/a>,
&lt;a href="https://github.com/tjmahr" target="_blank" rel="noopener">@tjmahr&lt;/a>,
&lt;a href="https://github.com/tmastny" target="_blank" rel="noopener">@tmastny&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>, and
&lt;a href="https://github.com/UnclAlDeveloper" target="_blank" rel="noopener">@UnclAlDeveloper&lt;/a>&lt;/li>
&lt;li>rules:
&lt;a href="https://github.com/frequena" target="_blank" rel="noopener">@frequena&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/irkaal" target="_blank" rel="noopener">@irkaal&lt;/a>,
&lt;a href="https://github.com/jaredlander" target="_blank" rel="noopener">@jaredlander&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>, and
&lt;a href="https://github.com/vidarsumo" target="_blank" rel="noopener">@vidarsumo&lt;/a>&lt;/li>
&lt;li>tune:
&lt;a href="https://github.com/DavisVaughan" target="_blank" rel="noopener">@DavisVaughan&lt;/a>,
&lt;a href="https://github.com/HenrikBengtsson" target="_blank" rel="noopener">@HenrikBengtsson&lt;/a>,
&lt;a href="https://github.com/hfrick" target="_blank" rel="noopener">@hfrick&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/kevin-m-kent" target="_blank" rel="noopener">@kevin-m-kent&lt;/a>,
&lt;a href="https://github.com/kylegilde" target="_blank" rel="noopener">@kylegilde&lt;/a>,
&lt;a href="https://github.com/mine-cetinkaya-rundel" target="_blank" rel="noopener">@mine-cetinkaya-rundel&lt;/a>,
&lt;a href="https://github.com/rorynolan" target="_blank" rel="noopener">@rorynolan&lt;/a>,
&lt;a href="https://github.com/siegfried" target="_blank" rel="noopener">@siegfried&lt;/a>,
&lt;a href="https://github.com/stevenpawley" target="_blank" rel="noopener">@stevenpawley&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Sparse data structures in tidymodels</title><link>https://www.tidyverse.org/blog/2020/11/tidymodels-sparse-support/</link><pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/11/tidymodels-sparse-support/</guid><description>&lt;p>The new release of
&lt;a href="https://www.tidyverse.org/blog/2020/11/tune-0-1-2/" target="_blank" rel="noopener">tune&lt;/a> is chock full of improvements and new features. This blog post is the second of three posts exploring the updates available in tune 0.1.2. When combined with the latest releases of
&lt;a href="http://hardhat.tidymodels.org/" target="_blank" rel="noopener">hardhat&lt;/a> and
&lt;a href="https://parsnip.tidymodels.org/" target="_blank" rel="noopener">parsnip&lt;/a>, one upgrade that tidymodels users can now use in their day-to-day modeling work is some &lt;strong>support for sparse data structures&lt;/strong> during fitting and tuning.&lt;/p>
&lt;h2 id="why-sparse-data">Why sparse data?
&lt;a href="#why-sparse-data">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>In some subject matter domains, it is common to have lots and lots of zeroes after transforming data to a representation appropriate for analysis or modeling. Text data is one such example. The &lt;code>small_fine_foods&lt;/code> dataset of Amazon reviews of fine foods contains a column &lt;code>review&lt;/code> that we as humans can read and understand.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidyverse&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidymodels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;small_fine_foods&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">training_data&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 4,000 x 3
## product review score
## &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;fct&amp;gt;
## 1 B000J0LSBG &amp;quot;this stuff is not stuffing its not good at all save your… other
## 2 B000EYLDYE &amp;quot;I absolutely LOVE this dried fruit. LOVE IT. Whenever I ha… great
## 3 B0026LIO9A &amp;quot;GREAT DEAL, CONVENIENT TOO. Much cheaper than WalMart and I… great
## 4 B00473P8SK &amp;quot;Great flavor, we go through a ton of this sauce! I discovere… great
## 5 B001SAWTNM &amp;quot;This is excellent salsa/hot sauce, but you can get it for $2… great
## 6 B000FAG90U &amp;quot;Again, this is the best dogfood out there. One suggestion: … great
## 7 B006BXTCEK &amp;quot;The box I received was filled with teas, hot chocolates, and… other
## 8 B002GWH5OY &amp;quot;This is delicious coffee which compares favorably with much … great
## 9 B003R0MFYY &amp;quot;Don't let these little tiny cans fool you. They pack a lot … great
## 10 B001EO5ZXI &amp;quot;One of the nicest, smoothest cup of chai I've made. Nice mix… great
## # … with 3,990 more rows
&lt;/code>&lt;/pre>&lt;p>Computers, on the other hand, need that &lt;code>review&lt;/code> variable to be heavily preprocessed and transformed in order for it to be ready for most modeling. We typically need to
&lt;a href="https://smltar.com/tokenization.html" target="_blank" rel="noopener">tokenize&lt;/a> the text, find word frequencies, and perhaps
&lt;a href="https://www.tidytextmining.com/tfidf.html" target="_blank" rel="noopener">compute tf-idf&lt;/a>. There are quite a number of different structures we can use to store the results of this preprocessing. We can keep the results in a long, tidy tibble, which is excellent for exploratory data analysis.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidytext&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">tidy_reviews&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">training_data&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">unnest_tokens&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">review&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">product&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">bind_tf_idf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">product&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">tidy_reviews&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 208,306 x 6
## product word n tf idf tf_idf
## &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 B0000691JF and 1 0.1 0.234 0.0234
## 2 B0000691JF i 1 0.1 0.262 0.0262
## 3 B0000691JF in 1 0.1 0.654 0.0654
## 4 B0000691JF just 1 0.1 1.54 0.154
## 5 B0000691JF manner 1 0.1 5.52 0.552
## 6 B0000691JF ordered 1 0.1 2.76 0.276
## 7 B0000691JF prompt 1 0.1 5.81 0.581
## 8 B0000691JF the 1 0.1 0.206 0.0206
## 9 B0000691JF usual 1 0.1 5.04 0.504
## 10 B0000691JF what 1 0.1 2.27 0.227
## # … with 208,296 more rows
&lt;/code>&lt;/pre>&lt;p>We can also transform these results to a wide format, often a good fit when the next step is a modeling or machine learning algorithm.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">wide_reviews&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">tidy_reviews&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">product&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tf_idf&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">pivot_wider&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">names_from&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">names_prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;word_&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">values_from&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf_idf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">values_fill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">wide_reviews&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 4,000 x 13,797
## product word_and word_i word_in word_just word_manner word_ordered word_prompt
## &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 B00006… 0.0234 0.0262 0.0654 0.154 0.552 0.276 0.581
## 2 B00008… 0.00780 0 0 0 0 0 0
## 3 B00008… 0.00177 0.00397 0.0198 0.0117 0 0 0
## 4 B00008… 0.00582 0.00489 0.00813 0 0 0 0
## 5 B00008… 0.00246 0.0166 0.0207 0.0162 0 0 0
## 6 B00008… 0.00334 0.00750 0.00935 0 0 0 0
## 7 B00008… 0.0114 0.00729 0.00909 0 0 0 0
## 8 B00008… 0.00768 0.0129 0 0 0 0 0
## 9 B00008… 0.00976 0 0 0 0 0 0
## 10 B00008… 0.0156 0 0 0 0 0 0
## 11 B00008… 0.00404 0.0181 0 0 0 0 0
## 12 B00008… 0.0142 0.00397 0 0 0 0 0
## 13 B00008… 0.0160 0.00596 0.0149 0.0351 0 0 0
## 14 B00009… 0.00439 0.00656 0.00818 0 0 0 0
## 15 B0000A… 0.00679 0.00380 0.0379 0 0 0.0401 0
## # … with 3,985 more rows, and 13,789 more variables: word_the &amp;lt;dbl&amp;gt;,
## # word_usual &amp;lt;dbl&amp;gt;, word_what &amp;lt;dbl&amp;gt;, word_a &amp;lt;dbl&amp;gt;, word_anymore &amp;lt;dbl&amp;gt;,
## # word_chocolate &amp;lt;dbl&amp;gt;, word_coat &amp;lt;dbl&amp;gt;, word_dogfood &amp;lt;dbl&amp;gt;, word_ears &amp;lt;dbl&amp;gt;,
## # word_fine &amp;lt;dbl&amp;gt;, word_for &amp;lt;dbl&amp;gt;, word_great &amp;lt;dbl&amp;gt;, word_hardly &amp;lt;dbl&amp;gt;,
## # word_he &amp;lt;dbl&amp;gt;, word_health &amp;lt;dbl&amp;gt;, word_his &amp;lt;dbl&amp;gt;, word_hot &amp;lt;dbl&amp;gt;,
## # word_is &amp;lt;dbl&amp;gt;, word_itching &amp;lt;dbl&amp;gt;, word_lab &amp;lt;dbl&amp;gt;, …
&lt;/code>&lt;/pre>&lt;p>Lots of zeroes! Instead of using a tibble, we can transform these results to a &lt;strong>sparse matrix&lt;/strong>, a specialized data structure that keeps track of only the non-zero elements instead of every element.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">sparse_reviews&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">tidy_reviews&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">cast_dfm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">product&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tf_idf&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sparse_reviews&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## Document-feature matrix of: 4,000 documents, 13,796 features (99.6% sparse).
&lt;/code>&lt;/pre>&lt;p>As is typical for text data, this document-feature matrix is extremely sparse, with many zeroes. Most documents do not contain most words. By using this kind of specialized structure instead of anything like a vanilla &lt;code>matrix&lt;/code> or &lt;code>data.frame&lt;/code>, we secure two benefits:&lt;/p>
&lt;ul>
&lt;li>We can taken advantage of the &lt;strong>speed&lt;/strong> gained from any specialized model algorithms built for sparse data.&lt;/li>
&lt;li>The amount of &lt;strong>memory&lt;/strong> this object requires decreases dramatically.&lt;/li>
&lt;/ul>
&lt;p>How big of a change in memory are we talking about?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">lobstr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">obj_sizes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wide_reviews&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sparse_reviews&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## * 443,539,792 B
## * 3,581,200 B
&lt;/code>&lt;/pre>
&lt;h2 id="a-blueprint-for-sparse-models">A blueprint for sparse models
&lt;a href="#a-blueprint-for-sparse-models">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Before the most recent releases of hardhat, parsnip, and tune, there was no support for sparse data structures within tidymodels. Now, you can specify a hardhat &lt;strong>blueprint&lt;/strong> for sparse data.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hardhat&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sparse_bp&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">default_recipe_blueprint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">composition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;dgCMatrix&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>dgCMatrix&lt;/code> composition is from the
&lt;a href="https://cran.r-project.org/package=Matrix" target="_blank" rel="noopener">Matrix&lt;/a> package, and is the most standard class for sparse numeric matrices in modeling in R. (You can also specify a dense matrix composition with &lt;code>composition = &amp;quot;matrix&amp;quot;&lt;/code>.)&lt;/p>
&lt;h2 id="workflows-and-sparsity">Workflows and sparsity
&lt;a href="#workflows-and-sparsity">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The blueprint is used under the hood by the hardhat functions to process data. To get ready to fit our model using the sparse blueprint, we can set up our preprocessing recipe:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">textrecipes&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">text_rec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">score&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">review&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">training_data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_tokenize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">review&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_stopwords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">review&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_tokenfilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">review&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">max_tokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1e3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_tfidf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">review&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And we set up our model as we would normally:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">lasso_spec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">logistic_reg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">penalty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0.02&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mixture&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;glmnet&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The regularized modeling of the glmnet package is an example of an algorithm that has specialized approaches for sparse data. If we pass in dense data with &lt;code>set_engine(&amp;quot;glmnet&amp;quot;)&lt;/code>, the underlying model will take one approach, but it will use a different, faster approach especially built for sparse data if we pass in a sparse matrix. Typically, we would recommend centering and scaling predictors using &lt;code>step_normalize()&lt;/code> before fitting a regularized model like glmnet. However, if we do this, we would no longer have all our zeroes and sparse data. Instead, we can &amp;ldquo;normalize&amp;rdquo; these text predictors using tf-idf so that they are all on the same scale.&lt;/p>
&lt;p>Let&amp;rsquo;s put together two workflows, one using the sparse blueprint and one using the default behavior.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">wf_sparse&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">workflow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">text_rec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">blueprint&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sparse_bp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_model&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lasso_spec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">wf_default&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">workflow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">text_rec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_model&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lasso_spec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="comparing-model-results">Comparing model results
&lt;a href="#comparing-model-results">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Now let&amp;rsquo;s use &lt;code>fit_resamples()&lt;/code> to estimate how well this model fits with both options and measure performance for both.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">123&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">food_folds&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">vfold_cv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">training_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">results&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">bench&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">mark&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">iterations&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">check&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">sparse&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fit_resamples&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wf_sparse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">food_folds&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">default&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fit_resamples&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wf_default&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">food_folds&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">results&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 2 x 6
## expression min median `itr/sec` mem_alloc `gc/sec`
## &amp;lt;bch:expr&amp;gt; &amp;lt;bch:tm&amp;gt; &amp;lt;bch:tm&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;bch:byt&amp;gt; &amp;lt;dbl&amp;gt;
## 1 sparse 7.78s 7.87s 0.127 788MB 0.127
## 2 default 1.19m 1.2m 0.0139 870MB 0.0139
&lt;/code>&lt;/pre>&lt;p>We see on the order of a 10x speed gain by using the sparse blueprint!&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">autoplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">results&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;ridge&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="figure/unnamed-chunk-11-1.png" alt="plot of chunk unnamed-chunk-11">&lt;/p>
&lt;p>The model performance metrics are the same:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">fit_resamples&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wf_sparse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">food_folds&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">collect_metrics&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 2 x 5
## .metric .estimator mean n std_err
## &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
## 1 accuracy binary 0.715 3 0.00399
## 2 roc_auc binary 0.797 3 0.00598
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">fit_resamples&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wf_default&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">food_folds&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">collect_metrics&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 2 x 5
## .metric .estimator mean n std_err
## &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
## 1 accuracy binary 0.715 3 0.00399
## 2 roc_auc binary 0.797 3 0.00598
&lt;/code>&lt;/pre>&lt;p>To see a detailed text modeling example using this dataset of food reviews, &lt;em>without&lt;/em> sparse encodings but complete with tuning hyperparameters, check out
&lt;a href="https://www.tidymodels.org/learn/work/tune-text/" target="_blank" rel="noopener">our article on &lt;code>tidymodels.org&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="current-limits">Current limits
&lt;a href="#current-limits">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>In tidymodels, the support for sparse data structures begins coming &lt;em>out&lt;/em> of a
&lt;a href="https://www.tmwr.org/recipes.html" target="_blank" rel="noopener">preprocessing recipe&lt;/a> and continues throughout the fitting and tuning process. We typically still expect the input &lt;em>into&lt;/em> a recipe to be a data frame, as shown in this text analysis example, and there is very limited support within tidymodels for starting with a sparse matrix, for example by using &lt;code>parsnip::fit_xy()&lt;/code>.&lt;/p>
&lt;p>There are currently three models in parsnip that support a sparse data encoding:&lt;/p>
&lt;ul>
&lt;li>the glmnet engine for linear and logistic regression (including multinomial regression),&lt;/li>
&lt;li>the XGBoost engine for boosted trees, and&lt;/li>
&lt;li>the ranger engine for random forests.&lt;/li>
&lt;/ul>
&lt;p>There is heterogeneity in how recipes themselves handle data internally; this is why we didn&amp;rsquo;t see a huge decrease in memory use when comparing &lt;code>wf_sparse&lt;/code> to &lt;code>wf_default&lt;/code>. The
&lt;a href="https://textrecipes.tidymodels.org/" target="_blank" rel="noopener">textrecipes&lt;/a> package internally adopts the idea of a
&lt;a href="https://textrecipes.tidymodels.org/reference/tokenlist.html" target="_blank" rel="noopener">tokenlist&lt;/a>, which is memory efficient for sparse data, but other recipe steps may handle data in a dense tibble structure. Keep these current limits in mind as you consider the memory requirements of your modeling projects!&lt;/p></description></item><item><title>usemodels 0.0.1</title><link>https://www.tidyverse.org/blog/2020/09/usemodels-0-0-1/</link><pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/09/usemodels-0-0-1/</guid><description>&lt;p>We&amp;rsquo;re very excited to announce the first release of the
&lt;a href="https://usemodels.tidymodels.org/" target="_blank" rel="noopener">usemodels&lt;/a> package. The tidymodels packages are designed to provide modeling functions that are highly flexible and modular. This is powerful, but sometimes a template or skeleton showing how to start is helpful. The usemodels package creates templates for tidymodels analyses so you don&amp;rsquo;t have to write as much new code.&lt;/p>
&lt;p>You can install it from CRAN with:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;usemodels&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This blog post will show how to use the package.&lt;/p>
&lt;p>Let&amp;rsquo;s start by creating a glmnet linear regression model for the &lt;code>mtcars&lt;/code> data using tidymodels. This model is usually tuned over the amount and type of regularization. In tidymodels, there are a few intermediate steps for a glmnet model:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Create a
&lt;a href="https://www.tmwr.org/models.html" target="_blank" rel="noopener">parsnip model object&lt;/a> and define the tuning parameters that we want to optimize.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://www.tmwr.org/recipes.html" target="_blank" rel="noopener">Create a recipe&lt;/a> that, at minimum, centers and scales the predictors. For some data sets, we also need to create dummy variables from any factor-encoded predictor columns.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Define a
&lt;a href="https://www.tmwr.org/resampling.html" target="_blank" rel="noopener">resampling scheme&lt;/a> for our data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Choose a function from the
&lt;a href="https://tune.tidymodels.org/" target="_blank" rel="noopener">tune package&lt;/a>, such as &lt;code>tune_grid()&lt;/code>, to optimize the parameters. For grid search, we&amp;rsquo;ll also need a grid of candidate parameter values (or let the function choose one for us).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>We recognize that this might be more code than you would have had to write compared to a package like caret. However, the tidymodels ecosystem enables a wider variety of modeling techniques and is more versatile.&lt;/p>
&lt;p>The new usemodels package can automatically generate much of this code infrastructure. For example:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">usemodels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">use_glmnet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>which produces the terminal output:&lt;/p>
&lt;pre>&lt;code>glmnet_recipe &amp;lt;-
recipe(formula = mpg ~ ., data = mtcars) %&amp;gt;%
step_zv(all_predictors()) %&amp;gt;%
step_normalize(all_predictors(), -all_nominal())
glmnet_spec &amp;lt;-
linear_reg(penalty = tune(), mixture = tune()) %&amp;gt;%
set_mode(&amp;quot;regression&amp;quot;) %&amp;gt;%
set_engine(&amp;quot;glmnet&amp;quot;)
glmnet_workflow &amp;lt;-
workflow() %&amp;gt;%
add_recipe(glmnet_recipe) %&amp;gt;%
add_model(glmnet_spec)
glmnet_grid &amp;lt;- tidyr::crossing(penalty = 10^seq(-6, -1, length.out = 20), mixture = c(0.05,
0.2, 0.4, 0.6, 0.8, 1))
glmnet_tune &amp;lt;-
tune_grid(glmnet_workflow, resamples = stop(&amp;quot;add your rsample object&amp;quot;), grid = glmnet_grid)
&lt;/code>&lt;/pre>&lt;p>This can be copied to the source window and edited. Some notes:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>For this model, it is possible to prescribe a default grid of candidate tuning parameter values that work well about 90% of the time. For other models, the grid might be data-driven. In these cases, the tune package functions can estimate an appropriate grid.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The extra recipes steps are the
&lt;a href="https://www.tmwr.org/pre-proc-table.html" target="_blank" rel="noopener">recommend preprocessing&lt;/a> for this model. Since this varies from model-to-model, the recipe template will contain the minimal required steps. Your data might require additional operations.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>One thing that &lt;em>should not be automated&lt;/em> is the choice of resampling method. The code templates require the user to choose the rsample function that is appropriate.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>In case you are unfamiliar with the model and its preprocessing needs, a &lt;code>verbose&lt;/code> option prints comments that explain &lt;em>why&lt;/em> some steps are included. For the glmnet model, the comments added to the recipe state:&lt;/p>
&lt;blockquote>
&lt;p>Regularization methods sum up functions of the model slope coefficients. Because of this, the predictor variables should be on the same scale. Before centering and scaling the numeric predictors, any predictors with a single unique value are filtered out.&lt;/p>
&lt;/blockquote>
&lt;p>Let&amp;rsquo;s look at another example. The &lt;code>ad_data&lt;/code> data set in the modeldata package has rows for 333 patients with a factor outcome for their level of cognitive impairment (e.g., Alzheimer&amp;rsquo;s disease). There is also a categorical predictor in the data, the Apolipoprotein E genotype, which has six levels. Let&amp;rsquo;s suppose the &lt;code>Genotype&lt;/code> column was encoded as character (instead of being a factor). This might be a problem if the resampling method samples out a level from the data used to fit the model.&lt;/p>
&lt;p>Let&amp;rsquo;s use a boosted tree model with the xgboost package and change the default prefix for the objects:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidymodels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ad_data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">ad_data&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">Genotype&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">as.character&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ad_data&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">Genotype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">use_xgboost&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ad_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;impairment&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>impairment_recipe &amp;lt;-
recipe(formula = Class ~ ., data = ad_data) %&amp;gt;%
step_string2factor(one_of(Genotype)) %&amp;gt;%
step_novel(all_nominal(), -all_outcomes()) %&amp;gt;%
step_dummy(all_nominal(), -all_outcomes(), one_hot = TRUE) %&amp;gt;%
step_zv(all_predictors())
impairment_spec &amp;lt;-
boost_tree(trees = tune(), min_n = tune(), tree_depth = tune(), learn_rate = tune(),
loss_reduction = tune(), sample_size = tune()) %&amp;gt;%
set_mode(&amp;quot;classification&amp;quot;) %&amp;gt;%
set_engine(&amp;quot;xgboost&amp;quot;)
impairment_workflow &amp;lt;-
workflow() %&amp;gt;%
add_recipe(impairment_recipe) %&amp;gt;%
add_model(impairment_spec)
set.seed(64393)
impairment_tune &amp;lt;-
tune_grid(impairment_workflow, resamples = stop(&amp;quot;add your rsample object&amp;quot;),
grid = stop(&amp;quot;add number of candidate points&amp;quot;))
&lt;/code>&lt;/pre>&lt;p>Notice that the line&lt;/p>
&lt;pre>&lt;code>step_string2factor(one_of(Genotype))
&lt;/code>&lt;/pre>&lt;p>is included in the recipe along with a step to generate one-hot encoded dummy variables. xgboost is one of the few tree ensemble implementations that requires the user to create dummy variables. This step is only added to the template when it is required for that model.&lt;/p>
&lt;p>Also, for this particular model, we recommend using a
&lt;a href="https://scholar.google.com/scholar?hl=en&amp;amp;as_sdt=0%2C7&amp;amp;q=space&amp;#43;filling&amp;#43;design&amp;#43;of&amp;#43;experiments" target="_blank" rel="noopener">space-filling design&lt;/a> for the grid, but the user must choose the number of grid points.&lt;/p>
&lt;p>The current set of templates included in the inaugural version of the package are:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">ls&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;package:usemodels&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pattern&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;^use_&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## [1] &amp;quot;use_earth&amp;quot; &amp;quot;use_glmnet&amp;quot; &amp;quot;use_kknn&amp;quot; &amp;quot;use_ranger&amp;quot; &amp;quot;use_xgboost&amp;quot;
&lt;/code>&lt;/pre>&lt;p>We&amp;rsquo;ll likely add more but please file
&lt;a href="https://github.com/tidymodels/usemodels/issues" target="_blank" rel="noopener">an issue&lt;/a> if there are any that you see as a priority.&lt;/p></description></item><item><title>parsnip 0.1.2</title><link>https://www.tidyverse.org/blog/2020/07/parsnip-0-1-2/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/07/parsnip-0-1-2/</guid><description>&lt;p>We&amp;rsquo;re happy to announce the release of
&lt;a href="https://parsnip.tidymodels.org/" target="_blank" rel="noopener">parsnip&lt;/a> 0.1.2. parsnip is a unified tidy interface to many modeling techniques.&lt;/p>
&lt;p>You can install it from CRAN with:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;parsnip&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can see a full list of changes in the
&lt;a href="https://parsnip.tidymodels.org/news/index.html" target="_blank" rel="noopener">release notes&lt;/a>. I&amp;rsquo;ll highlight the big changes here. The primary improvement is related to the brand new versions of the
&lt;a href="https://hardhat.tidymodels.org/news/index.html" target="_blank" rel="noopener">hardhat&lt;/a> and
&lt;a href="https://workflows.tidymodels.org/news/index.html" target="_blank" rel="noopener">workflows&lt;/a> packages.&lt;/p>
&lt;h2 id="predictor-encoding-consistency">Predictor encoding consistency
&lt;a href="#predictor-encoding-consistency">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Normally, when you give a formula to an R modeling function, the standard &lt;code>model.matrix()&lt;/code> machinery converts factor predictors to a set of binary indicator columns. However, there are a few notable exceptions:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Tree-based models, such as CART, C5.0, and random forests, don&amp;rsquo;t require binary indicator variables since their splitting methods can create groups of categories. When using a tree-based model function like &lt;code>ranger::ranger()&lt;/code>, the formula does &lt;em>not&lt;/em> create indicators; the factor predictors are left as factors.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Naive Bayes models would rather have the predictors in their native format as well, so that the predictors&amp;rsquo; conditional distributions are estimated using discrete probability distributions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Multi-level models, such as mixed models or Bayesian hierarchical models, would prefer that the columns that are associated with random effects (e.g. subject) remain factors.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>When &lt;code>parsnip::fit()&lt;/code> is used with a modeling function that takes a formula, the formula is directly passed to the underlying model function (without processing the data). The resulting model is the same as what the underlying model would have produced. For example:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># Using older versions of: &lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parsnip&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ranger&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modeldata&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">penguins&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">penguins&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">na.omit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">penguins&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">rf_spec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">rand_forest&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ranger&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">seed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1221&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_mode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;regression&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">rf_spec&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">body_mass_g&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">species&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">island&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">penguins&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## parsnip model object
##
## Fit time: 24ms
## Ranger result
##
## Call:
## ranger::ranger(formula = formula, data = data, seed = ~1221, num.threads = 1, verbose = FALSE)
##
## Type: Regression
## Number of trees: 500
## Sample size: 333
## Number of independent variables: 2
## Mtry: 1
## Target node size: 5
## Variable importance mode: none
## Splitrule: variance
## OOB prediction error (MSE): 224771.2
## R squared (OOB): 0.6533301
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">ranger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">body_mass_g&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">species&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">island&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">penguins&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">seed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1221&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## Ranger result
##
## Call:
## ranger(body_mass_g ~ species + island, data = penguins, seed = 1221)
##
## Type: Regression
## Number of trees: 500
## Sample size: 333
## Number of independent variables: 2
## Mtry: 1
## Target node size: 5
## Variable importance mode: none
## Splitrule: variance
## OOB prediction error (MSE): 224771.2
## R squared (OOB): 0.6533301
&lt;/code>&lt;/pre>&lt;p>(Note the &lt;code>Number of independent variables: 2&lt;/code>).&lt;/p>
&lt;p>However, the workflows package &lt;em>does&lt;/em> process the data before giving it to the modeling function. In this case using the previous version of these packages, indicators were produced when a formula was used. As a result, instead of two predictor columns, the &lt;code>species&lt;/code> variable was expanded and five predictor columns are given to the model:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">workflows&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hardhat&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">rf_wflow&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">workflow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_model&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rf_spec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">add_formula&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">body_mass_g&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">species&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">island&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">rf_wflow&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">penguins&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## ══ Workflow [trained] ══════════════════════════════════════════════════════════════════════
## Preprocessor: Formula
## Model: rand_forest()
##
## ── Preprocessor ────────────────────────────────────────────────────────────────────────────
## body_mass_g ~ species + island
##
## ── Model ───────────────────────────────────────────────────────────────────────────────────
## Ranger result
##
## Call:
## ranger::ranger(formula = formula, data = data, seed = ~1221, num.threads = 1, verbose = FALSE)
##
## Type: Regression
## Number of trees: 500
## Sample size: 333
## Number of independent variables: 5
## Mtry: 2
## Target node size: 5
## Variable importance mode: none
## Splitrule: variance
## OOB prediction error (MSE): 215619.5
## R squared (OOB): 0.6674451
&lt;/code>&lt;/pre>&lt;p>Not only was the inconsistency of these two interfaces (parsnip vs. workflows) a problem, but ranger is very persnickety about column names and some indicator columns would result in errors (see, for example,
&lt;a href="https://github.com/tidymodels/tune/issues/151" target="_blank" rel="noopener">this issue&lt;/a>).&lt;/p>
&lt;p>The new set of hardhat/workflows/parsnip versions now fixes this behavior. In parsnip, each model/engine combination has a recommended set of predictor encoding methods attached to them (including a &amp;ldquo;leave my data alone&amp;rdquo; option). These are designed to be consistent with what the underlying model function expects so that there are no inconsistencies.&lt;/p>
&lt;p>You can override these new default encoding methods by using a recipe (instead of a formula) or by using a hardhat &lt;code>blueprint&lt;/code>.&lt;/p>
&lt;h2 id="one-hot-encodings">One-hot encodings
&lt;a href="#one-hot-encodings">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>A full one-hot-encoding method is now available via parsnip using a contrast function. This would generate the full set of indicators for &lt;em>each factor predictor&lt;/em>. Using &lt;code>model.matrix(~ 0 + factor, data)&lt;/code> &lt;em>kind of&lt;/em> does this, but only for the first factor:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidymodels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">unique_levels&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">penguins&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">species&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">island&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">distinct&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nf">levels&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unique_levels&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">species&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## [1] &amp;quot;Adelie&amp;quot; &amp;quot;Chinstrap&amp;quot; &amp;quot;Gentoo&amp;quot;
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">levels&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unique_levels&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">island&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## [1] &amp;quot;Biscoe&amp;quot; &amp;quot;Dream&amp;quot; &amp;quot;Torgersen&amp;quot;
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">model.matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">~&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">species&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">island&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unique_levels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## speciesAdelie speciesChinstrap speciesGentoo islandDream islandTorgersen
## 1 1 0 0 0 1
## 2 1 0 0 0 0
## 3 1 0 0 1 0
## 4 0 0 1 0 0
## 5 0 1 0 1 0
## attr(,&amp;quot;assign&amp;quot;)
## [1] 1 1 1 2 2
## attr(,&amp;quot;contrasts&amp;quot;)
## attr(,&amp;quot;contrasts&amp;quot;)$species
## [1] &amp;quot;contr.treatment&amp;quot;
##
## attr(,&amp;quot;contrasts&amp;quot;)$island
## [1] &amp;quot;contr.treatment&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Notice that there are three indicators for &lt;code>species&lt;/code> but two for &lt;code>island&lt;/code>.&lt;/p>
&lt;p>parsnip now has a contrast function that produces the whole set:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">old_contr&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;contrasts&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">contrasts&lt;/span>
&lt;span class="n">new_contr&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">old_contr&lt;/span>
&lt;span class="n">new_contr[&lt;/span>&lt;span class="s">&amp;#34;unordered&amp;#34;&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="s">&amp;#34;contr_one_hot&amp;#34;&lt;/span>
&lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">contrasts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_contr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">model.matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">~&lt;/span> &lt;span class="n">species&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">island&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unique_levels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## (Intercept) speciesAdelie speciesChinstrap speciesGentoo islandBiscoe
## 1 1 1 0 0 0
## 2 1 1 0 0 1
## 3 1 1 0 0 0
## 4 1 0 0 1 1
## 5 1 0 1 0 0
## islandDream islandTorgersen
## 1 0 1
## 2 0 0
## 3 1 0
## 4 0 0
## 5 1 0
## attr(,&amp;quot;assign&amp;quot;)
## [1] 0 1 1 1 2 2 2
## attr(,&amp;quot;contrasts&amp;quot;)
## attr(,&amp;quot;contrasts&amp;quot;)$species
## [1] &amp;quot;contr_one_hot&amp;quot;
##
## attr(,&amp;quot;contrasts&amp;quot;)$island
## [1] &amp;quot;contr_one_hot&amp;quot;
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># return to original options&lt;/span>
&lt;span class="nf">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">contrasts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_contr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, removing the intercept does not change the nature of the indicator columns.&lt;/p>
&lt;h2 id="better-call-objects">Better call objects
&lt;a href="#better-call-objects">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>In the output above when the the ranger model was fit via parsnip, the model formula in the ranger object what not the same as what we gave to &lt;code>parsnip::fit()&lt;/code>:&lt;/p>
&lt;pre>&lt;code>## parsnip model object
##
## Fit time: 24ms
## Ranger result
##
## Call:
## ranger::ranger(formula = formula, data = data, seed = ~1221, num.threads = 1, verbose = FALSE)
&lt;/code>&lt;/pre>&lt;p>In the new version of parsnip, if you use &lt;code>parsnip::fit()&lt;/code> and the underlying model uses a formula, the formula is preserved. Here&amp;rsquo;s an example using CART trees:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">cart_spec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">decision_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rpart&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_mode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;regression&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cart_fit&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">cart_spec&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">body_mass_g&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">species&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">island&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">penguins&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cart_fit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## parsnip model object
##
## Fit time: 2ms
## n=342 (2 observations deleted due to missingness)
##
## node), split, n, deviance, yval
## * denotes terminal node
##
## 1) root 342 219307700 4201.754
## 2) species=Adelie,Chinstrap 219 41488530 3710.731 *
## 3) species=Gentoo 123 31004250 5076.016 *
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">cart_fit&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">fit&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">call&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## rpart::rpart(formula = body_mass_g ~ species + island, data = data)
&lt;/code>&lt;/pre>&lt;p>The call still uses &lt;code>data&lt;/code> instead of &lt;code>penguins&lt;/code>. To get the right &lt;code>data&lt;/code> name, there is a &lt;code>repair_call()&lt;/code> function that can be used to get the exact data set name:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">cart_fit&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">repair_call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cart_fit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">penguins&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cart_fit&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">fit&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">call&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## rpart::rpart(formula = body_mass_g ~ species + island, data = penguins)
&lt;/code>&lt;/pre>&lt;p>There are some R packages that use the object&amp;rsquo;s formula in other functions. For example, the new
&lt;a href="https://github.com/martin-borkovec/ggparty" target="_blank" rel="noopener">&lt;code>ggparty&lt;/code>&lt;/a> package has some pretty cool methods for plotting tree-based models. To use them, the model must be converted into a &lt;code>party&lt;/code> object and this requires a proper call object. Now that we have one, we can do the conversion from an &lt;code>rpart&lt;/code> object to a &lt;code>party&lt;/code> object:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">partykit&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cart_party&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">as.party&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cart_fit&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">fit&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cart_party&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>##
## Model formula:
## body_mass_g ~ species + island
##
## Fitted party:
## [1] root
## | [2] species in Adelie, Chinstrap: 3710.731 (n = 219, err = 41488533.1)
## | [3] species in Gentoo: 5076.016 (n = 123, err = 31004248.0)
##
## Number of inner nodes: 1
## Number of terminal nodes: 2
&lt;/code>&lt;/pre>&lt;p>This can be used with &lt;code>ggparty&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ggparty&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">ggparty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cart_party&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">geom_edge&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">geom_edge_label&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">geom_node_splitvar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="nf">geom_node_plot&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">gglist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">geom_histogram&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">body_mass_g&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">bins&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">15&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">col&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;white&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="figure/ggparty-1.svg" title="plot of chunk ggparty" alt="plot of chunk ggparty" width="60%" style="display: block; margin: auto;" />&lt;/p>
&lt;h2 id="other-new-features">Other new features
&lt;a href="#other-new-features">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>A new main argument was added to
&lt;a href="https://parsnip.tidymodels.org/reference/boost_tree.html" target="_blank" rel="noopener">&lt;code>boost_tree()&lt;/code>&lt;/a> called &lt;code>stop_iter&lt;/code> for early stopping. The &lt;code>xgb_train()&lt;/code> function gained arguments for early stopping and a percentage of data to leave out for a validation set.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>predict()&lt;/code> method for &lt;code>model_fit&lt;/code>s now checks to see if required modeling packages are installed. The packages are loaded (but not attached).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The function &lt;code>req_pkgs()&lt;/code> is a user interface to determining the required packages.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Many thanks to Julia Silge and Davis Vaughan for their patience and insights when discussing strategies for predictor encodings.&lt;/p>
&lt;p>Also, we want to thank everyone who contributed changes or issues since the last release:
&lt;a href="https://github.com/cgoo4" target="_blank" rel="noopener">@cgoo4&lt;/a>,
&lt;a href="https://github.com/Deleetdk" target="_blank" rel="noopener">@Deleetdk&lt;/a>,
&lt;a href="https://github.com/EllaKaye" target="_blank" rel="noopener">@EllaKaye&lt;/a>,
&lt;a href="https://github.com/EmilHvitfeldt" target="_blank" rel="noopener">@EmilHvitfeldt&lt;/a>,
&lt;a href="https://github.com/enixam" target="_blank" rel="noopener">@enixam&lt;/a>,
&lt;a href="https://github.com/FranciscoPalomares" target="_blank" rel="noopener">@FranciscoPalomares&lt;/a>,
&lt;a href="https://github.com/FrieseWoudloper" target="_blank" rel="noopener">@FrieseWoudloper&lt;/a>,
&lt;a href="https://github.com/hadley" target="_blank" rel="noopener">@hadley&lt;/a>,
&lt;a href="https://github.com/jtelleriar" target="_blank" rel="noopener">@jtelleriar&lt;/a>,
&lt;a href="https://github.com/kylegilde" target="_blank" rel="noopener">@kylegilde&lt;/a>,
&lt;a href="https://github.com/markbneal" target="_blank" rel="noopener">@markbneal&lt;/a>,
&lt;a href="https://github.com/markhwhiteii" target="_blank" rel="noopener">@markhwhiteii&lt;/a>,
&lt;a href="https://github.com/mdancho84" target="_blank" rel="noopener">@mdancho84&lt;/a>,
&lt;a href="https://github.com/oude-gao" target="_blank" rel="noopener">@oude-gao&lt;/a>,
&lt;a href="https://github.com/ouzor" target="_blank" rel="noopener">@ouzor&lt;/a>,
&lt;a href="https://github.com/RichardPilbery" target="_blank" rel="noopener">@RichardPilbery&lt;/a>,
&lt;a href="https://github.com/rorynolan" target="_blank" rel="noopener">@rorynolan&lt;/a>,
&lt;a href="https://github.com/simonpcouch" target="_blank" rel="noopener">@simonpcouch&lt;/a>,
&lt;a href="https://github.com/StefanBRas" target="_blank" rel="noopener">@StefanBRas&lt;/a>,
&lt;a href="https://github.com/stevenpawley" target="_blank" rel="noopener">@stevenpawley&lt;/a>,
&lt;a href="https://github.com/ThomasWolf0701" target="_blank" rel="noopener">@ThomasWolf0701&lt;/a>, and
&lt;a href="https://github.com/UnclAlDeveloper" target="_blank" rel="noopener">@UnclAlDeveloper&lt;/a>.&lt;/p></description></item><item><title>New parsnip-adjacent packages</title><link>https://www.tidyverse.org/blog/2020/04/parsnip-adjacent/</link><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/04/parsnip-adjacent/</guid><description>&lt;p>We&amp;rsquo;re delighted to announce the release of three new tidymodels packages. These are &amp;ldquo;parsnip-adjacent&amp;rdquo; packages that add new models to the tidymodels framework.&lt;/p>
&lt;h2 id="baguette">baguette
&lt;a href="#baguette">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>This package contains basic functions and parsnip wrappers for bagging (aka
&lt;a href="https://scholar.google.com/scholar?hl=en&amp;amp;as_sdt=0%2C7&amp;amp;q=bagging&amp;#43;predictors&amp;#43;breiman&amp;#43;1996&amp;amp;oq=Bagging&amp;#43;predictors&amp;#43;" target="_blank" rel="noopener">bootstrap aggregating&lt;/a>) ensemble models. Right now, there are parsnip wrappers called &lt;code>bag_tree()&lt;/code> and &lt;code>bag_mars()&lt;/code> although more are planned, especially for rule-based models.&lt;/p>
&lt;p>One nice feature of this package is that the resulting model objects are smaller than they would normally be. Two separate operations are used to do this:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The butcher package is used to remove object elements that are not crucial to using the models. For example, some models contain copies of the training set or model residuals when created. These are removed so that space is saved.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For ensembles whose base models use a formula method, there is is a built-in redundancy because each model has an identical &lt;code>terms&lt;/code> object. However, each one of these takes up separate space in memory and can be quite large when there are many predictors. baguette fixes this by replacing each &lt;code>terms&lt;/code> object with the object from the &lt;em>first&lt;/em> model in the ensemble. Since the other &lt;code>terms&lt;/code> objects are not modified, we get the same functional capabilities using far less memory to save the ensemble. A similar trick is used for the resampling method sin &lt;code>modelr&lt;/code> and &lt;code>rsample&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The models also return aggregated variable importance scores.&lt;/p>
&lt;p>Here&amp;rsquo;s an example:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidymodels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">baguette&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rpart&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># C5.0 is also available here. &lt;/span>
&lt;span class="c1">#&amp;gt; Bagged Decision Tree Model Specification (unknown)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Main Arguments:&lt;/span>
&lt;span class="c1">#&amp;gt; cost_complexity = 0&lt;/span>
&lt;span class="c1">#&amp;gt; min_n = 2&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Computational engine: rpart&lt;/span>
&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5128&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">bag_cars&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">bag_tree&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rpart&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">25&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="c1"># 25 ensemble members &lt;/span>
&lt;span class="nf">set_mode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;regression&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mtcars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">bag_cars&lt;/span>
&lt;span class="c1">#&amp;gt; parsnip model object&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Fit time: 4.6s &lt;/span>
&lt;span class="c1">#&amp;gt; Bagged CART (regression with 25 members)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Variable importance scores include:&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 10 x 4&lt;/span>
&lt;span class="c1">#&amp;gt; term value std.error used&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 disp 966. 56.7 25&lt;/span>
&lt;span class="c1">#&amp;gt; 2 wt 951. 59.4 25&lt;/span>
&lt;span class="c1">#&amp;gt; 3 hp 810. 53.9 25&lt;/span>
&lt;span class="c1">#&amp;gt; 4 cyl 567. 53.9 25&lt;/span>
&lt;span class="c1">#&amp;gt; 5 drat 558. 57.5 25&lt;/span>
&lt;span class="c1">#&amp;gt; 6 qsec 214. 28.4 25&lt;/span>
&lt;span class="c1">#&amp;gt; 7 am 133. 41.1 23&lt;/span>
&lt;span class="c1">#&amp;gt; 8 carb 126. 37.7 25&lt;/span>
&lt;span class="c1">#&amp;gt; 9 vs 108. 41.2 24&lt;/span>
&lt;span class="c1">#&amp;gt; 10 gear 38.9 16.5 19&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="poissonreg">poissonreg
&lt;a href="#poissonreg">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>The parsnip package has methods for linear, logistic, and multinomial models. poissonreg extends this to data where the outcome is a count. There are engines for &lt;code>glm&lt;/code>, &lt;code>rstanarm&lt;/code>, &lt;code>glmnet&lt;/code>, &lt;code>hurdle&lt;/code>, and &lt;code>zeroinfl&lt;/code>. The latter two enable zero-inflated Poisson models from the
&lt;a href="https://github.com/atahk/pscl" target="_blank" rel="noopener">pscl&lt;/a> package.&lt;/p>
&lt;p>Here is an example using a log-linear model for analyzing a three dimensional contingency table using the data from Agresti (2007, Table 7.6):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">poissonreg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">log_lin_mod&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">poisson_reg&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;glm&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">.)^2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">seniors&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">log_lin_mod&lt;/span>
&lt;span class="c1">#&amp;gt; parsnip model object&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Fit time: 4ms &lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Call: stats::glm(formula = formula, family = stats::poisson, data = data)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Coefficients:&lt;/span>
&lt;span class="c1">#&amp;gt; (Intercept) marijuanayes &lt;/span>
&lt;span class="c1">#&amp;gt; 5.6334 -5.3090 &lt;/span>
&lt;span class="c1">#&amp;gt; cigaretteyes alcoholyes &lt;/span>
&lt;span class="c1">#&amp;gt; -1.8867 0.4877 &lt;/span>
&lt;span class="c1">#&amp;gt; marijuanayes:cigaretteyes marijuanayes:alcoholyes &lt;/span>
&lt;span class="c1">#&amp;gt; 2.8479 2.9860 &lt;/span>
&lt;span class="c1">#&amp;gt; cigaretteyes:alcoholyes &lt;/span>
&lt;span class="c1">#&amp;gt; 2.0545 &lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Degrees of Freedom: 7 Total (i.e. Null); 1 Residual&lt;/span>
&lt;span class="c1">#&amp;gt; Null Deviance: 2851 &lt;/span>
&lt;span class="c1">#&amp;gt; Residual Deviance: 0.374 AIC: 63.42&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>One interesting thing about the zero-inflated Poisson models is that there can be different predictors for the usual linear predictor as well as others for the probability of a zero count (see
&lt;a href="https://www.jstatsoft.org/article/view/v027i08/" target="_blank" rel="noopener">Zeileis &lt;em>et al&lt;/em> (2008)&lt;/a> for more details). For example:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;bioChemists&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;pscl&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">poisson_reg&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hurdle&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="c1"># Extended formula:&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">art&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">. &lt;/span>&lt;span class="o">|&lt;/span> &lt;span class="n">phd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bioChemists&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#&amp;gt; parsnip model object&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Fit time: 22ms &lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Call:&lt;/span>
&lt;span class="c1">#&amp;gt; pscl::hurdle(formula = formula, data = data)&lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Count model coefficients (truncated poisson with log link):&lt;/span>
&lt;span class="c1">#&amp;gt; (Intercept) femWomen marMarried kid5 phd ment &lt;/span>
&lt;span class="c1">#&amp;gt; 0.67114 -0.22858 0.09648 -0.14219 -0.01273 0.01875 &lt;/span>
&lt;span class="c1">#&amp;gt; &lt;/span>
&lt;span class="c1">#&amp;gt; Zero hurdle model coefficients (binomial with logit link):&lt;/span>
&lt;span class="c1">#&amp;gt; (Intercept) phd &lt;/span>
&lt;span class="c1">#&amp;gt; 0.3075 0.1750&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="plsmod">plsmod
&lt;a href="#plsmod">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>This package has parsnip methods for Partial Least Squares (PLS) regression and classification models based on the work in the Bioconductor
&lt;a href="https://bioconductor.org/packages/release/bioc/html/mixOmics.html" target="_blank" rel="noopener">mixOmics&lt;/a> package. This package facilitates ordinary PLS models as well as sparse versions. Additionally, it can also be used for multivariate models.&lt;/p>
&lt;p>Let&amp;rsquo;s take the &lt;code>meats&lt;/code> data from the modeldata package. Spectroscopy was used to estimate the percentage of protein, fat, and water from different meats. The predictors are a set of 100 highly correlated spectra values that would come from an instrument. The model can be used to estimate the three percentages simultaneously:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">plsmod&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">meats&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;modeldata&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">pls_fit&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">pls&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_comp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_terms&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">20&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;mixOmics&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_mode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;regression&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit_xy&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">meats&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">protein&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">fat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">water&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">meats&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">protein&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">water&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nf">predict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pls_fit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">meats&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">protein&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">fat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">water&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">#&amp;gt; # A tibble: 5 x 3&lt;/span>
&lt;span class="c1">#&amp;gt; .pred_protein .pred_fat .pred_water&lt;/span>
&lt;span class="c1">#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span>
&lt;span class="c1">#&amp;gt; 1 16.5 19.3 62.7&lt;/span>
&lt;span class="c1">#&amp;gt; 2 14.5 36.7 48.4&lt;/span>
&lt;span class="c1">#&amp;gt; 3 20.2 10.9 69.1&lt;/span>
&lt;span class="c1">#&amp;gt; 4 20.0 7.21 72.3&lt;/span>
&lt;span class="c1">#&amp;gt; 5 15.6 23.0 59.7&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This model used 5 PLS components for each of the outcomes. The use of &lt;code>num_terms&lt;/code> enables effect &lt;em>sparsity&lt;/em> where the 20 most influential predictors (out of 100) are used for each of the 5 PLS components. Different predictors can be used for each component. While this is not feature selection, it does offer the possibility of simpler models than ordinary PLS techniques.&lt;/p>
&lt;h1 id="other-notes">Other notes
&lt;a href="#other-notes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h1>&lt;p>Each of these models come fully enables to be used with the tune package; their model parameters can be optimized for performance.&lt;/p>
&lt;p>There are one or two other parsnip-adjacent packages that are around the corner. One is for mixed- and hierarchical models and another is for rule-based machine learning models (e.g. cubist, RuleFit, etc.) currently on GitHub in the
&lt;a href="https://github.com/tidymodels/rules" target="_blank" rel="noopener">rules repo&lt;/a>.&lt;/p></description></item><item><title>tidymodels updates</title><link>https://www.tidyverse.org/blog/2019/09/tidymodels-2019-09/</link><pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2019/09/tidymodels-2019-09/</guid><description>&lt;p>We&amp;rsquo;ve sent a few packages to CRAN recently. Here&amp;rsquo;s a recap of the changes (and some notes at the bottom):&lt;/p>
&lt;h2 id="recipes-016">recipes 0.1.6
&lt;a href="#recipes-016">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>
&lt;h3 id="breaking-changes">Breaking Changes
&lt;a href="#breaking-changes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>Since 2018, a warning has been issued when the wrong argument was used in &lt;code>bake(recipe, newdata)&lt;/code>. The deprecation period is over and &lt;code>new_data&lt;/code> is officially required.&lt;/li>
&lt;li>Previously, if
&lt;a href="https://tidymodels.github.io/recipes/reference/step_other.html" target="_blank" rel="noopener">&lt;code>step_other()&lt;/code>&lt;/a> did &lt;em>not&lt;/em> collapse any levels, it would still add an &amp;ldquo;other&amp;rdquo; level to the factor. This would lump new factor levels into &amp;ldquo;other&amp;rdquo; when data were baked (as
&lt;a href="https://tidymodels.github.io/recipes/reference/step_novel.html" target="_blank" rel="noopener">&lt;code>step_novel()&lt;/code>&lt;/a> does). This no longer occurs, since it was inconsistent with &lt;code>?step_other&lt;/code>, which said that: &amp;ldquo;If no pooling is done the data are unmodified&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;h3 id="new-operations">New Operations:
&lt;a href="#new-operations">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_normalize.html" target="_blank" rel="noopener">&lt;code>step_normalize()&lt;/code>&lt;/a> centers and scales the data (if you are, like Max, too lazy to use two separate steps).&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_unknown.html" target="_blank" rel="noopener">&lt;code>step_unknown()&lt;/code>&lt;/a> will convert missing data in categorical columns to &amp;ldquo;unknown&amp;rdquo; and update factor levels.&lt;/li>
&lt;/ul>
&lt;h3 id="other-changes">Other Changes:
&lt;a href="#other-changes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>If the &lt;code>threshold&lt;/code> argument of
&lt;a href="https://tidymodels.github.io/recipes/reference/step_other.html" target="_blank" rel="noopener">&lt;code>step_other()&lt;/code>&lt;/a> is greater than one, it specifies the minimum sample size before the levels of the factor are collapsed into the &amp;ldquo;other&amp;rdquo; category.
&lt;a href="https://github.com/tidymodels/recipes/issues/289" target="_blank" rel="noopener">#289&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_knnimpute.html" target="_blank" rel="noopener">&lt;code>step_knnimpute()&lt;/code>&lt;/a> can now pass two options to the underlying knn code, including the number of threads (
&lt;a href="https://github.com/tidymodels/recipes/issues/323" target="_blank" rel="noopener">#323&lt;/a>).&lt;/li>
&lt;li>Due to changes by CRAN,
&lt;a href="https://tidymodels.github.io/recipes/reference/step_nnmf.html" target="_blank" rel="noopener">&lt;code>step_nnmf()&lt;/code>&lt;/a> only works on versions of R &amp;gt;= 3.6.0 due to dependency issues.&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_dummy.html" target="_blank" rel="noopener">&lt;code>step_dummy()&lt;/code>&lt;/a> and
&lt;a href="https://tidymodels.github.io/recipes/reference/step_other.html" target="_blank" rel="noopener">&lt;code>step_other()&lt;/code>&lt;/a> are now tolerant to cases where that step&amp;rsquo;s selectors do not capture any columns. In this case, no modifications to the data are made. (
&lt;a href="https://github.com/tidymodels/recipes/issues/290" target="_blank" rel="noopener">#290&lt;/a>,
&lt;a href="https://github.com/tidymodels/recipes/issues/348" target="_blank" rel="noopener">#348&lt;/a>)&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_dummy.html" target="_blank" rel="noopener">&lt;code>step_dummy()&lt;/code>&lt;/a> can now retain the original columns that are used to make the dummy variables by setting &lt;code>preserve = TRUE&lt;/code>. (
&lt;a href="https://github.com/tidymodels/recipes/issues/328" target="_blank" rel="noopener">#328&lt;/a>)&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_other.html" target="_blank" rel="noopener">&lt;code>step_other()&lt;/code>&lt;/a>&amp;lsquo;s print method only reports the variables with collapsed levels (as opposed to any column that was &lt;em>tested&lt;/em> to see if it needed collapsing). (
&lt;a href="https://github.com/tidymodels/recipes/issues/338" target="_blank" rel="noopener">#338&lt;/a>)&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_pca.html" target="_blank" rel="noopener">&lt;code>step_pca()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/recipes/reference/step_kpca.html" target="_blank" rel="noopener">&lt;code>step_kpca()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/recipes/reference/step_ica.html" target="_blank" rel="noopener">&lt;code>step_ica()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/recipes/reference/step_nnmf.html" target="_blank" rel="noopener">&lt;code>step_nnmf()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/recipes/reference/step_pls.html" target="_blank" rel="noopener">&lt;code>step_pls()&lt;/code>&lt;/a>, and
&lt;a href="https://tidymodels.github.io/recipes/reference/step_isomap.html" target="_blank" rel="noopener">&lt;code>step_isomap()&lt;/code>&lt;/a> now accept zero components. In this case, the original data are returned. Please use this with great care.&lt;/li>
&lt;/ul>
&lt;h2 id="embed-003">embed 0.0.3
&lt;a href="#embed-003">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Two new steps were added:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://tidymodels.github.io/embed/reference/step_umap.html" target="_blank" rel="noopener">&lt;code>step_umap()&lt;/code>&lt;/a> was added for both supervised and unsupervised encodings.&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/embed/reference/step_woe.html" target="_blank" rel="noopener">&lt;code>step_woe()&lt;/code>&lt;/a> creates weight of evidence encodings. Thanks to Athos Petri Damiani for this.&lt;/li>
&lt;/ul>
&lt;h2 id="rsample-005">rsample 0.0.5
&lt;a href="#rsample-005">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>Added three functions to compute different
&lt;a href="https://tidymodels.github.io/rsample/articles/Applications/Intervals.html" target="_blank" rel="noopener">bootstrap confidence intervals&lt;/a>.&lt;/li>
&lt;li>A new function (
&lt;a href="https://tidymodels.github.io/rsample/reference/add_resample_id.html" target="_blank" rel="noopener">&lt;code>add_resample_id()&lt;/code>&lt;/a>) augments a data frame with columns for the resampling identifier.&lt;/li>
&lt;li>Updated
&lt;a href="https://tidymodels.github.io/rsample/reference/initial_split.html" target="_blank" rel="noopener">&lt;code>initial_split()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/rsample/reference/mc_cv.html" target="_blank" rel="noopener">&lt;code>mc_cv()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/rsample/reference/vfold_cv.html" target="_blank" rel="noopener">&lt;code>vfold_cv()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/rsample/reference/bootstraps.html" target="_blank" rel="noopener">&lt;code>bootstraps()&lt;/code>&lt;/a>, and
&lt;a href="https://tidymodels.github.io/rsample/reference/group_vfold_cv.html" target="_blank" rel="noopener">&lt;code>group_vfold_cv()&lt;/code>&lt;/a> to use tidyselect on the stratification variable.&lt;/li>
&lt;li>Updated
&lt;a href="https://tidymodels.github.io/rsample/reference/initial_split.html" target="_blank" rel="noopener">&lt;code>initial_split()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/rsample/reference/mc_cv.html" target="_blank" rel="noopener">&lt;code>mc_cv()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/rsample/reference/vfold_cv.html" target="_blank" rel="noopener">&lt;code>vfold_cv()&lt;/code>&lt;/a>, and
&lt;a href="https://tidymodels.github.io/rsample/reference/bootstraps.html" target="_blank" rel="noopener">&lt;code>bootstraps()&lt;/code>&lt;/a> with new &lt;code>breaks&lt;/code> parameter that specifies the number of bins to stratify by for a numeric stratification variable.&lt;/li>
&lt;/ul>
&lt;h2 id="parsnip-0031">parsnip 0.0.3.1
&lt;a href="#parsnip-0031">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Unplanned release based on CRAN requirements for Solaris.&lt;/p>
&lt;h3 id="breaking-changes-1">Breaking Changes
&lt;a href="#breaking-changes-1">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>The method that &lt;code>parsnip&lt;/code> uses to store the model information has changed. Any custom models from previous versions will need to use the new method for registering models. The methods are detailed in &lt;code>?get_model_env&lt;/code> and the
&lt;a href="https://tidymodels.github.io/parsnip/articles/articles/Scratch.html" target="_blank" rel="noopener">package vignette for adding models&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The mode needs to be declared for models that can be used for more than one mode prior to fitting and/or translation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For &lt;code>surv_reg()&lt;/code>, the engine that uses the &lt;code>survival&lt;/code> package is now called &lt;code>survival&lt;/code> instead of &lt;code>survreg&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For &lt;code>glmnet&lt;/code> models, the full regularization path is always fit regardless of the value given to &lt;code>penalty&lt;/code>. Previously, the model was fit by passing &lt;code>penalty&lt;/code> to &lt;code>glmnet&lt;/code>'s &lt;code>lambda&lt;/code> argument, and the model could only make predictions at those specific values.
&lt;a href="https://github.com/tidymodels/parsnip/issues/195" target="_blank" rel="noopener">(#195)&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="new-features">New Features
&lt;a href="#new-features">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>add_rowindex()&lt;/code> can create a column called &lt;code>.row&lt;/code> to a data frame.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If a computational engine is not explicitly set, a default will be used. Each default is documented on the corresponding model page. A warning is issued at fit time unless verbosity is zero.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>nearest_neighbor()&lt;/code> gained a &lt;code>multi_predict&lt;/code> method. The &lt;code>multi_predict()&lt;/code> documentation is a little better organized.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A suite of internal functions were added to help with upcoming model tuning features.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A &lt;code>parsnip&lt;/code> object always saved the name(s) of the outcome variable(s) for proper naming of the predicted values.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="corrr-04">corrr 0.4
&lt;a href="#corrr-04">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>
&lt;h3 id="new-features-1">New features
&lt;a href="#new-features-1">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>New function called
&lt;a href="https://tidymodels.github.io/corrr/reference/dice.html" target="_blank" rel="noopener">&lt;code>dice()&lt;/code>&lt;/a> function, wraps &lt;code>focus(x,..., mirror = TRUE)&lt;/code>&lt;/li>
&lt;li>A new
&lt;a href="https://tidymodels.github.io/corrr/reference/retract.html" target="_blank" rel="noopener">&lt;code>retract()&lt;/code>&lt;/a> function does the opposite of &lt;code>stretch()&lt;/code>&lt;/li>
&lt;li>A new argument was added to
&lt;a href="https://tidymodels.github.io/corrr/reference/stretch.html" target="_blank" rel="noopener">&lt;code>stretch()&lt;/code>&lt;/a> called &lt;code>remove.dups&lt;/code>. It removes duplicates with out removing all NAs.&lt;/li>
&lt;/ul>
&lt;h3 id="improvements">Improvements
&lt;a href="#improvements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>correlate()&lt;/code>'s interface for databases was improved. It now only calculates unique pairs, and simplifies the formula that ultimately runs in-database. We also re-added the vignette to the package, which is also available on the site as an
&lt;a href="https://tidymodels.github.io/corrr/articles/databases.html" target="_blank" rel="noopener">article&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="tidypredict-043">tidypredict 0.4.3
&lt;a href="#tidypredict-043">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>
&lt;h3 id="new-models">New models
&lt;a href="#new-models">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The new version is now able to parse the following models:&lt;/p>
&lt;ul>
&lt;li>&lt;code>cubist()&lt;/code>, from the &lt;code>Cubist&lt;/code> package&lt;/li>
&lt;li>&lt;code>ctree()&lt;/code>, from the &lt;code>partykit&lt;/code> package&lt;/li>
&lt;li>XGBoost trained models, via the &lt;code>xgboost&lt;/code> package&lt;/li>
&lt;/ul>
&lt;h3 id="new-features-2">New features
&lt;a href="#new-features-2">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>Integration with &lt;code>broom&lt;/code>'s &lt;code>tidy()&lt;/code> function. It works with Regression models only&lt;/li>
&lt;li>Adds support for &lt;code>parsnip&lt;/code> fitted models: &lt;code>lm&lt;/code>, &lt;code>randomForest&lt;/code>, &lt;code>ranger&lt;/code>, and &lt;code>earth&lt;/code>&lt;/li>
&lt;li>Adds
&lt;a href="https://tidymodels.github.io/tidypredict/reference/as_parsed_model.html" target="_blank" rel="noopener">&lt;code>as_parsed_model()&lt;/code>&lt;/a> function. It adds the proper class components to the list. This allows any model exported in the correct spec to be read in by &lt;code>tidypredict&lt;/code>. See the
&lt;a href="https://tidymodels.github.io/tidypredict/articles/save.html" target="_blank" rel="noopener">Save Models&lt;/a> and
&lt;a href="https://tidymodels.github.io/tidypredict/articles/non-r.html" target="_blank" rel="noopener">Non-R models&lt;/a> for more information&lt;/li>
&lt;/ul>
&lt;h3 id="improvements-1">Improvements
&lt;a href="#improvements-1">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>Now supports classification models from &lt;code>ranger&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="website">Website
&lt;a href="#website">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The package&amp;rsquo;s
&lt;a href="https://tidymodels.github.io/tidypredict/index.html" target="_blank" rel="noopener">official website&lt;/a> has been expanded greatly. Here are some highlights:&lt;/p>
&lt;ul>
&lt;li>An article per each supported model, they are found under Model List&lt;/li>
&lt;li>A how to guide to save and reload models,
&lt;a href="https://tidymodels.github.io/tidypredict/articles/save.html" target="_blank" rel="noopener">link here&lt;/a>&lt;/li>
&lt;li>How to integrate non-R models to &lt;code>tidypredict&lt;/code>,
&lt;a href="https://tidymodels.github.io/tidypredict/articles/non-r.html" target="_blank" rel="noopener">link here&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="yardstick-004">yardstick 0.0.4
&lt;a href="#yardstick-004">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>
&lt;h3 id="new-metrics">New Metrics
&lt;a href="#new-metrics">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Two new metrics have been added to yardstick:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://tidymodels.github.io/yardstick/reference/iic.html" target="_blank" rel="noopener">&lt;code>iic()&lt;/code>&lt;/a> is a numeric metric for computing the index of ideality of correlation. It is a potential alternative to the traditional correlation coefficient, and has been used in QSAR models (
&lt;a href="https://github.com/tidymodels/yardstick/issues/87" target="_blank" rel="noopener">#115&lt;/a>).&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/yardstick/reference/average_precision.html" target="_blank" rel="noopener">&lt;code>average_precision()&lt;/code>&lt;/a> is a probability metric that can be used as an alternative to &lt;code>pr_auc()&lt;/code>. It has the benefit of avoiding any issues of ambiguity in the edge case where &lt;code>recall == 0&lt;/code> and the current number of false positives is &lt;code>0&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="improvements-2">Improvements
&lt;a href="#improvements-2">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>pr_curve()&lt;/code> (and by extension &lt;code>pr_auc()&lt;/code>) has been greatly improved to better handle edge cases when duplicate class probability values are present. Additionally, the first precision value in the curve is now a &lt;code>1&lt;/code>, rather than an &lt;code>NA&lt;/code>, which results in a more practical curve, and generates a more correct AUC value (
&lt;a href="https://github.com/tidymodels/yardstick/issues/93" target="_blank" rel="noopener">#93&lt;/a>).&lt;/li>
&lt;li>Each metric function now has a &lt;code>direction&lt;/code> attribute, which specifies the direction required for optimization, either minimization or maximization.&lt;/li>
&lt;li>Documentation for class probability metrics has been improved with more informative examples (
&lt;a href="https://github.com/tidymodels/yardstick/issues/100" target="_blank" rel="noopener">#100&lt;/a>).&lt;/li>
&lt;li>&lt;code>mn_log_loss()&lt;/code> now uses the min/max rule before computing the log of the estimated probabilities to avoid problematic undefined log values (
&lt;a href="https://github.com/tidymodels/yardstick/issues/103" target="_blank" rel="noopener">#103&lt;/a>).&lt;/li>
&lt;/ul>
&lt;h2 id="upcoming-changes-and-directions">Upcoming Changes and Directions
&lt;a href="#upcoming-changes-and-directions">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We are currently working on two general use packages: &lt;code>workflows&lt;/code> and &lt;code>tune&lt;/code>. The former bundles together recipes, model object, and other items so that there can be single &lt;code>fit()&lt;/code> and &lt;code>predict()&lt;/code> methods. &lt;code>tune&lt;/code> will have tools for&amp;hellip; um&amp;hellip; tuning models. We are hoping to make these public in the next month or so.&lt;/p>
&lt;p>There will be some changes to accommodate model tuning. The &lt;code>dials&lt;/code> package has been re-factored substantially (see the current GH master branch) and there were some small interfaces changes to &lt;code>recipes&lt;/code> too (mostly backwards compatible and also on GH). We are pretty close to end of &amp;ldquo;Phase I&amp;rdquo; of our tidymodels work.&lt;/p></description></item><item><title>How parsnip works</title><link>https://www.tidyverse.org/blog/2019/04/parsnip-internals/</link><pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2019/04/parsnip-internals/</guid><description>&lt;p>
&lt;a href="https://tidymodels.github.io/parsnip/" target="_blank" rel="noopener">&lt;code>parsnip&lt;/code>&lt;/a> was accepted to CRAN late last year. Our
&lt;a href="https://www.tidyverse.org/articles/2018/11/parsnip-0-0-1/" target="_blank" rel="noopener">first blog post&lt;/a> was a top-level introduction. Here, we will go into the design of some of the internals. If you end up looking at the package sources, there are going to be times that you might question our sanity. This post is intended to go over some design decisions and provide some context.&lt;/p>
&lt;h1 id="my-first-solution-caret">My first solution: caret
&lt;a href="#my-first-solution-caret">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h1>&lt;p>Having developed
&lt;a href="https://topepo.github.io/caret/" target="_blank" rel="noopener">&lt;code>caret&lt;/code>&lt;/a> in early 2005, I was not prepared for what it would be like to maintain a package that wrapped more than 200 models. What &lt;code>caret&lt;/code> does is to create code &lt;em>modules&lt;/em> that define the different aspects of modeling, such as model fitting, prediction, and so on. These code modules are contained in lists, one per specific model. For example, here is one of the simplest lists for
&lt;a href="https://www.rdocumentation.org/packages/MASS/versions/7.3-51.1/topics/lda" target="_blank" rel="noopener">&lt;code>MASS::lda&lt;/code>&lt;/a> (slightly abbreviated):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">label&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Linear Discriminant Analysis&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">library&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;MASS&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Classification&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">fit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">wts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lev&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">classProbs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">MASS&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">lda&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">...&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">,&lt;/span>
&lt;span class="n">predict&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modelFit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">newdata&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">submodels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">predict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modelFit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">newdata&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">class&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">prob&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modelFit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">newdata&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">submodels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">predict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modelFit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">newdata&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">posterior&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some notes:&lt;/p>
&lt;ol>
&lt;li>✔ The modules are fairly well-defined and mutually exclusive.&lt;/li>
&lt;li>✔ The structure prevents &lt;em>information leakage&lt;/em>. The fitting parts are isolated from the prediction parts and the prediction modules only return predictions in a standard format. &lt;code>caret&lt;/code> compartmentalizes the modeling process and prevents people from &amp;ldquo;teaching to the test&amp;rdquo; unless they deliberately go out of their way to do so.&lt;/li>
&lt;li>✔ These modules cleanly document
&lt;a href="https://stat.ethz.ch/pipermail/r-devel/2012-January/062935.html" target="_blank" rel="noopener">issues&lt;/a> with using the packages. We&amp;rsquo;d like each model function to have a predictable interface for fitting and prediction, but that&amp;rsquo;s not the reality for many packages. If nothing else, these modules document the idiosyncratic nature of some packages.&lt;/li>
&lt;li>✔ The &lt;code>lda&lt;/code> code above is a fairly clean case. Others are not as nice to look at, especially if they can predict multiple sub-models at once or have problematic interfaces.&lt;/li>
&lt;li>✖ There is a lot of code duplication. For this reason, the directory containing the current set of 238 modules is about 1.3MB.&lt;/li>
&lt;li>✖ The system in &lt;code>caret&lt;/code> rigidly defines what parameters can be tuned. It is a bit of a walled garden in this respect.&lt;/li>
&lt;li>✔ Code like &lt;code>MASS::lda&lt;/code> would be exposed to &lt;code>R CMD check&lt;/code> if it is contained in a package&amp;rsquo;s &lt;code>R&lt;/code> directory. Because of this, there was a large number of package dependencies in early versions. &lt;code>caret&lt;/code> was almost intolerable when it came time for CRAN to check the package. One way that I fixed this was to compile these code modules in an R list object and treat that as &lt;em>data&lt;/em> in the package. In this way, the package R files do not contain much specific model code and, many formal dependencies are avoided.&lt;/li>
&lt;li>✔ The ellipses (&lt;code>...&lt;/code>) are heavily utilized here. This makes passing other arguments to the underlying fitting function trivial. This is probably still my favorite thing about the S language.&lt;/li>
&lt;li>✖ In some cases, &lt;code>caret&lt;/code> needs to grab an object that might be in the ellipses in order to modify the value. For example, the main tuning parameters for
&lt;a href="https://www.rdocumentation.org/packages/rpart/versions/4.1-13/topics/rpart" target="_blank" rel="noopener">&lt;code>rpart&lt;/code>&lt;/a> models are in
&lt;a href="https://www.rdocumentation.org/packages/rpart/versions/4.1-13/topics/rpart.control" target="_blank" rel="noopener">&lt;code>rpart.control&lt;/code>&lt;/a>. If a user passes in an argument by the name of &lt;code>control&lt;/code>, it will need to be captured and the appropriate arguments (like &lt;code>cp&lt;/code>, &lt;code>maxdepth&lt;/code>, or &lt;code>minsplit&lt;/code>) are modified without changing the other arguments. That&amp;rsquo;s not hard to do but it eliminates the benefits you get by using the ellipses. In the end, &lt;code>do.call(&amp;quot;rpart&amp;quot;, args)&lt;/code> is used to fit the model. The downside of this is that the &lt;em>data&lt;/em> objects are embedded in &lt;code>args&lt;/code> and, as an unhappy side-effect, the &lt;em>data set gets embedded in &lt;code>rpart&lt;/code>'s call object&lt;/em>. That&amp;rsquo;s really bad.&lt;/li>
&lt;/ol>
&lt;p>When I began at RStudio, I had already been thinking about a different and, hopefully more elegant, way to do this for &lt;code>tidymodels&lt;/code>.&lt;/p>
&lt;h1 id="a-focus-on-calls-and-quosures">A focus on calls and quosures
&lt;a href="#a-focus-on-calls-and-quosures">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h1>&lt;p>When &lt;code>parsnip&lt;/code> fits a model, it constructs a call object that will be evaluated to create the model fit object (&lt;code>rlang::call2&lt;/code> and &lt;code>rlang::call_modify&lt;/code> are excellent). For example, if we were doing this &amp;ldquo;by-hand&amp;rdquo; for something simple like &lt;code>glm&lt;/code>, an initial function using &lt;code>rlang&lt;/code> could be:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rlang&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">glm_fit&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">formula&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">evaluate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">...&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1"># capture the specific arguments and ellipses as quosures:&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">formula&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">enquo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">formula&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rlang&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">enquo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1"># capture any extra arguments&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rlang&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">enquos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">...&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1"># make the call&lt;/span>
&lt;span class="n">model_call&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">rlang&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">call2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;glm&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">.ns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;stats&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">!!!&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">evaluate&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">res&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">rlang&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">eval_tidy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">model_call&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">res&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">model_call&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">res&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nf">glm_fit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; stats::glm(formula = ~, data = ~)
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">glm_fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">family&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stats&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">binomial&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; stats::glm(formula = ~, data = ~, family = ~stats::binomial)
&lt;/code>&lt;/pre>&lt;p>When these are printed, the tilde indicates which values are &lt;em>quosures&lt;/em>. A
&lt;a href="https://adv-r.hadley.nz/evaluation.html" target="_blank" rel="noopener">quosure&lt;/a> is a combination of an &lt;code>rlang&lt;/code> expression and a reference to the environment in which it originated. Since it is partly an expression, the value has not yet been evaluated inside of &lt;code>glm_fit()&lt;/code>. For this reason, when we pass &lt;code>family = stats::binomial&lt;/code>, the object
&lt;a href="https://www.rdocumentation.org/packages/stats/versions/3.5.1/topics/family" target="_blank" rel="noopener">&lt;code>stats::binomial&lt;/code>&lt;/a> is &lt;em>not&lt;/em> evaluated. If it were, the value of that object would be embedded into the call (type &lt;code>unclass(binomial())&lt;/code> at an R prompt to see what this looks like).&lt;/p>
&lt;p>Here&amp;rsquo;s a better example:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">glm_fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mtcars&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; stats::glm(formula = ~(mpg ~ .), data = ~mtcars, x = ~FALSE)
&lt;/code>&lt;/pre>&lt;p>The
&lt;a href="https://www.rdocumentation.org/packages/rlang/versions/0.2.2/topics/eval_tidy_" target="_blank" rel="noopener">&lt;code>eval_tidy&lt;/code>&lt;/a> function can evaluate the quosure arguments when the call itself is evaluated. We get our model object as expected:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">glm_fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mtcars&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">evaluate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt;
#&amp;gt; Call: stats::glm(formula = ~(mpg ~ .), data = ~mtcars, x = ~FALSE)
#&amp;gt;
#&amp;gt; Coefficients:
#&amp;gt; (Intercept) cyl disp hp drat wt
#&amp;gt; 12.3034 -0.1114 0.0133 -0.0215 0.7871 -3.7153
#&amp;gt; qsec vs am gear carb
#&amp;gt; 0.8210 0.3178 2.5202 0.6554 -0.1994
#&amp;gt;
#&amp;gt; Degrees of Freedom: 31 Total (i.e. Null); 21 Residual
#&amp;gt; Null Deviance: 1130
#&amp;gt; Residual Deviance: 147 AIC: 164
&lt;/code>&lt;/pre>&lt;p>For &lt;code>parsnip&lt;/code>, there are utility functions that create the call and others to evaluate it. This means that the only model-related information needed to by the package to define the general &lt;code>glm&lt;/code> fitting function would be:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">glm_data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;glm&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;stats&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">required_args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;formula&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>All of the other arguments are assembled from the model specification object or extra arguments provided to
&lt;a href="https://tidymodels.github.io/parsnip/reference/set_engine.html" target="_blank" rel="noopener">&lt;code>set_engine()&lt;/code>&lt;/a> and
&lt;a href="https://tidymodels.github.io/parsnip/reference/fit.html" target="_blank" rel="noopener">&lt;code>fit()&lt;/code>&lt;/a>. This allows for a fairly compact representation of the information for the fitting module. Also, it does not expose the code in a way that requires a package dependency and doesn&amp;rsquo;t contaminate the model call with actual object values. The same strategy can be used to produce predictions and other quantities.&lt;/p>
&lt;p>There are some other niceties too. If a package, like
&lt;a href="https://cran.r-project.org/package=glmnet" target="_blank" rel="noopener">&lt;code>glmnet&lt;/code>&lt;/a> has a non-formula interface and requires the predictors to be in a matrix, that fitting function can just insert &lt;code>x = as.matrix(x)&lt;/code> into the &lt;code>glmnet&lt;/code> call instead of doing the matrix conversion prior to the model fit.&lt;/p>
&lt;p>Unsurprisingly, most model are more complex than our &lt;code>glm&lt;/code> example. There are some modeling packages, such as
&lt;a href="https://keras.rstudio.com/" target="_blank" rel="noopener">&lt;code>keras&lt;/code>&lt;/a> or
&lt;a href="https://cran.r-project.org/package=xgboost" target="_blank" rel="noopener">&lt;code>xgboost&lt;/code>&lt;/a>, that don&amp;rsquo;t have a one-line call to fit the model (see the &lt;code>keras&lt;/code> regression example
&lt;a href="https://keras.rstudio.com/articles/tutorial_basic_regression.html" target="_blank" rel="noopener">here&lt;/a>). In this case, a wrapper function is needed and this most likely results in an extra package dependency.&lt;/p>
&lt;p>Also, some prediction methods give back results that require post-processing. For example, class probability predictions for a multiclass &lt;code>xgboost&lt;/code> model come back as &lt;em>a vector&lt;/em>. For example, if you were to predict four samples of iris data, you would get a 12 element vector back that requires you to reshape the results into the appropriate 4x3 data frame. &lt;code>parsnip&lt;/code> handles these by having slots for pre-processing the data and/or post-processing the raw prediction results. More information can be found on the
&lt;a href="https://tidymodels.github.io/parsnip/articles/articles/Scratch.html" target="_blank" rel="noopener">vignette for creating a model object&lt;/a>. Keep in mind that, as we and other contributors work with the package more, these internals may slightly change in the first few versions.&lt;/p>
&lt;p>Also, a lot of the package code revolves around getting the arguments right. There are some default arguments set by the package, such as &lt;code>family = binomial&lt;/code> for logistic regression. These defaults can be overwritten but may also depend on the mode of the model (e.g. regression, classification, etc.). There are also some arguments that &lt;code>parsnp&lt;/code> &lt;em>protects&lt;/em> in case the user tries to modify them (e.g. &lt;code>data&lt;/code>). Finally, the main arguments to &lt;code>parsnip&lt;/code> model functions are standardized and need to eventually be converted back to their engine-specific names.&lt;/p>
&lt;h1 id="the-down-side-to-using-calls">The down-side to using calls
&lt;a href="#the-down-side-to-using-calls">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h1>&lt;p>Suppose that you are fitting a random forest regression model and want to tune over &lt;code>mtry&lt;/code>, the number of randomly selected predictors to evaluate at each split of the tree. This is a function of the data since it depends on the number of predictors. A simplistic version of the code that iterates over &lt;code>mtry&lt;/code> might look like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidymodels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">rf_model&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">rand_forest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;regression&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">for &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="n">in&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">new_rf&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">rf_model&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">rf_fit&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">new_rf&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ranger&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Sepal.Width&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">iris&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># now evaluate the model for performance&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1"># what is the current value of `mtry`? &lt;/span>
&lt;span class="n">new_rf&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; Random Forest Model Specification (regression)
#&amp;gt;
#&amp;gt; Main Arguments:
#&amp;gt; mtry = i
&lt;/code>&lt;/pre>&lt;p>The specification depends on &lt;code>i&lt;/code> and its value is not in &lt;code>new_rf&lt;/code>, only a reference to a symbol &lt;code>i&lt;/code> in the global environment. What if the value of &lt;code>i&lt;/code> changes?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="m">300&lt;/span>
&lt;span class="n">new_rf&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ranger&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Sepal.Width&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">iris&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; Error in ranger::ranger(formula = formula, data = data, mtry = ~i, num.threads = 1, : User interrupt or internal error.
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># mtry should be between 1 and 4 for these data. &lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this context, using quosures for parameter values is problematic because (by default) their values are not frozen when the specification is created. However, we can fix this using
&lt;a href="https://adv-r.hadley.nz/quasiquotation.html" target="_blank" rel="noopener">quasiquotiation&lt;/a>. The value of &lt;code>i&lt;/code> can be embedded into the call using &lt;code>!!&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">for &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="n">in&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">new_rf&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">rf_model&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!!&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1"># What is the current value of `mtry` now? &lt;/span>
&lt;span class="n">new_rf&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; Random Forest Model Specification (regression)
#&amp;gt;
#&amp;gt; Main Arguments:
#&amp;gt; mtry = 4
&lt;/code>&lt;/pre>&lt;p>One other downside is related to the &lt;em>data&lt;/em> used in the call. In the random forest example above, the value of &lt;code>mtry&lt;/code> is dependent on the number of predictors. What if you don&amp;rsquo;t know how many predictors you have until the model is fit? How could you then specify &lt;code>mtry&lt;/code>?&lt;/p>
&lt;p>This could happen for a few reasons. For example, if you are using a &lt;code>recipe&lt;/code> that has a filter based on reducing correlation, the number of predictors may not be known until the recipe is prepped (and the number may vary inside of resampling). A more common example is related to dummy variables. If I use &lt;code>fit_xy()&lt;/code> instead of &lt;code>fit()&lt;/code> in the code above, the &lt;code>Species&lt;/code> predictor in the iris data is expanded from one column into two dummy variable columns just prior to the model fit. This could affect the possible range of &lt;code>mtry&lt;/code> values.&lt;/p>
&lt;p>There are a few ways to get around this. The first (and worst) is to use the data in an expression. Since &lt;code>mtry&lt;/code> isn&amp;rsquo;t evaluated until the model fit, you could try to use &lt;code>mtry = floor(sqrt(ncol(data)))&lt;/code>. That&amp;rsquo;s very brittle for a few different reasons. For one, &lt;em>you&lt;/em> may use the &lt;code>parsnip&lt;/code> interface &lt;code>fit(formula, data)&lt;/code>, but the underlying model may be &lt;code>model_fn(x, y)&lt;/code> and the &lt;code>data&lt;/code> object doesn&amp;rsquo;t exist when the model call is evaluated.&lt;/p>
&lt;p>For this reason, we added
&lt;a href="https://tidymodels.github.io/parsnip/reference/descriptors.html" target="_blank" rel="noopener">data descriptors&lt;/a> to &lt;code>parsnip&lt;/code>. These are small functions that only work when the model is being fit and they capture relevant aspects of the data at &lt;strong>the time of fit&lt;/strong>. For example, the function &lt;code>.obs()&lt;/code> can be used in an argument value to reference the number of rows in the data. To illustrate, the argument &lt;code>min_n&lt;/code> for a random forest model corresponds to how many data points are required to make further splits. For regression models, this defaults to 5 when using
&lt;a href="https://cran.r-project.org/package=ranger" target="_blank" rel="noopener">&lt;code>ranger&lt;/code>&lt;/a>. Suppose you want this to be one-tenth of the data but at least 8. If your data are being resampled, you might not know the training set size. You could use:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">rf_model&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">min_n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">.obs&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">)))&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ranger&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Sepal.Width&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">iris&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; parsnip model object
#&amp;gt;
#&amp;gt; Ranger result
#&amp;gt;
#&amp;gt; Call:
#&amp;gt; ranger::ranger(formula = formula, data = data, min.node.size = ~max(8, floor(.obs()/10)), num.threads = 1, verbose = FALSE, seed = sample.int(10^5, 1))
#&amp;gt;
#&amp;gt; Type: Regression
#&amp;gt; Number of trees: 500
#&amp;gt; Sample size: 150
#&amp;gt; Number of independent variables: 4
#&amp;gt; Mtry: 2
#&amp;gt; Target node size: 15
#&amp;gt; Variable importance mode: none
#&amp;gt; Splitrule: variance
#&amp;gt; OOB prediction error (MSE): 0.0827
#&amp;gt; R squared (OOB): 0.565
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># The math checks out for the &amp;#34;Target node size&amp;#34; above:&lt;/span>
&lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">nrow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">iris&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; [1] 15
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># Does this work outside of the function call? &lt;/span>
&lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">.obs&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; Descriptor context not set
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># Nope!&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The different descriptors should enable a wide variety of values for tuning parameters.&lt;/p>
&lt;h1 id="why-not-just-evaluate-the-arguments">Why not just evaluate the arguments?
&lt;a href="#why-not-just-evaluate-the-arguments">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h1>&lt;p>In many cases, the model specification arguments (e.g. &lt;code>mtry&lt;/code> or &lt;code>min_n&lt;/code>) and engine arguments are simple objects or scalar values. It makes sense to quote &lt;code>data&lt;/code>, &lt;code>x&lt;/code> or &lt;code>y&lt;/code> but why not just evaluate the other arguments as usual?&lt;/p>
&lt;p>There are a few reasons. First, there are some arguments whose evaluation should be deferred. For example, &lt;code>stan&lt;/code> and &lt;code>ranger&lt;/code> models have their own random seed arguments. To enable reproducibility, &lt;code>parsnip&lt;/code> gives these function default values of &lt;code>seed = sample.int(10^5, 1)&lt;/code>. If this argument were unquoted, then the seed value would be fixed when the package was compiled. There are solutions for this simple example though.&lt;/p>
&lt;p>As seen above for data descriptors, there is the need to wait for some argument values to be evaluated at the same time that the call is evaluated. Originally, &lt;code>parsnip&lt;/code> immediately evaluated almost all of the arguments and our advice was to have users quote special arguments using &lt;code>rlang::expr()&lt;/code>. The feedback on this aspect of &lt;code>parsnip&lt;/code> was uniformity unfavorable since it would require many casual users to learn &lt;code>rlang&lt;/code> and metaprogramming techniques. For this reason, we moved the metaprogramming parts within the function to accomplish the same goals but without the user being required to understand the technical minutiae. When a user uses an argument like &lt;code>min_n = max(8, floor(.obs()/10))&lt;/code>, the use of quosures is hidden from view and it looks like they are using an ordinary function called &lt;code>.obs()&lt;/code>.&lt;/p>
&lt;p>One final reason to leave arguments unevaluated in the model specification is related to &lt;em>future plans&lt;/em>. As previously mentioned, &lt;code>caret&lt;/code> rigidly defined which model parameters were available for performance tuning. The approach taken by &lt;code>parsnip&lt;/code> is very much the opposite. We want to enable users to tune any aspect of the model that they see fit, including some of the engine specific parameters.&lt;/p>
&lt;p>For example, when fitting a Bayesian regression model, a user might want to tune over how diffuse the prior distribution should be and so on. Rather than formally defining every possible tunable parameter, &lt;code>parsnip&lt;/code> allows the user to have a &lt;em>placeholder&lt;/em> for parameters in the model specification that declares, &amp;ldquo;I want to change this parameter, but I don&amp;rsquo;t know what the exact value should be.&amp;rdquo;&lt;/p>
&lt;p>To do this, a special function called &lt;code>varying()&lt;/code> is used. A model cannot be fit if it has any varying parameters but future packages will be able to detect any of these parameters and construct tuning grids accordingly. The parameter values can be changed to specific candidate values, and these are then tested to see which value is the most appropriate. The code to do this is not ready at this point and will be part of another package. However, we can demonstrate how this happens inside of &lt;code>parsnip&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">lr_stan_spec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">logistic_reg&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;stan&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">iter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">5000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">prior_intercept&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rstanarm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">student_t&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">varying&lt;/span>&lt;span class="p">()),&lt;/span>
&lt;span class="n">seed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2347&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Which, if any, arguments, should be tuned?&lt;/span>
&lt;span class="nf">varying_args&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lr_stan_spec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; # A tibble: 5 x 4
#&amp;gt; name varying id type
#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
#&amp;gt; 1 penalty FALSE logistic_reg model_spec
#&amp;gt; 2 mixture FALSE logistic_reg model_spec
#&amp;gt; 3 iter FALSE logistic_reg model_spec
#&amp;gt; 4 prior_intercept TRUE logistic_reg model_spec
#&amp;gt; 5 seed FALSE logistic_reg model_spec
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">nnet_spec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">mlp&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">hidden_units&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">varying&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="n">epochs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">varying&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="n">dropout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">varying&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;keras&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">batch_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">varying&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="n">callbacks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">callback_early_stopping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">monitor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#39;loss&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">min_delta&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">varying&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nf">varying_args&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nnet_spec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; # A tibble: 7 x 4
#&amp;gt; name varying id type
#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
#&amp;gt; 1 hidden_units TRUE mlp model_spec
#&amp;gt; 2 penalty FALSE mlp model_spec
#&amp;gt; 3 dropout TRUE mlp model_spec
#&amp;gt; 4 epochs TRUE mlp model_spec
#&amp;gt; 5 activation FALSE mlp model_spec
#&amp;gt; 6 batch_size TRUE mlp model_spec
#&amp;gt; 7 callbacks TRUE mlp model_spec
&lt;/code>&lt;/pre>&lt;p>In the &lt;code>keras&lt;/code> example, the argument names in &lt;code>nnet_spec&lt;/code> names match up with objects in the
&lt;a href="https://tidymodels.github.io/dials/" target="_blank" rel="noopener">&lt;code>dials&lt;/code>&lt;/a> package, and it will be possible to automatically create tuning grids for all of the parameters.&lt;/p>
&lt;p>By avoiding evaluation in the model specification, we are enabling some interesting upcoming features.&lt;/p>
&lt;p>Also, this feature will also be used with recipes and other future packages. This will enable joint optimization of parameters associated with pre-processing, model fitting, and post-processing activities.&lt;/p></description></item><item><title>parsnip</title><link>https://www.tidyverse.org/blog/2018/11/parsnip-0-0-1/</link><pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2018/11/parsnip-0-0-1/</guid><description>&lt;p>The &lt;code>parsnip&lt;/code> package is now
&lt;a href="https://cran.r-project.org/package=parsnip" target="_blank" rel="noopener">on CRAN&lt;/a>. It is designed to solve a specific problem related to model fitting in R, the interface. Many functions have different interfaces and arguments names and &lt;code>parsnip&lt;/code> standardizes the interface for fitting models as well as the return values. When using &lt;code>parsnip&lt;/code>, you don&amp;rsquo;t have to remember each interface and its unique set of argument names to easily move between R packages.&lt;/p>
&lt;p>This is the first of several blog posts that discuss the package. More information can be found at the
&lt;a href="https://tidymodels.github.io/parsnip/" target="_blank" rel="noopener">&lt;code>parsnip&lt;/code> pkgdown site&lt;/a>.&lt;/p>
&lt;h1 id="the-problem">The Problem
&lt;a href="#the-problem">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h1>&lt;p>The interface problem is something that I&amp;rsquo;ve talked about for some time. I&amp;rsquo;ll use logistic regression to demonstrate the issue here. Many of us are familiar with the standard &lt;code>glm&lt;/code> syntax for fitting models^[This syntax predates R and was formally described in the 1992 book &lt;em>Statistical Models in S&lt;/em>. It&amp;rsquo;s older than
&lt;a href="https://www.debian.org/doc/manuals/project-history/ch-intro.en.html#s1.1" target="_blank" rel="noopener">&lt;em>debian&lt;/em>&lt;/a>.]. It uses the formula method and, to fit a logistic model, the &lt;code>family = binomial&lt;/code> argument is required. Suppose that we want to apply some regularization to the model. A popular choice is the
&lt;a href="https://cran.r-project.org/package=glmnet" target="_blank" rel="noopener">&lt;code>glmnet&lt;/code>&lt;/a> package, but its interface is very different from &lt;code>glm&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>It does not use the formula method and expects the predictors in a matrix (so dummy variables must be pre-computed).&lt;/li>
&lt;li>Nonstandard &lt;code>family&lt;/code> objects are used. The argument is &lt;code>family = &amp;quot;binomial&amp;quot;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>While each of these is not a significant issue, these types of inconsistencies are common across R packages. The only way to avoid them is to only use a single package.&lt;/p>
&lt;p>There is a larger issue when you want to fit the same model via &lt;code>tensorflow&lt;/code>'s
&lt;a href="https://keras.rstudio.com/" target="_blank" rel="noopener">&lt;code>keras&lt;/code>&lt;/a> interface. &lt;code>keras&lt;/code> has a beautiful approach to sequentially assembling deep learning models, but it has very little resemblance to the traditional approaches. Creating a simple logistic model requires the user to learn and use drastically different syntax.&lt;/p>
&lt;p>There is also inconsistency in how different packages return predictions. &lt;em>Most&lt;/em> R packages use the &lt;code>predict()&lt;/code> function to make predictions on new data. If we want to get class probabilities for our logistic regression model, using &lt;code>predict(obj, newdata, type = &amp;quot;response&amp;quot;)&lt;/code> will return a vector of probabilities for the second level of our factor. However, this convention can be wildly inconsistent across R packages. Examples are:&lt;/p>
&lt;style>
td,th {
padding: 0.4em;
}
&lt;/style>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">Function&lt;/th>
&lt;th align="left">Package&lt;/th>
&lt;th align="left">Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">&lt;code>glm&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>stats&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>predict(obj, type = &amp;quot;response&amp;quot;)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">&lt;code>lda&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>MASS&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>predict(obj)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">&lt;code>gbm&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>gbm&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>predict(obj, type = &amp;quot;response&amp;quot;, n.trees)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">&lt;code>mda&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>mda&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>predict(obj, type = &amp;quot;posterior&amp;quot;)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">&lt;code>rpart&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>rpart&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>predict(obj, type = &amp;quot;prob&amp;quot;)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">&lt;code>Weka&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>RWeka&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>predict(obj, type = &amp;quot;probability&amp;quot;)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">&lt;code>logitboost&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>LogitBoost&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>predict(obj, type = &amp;quot;raw&amp;quot;, nIter)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">&lt;code>pamr.train&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>pamr&lt;/code>&lt;/td>
&lt;td align="left">&lt;code>pamr.predict(obj, type = &amp;quot;posterior&amp;quot;)&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;br>
&lt;p>An added complication is that some models can create predictions across multiple &lt;em>submodels&lt;/em> at once. For example, boosted trees fit using &lt;code>\(i\)&lt;/code> iterations can produce predictions using less than &lt;code>\(i\)&lt;/code> iterations (effectively creating a different prediction model). This can lead to further inconsistencies.&lt;/p>
&lt;p>These issues, in aggregate, can be grating. Sometimes it might feel like:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Is R working for me or am I working for R?&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>parsnip&lt;/code> aims to decrease the frustration for people who want to evaluate different types of models on a data set. This is very much related to our
&lt;a href="https://tidymodels.github.io/model-implementation-principles/" target="_blank" rel="noopener">guidelines for developing modeling packages&lt;/a> (on which we are still looking for feedback).&lt;/p>
&lt;h1 id="parsnip-syntax">parsnip syntax
&lt;a href="#parsnip-syntax">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h1>&lt;p>To demonstrate, we&amp;rsquo;ll use &lt;code>mtcars&lt;/code> once again.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parsnip&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidymodels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; ── Attaching packages ─────────────────────────────────────────────────────────────────── tidymodels 0.0.1 ──
&lt;/code>&lt;/pre>&lt;pre>&lt;code>#&amp;gt; ✔ ggplot2 3.1.0 ✔ recipes 0.1.4
#&amp;gt; ✔ tibble 1.4.2 ✔ broom 0.5.0
#&amp;gt; ✔ purrr 0.2.5 ✔ yardstick 0.0.2
#&amp;gt; ✔ dplyr 0.7.8 ✔ infer 0.3.1
#&amp;gt; ✔ rsample 0.0.3
&lt;/code>&lt;/pre>&lt;pre>&lt;code>#&amp;gt; ── Conflicts ────────────────────────────────────────────────────────────────────── tidymodels_conflicts() ──
#&amp;gt; ✖ purrr::accumulate() masks foreach::accumulate()
#&amp;gt; ✖ rsample::fill() masks tidyr::fill()
#&amp;gt; ✖ dplyr::filter() masks stats::filter()
#&amp;gt; ✖ yardstick::get_weights() masks keras::get_weights()
#&amp;gt; ✖ dplyr::lag() masks stats::lag()
#&amp;gt; ✖ rsample::populate() masks Rcpp::populate()
#&amp;gt; ✖ recipes::step() masks stats::step()
#&amp;gt; ✖ yardstick::tidy() masks broom::tidy(), recipes::tidy(), rsample::tidy()
#&amp;gt; ✖ purrr::when() masks foreach::when()
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">set.seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">4831&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">split&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">initial_split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtcars&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">9&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">car_train&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">training&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">car_test&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">testing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s preprocess these data to center and scale the predictors. We&amp;rsquo;ll use a basic recipe to do this:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">car_rec&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="nf">recipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">car_train&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_center&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">all_predictors&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">step_scale&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">all_predictors&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">prep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">training&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">car_train&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">retain&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># The processed versions are:&lt;/span>
&lt;span class="n">train_data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">juice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">car_rec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">test_data&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">bake&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">car_rec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">car_test&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use &lt;code>parsnip&lt;/code>, you start with a model &lt;em>specification&lt;/em>. This is a simple object that defines the &lt;em>intent&lt;/em> of the model. Since we will be using linear regression of various flavors, our first step is a simple statement:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">car_model&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">linear_reg&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">car_model&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; Linear Regression Model Specification (regression)
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s pretty underwhelming because we haven&amp;rsquo;t given it any details yet. &lt;code>parsnip&lt;/code> offers a variety of methods to fit this general model. We will use ordinary least squares, but could also use penalized least squares too (via the lasso, ridge regression, Bayesian estimation, dropout, etc). We differentiate these cases by the &lt;em>&lt;strong>computational engines&lt;/strong>&lt;/em>, which is a combination of the estimation type, such as least squares, and the &lt;em>implemention&lt;/em>. The latter could be an R package or some other computing platform like Spark or Tensorflow.&lt;/p>
&lt;p>To start simple, let&amp;rsquo;s use &lt;code>lm&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">lm_car_model&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">car_model&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;lm&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">lm_car_model&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; Linear Regression Model Specification (regression)
#&amp;gt;
#&amp;gt; Computational engine: lm
&lt;/code>&lt;/pre>&lt;p>There are no additional arguments that we should specify here, so let&amp;rsquo;s jump to fitting the actual model. Our two choices at this point are whether to use &lt;code>fit()&lt;/code> or &lt;code>fit_xy()&lt;/code>. &lt;code>fit()&lt;/code> takes a formula, while &lt;code>fit_xy()&lt;/code> takes objects for the predictors and outcome(s). Recall that &lt;code>glm&lt;/code> and &lt;code>lm&lt;/code> only allow for formulas, while &lt;code>glmnet&lt;/code> only takes a matrix of predictors and an outcome. &lt;code>parsnip&lt;/code> allows for either so that you can avoid having to think about what the underlying model function requires. To demonstrate, let&amp;rsquo;s make a simple model:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">lm_fit&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">lm_car_model&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">car_train&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># or&lt;/span>
&lt;span class="n">lm_car_model&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit_xy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">car_train&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">mpg&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">car_train&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mpg&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; parsnip model object
#&amp;gt;
#&amp;gt;
#&amp;gt; Call:
#&amp;gt; stats::lm(formula = formula, data = data)
#&amp;gt;
#&amp;gt; Coefficients:
#&amp;gt; (Intercept) cyl disp hp drat
#&amp;gt; 23.1945 -1.6396 0.0439 -0.0301 0.8517
#&amp;gt; wt qsec vs am gear
#&amp;gt; -6.0165 0.8668 0.8757 2.4274 -0.4658
#&amp;gt; carb
#&amp;gt; 0.7889
&lt;/code>&lt;/pre>&lt;p>If we had predictors that were factors, &lt;code>fit()&lt;/code> would be a better choice. If the underlying model takes a formula, the formula and data is passed directly to the function without modification. Otherwise, &lt;code>fit()&lt;/code> applies the standard &lt;code>model.matrix()&lt;/code> machinery to do the preprocessing and converts the data to the required format (e.g. a matrix for &lt;code>glmnet&lt;/code>). Note that, for Spark tables, &lt;code>fit()&lt;/code> must be used.&lt;/p>
&lt;p>It should be noted that &lt;code>lm_car_model&lt;/code> is a
&lt;a href="https://tidymodels.github.io/parsnip/reference/model_spec.html" target="_blank" rel="noopener">model specification object&lt;/a> while &lt;code>lm_fit&lt;/code> is a
&lt;a href="https://tidymodels.github.io/parsnip/reference/model_fit.html" target="_blank" rel="noopener">model fit object&lt;/a>.&lt;/p>
&lt;h1 id="more-engines">More Engines
&lt;a href="#more-engines">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h1>&lt;p>The value of &lt;code>parsnip&lt;/code> starts to show when we want to try different engines. Let&amp;rsquo;s take our same model and use Bayesian estimation to fit the parameters using Stan. We can change the engine to do so:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">stan_car_model&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">car_model&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;stan&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">stan_car_model&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; Linear Regression Model Specification (regression)
#&amp;gt;
#&amp;gt; Computational engine: stan
&lt;/code>&lt;/pre>&lt;p>To fit this model, &lt;code>parsnip&lt;/code> calls &lt;code>stan_glm()&lt;/code> from the
&lt;a href="http://mc-stan.org/rstanarm/" target="_blank" rel="noopener">&lt;code>rstanarm&lt;/code>&lt;/a> package. If you want to pass in arguments to this function, just add them to &lt;code>set_engine&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">stan_car_model&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">car_model&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;stan&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">iter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">5000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">prior_intercept&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rstanarm&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">cauchy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">seed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2347&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">stan_car_model&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; Linear Regression Model Specification (regression)
#&amp;gt;
#&amp;gt; Engine-Specific Arguments:
#&amp;gt; iter = 5000
#&amp;gt; prior_intercept = rstanarm::cauchy(0, 10)
#&amp;gt; seed = 2347
#&amp;gt;
#&amp;gt; Computational engine: stan
&lt;/code>&lt;/pre>&lt;p>The namespace was used to call &lt;code>cauchy()&lt;/code> since &lt;code>parsnip&lt;/code> does not fully attach the package when the model is fit.&lt;/p>
&lt;p>The model can be fit in the same way. We&amp;rsquo;ll add a feature here; &lt;code>rstanarm&lt;/code> prints &lt;em>a lot&lt;/em> of output when fitting. This can be helpful to diagnose issues but we&amp;rsquo;ll exclude it using a control function:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># don&amp;#39;t print anything:&lt;/span>
&lt;span class="n">ctrl&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">fit_control&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">verbosity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">stan_fit&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">stan_car_model&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">car_train&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">control&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctrl&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">stan_fit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; parsnip model object
#&amp;gt;
#&amp;gt; stan_glm
#&amp;gt; family: gaussian [identity]
#&amp;gt; formula: mpg ~ .
#&amp;gt; observations: 24
#&amp;gt; predictors: 11
#&amp;gt; ------
#&amp;gt; Median MAD_SD
#&amp;gt; (Intercept) 23.6 24.1
#&amp;gt; cyl -1.5 1.6
#&amp;gt; disp 0.0 0.0
#&amp;gt; hp 0.0 0.0
#&amp;gt; drat 0.8 2.4
#&amp;gt; wt -5.4 3.1
#&amp;gt; qsec 0.8 0.9
#&amp;gt; vs 0.7 3.2
#&amp;gt; am 2.3 2.7
#&amp;gt; gear -0.4 2.1
#&amp;gt; carb 0.6 1.4
#&amp;gt;
#&amp;gt; Auxiliary parameter(s):
#&amp;gt; Median MAD_SD
#&amp;gt; sigma 3.1 0.6
#&amp;gt;
#&amp;gt; Sample avg. posterior predictive distribution of y:
#&amp;gt; Median MAD_SD
#&amp;gt; mean_PPD 20.6 0.9
#&amp;gt;
#&amp;gt; ------
#&amp;gt; * For help interpreting the printed output see ?print.stanreg
#&amp;gt; * For info on the priors used see ?prior_summary.stanreg
&lt;/code>&lt;/pre>&lt;p>That was easy.&lt;/p>
&lt;p>&lt;strong>But wait, there&amp;rsquo;s more&lt;/strong>! Getting predictions for these models is simple and &lt;em>tidy&lt;/em>. We&amp;rsquo;ve been working on coming up with a
&lt;a href="https://tidymodels.github.io/model-implementation-principles/model-predictions.html" target="_blank" rel="noopener">standard for model predictions&lt;/a> where the predictions always return a tibble that has the same number of rows as the data being predicted. This solves the frustrating issue of having new data with missing predictor values and a &lt;code>predict()&lt;/code> method that returns predictions for only the complete data. In that case, you have to match up the rows of the original data to the predicted values.&lt;/p>
&lt;p>For regression, basic predictions come back in a column called &lt;code>.pred&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">predict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lm_fit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">car_test&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; # A tibble: 8 x 1
#&amp;gt; .pred
#&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1 17.5
#&amp;gt; 2 17.7
#&amp;gt; 3 11.0
#&amp;gt; 4 13.2
#&amp;gt; 5 13.2
#&amp;gt; 6 10.9
#&amp;gt; 7 31.9
#&amp;gt; 8 24.9
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">predict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stan_fit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">car_test&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; # A tibble: 8 x 1
#&amp;gt; .pred
#&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1 17.4
#&amp;gt; 2 17.9
#&amp;gt; 3 11.6
#&amp;gt; 4 13.6
#&amp;gt; 5 13.6
#&amp;gt; 6 10.9
#&amp;gt; 7 31.5
#&amp;gt; 8 24.9
&lt;/code>&lt;/pre>&lt;p>This can be easily joined to the original data and the &lt;code>.&lt;/code> in the name is there to prevent duplicate name conflicts.&lt;/p>
&lt;p>&lt;code>parsnip&lt;/code> also enables different types of predictions with a standard interface. To get interval estimates:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">predict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lm_fit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">car_test&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;conf_int&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; # A tibble: 8 x 2
#&amp;gt; .pred_lower .pred_upper
#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1 14.1 21.0
#&amp;gt; 2 11.6 23.8
#&amp;gt; 3 3.57 18.3
#&amp;gt; 4 7.41 18.9
#&amp;gt; 5 7.15 19.3
#&amp;gt; 6 6.39 15.5
#&amp;gt; 7 23.2 40.7
#&amp;gt; 8 19.0 30.9
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="c1"># Not really a confidence interval but gives quantiles of &lt;/span>
&lt;span class="c1"># the posterior distribution of the fitted values. &lt;/span>
&lt;span class="nf">predict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stan_fit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">car_test&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;conf_int&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; # A tibble: 8 x 2
#&amp;gt; .pred_lower .pred_upper
#&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1 14.0 20.7
#&amp;gt; 2 12.0 23.9
#&amp;gt; 3 5.03 18.4
#&amp;gt; 4 8.37 18.9
#&amp;gt; 5 8.17 19.3
#&amp;gt; 6 6.38 15.4
#&amp;gt; 7 23.1 39.6
#&amp;gt; 8 19.1 30.8
&lt;/code>&lt;/pre>&lt;p>As one might expect, the code to obtain these values using the original packages are very different from one another. &lt;code>parsnip&lt;/code> works to make the interface easy. A mapping between the available models and their prediction types is
&lt;a href="https://tidymodels.github.io/parsnip/articles/articles/Models.html" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;h1 id="standardized-arguments">Standardized Arguments
&lt;a href="#standardized-arguments">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h1>&lt;p>Now let&amp;rsquo;s look at estimating this model using an L2 penalty (a.k.a weight decay, a.k.a ridge regression). There are a few ways of doing this. &lt;code>glmnet&lt;/code> is an obvious choice. While we don&amp;rsquo;t have to declare the size of the penalty at the time of model fitting, we&amp;rsquo;ll do so below for illustration.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">x_mat&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">car_train&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">mpg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">as.matrix&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nf">glmnet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x_mat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">car_train&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">mpg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">alpha&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lambda&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0.1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>alpha = 0&lt;/code> tells &lt;code>glmnet&lt;/code> to only use an L2 penalty (as opposed to L1 and L2).&lt;/p>
&lt;p>For &lt;code>keras&lt;/code>,
&lt;a href="https://keras.rstudio.com/articles/tutorial_basic_regression.html" target="_blank" rel="noopener">possible syntax&lt;/a> could be:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">lr_model&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">keras_model_sequential&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">lr_model&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">layer_dense&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">units&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_shape&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">dim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x_mat&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">[2]&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">activation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#39;linear&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">kernel_regularizer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">regularizer_l2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0.1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">early_stopping&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">callback_early_stopping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">monitor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#39;loss&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">min_delta&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0.000001&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">lr_model&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">compile&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">loss&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#39;mean_squared_error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">optimizer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">optimizer_adam&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0.001&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">lr_model&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x_mat&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">car_train&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">mpg&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">epochs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">batch_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">callbacks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">early_stopping&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is very powerful but maybe it&amp;rsquo;s not something that you want to have to type more than once.&lt;/p>
&lt;p>&lt;code>parsnip&lt;/code> model functions, like &lt;code>linear_reg()&lt;/code>, can also have &lt;em>main arguments&lt;/em> that are standardized and avoid jargon like &lt;code>lambda&lt;/code> or &lt;code>kernel_regularizer&lt;/code>. Here, a model specification would be:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">penalized&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">linear_reg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mixture&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">penalty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0.1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">penalized&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; Linear Regression Model Specification (regression)
#&amp;gt;
#&amp;gt; Main Arguments:
#&amp;gt; penalty = 0.1
#&amp;gt; mixture = 0
&lt;/code>&lt;/pre>&lt;p>&lt;code>penalty&lt;/code> is the amount of regularization penalty that we want to use. &lt;code>mixture&lt;/code> is only used for models like &lt;code>glmnet&lt;/code> that can fit different types of penalties, and is the proportion of the penalty that corresponds to weight decay (in other words, &lt;code>alpha&lt;/code> from above).&lt;/p>
&lt;p>From here, the &lt;code>glmnet&lt;/code> model would be:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">glmn_fit&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">penalized&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;glmnet&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">car_train&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">glmn_fit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; parsnip model object
#&amp;gt;
#&amp;gt;
#&amp;gt; Call: glmnet::glmnet(x = as.matrix(x), y = y, family = &amp;quot;gaussian&amp;quot;, alpha = ~0, lambda = ~0.1)
#&amp;gt;
#&amp;gt; Df %Dev Lambda
#&amp;gt; [1,] 10 0.854 0.1
&lt;/code>&lt;/pre>&lt;p>For &lt;code>keras&lt;/code>, we can add the other options (unrelated to the penalty) via &lt;code>set_engine()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">early_stopping&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">callback_early_stopping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">monitor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#39;loss&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">min_delta&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0.000001&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">keras_fit&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>
&lt;span class="n">penalized&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">set_engine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;keras&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">epochs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">batch_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">callbacks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!!&lt;/span>&lt;span class="n">early_stopping&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="n">.,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">car_train&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">control&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctrl&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">keras_fit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>#&amp;gt; parsnip model object
#&amp;gt;
#&amp;gt; Model
#&amp;gt; ___________________________________________________________________________
#&amp;gt; Layer (type) Output Shape Param #
#&amp;gt; ===========================================================================
#&amp;gt; dense_1 (Dense) (None, 1) 11
#&amp;gt; ___________________________________________________________________________
#&amp;gt; dense_2 (Dense) (None, 1) 2
#&amp;gt; ===========================================================================
#&amp;gt; Total params: 13
#&amp;gt; Trainable params: 13
#&amp;gt; Non-trainable params: 0
#&amp;gt; ___________________________________________________________________________
&lt;/code>&lt;/pre>&lt;p>The main arguments are standardized in &lt;code>parsnip&lt;/code>, so that &lt;code>logistic_reg()&lt;/code> and other functions use the same name, and are being standardized in other packages like
&lt;a href="https://tidymodels.github.io/recipes/" target="_blank" rel="noopener">&lt;code>recipes&lt;/code>&lt;/a> and
&lt;a href="https://tidymodels.github.io/dials/" target="_blank" rel="noopener">&lt;code>dials&lt;/code>&lt;/a>.&lt;/p>
&lt;h1 id="what-parsnip-is-and-what-it-isnt">What parsnip is and what it isn&amp;rsquo;t
&lt;a href="#what-parsnip-is-and-what-it-isnt">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h1>&lt;p>Other packages, such as
&lt;a href="https://topepo.github.io/caret/" target="_blank" rel="noopener">&lt;code>caret&lt;/code>&lt;/a> and &lt;code>mlr&lt;/code>, help to solve the R model API issue. These packages do a lot of other things too: preprocessing, model tuning, resampling, feature selection, ensembling, and so on. In the tidyverse, we strive to make our packages modular and &lt;code>parsnip&lt;/code> is designed &lt;em>only&lt;/em> to solve the interface issue. It is &lt;strong>not&lt;/strong> designed to be a drop-in replacement for
&lt;a href="https://topepo.github.io/caret/" target="_blank" rel="noopener">&lt;code>caret&lt;/code>&lt;/a>.&lt;/p>
&lt;p>The
&lt;a href="https://github.com/tidymodels" target="_blank" rel="noopener">&lt;code>tidymodels&lt;/code> package collection&lt;/a>, which includes &lt;code>parsnip&lt;/code>, has other packages for many of these tasks, and they are designed to work together. We are working towards higher-level APIs that can replicate and extend what the current model packages can do.&lt;/p>
&lt;p>For example, &lt;code>fit()&lt;/code> and &lt;code>fit_xy()&lt;/code> do not involve recipes. It might seem natural to include a recipe interface like &lt;code>caret&lt;/code> does (and, originally, &lt;code>parsnip&lt;/code> did). The reason that recipes are excluded from fitting &lt;code>parsnip&lt;/code> objects is that you probably want to process the recipe &lt;em>once&lt;/em> and use it across different models. To include it would link that specific recipe to &lt;em>each&lt;/em> fitted model object.&lt;/p>
&lt;p>As an alternative, we are working on a different object type that is similar to existing pipelines where a set of modeling activities can be woven together to represent the entire &lt;strong>modeling process&lt;/strong>. To get an idea of the activities that we have in store for tidy modeling, look
&lt;a href="https://github.com/orgs/tidymodels/projects" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;h1 id="whats-next">What&amp;rsquo;s next
&lt;a href="#whats-next">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h1>&lt;p>Subsequent blog posts on &lt;code>parsnip&lt;/code> will talk about the underlying architecture and choices that we made along the line (and why). We&amp;rsquo;ll also talk more about how &lt;code>parsnip&lt;/code> integrates with other &lt;code>tidymodels&lt;/code> packages, how quasiquotation can/should be used, and some other features that are
&lt;a href="https://tidymodels.github.io/parsnip/reference/descriptors.html" target="_blank" rel="noopener">particularly interesting&lt;/a> to us.&lt;/p></description></item></channel></rss>