<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>corrr | Tidyverse</title><link>https://www.tidyverse.org/tags/corrr/</link><atom:link href="https://www.tidyverse.org/tags/corrr/index.xml" rel="self" type="application/rss+xml"/><description>corrr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 09 Dec 2020 00:00:00 +0000</lastBuildDate><item><title>corrr 0.4.3</title><link>https://www.tidyverse.org/blog/2020/12/corrr-0-4-3/</link><pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2020/12/corrr-0-4-3/</guid><description>&lt;!--
TODO:
* [ ] Pick category and tags (see existing with `post_tags()`)
* [ ] Find photo &amp; update yaml metadata
* [ ] Create `thumbnail-sq.jpg`; height and width should be equal
* [ ] Create `thumbnail-wd.jpg`; width should be >5x height
* [ ] `hugodown::use_tidy_thumbnail()`
* [ ] Add intro sentence
* [ ] `use_tidy_thanks()`
-->
&lt;p>We&amp;rsquo;re thrilled to announce the release of
&lt;a href="https://corrr.tidymodels.org/" target="_blank" rel="noopener">corrr&lt;/a> 0.4.3. corrr is for exploring correlations in R. It focuses on creating and working with data frames of correlations (instead of matrices) that can be easily explored via corrr functions or by leveraging tools like those in the tidyverse.&lt;/p>
&lt;p>You can install it from CRAN with:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">install.packages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;corrr&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This blog post will describe changes in the new version. You can see a full list of changes in the
&lt;a href="https://corrr.tidymodels.org/news/index.html" target="_blank" rel="noopener">release notes&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">corrr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dplyr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">warn.conflicts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">FALSE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="changes">Changes
&lt;a href="#changes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>This version of corrr has a few changes in the behavior of user-facing functions as well as the introduction of a new user-facing function.&lt;/p>
&lt;p>There are also some internal changes that make package functions more robust. These changes don&amp;rsquo;t affect how you use the package but address some edge cases where previous versions were failing inappropriately.&lt;/p>
&lt;p>New features of note are:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The first column of a &lt;code>cor_df&lt;/code> object is now named &amp;ldquo;term&amp;rdquo;. Previously it was named &amp;ldquo;rowname&amp;rdquo;. The name &amp;ldquo;term&amp;rdquo; is consistent with the output of &lt;code>broom::tidy()&lt;/code>. &lt;strong>This is a breaking change&lt;/strong>: code written to make use of the column name &amp;ldquo;rowname&amp;rdquo; will have to be amended.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An &lt;code>.order&lt;/code> argument has been added to &lt;code>rplot()&lt;/code> to allow users to choose the ordering of variables along the axes in the output plot. The default is that the output plots retain the variable ordering in the input &lt;code>cor_df&lt;/code> object. Setting &lt;code>.order&lt;/code> to &amp;ldquo;alphabet&amp;rdquo; orders the variables in alphabetical order in the plots.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A new function, &lt;code>colpair_map()&lt;/code>, allows for column comparisons using the values returned by an arbitrary function. &lt;code>colpair_map()&lt;/code> is discussed in detail below.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="new-column-name-in-cor_df-objects">New column name in &lt;code>cor_df&lt;/code> objects
&lt;a href="#new-column-name-in-cor_df-objects">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>We can create a &lt;code>cor_df&lt;/code> object containing the pairwise correlations between a few numerical columns of the &lt;code>palmerpenguins::penguins&lt;/code> data set to see that the first column is now named &amp;ldquo;term&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">palmerpenguins&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">penguins_cor&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">penguins&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bill_length_mm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bill_depth_mm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">flipper_length_mm&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">correlate&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">penguins_cor&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 3 x 4
## term bill_length_mm bill_depth_mm flipper_length_mm
## &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 bill_length_mm NA -0.235 0.656
## 2 bill_depth_mm -0.235 NA -0.584
## 3 flipper_length_mm 0.656 -0.584 NA
&lt;/code>&lt;/pre>
&lt;h3 id="ordering-variables-in-rplot-output">Ordering variables in &lt;code>rplot()&lt;/code> output
&lt;a href="#ordering-variables-in-rplot-output">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Previously, the default behavior of &lt;code>rplot()&lt;/code> was that the variables were displayed in alphabetical order in the output. This was an artifact of using &lt;code>ggplot2&lt;/code> and inheriting its behavior. The new default is to retain the ordering of variables in the input data:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">rplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">penguins_cor&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="figure/unnamed-chunk-3-1.png" alt="plot of chunk unnamed-chunk-3">&lt;/p>
&lt;p>If alphabetical ordering is desired, set &lt;code>.order&lt;/code> to &amp;ldquo;alphabet&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">rplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">penguins_cor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">.order&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;alphabet&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="figure/unnamed-chunk-4-1.png" alt="plot of chunk unnamed-chunk-4">&lt;/p>
&lt;h2 id="colpair_map">&lt;code>colpair_map()&lt;/code>
&lt;a href="#colpair_map">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Doing analysis with corrr has always been about correlations, usually starting with a call to &lt;code>correlate()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">mini_mtcars&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">mtcars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cyl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">disp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">correlate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mini_mtcars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>##
## Correlation method: 'pearson'
## Missing treated using: 'pairwise.complete.obs'
&lt;/code>&lt;/pre>&lt;pre>&lt;code>## # A tibble: 3 x 4
## term mpg cyl disp
## &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 mpg NA -0.852 -0.848
## 2 cyl -0.852 NA 0.902
## 3 disp -0.848 0.902 NA
&lt;/code>&lt;/pre>&lt;p>The result is a data frame where each of the columns in the original data are compared on the basis of their correlation coefficients. But the correlation coefficient is just one possible statistic that can be used for comparing columns with one another. Correlations are also limited in their usefulness as they are only applicable to pairs of numeric columns.&lt;/p>
&lt;p>This version of corrr introduces &lt;code>colpair_map()&lt;/code>, which allows you to apply your own choice of function across the columns of your data. Just like with &lt;code>correlate()&lt;/code>, &lt;code>colpair_map()&lt;/code> takes a data frame as its first argument, while the second argument is for the function you wish to apply.&lt;/p>
&lt;p>Let&amp;rsquo;s demonstrate using the &lt;code>mini_mtcars&lt;/code> data frame we just created. Lets say we are interested in covariance values rather than correlations. These can be found by passing in &lt;code>cov()&lt;/code> from the stats package:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">cov_df&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">colpair_map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mini_mtcars&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stats&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cov&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cov_df&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 3 x 4
## term mpg cyl disp
## &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 mpg NA -9.17 -633.
## 2 cyl -9.17 NA 200.
## 3 disp -633. 200. NA
&lt;/code>&lt;/pre>&lt;p>The resulting data frame behaves just like one returned by &lt;code>correlate()&lt;/code>, except that it is populated with covariance values rather than correlations. This means we still have access to all corrr&amp;rsquo;s other tooling when working with it. We can still use &lt;code>shave()&lt;/code> for example to remove duplication, which will set the upper triangle of values to &lt;code>NA&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">cov_df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">shave&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 3 x 4
## term mpg cyl disp
## &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 mpg NA NA NA
## 2 cyl -9.17 NA NA
## 3 disp -633. 200. NA
&lt;/code>&lt;/pre>&lt;p>Similarly, we can still use &lt;code>stretch()&lt;/code> to get the resulting data frame into a longer format:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">cov_df&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span>
&lt;span class="nf">stretch&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 9 x 3
## x y r
## &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1 mpg mpg NA
## 2 mpg cyl -9.17
## 3 mpg disp -633.
## 4 cyl mpg -9.17
## 5 cyl cyl NA
## 6 cyl disp 200.
## 7 disp mpg -633.
## 8 disp cyl 200.
## 9 disp disp NA
&lt;/code>&lt;/pre>&lt;p>The first part of the name (&amp;ldquo;colpair_&amp;quot;) comes from the fact that we are comparing pairs of columns. The second part of the name (&amp;quot;_map&amp;rdquo;) is designed to evoke the same ideas as in purrr&amp;rsquo;s family of &lt;code>map_*&lt;/code> functions. These iterate over a set of elements and apply a function to each of them. In this case, &lt;code>colpair_map()&lt;/code> is iterating over each possible pair of columns and applying a function to each pairing.&lt;/p>
&lt;p>As such, any function passed to &lt;code>colpair_map()&lt;/code> must accept a vector for both its first and second arguments. To illustrate, let&amp;rsquo;s say we wanted to run a series t-tests to see which of our variables are significantly related to one another. We can write a function to do so as follows:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">calc_ttest_p_value&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vec_a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vec_b&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="nf">t.test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vec_a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vec_b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">p.value&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function returns the t-test&amp;rsquo;s p-value. The two arguments to the function are the two vectors being compared. Let&amp;rsquo;s first run the function on each pair of columns individually.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">calc_ttest_p_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mini_mtcars[&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;mpg&amp;#34;&lt;/span>&lt;span class="n">]&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mini_mtcars[&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;cyl&amp;#34;&lt;/span>&lt;span class="n">]&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## [1] 9.507708e-15
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">calc_ttest_p_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mini_mtcars[&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;mpg&amp;#34;&lt;/span>&lt;span class="n">]&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mini_mtcars[&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;disp&amp;#34;&lt;/span>&lt;span class="n">]&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## [1] 7.978234e-11
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">calc_ttest_p_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mini_mtcars[&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;cyl&amp;#34;&lt;/span>&lt;span class="n">]&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mini_mtcars[&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;disp&amp;#34;&lt;/span>&lt;span class="n">]&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## [1] 1.774454e-11
&lt;/code>&lt;/pre>&lt;p>As you can see, this is tedious and involves a lot of repeated code. But &lt;code>colpair_map()&lt;/code> lets us do this for all column pairings at once and the output makes the results easy to read.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">colpair_map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mini_mtcars&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">calc_ttest_p_value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 3 x 4
## term mpg cyl disp
## &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 mpg NA 9.51e-15 7.98e-11
## 2 cyl 9.51e-15 NA 1.77e-11
## 3 disp 7.98e-11 1.77e-11 NA
&lt;/code>&lt;/pre>&lt;p>Having the ability to use arbitrary functions like this opens up intriguing possibilities for analyzing data. One limitation of using only correlations is they will only work for continuous variables. With &lt;code>colpair_map()&lt;/code>, we have a way of comparing categorical columns with one another. Let&amp;rsquo;s try this with a few categorical columns from dplyr&amp;rsquo;s dataset of Star Wars characters.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="n">mini_star_wars&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">starwars&lt;/span> &lt;span class="o">%&amp;gt;%&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hair_color&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">eye_color&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">skin_color&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">head&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mini_star_wars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 6 x 3
## hair_color eye_color skin_color
## &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 blond blue fair
## 2 &amp;lt;NA&amp;gt; yellow gold
## 3 &amp;lt;NA&amp;gt; red white, blue
## 4 none yellow white
## 5 brown brown light
## 6 brown, grey blue light
&lt;/code>&lt;/pre>&lt;p>There are a few different ways of finding the strength of the relationship
between two categorical variables. One useful measure is called Cramer&amp;rsquo;s V,
which takes on values between 0 and 1 depending on how closely associated the
variables are. The rcompanion package provides an implementation of Cramer&amp;rsquo;s V
which we can make use of.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rcompanion&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">colpair_map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mini_star_wars&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cramerV&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 3 x 4
## term hair_color eye_color skin_color
## &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 hair_color NA 0.449 0.510
## 2 eye_color 0.449 NA 0.691
## 3 skin_color 0.510 0.691 NA
&lt;/code>&lt;/pre>&lt;p>&lt;code>colpair_map()&lt;/code> will allow you pass additional arguments to the called function via the dots (&lt;code>...&lt;/code>). For example, the &lt;code>cramerV()&lt;/code> function will allow you to specify the number of decimal places to round the results using &lt;code>digits&lt;/code>. Let&amp;rsquo;s instead pass in this option via the dots:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="nf">colpair_map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mini_star_wars&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cramerV&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">digits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>## # A tibble: 3 x 4
## term hair_color eye_color skin_color
## &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 hair_color NA 0.4 0.5
## 2 eye_color 0.4 NA 0.7
## 3 skin_color 0.5 0.7 NA
&lt;/code>&lt;/pre>&lt;p>We are excited to see the different ways &lt;code>colpair_map()&lt;/code> gets used by the R community. We are hopeful that it will open up new and exciting ways of conducting data analysis.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements
&lt;a href="#acknowledgements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We&amp;rsquo;d like to thank everyone who contributed to the package or filed an issue since the last release:
&lt;a href="https://github.com/Aariq" target="_blank" rel="noopener">@Aariq&lt;/a>,
&lt;a href="https://github.com/antoine-sachet" target="_blank" rel="noopener">@antoine-sachet&lt;/a>,
&lt;a href="https://github.com/bjornerstedt" target="_blank" rel="noopener">@bjornerstedt&lt;/a>,
&lt;a href="https://github.com/jameslairdsmith" target="_blank" rel="noopener">@jameslairdsmith&lt;/a>,
&lt;a href="https://github.com/jamesMo84" target="_blank" rel="noopener">@jamesMo84&lt;/a>,
&lt;a href="https://github.com/juliangkr" target="_blank" rel="noopener">@juliangkr&lt;/a>,
&lt;a href="https://github.com/juliasilge" target="_blank" rel="noopener">@juliasilge&lt;/a>,
&lt;a href="https://github.com/mattwarkentin" target="_blank" rel="noopener">@mattwarkentin&lt;/a>,
&lt;a href="https://github.com/mwilson19" target="_blank" rel="noopener">@mwilson19&lt;/a>,
&lt;a href="https://github.com/norhther" target="_blank" rel="noopener">@norhther&lt;/a>,
&lt;a href="https://github.com/thisisdaryn" target="_blank" rel="noopener">@thisisdaryn&lt;/a>, and
&lt;a href="https://github.com/topepo" target="_blank" rel="noopener">@topepo&lt;/a>.&lt;/p></description></item><item><title>tidymodels updates</title><link>https://www.tidyverse.org/blog/2019/09/tidymodels-2019-09/</link><pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.tidyverse.org/blog/2019/09/tidymodels-2019-09/</guid><description>&lt;p>We&amp;rsquo;ve sent a few packages to CRAN recently. Here&amp;rsquo;s a recap of the changes (and some notes at the bottom):&lt;/p>
&lt;h2 id="recipes-016">recipes 0.1.6
&lt;a href="#recipes-016">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>
&lt;h3 id="breaking-changes">Breaking Changes
&lt;a href="#breaking-changes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>Since 2018, a warning has been issued when the wrong argument was used in &lt;code>bake(recipe, newdata)&lt;/code>. The deprecation period is over and &lt;code>new_data&lt;/code> is officially required.&lt;/li>
&lt;li>Previously, if
&lt;a href="https://tidymodels.github.io/recipes/reference/step_other.html" target="_blank" rel="noopener">&lt;code>step_other()&lt;/code>&lt;/a> did &lt;em>not&lt;/em> collapse any levels, it would still add an &amp;ldquo;other&amp;rdquo; level to the factor. This would lump new factor levels into &amp;ldquo;other&amp;rdquo; when data were baked (as
&lt;a href="https://tidymodels.github.io/recipes/reference/step_novel.html" target="_blank" rel="noopener">&lt;code>step_novel()&lt;/code>&lt;/a> does). This no longer occurs, since it was inconsistent with &lt;code>?step_other&lt;/code>, which said that: &amp;ldquo;If no pooling is done the data are unmodified&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;h3 id="new-operations">New Operations:
&lt;a href="#new-operations">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_normalize.html" target="_blank" rel="noopener">&lt;code>step_normalize()&lt;/code>&lt;/a> centers and scales the data (if you are, like Max, too lazy to use two separate steps).&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_unknown.html" target="_blank" rel="noopener">&lt;code>step_unknown()&lt;/code>&lt;/a> will convert missing data in categorical columns to &amp;ldquo;unknown&amp;rdquo; and update factor levels.&lt;/li>
&lt;/ul>
&lt;h3 id="other-changes">Other Changes:
&lt;a href="#other-changes">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>If the &lt;code>threshold&lt;/code> argument of
&lt;a href="https://tidymodels.github.io/recipes/reference/step_other.html" target="_blank" rel="noopener">&lt;code>step_other()&lt;/code>&lt;/a> is greater than one, it specifies the minimum sample size before the levels of the factor are collapsed into the &amp;ldquo;other&amp;rdquo; category.
&lt;a href="https://github.com/tidymodels/recipes/issues/289" target="_blank" rel="noopener">#289&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_knnimpute.html" target="_blank" rel="noopener">&lt;code>step_knnimpute()&lt;/code>&lt;/a> can now pass two options to the underlying knn code, including the number of threads (
&lt;a href="https://github.com/tidymodels/recipes/issues/323" target="_blank" rel="noopener">#323&lt;/a>).&lt;/li>
&lt;li>Due to changes by CRAN,
&lt;a href="https://tidymodels.github.io/recipes/reference/step_nnmf.html" target="_blank" rel="noopener">&lt;code>step_nnmf()&lt;/code>&lt;/a> only works on versions of R &amp;gt;= 3.6.0 due to dependency issues.&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_dummy.html" target="_blank" rel="noopener">&lt;code>step_dummy()&lt;/code>&lt;/a> and
&lt;a href="https://tidymodels.github.io/recipes/reference/step_other.html" target="_blank" rel="noopener">&lt;code>step_other()&lt;/code>&lt;/a> are now tolerant to cases where that step&amp;rsquo;s selectors do not capture any columns. In this case, no modifications to the data are made. (
&lt;a href="https://github.com/tidymodels/recipes/issues/290" target="_blank" rel="noopener">#290&lt;/a>,
&lt;a href="https://github.com/tidymodels/recipes/issues/348" target="_blank" rel="noopener">#348&lt;/a>)&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_dummy.html" target="_blank" rel="noopener">&lt;code>step_dummy()&lt;/code>&lt;/a> can now retain the original columns that are used to make the dummy variables by setting &lt;code>preserve = TRUE&lt;/code>. (
&lt;a href="https://github.com/tidymodels/recipes/issues/328" target="_blank" rel="noopener">#328&lt;/a>)&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_other.html" target="_blank" rel="noopener">&lt;code>step_other()&lt;/code>&lt;/a>&amp;lsquo;s print method only reports the variables with collapsed levels (as opposed to any column that was &lt;em>tested&lt;/em> to see if it needed collapsing). (
&lt;a href="https://github.com/tidymodels/recipes/issues/338" target="_blank" rel="noopener">#338&lt;/a>)&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/recipes/reference/step_pca.html" target="_blank" rel="noopener">&lt;code>step_pca()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/recipes/reference/step_kpca.html" target="_blank" rel="noopener">&lt;code>step_kpca()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/recipes/reference/step_ica.html" target="_blank" rel="noopener">&lt;code>step_ica()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/recipes/reference/step_nnmf.html" target="_blank" rel="noopener">&lt;code>step_nnmf()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/recipes/reference/step_pls.html" target="_blank" rel="noopener">&lt;code>step_pls()&lt;/code>&lt;/a>, and
&lt;a href="https://tidymodels.github.io/recipes/reference/step_isomap.html" target="_blank" rel="noopener">&lt;code>step_isomap()&lt;/code>&lt;/a> now accept zero components. In this case, the original data are returned. Please use this with great care.&lt;/li>
&lt;/ul>
&lt;h2 id="embed-003">embed 0.0.3
&lt;a href="#embed-003">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Two new steps were added:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://tidymodels.github.io/embed/reference/step_umap.html" target="_blank" rel="noopener">&lt;code>step_umap()&lt;/code>&lt;/a> was added for both supervised and unsupervised encodings.&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/embed/reference/step_woe.html" target="_blank" rel="noopener">&lt;code>step_woe()&lt;/code>&lt;/a> creates weight of evidence encodings. Thanks to Athos Petri Damiani for this.&lt;/li>
&lt;/ul>
&lt;h2 id="rsample-005">rsample 0.0.5
&lt;a href="#rsample-005">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>Added three functions to compute different
&lt;a href="https://tidymodels.github.io/rsample/articles/Applications/Intervals.html" target="_blank" rel="noopener">bootstrap confidence intervals&lt;/a>.&lt;/li>
&lt;li>A new function (
&lt;a href="https://tidymodels.github.io/rsample/reference/add_resample_id.html" target="_blank" rel="noopener">&lt;code>add_resample_id()&lt;/code>&lt;/a>) augments a data frame with columns for the resampling identifier.&lt;/li>
&lt;li>Updated
&lt;a href="https://tidymodels.github.io/rsample/reference/initial_split.html" target="_blank" rel="noopener">&lt;code>initial_split()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/rsample/reference/mc_cv.html" target="_blank" rel="noopener">&lt;code>mc_cv()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/rsample/reference/vfold_cv.html" target="_blank" rel="noopener">&lt;code>vfold_cv()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/rsample/reference/bootstraps.html" target="_blank" rel="noopener">&lt;code>bootstraps()&lt;/code>&lt;/a>, and
&lt;a href="https://tidymodels.github.io/rsample/reference/group_vfold_cv.html" target="_blank" rel="noopener">&lt;code>group_vfold_cv()&lt;/code>&lt;/a> to use tidyselect on the stratification variable.&lt;/li>
&lt;li>Updated
&lt;a href="https://tidymodels.github.io/rsample/reference/initial_split.html" target="_blank" rel="noopener">&lt;code>initial_split()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/rsample/reference/mc_cv.html" target="_blank" rel="noopener">&lt;code>mc_cv()&lt;/code>&lt;/a>,
&lt;a href="https://tidymodels.github.io/rsample/reference/vfold_cv.html" target="_blank" rel="noopener">&lt;code>vfold_cv()&lt;/code>&lt;/a>, and
&lt;a href="https://tidymodels.github.io/rsample/reference/bootstraps.html" target="_blank" rel="noopener">&lt;code>bootstraps()&lt;/code>&lt;/a> with new &lt;code>breaks&lt;/code> parameter that specifies the number of bins to stratify by for a numeric stratification variable.&lt;/li>
&lt;/ul>
&lt;h2 id="parsnip-0031">parsnip 0.0.3.1
&lt;a href="#parsnip-0031">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>Unplanned release based on CRAN requirements for Solaris.&lt;/p>
&lt;h3 id="breaking-changes-1">Breaking Changes
&lt;a href="#breaking-changes-1">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>The method that &lt;code>parsnip&lt;/code> uses to store the model information has changed. Any custom models from previous versions will need to use the new method for registering models. The methods are detailed in &lt;code>?get_model_env&lt;/code> and the
&lt;a href="https://tidymodels.github.io/parsnip/articles/articles/Scratch.html" target="_blank" rel="noopener">package vignette for adding models&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The mode needs to be declared for models that can be used for more than one mode prior to fitting and/or translation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For &lt;code>surv_reg()&lt;/code>, the engine that uses the &lt;code>survival&lt;/code> package is now called &lt;code>survival&lt;/code> instead of &lt;code>survreg&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For &lt;code>glmnet&lt;/code> models, the full regularization path is always fit regardless of the value given to &lt;code>penalty&lt;/code>. Previously, the model was fit by passing &lt;code>penalty&lt;/code> to &lt;code>glmnet&lt;/code>'s &lt;code>lambda&lt;/code> argument, and the model could only make predictions at those specific values.
&lt;a href="https://github.com/tidymodels/parsnip/issues/195" target="_blank" rel="noopener">(#195)&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="new-features">New Features
&lt;a href="#new-features">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>add_rowindex()&lt;/code> can create a column called &lt;code>.row&lt;/code> to a data frame.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If a computational engine is not explicitly set, a default will be used. Each default is documented on the corresponding model page. A warning is issued at fit time unless verbosity is zero.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>nearest_neighbor()&lt;/code> gained a &lt;code>multi_predict&lt;/code> method. The &lt;code>multi_predict()&lt;/code> documentation is a little better organized.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A suite of internal functions were added to help with upcoming model tuning features.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A &lt;code>parsnip&lt;/code> object always saved the name(s) of the outcome variable(s) for proper naming of the predicted values.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="corrr-04">corrr 0.4
&lt;a href="#corrr-04">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>
&lt;h3 id="new-features-1">New features
&lt;a href="#new-features-1">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>New function called
&lt;a href="https://tidymodels.github.io/corrr/reference/dice.html" target="_blank" rel="noopener">&lt;code>dice()&lt;/code>&lt;/a> function, wraps &lt;code>focus(x,..., mirror = TRUE)&lt;/code>&lt;/li>
&lt;li>A new
&lt;a href="https://tidymodels.github.io/corrr/reference/retract.html" target="_blank" rel="noopener">&lt;code>retract()&lt;/code>&lt;/a> function does the opposite of &lt;code>stretch()&lt;/code>&lt;/li>
&lt;li>A new argument was added to
&lt;a href="https://tidymodels.github.io/corrr/reference/stretch.html" target="_blank" rel="noopener">&lt;code>stretch()&lt;/code>&lt;/a> called &lt;code>remove.dups&lt;/code>. It removes duplicates with out removing all NAs.&lt;/li>
&lt;/ul>
&lt;h3 id="improvements">Improvements
&lt;a href="#improvements">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>correlate()&lt;/code>'s interface for databases was improved. It now only calculates unique pairs, and simplifies the formula that ultimately runs in-database. We also re-added the vignette to the package, which is also available on the site as an
&lt;a href="https://tidymodels.github.io/corrr/articles/databases.html" target="_blank" rel="noopener">article&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="tidypredict-043">tidypredict 0.4.3
&lt;a href="#tidypredict-043">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>
&lt;h3 id="new-models">New models
&lt;a href="#new-models">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The new version is now able to parse the following models:&lt;/p>
&lt;ul>
&lt;li>&lt;code>cubist()&lt;/code>, from the &lt;code>Cubist&lt;/code> package&lt;/li>
&lt;li>&lt;code>ctree()&lt;/code>, from the &lt;code>partykit&lt;/code> package&lt;/li>
&lt;li>XGBoost trained models, via the &lt;code>xgboost&lt;/code> package&lt;/li>
&lt;/ul>
&lt;h3 id="new-features-2">New features
&lt;a href="#new-features-2">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>Integration with &lt;code>broom&lt;/code>'s &lt;code>tidy()&lt;/code> function. It works with Regression models only&lt;/li>
&lt;li>Adds support for &lt;code>parsnip&lt;/code> fitted models: &lt;code>lm&lt;/code>, &lt;code>randomForest&lt;/code>, &lt;code>ranger&lt;/code>, and &lt;code>earth&lt;/code>&lt;/li>
&lt;li>Adds
&lt;a href="https://tidymodels.github.io/tidypredict/reference/as_parsed_model.html" target="_blank" rel="noopener">&lt;code>as_parsed_model()&lt;/code>&lt;/a> function. It adds the proper class components to the list. This allows any model exported in the correct spec to be read in by &lt;code>tidypredict&lt;/code>. See the
&lt;a href="https://tidymodels.github.io/tidypredict/articles/save.html" target="_blank" rel="noopener">Save Models&lt;/a> and
&lt;a href="https://tidymodels.github.io/tidypredict/articles/non-r.html" target="_blank" rel="noopener">Non-R models&lt;/a> for more information&lt;/li>
&lt;/ul>
&lt;h3 id="improvements-1">Improvements
&lt;a href="#improvements-1">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>Now supports classification models from &lt;code>ranger&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="website">Website
&lt;a href="#website">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>The package&amp;rsquo;s
&lt;a href="https://tidymodels.github.io/tidypredict/index.html" target="_blank" rel="noopener">official website&lt;/a> has been expanded greatly. Here are some highlights:&lt;/p>
&lt;ul>
&lt;li>An article per each supported model, they are found under Model List&lt;/li>
&lt;li>A how to guide to save and reload models,
&lt;a href="https://tidymodels.github.io/tidypredict/articles/save.html" target="_blank" rel="noopener">link here&lt;/a>&lt;/li>
&lt;li>How to integrate non-R models to &lt;code>tidypredict&lt;/code>,
&lt;a href="https://tidymodels.github.io/tidypredict/articles/non-r.html" target="_blank" rel="noopener">link here&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="yardstick-004">yardstick 0.0.4
&lt;a href="#yardstick-004">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>
&lt;h3 id="new-metrics">New Metrics
&lt;a href="#new-metrics">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;p>Two new metrics have been added to yardstick:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://tidymodels.github.io/yardstick/reference/iic.html" target="_blank" rel="noopener">&lt;code>iic()&lt;/code>&lt;/a> is a numeric metric for computing the index of ideality of correlation. It is a potential alternative to the traditional correlation coefficient, and has been used in QSAR models (
&lt;a href="https://github.com/tidymodels/yardstick/issues/87" target="_blank" rel="noopener">#115&lt;/a>).&lt;/li>
&lt;li>
&lt;a href="https://tidymodels.github.io/yardstick/reference/average_precision.html" target="_blank" rel="noopener">&lt;code>average_precision()&lt;/code>&lt;/a> is a probability metric that can be used as an alternative to &lt;code>pr_auc()&lt;/code>. It has the benefit of avoiding any issues of ambiguity in the edge case where &lt;code>recall == 0&lt;/code> and the current number of false positives is &lt;code>0&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="improvements-2">Improvements
&lt;a href="#improvements-2">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>pr_curve()&lt;/code> (and by extension &lt;code>pr_auc()&lt;/code>) has been greatly improved to better handle edge cases when duplicate class probability values are present. Additionally, the first precision value in the curve is now a &lt;code>1&lt;/code>, rather than an &lt;code>NA&lt;/code>, which results in a more practical curve, and generates a more correct AUC value (
&lt;a href="https://github.com/tidymodels/yardstick/issues/93" target="_blank" rel="noopener">#93&lt;/a>).&lt;/li>
&lt;li>Each metric function now has a &lt;code>direction&lt;/code> attribute, which specifies the direction required for optimization, either minimization or maximization.&lt;/li>
&lt;li>Documentation for class probability metrics has been improved with more informative examples (
&lt;a href="https://github.com/tidymodels/yardstick/issues/100" target="_blank" rel="noopener">#100&lt;/a>).&lt;/li>
&lt;li>&lt;code>mn_log_loss()&lt;/code> now uses the min/max rule before computing the log of the estimated probabilities to avoid problematic undefined log values (
&lt;a href="https://github.com/tidymodels/yardstick/issues/103" target="_blank" rel="noopener">#103&lt;/a>).&lt;/li>
&lt;/ul>
&lt;h2 id="upcoming-changes-and-directions">Upcoming Changes and Directions
&lt;a href="#upcoming-changes-and-directions">
&lt;svg class="anchor-symbol" aria-hidden="true" height="26" width="26" viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg">
&lt;path d="M0 0h24v24H0z" fill="currentColor">&lt;/path>
&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z">&lt;/path>
&lt;/svg>
&lt;/a>
&lt;/h2>&lt;p>We are currently working on two general use packages: &lt;code>workflows&lt;/code> and &lt;code>tune&lt;/code>. The former bundles together recipes, model object, and other items so that there can be single &lt;code>fit()&lt;/code> and &lt;code>predict()&lt;/code> methods. &lt;code>tune&lt;/code> will have tools for&amp;hellip; um&amp;hellip; tuning models. We are hoping to make these public in the next month or so.&lt;/p>
&lt;p>There will be some changes to accommodate model tuning. The &lt;code>dials&lt;/code> package has been re-factored substantially (see the current GH master branch) and there were some small interfaces changes to &lt;code>recipes&lt;/code> too (mostly backwards compatible and also on GH). We are pretty close to end of &amp;ldquo;Phase I&amp;rdquo; of our tidymodels work.&lt;/p></description></item></channel></rss>