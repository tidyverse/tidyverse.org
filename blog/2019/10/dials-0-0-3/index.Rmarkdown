---
title: dials 0.0.3
date: 2019-10-01
slug: dials-0-0-3
author: Max Kuhn
categories: [package]
description: >
    A major update to the tuning parameter package. 
photo:
  url: https://unsplash.com/photos/QfN0l0MZCyc
  author: Adi Goldstein
---

A new version of `dials` is [on CRAN](https://cran.r-project.org/package=dials). The package has contains basic frameworks for managing tuning parameters for models. It is a significant update to the package. The major change is that parameter objects are now generated by functions (as opposed to the prototype objects in the previous version). For example, to make a `dials` object for the number of PCA components in a model: 

```{r pca, eval = FALSE}
# previously
pca_comps <- num_comp

# now
pca_comps <- num_comp()
```

For numeric parameters, the range of values can be set using the first argument:

```{r pca-range}
library(tidymodels)
num_comp()

num_comp(range = c(2, 10))
```

Sets of tuning parameters can be created and managed:

```{r p-set}
boosting_set <- param_set(list(trees(), splits = tree_depth(), min_n()))
boosting_set

# modifying the parameter range:
boosting_set %>% update(trees = trees(c(100, 1000)))
```

Note that the tree depth parameter has a user-defined identification variable. This can come in handy when there are multiple tuning parameters of the same type. For example, suppose two variables (`x1` and `x2`) were modeled using splines. The flexibility of each grouped be represented in a parameter set:

```{r splines}
splines <- param_set(list(x1_df = deg_free(), x2_df = deg_free()))
splines
```

This version of `dials` also contains two functions for creating [space-filling designs](https://scholar.google.com/scholar?hl=en&as_sdt=0%2C7&q=%22Space-Filling+Designs%22&btnG=), a technique from statistical experimental design theory. The two functions are `grid_max_entropy()` and `grid_latin_hypercube()`. 

```{r theme, echo = FALSE}
theme_set(theme_bw())
```

```{r svm-design}
svm_set <- param_set(list(rbf_sigma(), cost()))
set.seed(463)
me_grid <- grid_max_entropy(svm_set, size = 20) %>% mutate(type = "max entropy")
ls_grid <- grid_latin_hypercube(svm_set, size = 20) %>% mutate(type = "latin hypercube")
rn_grid <- grid_random(svm_set, size = 20) %>% mutate(type = "random")

bind_rows(me_grid, ls_grid, rn_grid) %>% 
  ggplot(aes(x = cost, y = rbf_sigma)) + 
  geom_point() + 
  facet_wrap( ~ type) +
  scale_x_log10() + 
  scale_y_log10()  + 
  coord_fixed(ratio = 1/4)
```

`dials` will be central to the upcoming framework for optimizing tuning parameters so there is much more to come regarding this package. 

 
